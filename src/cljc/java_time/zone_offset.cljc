(ns cljc.java-time.zone-offset (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZoneOffset]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZoneOffset])))
(def max (. java.time.ZoneOffset -MAX))
(def min (. java.time.ZoneOffset -MIN))
(def utc (. java.time.ZoneOffset -UTC))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneOffset getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this4656 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4657] (.range this4656 java-time-temporal-TemporalField4657)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int4658] (. java.time.ZoneOffset ofTotalSeconds int4658)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__4660] #? (:cljs (. java.time.ZoneOffset of G__4660) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__4660)) (clojure.core/let [G__4660 ^"java.lang.String" G__4660] (. java.time.ZoneOffset of G__4660)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__4660)) (clojure.core/let [G__4660 ^"java.lang.String" G__4660] (. java.time.ZoneOffset of G__4660)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.ZoneId [^java.lang.String java-lang-String4661 ^java.util.Map java-util-Map4662] (. java.time.ZoneOffset of java-lang-String4661 java-util-Map4662)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String4663 ^java.time.ZoneOffset java-time-ZoneOffset4664] (. java.time.ZoneOffset ofOffset java-lang-String4663 java-time-ZoneOffset4664)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this4665 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4666] (.query this4665 java-time-temporal-TemporalQuery4666)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this4667] (.toString this4667)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this4668 ^java.time.format.TextStyle java-time-format-TextStyle4669 ^java.util.Locale java-util-Locale4670] (jti/getter displayName this4668 java-time-format-TextStyle4669 java-util-Locale4670)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this4671 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4672] (.getLong this4671 java-time-temporal-TemporalField4672)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this4673] (jti/getter rules this4673)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int4674] (. java.time.ZoneOffset ofHours int4674)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this4675] (jti/getter id this4675)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this4676] (.normalized this4676)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneOffset systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__4678] #? (:cljs (. java.time.ZoneOffset from G__4678) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__4678)) (clojure.core/let [G__4678 ^"java.time.temporal.TemporalAccessor" G__4678] (. java.time.ZoneOffset from G__4678)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__4678)) (clojure.core/let [G__4678 ^"java.time.temporal.TemporalAccessor" G__4678] (. java.time.ZoneOffset from G__4678)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int4679 ^java.lang.Integer int4680 ^java.lang.Integer int4681] (. java.time.ZoneOffset ofHoursMinutesSeconds int4679 int4680 int4681)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this4682 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4683] (.isSupported this4682 java-time-temporal-TemporalField4683)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this4684] (.hashCode this4684)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this4685] (jti/getter totalSeconds this4685)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this4686 ^java.time.temporal.Temporal java-time-temporal-Temporal4687] (.adjustInto this4686 java-time-temporal-Temporal4687)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int4688 ^java.lang.Integer int4689] (. java.time.ZoneOffset ofHoursMinutes int4688 int4689)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Integer [this4690 G__4691] #? (:cljs (.compareTo ^java.time.ZoneOffset this4690 G__4691) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneOffset") G__4691)) (clojure.core/let [G__4691 ^"java.time.ZoneOffset" G__4691] (.compareTo ^java.time.ZoneOffset this4690 G__4691)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__4691)) (clojure.core/let [G__4691 ^"java.lang.Object" G__4691] (.compareTo ^java.time.ZoneOffset this4690 G__4691)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this4692 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4693] (.get this4692 java-time-temporal-TemporalField4693)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this4694 ^java.lang.Object java-lang-Object4695] (.equals this4694 java-lang-Object4695)))
