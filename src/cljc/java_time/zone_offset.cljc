(ns cljc.java-time.zone-offset (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZoneOffset]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZoneOffset])))
(def max #? (:clj java.time.ZoneOffset/MAX :cljs (. java.time.ZoneOffset -MAX)))
(def min #? (:clj java.time.ZoneOffset/MIN :cljs (. java.time.ZoneOffset -MIN)))
(def utc #? (:clj java.time.ZoneOffset/UTC :cljs (. java.time.ZoneOffset -UTC)))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneOffset getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this13437 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13438] (.range this13437 java-time-temporal-TemporalField13438)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int13439] (. java.time.ZoneOffset ofTotalSeconds int13439)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__13441] #? (:cljs (. java.time.ZoneOffset of G__13441) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__13441)) (clojure.core/let [G__13441 ^"java.lang.String" G__13441] (. java.time.ZoneOffset of G__13441)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__13441)) (clojure.core/let [G__13441 ^"java.lang.String" G__13441] (. java.time.ZoneOffset of G__13441)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.ZoneId [^java.lang.String java-lang-String13442 ^java.util.Map java-util-Map13443] (. java.time.ZoneOffset of java-lang-String13442 java-util-Map13443)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String13444 ^java.time.ZoneOffset java-time-ZoneOffset13445] (. java.time.ZoneOffset ofOffset java-lang-String13444 java-time-ZoneOffset13445)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this13446 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13447] (.query this13446 java-time-temporal-TemporalQuery13447)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this13448] (.toString this13448)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this13449 ^java.time.format.TextStyle java-time-format-TextStyle13450 ^java.util.Locale java-util-Locale13451] (jti/getter displayName this13449 java-time-format-TextStyle13450 java-util-Locale13451)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this13452 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13453] (.getLong this13452 java-time-temporal-TemporalField13453)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this13454] (jti/getter rules this13454)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int13455] (. java.time.ZoneOffset ofHours int13455)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this13456] (jti/getter id this13456)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this13457] (.normalized this13457)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneOffset systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__13459] #? (:cljs (. java.time.ZoneOffset from G__13459) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__13459)) (clojure.core/let [G__13459 ^"java.time.temporal.TemporalAccessor" G__13459] (. java.time.ZoneOffset from G__13459)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__13459)) (clojure.core/let [G__13459 ^"java.time.temporal.TemporalAccessor" G__13459] (. java.time.ZoneOffset from G__13459)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int13460 ^java.lang.Integer int13461 ^java.lang.Integer int13462] (. java.time.ZoneOffset ofHoursMinutesSeconds int13460 int13461 int13462)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this13463 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13464] (.isSupported this13463 java-time-temporal-TemporalField13464)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this13465] (.hashCode this13465)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this13466] (jti/getter totalSeconds this13466)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this13467 ^java.time.temporal.Temporal java-time-temporal-Temporal13468] (.adjustInto this13467 java-time-temporal-Temporal13468)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int13469 ^java.lang.Integer int13470] (. java.time.ZoneOffset ofHoursMinutes int13469 int13470)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Integer [this13471 G__13472] #? (:cljs (.compareTo ^java.time.ZoneOffset this13471 G__13472) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneOffset") G__13472)) (clojure.core/let [G__13472 ^"java.time.ZoneOffset" G__13472] (.compareTo ^java.time.ZoneOffset this13471 G__13472)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13472)) (clojure.core/let [G__13472 ^"java.lang.Object" G__13472] (.compareTo ^java.time.ZoneOffset this13471 G__13472)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this13473 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13474] (.get this13473 java-time-temporal-TemporalField13474)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this13475 ^java.lang.Object java-lang-Object13476] (.equals this13475 java-lang-Object13476)))
