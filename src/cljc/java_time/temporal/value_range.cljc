(ns cljc.java-time.temporal.value-range (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.temporal :refer [ValueRange]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.temporal ValueRange])))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this13608] (jti/getter minimum this13608)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long"] ["long" "long" "long" "long"]))} (^java.time.temporal.ValueRange [^long long13609 ^long long13610] (. java.time.temporal.ValueRange of long13609 long13610)) (^java.time.temporal.ValueRange [^long long13611 ^long long13612 ^long long13613] (. java.time.temporal.ValueRange of long13611 long13612 long13613)) (^java.time.temporal.ValueRange [^long long13614 ^long long13615 ^long long13616 ^long long13617] (. java.time.temporal.ValueRange of long13614 long13615 long13616 long13617)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13618 ^long long13619] (.isValidValue this13618 long13619)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this13620 ^long long13621 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13622] (.checkValidIntValue this13620 long13621 java-time-temporal-TemporalField13622)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^java.time.temporal.ValueRange this13623] (.toString this13623)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13624] (.isIntValue this13624)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this13625] (jti/getter smallestMaximum this13625)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13626 ^long long13627] (.isValidIntValue this13626 long13627)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this13628] (.hashCode this13628)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13629] (.isFixed this13629)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this13630] (jti/getter maximum this13630)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13631 ^java.lang.Object java-lang-Object13632] (.equals this13631 java-lang-Object13632)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this13633] (jti/getter largestMinimum this13633)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.ValueRange this13634 ^long long13635 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13636] (.checkValidValue this13634 long13635 java-time-temporal-TemporalField13636)))
