(ns cljc.java-time.temporal.chrono-unit (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ChronoUnit]))
(def millis java.time.temporal.ChronoUnit/MILLIS)
(def minutes java.time.temporal.ChronoUnit/MINUTES)
(def micros java.time.temporal.ChronoUnit/MICROS)
(def half-days java.time.temporal.ChronoUnit/HALF_DAYS)
(def millennia java.time.temporal.ChronoUnit/MILLENNIA)
(def years java.time.temporal.ChronoUnit/YEARS)
(def decades java.time.temporal.ChronoUnit/DECADES)
(def days java.time.temporal.ChronoUnit/DAYS)
(def centuries java.time.temporal.ChronoUnit/CENTURIES)
(def weeks java.time.temporal.ChronoUnit/WEEKS)
(def hours java.time.temporal.ChronoUnit/HOURS)
(def eras java.time.temporal.ChronoUnit/ERAS)
(def seconds java.time.temporal.ChronoUnit/SECONDS)
(def months java.time.temporal.ChronoUnit/MONTHS)
(def nanos java.time.temporal.ChronoUnit/NANOS)
(def forever java.time.temporal.ChronoUnit/FOREVER)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.temporal.ChronoUnit/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoUnit [^java.lang.String java-lang-String15193] (java.time.temporal.ChronoUnit/valueOf java-lang-String15193)) (^java.lang.Enum [^java.lang.Class java-lang-Class15194 ^java.lang.String java-lang-String15195] (java.time.temporal.ChronoUnit/valueOf java-lang-Class15194 java-lang-String15195)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this15196] (.ordinal this15196)))
(clojure.core/defn is-duration-estimated {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this15197] (.isDurationEstimated this15197)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this15198] (.toString this15198)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this15199] (.isDateBased this15199)))
(clojure.core/defn add-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoUnit this15200 ^java.time.temporal.Temporal java-time-temporal-Temporal15201 ^long long15202] (.addTo this15200 java-time-temporal-Temporal15201 long15202)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this15203] (.name this15203)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this15204 ^java.time.temporal.Temporal java-time-temporal-Temporal15205] (.isSupportedBy this15204 java-time-temporal-Temporal15205)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Class [^java.time.temporal.ChronoUnit this15206] (.getDeclaringClass this15206)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^long [^java.time.temporal.ChronoUnit this15207 ^java.time.temporal.Temporal java-time-temporal-Temporal15208 ^java.time.temporal.Temporal java-time-temporal-Temporal15209] (.between this15207 java-time-temporal-Temporal15208 java-time-temporal-Temporal15209)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this15210] (.hashCode this15210)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this15211 ^java.lang.Enum java-lang-Enum15212] (.compareTo this15211 java-lang-Enum15212)))
(clojure.core/defn get-duration {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.time.Duration [^java.time.temporal.ChronoUnit this15213] (.getDuration this15213)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this15214 ^java.lang.Object java-lang-Object15215] (.equals this15214 java-lang-Object15215)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this15216] (.isTimeBased this15216)))
