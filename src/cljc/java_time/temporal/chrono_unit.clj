(ns cljc.java-time.temporal.chrono-unit (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ChronoUnit]))
(def millis java.time.temporal.ChronoUnit/MILLIS)
(def minutes java.time.temporal.ChronoUnit/MINUTES)
(def micros java.time.temporal.ChronoUnit/MICROS)
(def half-days java.time.temporal.ChronoUnit/HALF_DAYS)
(def millennia java.time.temporal.ChronoUnit/MILLENNIA)
(def years java.time.temporal.ChronoUnit/YEARS)
(def decades java.time.temporal.ChronoUnit/DECADES)
(def days java.time.temporal.ChronoUnit/DAYS)
(def centuries java.time.temporal.ChronoUnit/CENTURIES)
(def weeks java.time.temporal.ChronoUnit/WEEKS)
(def hours java.time.temporal.ChronoUnit/HOURS)
(def eras java.time.temporal.ChronoUnit/ERAS)
(def seconds java.time.temporal.ChronoUnit/SECONDS)
(def months java.time.temporal.ChronoUnit/MONTHS)
(def nanos java.time.temporal.ChronoUnit/NANOS)
(def forever java.time.temporal.ChronoUnit/FOREVER)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.temporal.ChronoUnit/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoUnit [^java.lang.String java-lang-String8664] (java.time.temporal.ChronoUnit/valueOf java-lang-String8664)) (^java.lang.Enum [^java.lang.Class java-lang-Class8665 ^java.lang.String java-lang-String8666] (java.time.temporal.ChronoUnit/valueOf java-lang-Class8665 java-lang-String8666)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this8667] (.ordinal this8667)))
(clojure.core/defn is-duration-estimated {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this8668] (.isDurationEstimated this8668)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this8669] (.toString this8669)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this8670] (.isDateBased this8670)))
(clojure.core/defn add-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoUnit this8671 ^java.time.temporal.Temporal java-time-temporal-Temporal8672 ^long long8673] (.addTo this8671 java-time-temporal-Temporal8672 long8673)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this8674] (.name this8674)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this8675 ^java.time.temporal.Temporal java-time-temporal-Temporal8676] (.isSupportedBy this8675 java-time-temporal-Temporal8676)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Class [^java.time.temporal.ChronoUnit this8677] (.getDeclaringClass this8677)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^long [^java.time.temporal.ChronoUnit this8678 ^java.time.temporal.Temporal java-time-temporal-Temporal8679 ^java.time.temporal.Temporal java-time-temporal-Temporal8680] (.between this8678 java-time-temporal-Temporal8679 java-time-temporal-Temporal8680)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this8681] (.hashCode this8681)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"] ["java.time.temporal.ChronoUnit" "java.lang.Enum"]))} (^java.lang.Integer [this8682 G__8683] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__8683)) (clojure.core/let [G__8683 ^"java.lang.Object" G__8683] (.compareTo ^java.time.temporal.ChronoUnit this8682 G__8683)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__8683)) (clojure.core/let [G__8683 ^"java.lang.Enum" G__8683] (.compareTo ^java.time.temporal.ChronoUnit this8682 G__8683)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-duration {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.time.Duration [^java.time.temporal.ChronoUnit this8684] (.getDuration this8684)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this8685 ^java.lang.Object java-lang-Object8686] (.equals this8685 java-lang-Object8686)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this8687] (.isTimeBased this8687)))
