(ns cljc.java-time.temporal.chrono-unit (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ChronoUnit]))
(def millis java.time.temporal.ChronoUnit/MILLIS)
(def minutes java.time.temporal.ChronoUnit/MINUTES)
(def micros java.time.temporal.ChronoUnit/MICROS)
(def half-days java.time.temporal.ChronoUnit/HALF_DAYS)
(def millennia java.time.temporal.ChronoUnit/MILLENNIA)
(def years java.time.temporal.ChronoUnit/YEARS)
(def decades java.time.temporal.ChronoUnit/DECADES)
(def days java.time.temporal.ChronoUnit/DAYS)
(def centuries java.time.temporal.ChronoUnit/CENTURIES)
(def weeks java.time.temporal.ChronoUnit/WEEKS)
(def hours java.time.temporal.ChronoUnit/HOURS)
(def eras java.time.temporal.ChronoUnit/ERAS)
(def seconds java.time.temporal.ChronoUnit/SECONDS)
(def months java.time.temporal.ChronoUnit/MONTHS)
(def nanos java.time.temporal.ChronoUnit/NANOS)
(def forever java.time.temporal.ChronoUnit/FOREVER)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.temporal.ChronoUnit/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoUnit [^java.lang.String java-lang-String5675] (java.time.temporal.ChronoUnit/valueOf java-lang-String5675)) (^java.lang.Enum [^java.lang.Class java-lang-Class5676 ^java.lang.String java-lang-String5677] (java.time.temporal.ChronoUnit/valueOf java-lang-Class5676 java-lang-String5677)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this5678] (.ordinal this5678)))
(clojure.core/defn is-duration-estimated {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this5679] (.isDurationEstimated this5679)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this5680] (.toString this5680)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this5681] (.isDateBased this5681)))
(clojure.core/defn add-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoUnit this5682 ^java.time.temporal.Temporal java-time-temporal-Temporal5683 ^long long5684] (.addTo this5682 java-time-temporal-Temporal5683 long5684)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this5685] (.name this5685)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this5686 ^java.time.temporal.Temporal java-time-temporal-Temporal5687] (.isSupportedBy this5686 java-time-temporal-Temporal5687)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Class [^java.time.temporal.ChronoUnit this5688] (.getDeclaringClass this5688)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^long [^java.time.temporal.ChronoUnit this5689 ^java.time.temporal.Temporal java-time-temporal-Temporal5690 ^java.time.temporal.Temporal java-time-temporal-Temporal5691] (.between this5689 java-time-temporal-Temporal5690 java-time-temporal-Temporal5691)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this5692] (.hashCode this5692)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this5693 ^java.lang.Enum java-lang-Enum5694] (.compareTo this5693 java-lang-Enum5694)))
(clojure.core/defn get-duration {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.time.Duration [^java.time.temporal.ChronoUnit this5695] (.getDuration this5695)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this5696 ^java.lang.Object java-lang-Object5697] (.equals this5696 java-lang-Object5697)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this5698] (.isTimeBased this5698)))
