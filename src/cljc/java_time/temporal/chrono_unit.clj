(ns cljc.java-time.temporal.chrono-unit (:import [java.time.temporal ChronoUnit]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def millis java.time.temporal.ChronoUnit/MILLIS)
(def minutes java.time.temporal.ChronoUnit/MINUTES)
(def micros java.time.temporal.ChronoUnit/MICROS)
(def half-days java.time.temporal.ChronoUnit/HALF_DAYS)
(def millennia java.time.temporal.ChronoUnit/MILLENNIA)
(def years java.time.temporal.ChronoUnit/YEARS)
(def decades java.time.temporal.ChronoUnit/DECADES)
(def days java.time.temporal.ChronoUnit/DAYS)
(def centuries java.time.temporal.ChronoUnit/CENTURIES)
(def weeks java.time.temporal.ChronoUnit/WEEKS)
(def hours java.time.temporal.ChronoUnit/HOURS)
(def eras java.time.temporal.ChronoUnit/ERAS)
(def seconds java.time.temporal.ChronoUnit/SECONDS)
(def months java.time.temporal.ChronoUnit/MONTHS)
(def nanos java.time.temporal.ChronoUnit/NANOS)
(def forever java.time.temporal.ChronoUnit/FOREVER)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.temporal.ChronoUnit values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoUnit [^java.lang.String java-lang-String50889] (. java.time.temporal.ChronoUnit valueOf java-lang-String50889)) (^java.lang.Enum [^java.lang.Class java-lang-Class50890 ^java.lang.String java-lang-String50891] (. java.time.temporal.ChronoUnit valueOf java-lang-Class50890 java-lang-String50891)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this50892] (.ordinal this50892)))
(clojure.core/defn is-duration-estimated {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this50893] (.isDurationEstimated this50893)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this50894] (.toString this50894)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this50895] (.isDateBased this50895)))
(clojure.core/defn add-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoUnit this50896 ^java.time.temporal.Temporal java-time-temporal-Temporal50897 ^long long50898] (.addTo this50896 java-time-temporal-Temporal50897 long50898)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this50899] (.name this50899)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this50900 ^java.time.temporal.Temporal java-time-temporal-Temporal50901] (.isSupportedBy this50900 java-time-temporal-Temporal50901)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Class [^java.time.temporal.ChronoUnit this50902] (.getDeclaringClass this50902)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^long [^java.time.temporal.ChronoUnit this50903 ^java.time.temporal.Temporal java-time-temporal-Temporal50904 ^java.time.temporal.Temporal java-time-temporal-Temporal50905] (.between this50903 java-time-temporal-Temporal50904 java-time-temporal-Temporal50905)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this50906] (.hashCode this50906)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"] ["java.time.temporal.ChronoUnit" "java.lang.Enum"]))} (^java.lang.Integer [this50907 G__50908] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__50908)) (clojure.core/let [G__50908 ^"java.lang.Object" G__50908] (.compareTo ^java.time.temporal.ChronoUnit this50907 G__50908)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__50908)) (clojure.core/let [G__50908 ^"java.lang.Enum" G__50908] (.compareTo ^java.time.temporal.ChronoUnit this50907 G__50908)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-duration {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.time.Duration [^java.time.temporal.ChronoUnit this50909] (.getDuration this50909)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this50910 ^java.lang.Object java-lang-Object50911] (.equals this50910 java-lang-Object50911)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this50912] (.isTimeBased this50912)))
