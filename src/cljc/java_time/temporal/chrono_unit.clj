(ns cljc.java-time.temporal.chrono-unit (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ChronoUnit]))
(def millis java.time.temporal.ChronoUnit/MILLIS)
(def minutes java.time.temporal.ChronoUnit/MINUTES)
(def micros java.time.temporal.ChronoUnit/MICROS)
(def half-days java.time.temporal.ChronoUnit/HALF_DAYS)
(def millennia java.time.temporal.ChronoUnit/MILLENNIA)
(def years java.time.temporal.ChronoUnit/YEARS)
(def decades java.time.temporal.ChronoUnit/DECADES)
(def days java.time.temporal.ChronoUnit/DAYS)
(def centuries java.time.temporal.ChronoUnit/CENTURIES)
(def weeks java.time.temporal.ChronoUnit/WEEKS)
(def hours java.time.temporal.ChronoUnit/HOURS)
(def eras java.time.temporal.ChronoUnit/ERAS)
(def seconds java.time.temporal.ChronoUnit/SECONDS)
(def months java.time.temporal.ChronoUnit/MONTHS)
(def nanos java.time.temporal.ChronoUnit/NANOS)
(def forever java.time.temporal.ChronoUnit/FOREVER)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.temporal.ChronoUnit values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoUnit [^java.lang.String java-lang-String12897] (. java.time.temporal.ChronoUnit valueOf java-lang-String12897)) (^java.lang.Enum [^java.lang.Class java-lang-Class12898 ^java.lang.String java-lang-String12899] (. java.time.temporal.ChronoUnit valueOf java-lang-Class12898 java-lang-String12899)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this12900] (.ordinal this12900)))
(clojure.core/defn is-duration-estimated {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this12901] (.isDurationEstimated this12901)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this12902] (.toString this12902)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this12903] (.isDateBased this12903)))
(clojure.core/defn add-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoUnit this12904 ^java.time.temporal.Temporal java-time-temporal-Temporal12905 ^long long12906] (.addTo this12904 java-time-temporal-Temporal12905 long12906)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this12907] (.name this12907)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this12908 ^java.time.temporal.Temporal java-time-temporal-Temporal12909] (.isSupportedBy this12908 java-time-temporal-Temporal12909)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Class [^java.time.temporal.ChronoUnit this12910] (.getDeclaringClass this12910)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^long [^java.time.temporal.ChronoUnit this12911 ^java.time.temporal.Temporal java-time-temporal-Temporal12912 ^java.time.temporal.Temporal java-time-temporal-Temporal12913] (.between this12911 java-time-temporal-Temporal12912 java-time-temporal-Temporal12913)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this12914] (.hashCode this12914)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"] ["java.time.temporal.ChronoUnit" "java.lang.Enum"]))} (^java.lang.Integer [this12915 G__12916] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__12916)) (clojure.core/let [G__12916 ^"java.lang.Object" G__12916] (.compareTo ^java.time.temporal.ChronoUnit this12915 G__12916)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__12916)) (clojure.core/let [G__12916 ^"java.lang.Enum" G__12916] (.compareTo ^java.time.temporal.ChronoUnit this12915 G__12916)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-duration {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.time.Duration [^java.time.temporal.ChronoUnit this12917] (.getDuration this12917)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this12918 ^java.lang.Object java-lang-Object12919] (.equals this12918 java-lang-Object12919)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this12920] (.isTimeBased this12920)))
