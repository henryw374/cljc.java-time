(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ValueRange]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this61554] (.getMinimum this61554)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long" "long"] ["long" "long" "long"]))} (^java.time.temporal.ValueRange [^long long61555 ^long long61556] (java.time.temporal.ValueRange/of long61555 long61556)) (^java.time.temporal.ValueRange [^long long61557 ^long long61558 ^long long61559 ^long long61560] (java.time.temporal.ValueRange/of long61557 long61558 long61559 long61560)) (^java.time.temporal.ValueRange [^long long61561 ^long long61562 ^long long61563] (java.time.temporal.ValueRange/of long61561 long61562 long61563)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this61564 ^long long61565] (.isValidValue this61564 long61565)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this61566 ^long long61567 ^java.time.temporal.TemporalField java-time-temporal-TemporalField61568] (.checkValidIntValue this61566 long61567 java-time-temporal-TemporalField61568)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^java.time.temporal.ValueRange this61569] (.toString this61569)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this61570] (.isIntValue this61570)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this61571] (.getSmallestMaximum this61571)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this61572 ^long long61573] (.isValidIntValue this61572 long61573)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this61574] (.hashCode this61574)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this61575] (.isFixed this61575)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this61576] (.getMaximum this61576)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this61577 ^java.lang.Object java-lang-Object61578] (.equals this61577 java-lang-Object61578)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this61579] (.getLargestMinimum this61579)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.ValueRange this61580 ^long long61581 ^java.time.temporal.TemporalField java-time-temporal-TemporalField61582] (.checkValidValue this61580 long61581 java-time-temporal-TemporalField61582)))
