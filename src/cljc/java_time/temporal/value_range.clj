(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ValueRange]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this8892] (.getMinimum this8892)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long"] ["long" "long" "long" "long"]))} (^java.time.temporal.ValueRange [^long long8893 ^long long8894] (java.time.temporal.ValueRange/of long8893 long8894)) (^java.time.temporal.ValueRange [^long long8895 ^long long8896 ^long long8897] (java.time.temporal.ValueRange/of long8895 long8896 long8897)) (^java.time.temporal.ValueRange [^long long8898 ^long long8899 ^long long8900 ^long long8901] (java.time.temporal.ValueRange/of long8898 long8899 long8900 long8901)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this8902 ^long long8903] (.isValidValue this8902 long8903)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this8904 ^long long8905 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8906] (.checkValidIntValue this8904 long8905 java-time-temporal-TemporalField8906)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^java.time.temporal.ValueRange this8907] (.toString this8907)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this8908] (.isIntValue this8908)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this8909] (.getSmallestMaximum this8909)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this8910 ^long long8911] (.isValidIntValue this8910 long8911)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this8912] (.hashCode this8912)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this8913] (.isFixed this8913)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this8914] (.getMaximum this8914)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this8915 ^java.lang.Object java-lang-Object8916] (.equals this8915 java-lang-Object8916)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this8917] (.getLargestMinimum this8917)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.ValueRange this8918 ^long long8919 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8920] (.checkValidValue this8918 long8919 java-time-temporal-TemporalField8920)))
