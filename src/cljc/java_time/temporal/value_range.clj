(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ValueRange]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this13071] (.getMinimum this13071)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long" "long"] ["long" "long" "long"]))} (^java.time.temporal.ValueRange [^long long13072 ^long long13073] (. java.time.temporal.ValueRange of long13072 long13073)) (^java.time.temporal.ValueRange [^long long13074 ^long long13075 ^long long13076 ^long long13077] (. java.time.temporal.ValueRange of long13074 long13075 long13076 long13077)) (^java.time.temporal.ValueRange [^long long13078 ^long long13079 ^long long13080] (. java.time.temporal.ValueRange of long13078 long13079 long13080)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13081 ^long long13082] (.isValidValue this13081 long13082)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this13083 ^long long13084 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13085] (.checkValidIntValue this13083 long13084 java-time-temporal-TemporalField13085)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^java.time.temporal.ValueRange this13086] (.toString this13086)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13087] (.isIntValue this13087)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this13088] (.getSmallestMaximum this13088)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13089 ^long long13090] (.isValidIntValue this13089 long13090)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this13091] (.hashCode this13091)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13092] (.isFixed this13092)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this13093] (.getMaximum this13093)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13094 ^java.lang.Object java-lang-Object13095] (.equals this13094 java-lang-Object13095)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this13096] (.getLargestMinimum this13096)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.ValueRange this13097 ^long long13098 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13099] (.checkValidValue this13097 long13098 java-time-temporal-TemporalField13099)))
