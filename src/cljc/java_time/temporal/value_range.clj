(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time.temporal ValueRange]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this7524] (.getMinimum this7524)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long" "long"] ["long" "long" "long"]))} (^java.time.temporal.ValueRange [^long long7525 ^long long7526] (. java.time.temporal.ValueRange of long7525 long7526)) (^java.time.temporal.ValueRange [^long long7527 ^long long7528 ^long long7529 ^long long7530] (. java.time.temporal.ValueRange of long7527 long7528 long7529 long7530)) (^java.time.temporal.ValueRange [^long long7531 ^long long7532 ^long long7533] (. java.time.temporal.ValueRange of long7531 long7532 long7533)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this7534 ^long long7535] (.isValidValue this7534 long7535)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this7536 ^long long7537 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7538] (.checkValidIntValue this7536 long7537 java-time-temporal-TemporalField7538)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^java.time.temporal.ValueRange this7539] (.toString this7539)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this7540] (.isIntValue this7540)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this7541] (.getSmallestMaximum this7541)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this7542 ^long long7543] (.isValidIntValue this7542 long7543)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this7544] (.hashCode this7544)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this7545] (.isFixed this7545)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this7546] (.getMaximum this7546)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this7547 ^java.lang.Object java-lang-Object7548] (.equals this7547 java-lang-Object7548)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this7549] (.getLargestMinimum this7549)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.ValueRange this7550 ^long long7551 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7552] (.checkValidValue this7550 long7551 java-time-temporal-TemporalField7552)))
