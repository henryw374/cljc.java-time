(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ValueRange]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this8838] (.getMinimum this8838)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long" "long"] ["long" "long" "long"]))} (^java.time.temporal.ValueRange [^long long8839 ^long long8840] (java.time.temporal.ValueRange/of long8839 long8840)) (^java.time.temporal.ValueRange [^long long8841 ^long long8842 ^long long8843 ^long long8844] (java.time.temporal.ValueRange/of long8841 long8842 long8843 long8844)) (^java.time.temporal.ValueRange [^long long8845 ^long long8846 ^long long8847] (java.time.temporal.ValueRange/of long8845 long8846 long8847)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this8848 ^long long8849] (.isValidValue this8848 long8849)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this8850 ^long long8851 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8852] (.checkValidIntValue this8850 long8851 java-time-temporal-TemporalField8852)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^java.time.temporal.ValueRange this8853] (.toString this8853)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this8854] (.isIntValue this8854)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this8855] (.getSmallestMaximum this8855)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this8856 ^long long8857] (.isValidIntValue this8856 long8857)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this8858] (.hashCode this8858)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this8859] (.isFixed this8859)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this8860] (.getMaximum this8860)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this8861 ^java.lang.Object java-lang-Object8862] (.equals this8861 java-lang-Object8862)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this8863] (.getLargestMinimum this8863)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.ValueRange this8864 ^long long8865 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8866] (.checkValidValue this8864 long8865 java-time-temporal-TemporalField8866)))
