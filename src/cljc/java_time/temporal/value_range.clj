(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ValueRange]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this15395] (.getMinimum this15395)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long"] ["long" "long" "long" "long"]))} (^java.time.temporal.ValueRange [^long long15396 ^long long15397] (java.time.temporal.ValueRange/of long15396 long15397)) (^java.time.temporal.ValueRange [^long long15398 ^long long15399 ^long long15400] (java.time.temporal.ValueRange/of long15398 long15399 long15400)) (^java.time.temporal.ValueRange [^long long15401 ^long long15402 ^long long15403 ^long long15404] (java.time.temporal.ValueRange/of long15401 long15402 long15403 long15404)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this15405 ^long long15406] (.isValidValue this15405 long15406)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this15407 ^long long15408 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15409] (.checkValidIntValue this15407 long15408 java-time-temporal-TemporalField15409)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^java.time.temporal.ValueRange this15410] (.toString this15410)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this15411] (.isIntValue this15411)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this15412] (.getSmallestMaximum this15412)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this15413 ^long long15414] (.isValidIntValue this15413 long15414)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this15415] (.hashCode this15415)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this15416] (.isFixed this15416)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this15417] (.getMaximum this15417)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this15418 ^java.lang.Object java-lang-Object15419] (.equals this15418 java-lang-Object15419)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this15420] (.getLargestMinimum this15420)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.ValueRange this15421 ^long long15422 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15423] (.checkValidValue this15421 long15422 java-time-temporal-TemporalField15423)))
