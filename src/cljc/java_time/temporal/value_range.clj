(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ValueRange]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this5849] (.getMinimum this5849)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long" "long"] ["long" "long" "long"]))} (^java.time.temporal.ValueRange [^long long5850 ^long long5851] (java.time.temporal.ValueRange/of long5850 long5851)) (^java.time.temporal.ValueRange [^long long5852 ^long long5853 ^long long5854 ^long long5855] (java.time.temporal.ValueRange/of long5852 long5853 long5854 long5855)) (^java.time.temporal.ValueRange [^long long5856 ^long long5857 ^long long5858] (java.time.temporal.ValueRange/of long5856 long5857 long5858)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this5859 ^long long5860] (.isValidValue this5859 long5860)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this5861 ^long long5862 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5863] (.checkValidIntValue this5861 long5862 java-time-temporal-TemporalField5863)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^java.time.temporal.ValueRange this5864] (.toString this5864)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this5865] (.isIntValue this5865)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this5866] (.getSmallestMaximum this5866)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this5867 ^long long5868] (.isValidIntValue this5867 long5868)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this5869] (.hashCode this5869)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this5870] (.isFixed this5870)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this5871] (.getMaximum this5871)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this5872 ^java.lang.Object java-lang-Object5873] (.equals this5872 java-lang-Object5873)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this5874] (.getLargestMinimum this5874)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.ValueRange this5875 ^long long5876 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5877] (.checkValidValue this5875 long5876 java-time-temporal-TemporalField5877)))
