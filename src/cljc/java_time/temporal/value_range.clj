(ns cljc.java-time.temporal.value-range (:import [java.time.temporal ValueRange]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this51063] (.getMinimum this51063)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long"] ["long" "long" "long" "long"]))} (^java.time.temporal.ValueRange [^long long51064 ^long long51065] (. java.time.temporal.ValueRange of long51064 long51065)) (^java.time.temporal.ValueRange [^long long51066 ^long long51067 ^long long51068] (. java.time.temporal.ValueRange of long51066 long51067 long51068)) (^java.time.temporal.ValueRange [^long long51069 ^long long51070 ^long long51071 ^long long51072] (. java.time.temporal.ValueRange of long51069 long51070 long51071 long51072)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this51073 ^long long51074] (.isValidValue this51073 long51074)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this51075 ^long long51076 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51077] (.checkValidIntValue this51075 long51076 java-time-temporal-TemporalField51077)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^java.time.temporal.ValueRange this51078] (.toString this51078)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this51079] (.isIntValue this51079)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this51080] (.getSmallestMaximum this51080)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this51081 ^long long51082] (.isValidIntValue this51081 long51082)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this51083] (.hashCode this51083)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this51084] (.isFixed this51084)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this51085] (.getMaximum this51085)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this51086 ^java.lang.Object java-lang-Object51087] (.equals this51086 java-lang-Object51087)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this51088] (.getLargestMinimum this51088)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.ValueRange this51089 ^long long51090 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51091] (.checkValidValue this51089 long51090 java-time-temporal-TemporalField51091)))
