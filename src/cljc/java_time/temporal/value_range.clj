(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ValueRange]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this5850] (.getMinimum this5850)))
(clojure.core/defn of {:arglists (quote (["long" "long" "long"] ["long" "long" "long" "long"] ["long" "long"]))} (^java.time.temporal.ValueRange [^long long5851 ^long long5852 ^long long5853] (java.time.temporal.ValueRange/of long5851 long5852 long5853)) (^java.time.temporal.ValueRange [^long long5854 ^long long5855 ^long long5856 ^long long5857] (java.time.temporal.ValueRange/of long5854 long5855 long5856 long5857)) (^java.time.temporal.ValueRange [^long long5858 ^long long5859] (java.time.temporal.ValueRange/of long5858 long5859)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this5860 ^long long5861] (.isValidValue this5860 long5861)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this5862 ^long long5863 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5864] (.checkValidIntValue this5862 long5863 java-time-temporal-TemporalField5864)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^java.time.temporal.ValueRange this5865] (.toString this5865)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this5866] (.isIntValue this5866)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this5867] (.getSmallestMaximum this5867)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this5868 ^long long5869] (.isValidIntValue this5868 long5869)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this5870] (.hashCode this5870)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this5871] (.isFixed this5871)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this5872] (.getMaximum this5872)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this5873 ^java.lang.Object java-lang-Object5874] (.equals this5873 java-lang-Object5874)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this5875] (.getLargestMinimum this5875)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.ValueRange this5876 ^long long5877 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5878] (.checkValidValue this5876 long5877 java-time-temporal-TemporalField5878)))
