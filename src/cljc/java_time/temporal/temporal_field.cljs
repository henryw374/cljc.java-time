(ns cljc.java-time.temporal.temporal-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [TemporalField]]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this13150] (.rangeUnit this13150)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this13151] (.range this13151)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.TemporalField this13152 ^java.util.Map java-util-Map13153 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13154 ^java.time.format.ResolverStyle java-time-format-ResolverStyle13155] (.resolve this13152 java-util-Map13153 java-time-temporal-TemporalAccessor13154 java-time-format-ResolverStyle13155)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this13156] (.baseUnit this13156)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^java.time.temporal.TemporalField this13157] (.toString this13157)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this13158] (.isDateBased this13158)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.TemporalField this13159 ^java.util.Locale java-util-Locale13160] (.displayName this13159 java-util-Locale13160)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this13161 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13162] (.isSupportedBy this13161 java-time-temporal-TemporalAccessor13162)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this13163 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13164] (.rangeRefinedBy this13163 java-time-temporal-TemporalAccessor13164)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.TemporalField this13165 ^java.time.temporal.Temporal java-time-temporal-Temporal13166 ^long long13167] (.adjustInto this13165 java-time-temporal-Temporal13166 long13167)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.TemporalField this13168 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13169] (.from this13168 java-time-temporal-TemporalAccessor13169)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this13170] (.isTimeBased this13170)))
