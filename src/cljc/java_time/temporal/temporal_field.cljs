(ns cljc.java-time.temporal.temporal-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [TemporalField]]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.TemporalField this5929] (.rangeUnit this5929)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.TemporalField this5930] (.range this5930)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.TemporalField this5931 ^java.util.Map java-util-Map5932 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5933 ^js/JSJoda.ResolverStyle java-time-format-ResolverStyle5934] (.resolve this5931 java-util-Map5932 java-time-temporal-TemporalAccessor5933 java-time-format-ResolverStyle5934)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.TemporalField this5935] (.baseUnit this5935)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^js/JSJoda.TemporalField this5936] (.toString this5936)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.TemporalField this5937] (.isDateBased this5937)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.TemporalField this5938 ^java.util.Locale java-util-Locale5939] (.displayName this5938 java-util-Locale5939)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^boolean [^js/JSJoda.TemporalField this5940 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5941] (.isSupportedBy this5940 java-time-temporal-TemporalAccessor5941)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ValueRange [^js/JSJoda.TemporalField this5942 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5943] (.rangeRefinedBy this5942 java-time-temporal-TemporalAccessor5943)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^js/JSJoda.Temporal [^js/JSJoda.TemporalField this5944 ^js/JSJoda.Temporal java-time-temporal-Temporal5945 ^long long5946] (.adjustInto this5944 java-time-temporal-Temporal5945 long5946)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^js/JSJoda.TemporalField this5947 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5948] (.from this5947 java-time-temporal-TemporalAccessor5948)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.TemporalField this5949] (.isTimeBased this5949)))
