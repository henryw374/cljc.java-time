(ns cljc.java-time.temporal.temporal-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [TemporalField]]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.TemporalField this8917] (.rangeUnit this8917)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.TemporalField this8918] (.range this8918)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.TemporalField this8919 ^java.util.Map java-util-Map8920 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8921 ^js/JSJoda.ResolverStyle java-time-format-ResolverStyle8922] (.resolve this8919 java-util-Map8920 java-time-temporal-TemporalAccessor8921 java-time-format-ResolverStyle8922)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.TemporalField this8923] (.baseUnit this8923)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^js/JSJoda.TemporalField this8924] (.toString this8924)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.TemporalField this8925] (.isDateBased this8925)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.TemporalField this8926 ^java.util.Locale java-util-Locale8927] (.displayName this8926 java-util-Locale8927)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^boolean [^js/JSJoda.TemporalField this8928 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8929] (.isSupportedBy this8928 java-time-temporal-TemporalAccessor8929)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ValueRange [^js/JSJoda.TemporalField this8930 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8931] (.rangeRefinedBy this8930 java-time-temporal-TemporalAccessor8931)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^js/JSJoda.Temporal [^js/JSJoda.TemporalField this8932 ^js/JSJoda.Temporal java-time-temporal-Temporal8933 ^long long8934] (.adjustInto this8932 java-time-temporal-Temporal8933 long8934)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^js/JSJoda.TemporalField this8935 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8936] (.from this8935 java-time-temporal-TemporalAccessor8936)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.TemporalField this8937] (.isTimeBased this8937)))
