(ns cljc.java-time.temporal.temporal-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [TemporalField]]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.TemporalField this5928] (.rangeUnit this5928)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.TemporalField this5929] (.range this5929)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.TemporalField this5930 ^java.util.Map java-util-Map5931 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5932 ^js/JSJoda.ResolverStyle java-time-format-ResolverStyle5933] (.resolve this5930 java-util-Map5931 java-time-temporal-TemporalAccessor5932 java-time-format-ResolverStyle5933)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.TemporalField this5934] (.baseUnit this5934)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^js/JSJoda.TemporalField this5935] (.toString this5935)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.TemporalField this5936] (.isDateBased this5936)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.TemporalField this5937 ^java.util.Locale java-util-Locale5938] (.displayName this5937 java-util-Locale5938)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^boolean [^js/JSJoda.TemporalField this5939 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5940] (.isSupportedBy this5939 java-time-temporal-TemporalAccessor5940)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ValueRange [^js/JSJoda.TemporalField this5941 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5942] (.rangeRefinedBy this5941 java-time-temporal-TemporalAccessor5942)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^js/JSJoda.Temporal [^js/JSJoda.TemporalField this5943 ^js/JSJoda.Temporal java-time-temporal-Temporal5944 ^long long5945] (.adjustInto this5943 java-time-temporal-Temporal5944 long5945)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^js/JSJoda.TemporalField this5946 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5947] (.from this5946 java-time-temporal-TemporalAccessor5947)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.TemporalField this5948] (.isTimeBased this5948)))
