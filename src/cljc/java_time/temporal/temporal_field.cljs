(ns cljc.java-time.temporal.temporal-field (:require [java.time.temporal :refer [TemporalField]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this51142] (.rangeUnit this51142)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this51143] (.range this51143)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.TemporalField this51144 ^java.util.Map java-util-Map51145 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor51146 ^java.time.format.ResolverStyle java-time-format-ResolverStyle51147] (.resolve this51144 java-util-Map51145 java-time-temporal-TemporalAccessor51146 java-time-format-ResolverStyle51147)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this51148] (.baseUnit this51148)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^java.time.temporal.TemporalField this51149] (.toString this51149)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this51150] (.isDateBased this51150)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.TemporalField this51151 ^java.util.Locale java-util-Locale51152] (.displayName this51151 java-util-Locale51152)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this51153 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor51154] (.isSupportedBy this51153 java-time-temporal-TemporalAccessor51154)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this51155 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor51156] (.rangeRefinedBy this51155 java-time-temporal-TemporalAccessor51156)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.TemporalField this51157 ^java.time.temporal.Temporal java-time-temporal-Temporal51158 ^long long51159] (.adjustInto this51157 java-time-temporal-Temporal51158 long51159)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.TemporalField this51160 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor51161] (.from this51160 java-time-temporal-TemporalAccessor51161)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this51162] (.isTimeBased this51162)))
