(ns cljc.java-time.temporal.temporal-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [TemporalField]]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.TemporalField this61633] (.rangeUnit this61633)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.TemporalField this61634] (.range this61634)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.TemporalField this61635 ^java.util.Map java-util-Map61636 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor61637 ^js/JSJoda.ResolverStyle java-time-format-ResolverStyle61638] (.resolve this61635 java-util-Map61636 java-time-temporal-TemporalAccessor61637 java-time-format-ResolverStyle61638)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.TemporalField this61639] (.baseUnit this61639)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^js/JSJoda.TemporalField this61640] (.toString this61640)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.TemporalField this61641] (.isDateBased this61641)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.TemporalField this61642 ^java.util.Locale java-util-Locale61643] (.displayName this61642 java-util-Locale61643)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^boolean [^js/JSJoda.TemporalField this61644 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor61645] (.isSupportedBy this61644 java-time-temporal-TemporalAccessor61645)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ValueRange [^js/JSJoda.TemporalField this61646 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor61647] (.rangeRefinedBy this61646 java-time-temporal-TemporalAccessor61647)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^js/JSJoda.Temporal [^js/JSJoda.TemporalField this61648 ^js/JSJoda.Temporal java-time-temporal-Temporal61649 ^long long61650] (.adjustInto this61648 java-time-temporal-Temporal61649 long61650)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^js/JSJoda.TemporalField this61651 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor61652] (.from this61651 java-time-temporal-TemporalAccessor61652)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.TemporalField this61653] (.isTimeBased this61653)))
