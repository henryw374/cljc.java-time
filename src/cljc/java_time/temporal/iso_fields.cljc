(ns cljc.java-time.temporal.iso-fields (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.temporal :refer [IsoFields]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.temporal IsoFields])))
(def week-based-year #? (:clj java.time.temporal.IsoFields/WEEK_BASED_YEAR :cljs (. java.time.temporal.IsoFields -WEEK_BASED_YEAR)))
(def week-of-week-based-year #? (:clj java.time.temporal.IsoFields/WEEK_OF_WEEK_BASED_YEAR :cljs (. java.time.temporal.IsoFields -WEEK_OF_WEEK_BASED_YEAR)))
(def quarter-years #? (:clj java.time.temporal.IsoFields/QUARTER_YEARS :cljs (. java.time.temporal.IsoFields -QUARTER_YEARS)))
(def week-based-years #? (:clj java.time.temporal.IsoFields/WEEK_BASED_YEARS :cljs (. java.time.temporal.IsoFields -WEEK_BASED_YEARS)))
(def day-of-quarter #? (:clj java.time.temporal.IsoFields/DAY_OF_QUARTER :cljs (. java.time.temporal.IsoFields -DAY_OF_QUARTER)))
(def quarter-of-year #? (:clj java.time.temporal.IsoFields/QUARTER_OF_YEAR :cljs (. java.time.temporal.IsoFields -QUARTER_OF_YEAR)))
