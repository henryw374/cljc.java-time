(ns cljc.java-time.temporal.temporal-field (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time.temporal TemporalField]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this7553] (.getRangeUnit this7553)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this7554] (.range this7554)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.TemporalField this7555 ^java.util.Map java-util-Map7556 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7557 ^java.time.format.ResolverStyle java-time-format-ResolverStyle7558] (.resolve this7555 java-util-Map7556 java-time-temporal-TemporalAccessor7557 java-time-format-ResolverStyle7558)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this7559] (.getBaseUnit this7559)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^java.time.temporal.TemporalField this7560] (.toString this7560)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this7561] (.isDateBased this7561)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.TemporalField this7562 ^java.util.Locale java-util-Locale7563] (.getDisplayName this7562 java-util-Locale7563)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this7564 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7565] (.isSupportedBy this7564 java-time-temporal-TemporalAccessor7565)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this7566 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7567] (.rangeRefinedBy this7566 java-time-temporal-TemporalAccessor7567)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.TemporalField this7568 ^java.time.temporal.Temporal java-time-temporal-Temporal7569 ^long long7570] (.adjustInto this7568 java-time-temporal-Temporal7569 long7570)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.TemporalField this7571 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7572] (.getFrom this7571 java-time-temporal-TemporalAccessor7572)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this7573] (.isTimeBased this7573)))
