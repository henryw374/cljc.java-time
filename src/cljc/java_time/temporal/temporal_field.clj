(ns cljc.java-time.temporal.temporal-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal TemporalField]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ChronoUnit [^java.time.temporal.TemporalField this15453] (.getRangeUnit this15453)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this15454] (.range this15454)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.TemporalField this15455 ^java.util.Map java-util-Map15456 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15457 ^java.time.format.ResolverStyle java-time-format-ResolverStyle15458] (.resolve this15455 java-util-Map15456 java-time-temporal-TemporalAccessor15457 java-time-format-ResolverStyle15458)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ChronoUnit [^java.time.temporal.TemporalField this15459] (.getBaseUnit this15459)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^java.time.temporal.TemporalField this15460] (.toString this15460)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this15461] (.isDateBased this15461)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.TemporalField this15462 ^java.util.Locale java-util-Locale15463] (.getDisplayName this15462 java-util-Locale15463)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this15464 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15465] (.isSupportedBy this15464 java-time-temporal-TemporalAccessor15465)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this15466 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15467] (.rangeRefinedBy this15466 java-time-temporal-TemporalAccessor15467)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.TemporalField this15468 ^java.time.temporal.Temporal java-time-temporal-Temporal15469 ^long long15470] (.adjustInto this15468 java-time-temporal-Temporal15469 long15470)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.TemporalField this15471 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15472] (.getFrom this15471 java-time-temporal-TemporalAccessor15472)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this15473] (.isTimeBased this15473)))
