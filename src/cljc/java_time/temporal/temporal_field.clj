(ns cljc.java-time.temporal.temporal-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal TemporalField]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this13129] (.getRangeUnit this13129)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this13130] (.range this13130)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.TemporalField this13131 ^java.util.Map java-util-Map13132 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13133 ^java.time.format.ResolverStyle java-time-format-ResolverStyle13134] (.resolve this13131 java-util-Map13132 java-time-temporal-TemporalAccessor13133 java-time-format-ResolverStyle13134)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this13135] (.getBaseUnit this13135)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^java.time.temporal.TemporalField this13136] (.toString this13136)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this13137] (.isDateBased this13137)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.TemporalField this13138 ^java.util.Locale java-util-Locale13139] (.getDisplayName this13138 java-util-Locale13139)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this13140 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13141] (.isSupportedBy this13140 java-time-temporal-TemporalAccessor13141)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this13142 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13143] (.rangeRefinedBy this13142 java-time-temporal-TemporalAccessor13143)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.TemporalField this13144 ^java.time.temporal.Temporal java-time-temporal-Temporal13145 ^long long13146] (.adjustInto this13144 java-time-temporal-Temporal13145 long13146)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.TemporalField this13147 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13148] (.getFrom this13147 java-time-temporal-TemporalAccessor13148)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this13149] (.isTimeBased this13149)))
