(ns cljc.java-time.temporal.temporal-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal TemporalField]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ChronoUnit [^java.time.temporal.TemporalField this5907] (.getRangeUnit this5907)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this5908] (.range this5908)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.TemporalField this5909 ^java.util.Map java-util-Map5910 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5911 ^java.time.format.ResolverStyle java-time-format-ResolverStyle5912] (.resolve this5909 java-util-Map5910 java-time-temporal-TemporalAccessor5911 java-time-format-ResolverStyle5912)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ChronoUnit [^java.time.temporal.TemporalField this5913] (.getBaseUnit this5913)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^java.time.temporal.TemporalField this5914] (.toString this5914)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this5915] (.isDateBased this5915)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.TemporalField this5916 ^java.util.Locale java-util-Locale5917] (.getDisplayName this5916 java-util-Locale5917)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this5918 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5919] (.isSupportedBy this5918 java-time-temporal-TemporalAccessor5919)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this5920 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5921] (.rangeRefinedBy this5920 java-time-temporal-TemporalAccessor5921)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.TemporalField this5922 ^java.time.temporal.Temporal java-time-temporal-Temporal5923 ^long long5924] (.adjustInto this5922 java-time-temporal-Temporal5923 long5924)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.TemporalField this5925 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5926] (.getFrom this5925 java-time-temporal-TemporalAccessor5926)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this5927] (.isTimeBased this5927)))
