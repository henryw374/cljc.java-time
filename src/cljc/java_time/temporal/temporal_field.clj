(ns cljc.java-time.temporal.temporal-field (:import [java.time.temporal TemporalField]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this51121] (.getRangeUnit this51121)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this51122] (.range this51122)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.TemporalField this51123 ^java.util.Map java-util-Map51124 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor51125 ^java.time.format.ResolverStyle java-time-format-ResolverStyle51126] (.resolve this51123 java-util-Map51124 java-time-temporal-TemporalAccessor51125 java-time-format-ResolverStyle51126)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this51127] (.getBaseUnit this51127)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^java.time.temporal.TemporalField this51128] (.toString this51128)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this51129] (.isDateBased this51129)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.TemporalField this51130 ^java.util.Locale java-util-Locale51131] (.getDisplayName this51130 java-util-Locale51131)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this51132 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor51133] (.isSupportedBy this51132 java-time-temporal-TemporalAccessor51133)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this51134 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor51135] (.rangeRefinedBy this51134 java-time-temporal-TemporalAccessor51135)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.TemporalField this51136 ^java.time.temporal.Temporal java-time-temporal-Temporal51137 ^long long51138] (.adjustInto this51136 java-time-temporal-Temporal51137 long51138)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.TemporalField this51139 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor51140] (.getFrom this51139 java-time-temporal-TemporalAccessor51140)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this51141] (.isTimeBased this51141)))
