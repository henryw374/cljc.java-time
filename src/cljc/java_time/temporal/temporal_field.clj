(ns cljc.java-time.temporal.temporal-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal TemporalField]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this61612] (.getRangeUnit this61612)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this61613] (.range this61613)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.TemporalField this61614 ^java.util.Map java-util-Map61615 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor61616 ^java.time.format.ResolverStyle java-time-format-ResolverStyle61617] (.resolve this61614 java-util-Map61615 java-time-temporal-TemporalAccessor61616 java-time-format-ResolverStyle61617)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this61618] (.getBaseUnit this61618)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^java.time.temporal.TemporalField this61619] (.toString this61619)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this61620] (.isDateBased this61620)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.TemporalField this61621 ^java.util.Locale java-util-Locale61622] (.getDisplayName this61621 java-util-Locale61622)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this61623 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor61624] (.isSupportedBy this61623 java-time-temporal-TemporalAccessor61624)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this61625 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor61626] (.rangeRefinedBy this61625 java-time-temporal-TemporalAccessor61626)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.TemporalField this61627 ^java.time.temporal.Temporal java-time-temporal-Temporal61628 ^long long61629] (.adjustInto this61627 java-time-temporal-Temporal61628 long61629)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.TemporalField this61630 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor61631] (.getFrom this61630 java-time-temporal-TemporalAccessor61631)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this61632] (.isTimeBased this61632)))
