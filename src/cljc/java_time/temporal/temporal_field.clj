(ns cljc.java-time.temporal.temporal-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal TemporalField]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this5908] (.getRangeUnit this5908)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this5909] (.range this5909)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.TemporalField this5910 ^java.util.Map java-util-Map5911 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5912 ^java.time.format.ResolverStyle java-time-format-ResolverStyle5913] (.resolve this5910 java-util-Map5911 java-time-temporal-TemporalAccessor5912 java-time-format-ResolverStyle5913)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this5914] (.getBaseUnit this5914)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^java.time.temporal.TemporalField this5915] (.toString this5915)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this5916] (.isDateBased this5916)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.TemporalField this5917 ^java.util.Locale java-util-Locale5918] (.getDisplayName this5917 java-util-Locale5918)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this5919 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5920] (.isSupportedBy this5919 java-time-temporal-TemporalAccessor5920)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this5921 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5922] (.rangeRefinedBy this5921 java-time-temporal-TemporalAccessor5922)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.TemporalField this5923 ^java.time.temporal.Temporal java-time-temporal-Temporal5924 ^long long5925] (.adjustInto this5923 java-time-temporal-Temporal5924 long5925)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.TemporalField this5926 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5927] (.getFrom this5926 java-time-temporal-TemporalAccessor5927)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this5928] (.isTimeBased this5928)))
