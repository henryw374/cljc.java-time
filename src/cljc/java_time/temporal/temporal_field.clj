(ns cljc.java-time.temporal.temporal-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal TemporalField]))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this8950] (.getRangeUnit this8950)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this8951] (.range this8951)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.TemporalField this8952 ^java.util.Map java-util-Map8953 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8954 ^java.time.format.ResolverStyle java-time-format-ResolverStyle8955] (.resolve this8952 java-util-Map8953 java-time-temporal-TemporalAccessor8954 java-time-format-ResolverStyle8955)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this8956] (.getBaseUnit this8956)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^java.time.temporal.TemporalField this8957] (.toString this8957)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this8958] (.isDateBased this8958)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.TemporalField this8959 ^java.util.Locale java-util-Locale8960] (.getDisplayName this8959 java-util-Locale8960)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this8961 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8962] (.isSupportedBy this8961 java-time-temporal-TemporalAccessor8962)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this8963 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8964] (.rangeRefinedBy this8963 java-time-temporal-TemporalAccessor8964)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.TemporalField this8965 ^java.time.temporal.Temporal java-time-temporal-Temporal8966 ^long long8967] (.adjustInto this8965 java-time-temporal-Temporal8966 long8967)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.TemporalField this8968 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8969] (.getFrom this8968 java-time-temporal-TemporalAccessor8969)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this8970] (.isTimeBased this8970)))
