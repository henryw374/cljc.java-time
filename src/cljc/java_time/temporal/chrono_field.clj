(ns cljc.java-time.temporal.chrono-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ChronoField]))
(def milli-of-second java.time.temporal.ChronoField/MILLI_OF_SECOND)
(def year-of-era java.time.temporal.ChronoField/YEAR_OF_ERA)
(def clock-hour-of-day java.time.temporal.ChronoField/CLOCK_HOUR_OF_DAY)
(def era java.time.temporal.ChronoField/ERA)
(def instant-seconds java.time.temporal.ChronoField/INSTANT_SECONDS)
(def ampm-of-day java.time.temporal.ChronoField/AMPM_OF_DAY)
(def offset-seconds java.time.temporal.ChronoField/OFFSET_SECONDS)
(def nano-of-second java.time.temporal.ChronoField/NANO_OF_SECOND)
(def nano-of-day java.time.temporal.ChronoField/NANO_OF_DAY)
(def aligned-day-of-week-in-month java.time.temporal.ChronoField/ALIGNED_DAY_OF_WEEK_IN_MONTH)
(def month-of-year java.time.temporal.ChronoField/MONTH_OF_YEAR)
(def hour-of-ampm java.time.temporal.ChronoField/HOUR_OF_AMPM)
(def year java.time.temporal.ChronoField/YEAR)
(def micro-of-second java.time.temporal.ChronoField/MICRO_OF_SECOND)
(def aligned-week-of-year java.time.temporal.ChronoField/ALIGNED_WEEK_OF_YEAR)
(def proleptic-month java.time.temporal.ChronoField/PROLEPTIC_MONTH)
(def day-of-month java.time.temporal.ChronoField/DAY_OF_MONTH)
(def second-of-minute java.time.temporal.ChronoField/SECOND_OF_MINUTE)
(def second-of-day java.time.temporal.ChronoField/SECOND_OF_DAY)
(def epoch-day java.time.temporal.ChronoField/EPOCH_DAY)
(def day-of-year java.time.temporal.ChronoField/DAY_OF_YEAR)
(def aligned-week-of-month java.time.temporal.ChronoField/ALIGNED_WEEK_OF_MONTH)
(def day-of-week java.time.temporal.ChronoField/DAY_OF_WEEK)
(def clock-hour-of-ampm java.time.temporal.ChronoField/CLOCK_HOUR_OF_AMPM)
(def minute-of-day java.time.temporal.ChronoField/MINUTE_OF_DAY)
(def aligned-day-of-week-in-year java.time.temporal.ChronoField/ALIGNED_DAY_OF_WEEK_IN_YEAR)
(def minute-of-hour java.time.temporal.ChronoField/MINUTE_OF_HOUR)
(def hour-of-day java.time.temporal.ChronoField/HOUR_OF_DAY)
(def milli-of-day java.time.temporal.ChronoField/MILLI_OF_DAY)
(def micro-of-day java.time.temporal.ChronoField/MICRO_OF_DAY)
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.ChronoField this5724] (.getRangeUnit this5724)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.ChronoField this5725] (.range this5725)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.temporal.ChronoField/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoField [^java.lang.String java-lang-String5726] (java.time.temporal.ChronoField/valueOf java-lang-String5726)) (^java.lang.Enum [^java.lang.Class java-lang-Class5727 ^java.lang.String java-lang-String5728] (java.time.temporal.ChronoField/valueOf java-lang-Class5727 java-lang-String5728)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.ChronoField this5729 ^java.util.Map java-util-Map5730 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5731 ^java.time.format.ResolverStyle java-time-format-ResolverStyle5732] (.resolve this5729 java-util-Map5730 java-time-temporal-TemporalAccessor5731 java-time-format-ResolverStyle5732)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this5733] (.ordinal this5733)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this5734 ^long long5735] (.checkValidIntValue this5734 long5735)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.ChronoField this5736] (.getBaseUnit this5736)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^java.time.temporal.ChronoField this5737] (.toString this5737)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this5738] (.isDateBased this5738)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.ChronoField this5739 ^java.util.Locale java-util-Locale5740] (.getDisplayName this5739 java-util-Locale5740)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^java.time.temporal.ChronoField this5741] (.name this5741)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this5742 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5743] (.isSupportedBy this5742 java-time-temporal-TemporalAccessor5743)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.ChronoField this5744 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5745] (.rangeRefinedBy this5744 java-time-temporal-TemporalAccessor5745)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Class [^java.time.temporal.ChronoField this5746] (.getDeclaringClass this5746)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this5747] (.hashCode this5747)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoField this5748 ^java.time.temporal.Temporal java-time-temporal-Temporal5749 ^long long5750] (.adjustInto this5748 java-time-temporal-Temporal5749 long5750)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.ChronoField this5751 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5752] (.getFrom this5751 java-time-temporal-TemporalAccessor5752)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this5753 ^java.lang.Enum java-lang-Enum5754] (.compareTo this5753 java-lang-Enum5754)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this5755 ^java.lang.Object java-lang-Object5756] (.equals this5755 java-lang-Object5756)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this5757] (.isTimeBased this5757)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^long [^java.time.temporal.ChronoField this5758 ^long long5759] (.checkValidValue this5758 long5759)))
