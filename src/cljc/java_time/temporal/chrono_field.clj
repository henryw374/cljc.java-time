(ns cljc.java-time.temporal.chrono-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ChronoField]))
(def milli-of-second java.time.temporal.ChronoField/MILLI_OF_SECOND)
(def year-of-era java.time.temporal.ChronoField/YEAR_OF_ERA)
(def clock-hour-of-day java.time.temporal.ChronoField/CLOCK_HOUR_OF_DAY)
(def era java.time.temporal.ChronoField/ERA)
(def instant-seconds java.time.temporal.ChronoField/INSTANT_SECONDS)
(def ampm-of-day java.time.temporal.ChronoField/AMPM_OF_DAY)
(def offset-seconds java.time.temporal.ChronoField/OFFSET_SECONDS)
(def nano-of-second java.time.temporal.ChronoField/NANO_OF_SECOND)
(def nano-of-day java.time.temporal.ChronoField/NANO_OF_DAY)
(def aligned-day-of-week-in-month java.time.temporal.ChronoField/ALIGNED_DAY_OF_WEEK_IN_MONTH)
(def month-of-year java.time.temporal.ChronoField/MONTH_OF_YEAR)
(def hour-of-ampm java.time.temporal.ChronoField/HOUR_OF_AMPM)
(def year java.time.temporal.ChronoField/YEAR)
(def micro-of-second java.time.temporal.ChronoField/MICRO_OF_SECOND)
(def aligned-week-of-year java.time.temporal.ChronoField/ALIGNED_WEEK_OF_YEAR)
(def proleptic-month java.time.temporal.ChronoField/PROLEPTIC_MONTH)
(def day-of-month java.time.temporal.ChronoField/DAY_OF_MONTH)
(def second-of-minute java.time.temporal.ChronoField/SECOND_OF_MINUTE)
(def second-of-day java.time.temporal.ChronoField/SECOND_OF_DAY)
(def epoch-day java.time.temporal.ChronoField/EPOCH_DAY)
(def day-of-year java.time.temporal.ChronoField/DAY_OF_YEAR)
(def aligned-week-of-month java.time.temporal.ChronoField/ALIGNED_WEEK_OF_MONTH)
(def day-of-week java.time.temporal.ChronoField/DAY_OF_WEEK)
(def clock-hour-of-ampm java.time.temporal.ChronoField/CLOCK_HOUR_OF_AMPM)
(def minute-of-day java.time.temporal.ChronoField/MINUTE_OF_DAY)
(def aligned-day-of-week-in-year java.time.temporal.ChronoField/ALIGNED_DAY_OF_WEEK_IN_YEAR)
(def minute-of-hour java.time.temporal.ChronoField/MINUTE_OF_HOUR)
(def hour-of-day java.time.temporal.ChronoField/HOUR_OF_DAY)
(def milli-of-day java.time.temporal.ChronoField/MILLI_OF_DAY)
(def micro-of-day java.time.temporal.ChronoField/MICRO_OF_DAY)
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.ChronoField this61428] (.getRangeUnit this61428)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.ChronoField this61429] (.range this61429)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.temporal.ChronoField/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoField [^java.lang.String java-lang-String61430] (java.time.temporal.ChronoField/valueOf java-lang-String61430)) (^java.lang.Enum [^java.lang.Class java-lang-Class61431 ^java.lang.String java-lang-String61432] (java.time.temporal.ChronoField/valueOf java-lang-Class61431 java-lang-String61432)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.ChronoField this61433 ^java.util.Map java-util-Map61434 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor61435 ^java.time.format.ResolverStyle java-time-format-ResolverStyle61436] (.resolve this61433 java-util-Map61434 java-time-temporal-TemporalAccessor61435 java-time-format-ResolverStyle61436)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this61437] (.ordinal this61437)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this61438 ^long long61439] (.checkValidIntValue this61438 long61439)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.ChronoField this61440] (.getBaseUnit this61440)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^java.time.temporal.ChronoField this61441] (.toString this61441)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this61442] (.isDateBased this61442)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.ChronoField this61443 ^java.util.Locale java-util-Locale61444] (.getDisplayName this61443 java-util-Locale61444)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^java.time.temporal.ChronoField this61445] (.name this61445)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this61446 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor61447] (.isSupportedBy this61446 java-time-temporal-TemporalAccessor61447)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.ChronoField this61448 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor61449] (.rangeRefinedBy this61448 java-time-temporal-TemporalAccessor61449)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Class [^java.time.temporal.ChronoField this61450] (.getDeclaringClass this61450)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this61451] (.hashCode this61451)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoField this61452 ^java.time.temporal.Temporal java-time-temporal-Temporal61453 ^long long61454] (.adjustInto this61452 java-time-temporal-Temporal61453 long61454)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.ChronoField this61455 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor61456] (.getFrom this61455 java-time-temporal-TemporalAccessor61456)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"] ["java.time.temporal.ChronoField" "java.lang.Enum"]))} (^java.lang.Integer [this61457 G__61458] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__61458)) (clojure.core/let [G__61458 ^"java.lang.Object" G__61458] (.compareTo ^java.time.temporal.ChronoField this61457 G__61458)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__61458)) (clojure.core/let [G__61458 ^"java.lang.Enum" G__61458] (.compareTo ^java.time.temporal.ChronoField this61457 G__61458)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this61459 ^java.lang.Object java-lang-Object61460] (.equals this61459 java-lang-Object61460)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this61461] (.isTimeBased this61461)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^long [^java.time.temporal.ChronoField this61462 ^long long61463] (.checkValidValue this61462 long61463)))
