(ns cljc.java-time.temporal.chrono-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ChronoField]))
(def milli-of-second java.time.temporal.ChronoField/MILLI_OF_SECOND)
(def year-of-era java.time.temporal.ChronoField/YEAR_OF_ERA)
(def clock-hour-of-day java.time.temporal.ChronoField/CLOCK_HOUR_OF_DAY)
(def era java.time.temporal.ChronoField/ERA)
(def instant-seconds java.time.temporal.ChronoField/INSTANT_SECONDS)
(def ampm-of-day java.time.temporal.ChronoField/AMPM_OF_DAY)
(def offset-seconds java.time.temporal.ChronoField/OFFSET_SECONDS)
(def nano-of-second java.time.temporal.ChronoField/NANO_OF_SECOND)
(def nano-of-day java.time.temporal.ChronoField/NANO_OF_DAY)
(def aligned-day-of-week-in-month java.time.temporal.ChronoField/ALIGNED_DAY_OF_WEEK_IN_MONTH)
(def month-of-year java.time.temporal.ChronoField/MONTH_OF_YEAR)
(def hour-of-ampm java.time.temporal.ChronoField/HOUR_OF_AMPM)
(def year java.time.temporal.ChronoField/YEAR)
(def micro-of-second java.time.temporal.ChronoField/MICRO_OF_SECOND)
(def aligned-week-of-year java.time.temporal.ChronoField/ALIGNED_WEEK_OF_YEAR)
(def proleptic-month java.time.temporal.ChronoField/PROLEPTIC_MONTH)
(def day-of-month java.time.temporal.ChronoField/DAY_OF_MONTH)
(def second-of-minute java.time.temporal.ChronoField/SECOND_OF_MINUTE)
(def second-of-day java.time.temporal.ChronoField/SECOND_OF_DAY)
(def epoch-day java.time.temporal.ChronoField/EPOCH_DAY)
(def day-of-year java.time.temporal.ChronoField/DAY_OF_YEAR)
(def aligned-week-of-month java.time.temporal.ChronoField/ALIGNED_WEEK_OF_MONTH)
(def day-of-week java.time.temporal.ChronoField/DAY_OF_WEEK)
(def clock-hour-of-ampm java.time.temporal.ChronoField/CLOCK_HOUR_OF_AMPM)
(def minute-of-day java.time.temporal.ChronoField/MINUTE_OF_DAY)
(def aligned-day-of-week-in-year java.time.temporal.ChronoField/ALIGNED_DAY_OF_WEEK_IN_YEAR)
(def minute-of-hour java.time.temporal.ChronoField/MINUTE_OF_HOUR)
(def hour-of-day java.time.temporal.ChronoField/HOUR_OF_DAY)
(def milli-of-day java.time.temporal.ChronoField/MILLI_OF_DAY)
(def micro-of-day java.time.temporal.ChronoField/MICRO_OF_DAY)
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.ChronoUnit [^java.time.temporal.ChronoField this15241] (.getRangeUnit this15241)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.ChronoField this15242] (.range this15242)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.temporal.ChronoField/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoField [^java.lang.String java-lang-String15243] (java.time.temporal.ChronoField/valueOf java-lang-String15243)) (^java.lang.Enum [^java.lang.Class java-lang-Class15244 ^java.lang.String java-lang-String15245] (java.time.temporal.ChronoField/valueOf java-lang-Class15244 java-lang-String15245)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.ChronoField this15246 ^java.util.Map java-util-Map15247 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15248 ^java.time.format.ResolverStyle java-time-format-ResolverStyle15249] (.resolve this15246 java-util-Map15247 java-time-temporal-TemporalAccessor15248 java-time-format-ResolverStyle15249)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this15250] (.ordinal this15250)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this15251 ^long long15252] (.checkValidIntValue this15251 long15252)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.ChronoUnit [^java.time.temporal.ChronoField this15253] (.getBaseUnit this15253)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^java.time.temporal.ChronoField this15254] (.toString this15254)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this15255] (.isDateBased this15255)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.ChronoField this15256 ^java.util.Locale java-util-Locale15257] (.getDisplayName this15256 java-util-Locale15257)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^java.time.temporal.ChronoField this15258] (.name this15258)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this15259 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15260] (.isSupportedBy this15259 java-time-temporal-TemporalAccessor15260)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.ChronoField this15261 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15262] (.rangeRefinedBy this15261 java-time-temporal-TemporalAccessor15262)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Class [^java.time.temporal.ChronoField this15263] (.getDeclaringClass this15263)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this15264] (.hashCode this15264)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoField this15265 ^java.time.temporal.Temporal java-time-temporal-Temporal15266 ^long long15267] (.adjustInto this15265 java-time-temporal-Temporal15266 long15267)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.ChronoField this15268 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15269] (.getFrom this15268 java-time-temporal-TemporalAccessor15269)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this15270 ^java.lang.Enum java-lang-Enum15271] (.compareTo this15270 java-lang-Enum15271)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this15272 ^java.lang.Object java-lang-Object15273] (.equals this15272 java-lang-Object15273)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this15274] (.isTimeBased this15274)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^long [^java.time.temporal.ChronoField this15275 ^long long15276] (.checkValidValue this15275 long15276)))
