(ns cljc.java-time.temporal.chrono-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal ChronoField]))
(def milli-of-second java.time.temporal.ChronoField/MILLI_OF_SECOND)
(def year-of-era java.time.temporal.ChronoField/YEAR_OF_ERA)
(def clock-hour-of-day java.time.temporal.ChronoField/CLOCK_HOUR_OF_DAY)
(def era java.time.temporal.ChronoField/ERA)
(def instant-seconds java.time.temporal.ChronoField/INSTANT_SECONDS)
(def ampm-of-day java.time.temporal.ChronoField/AMPM_OF_DAY)
(def offset-seconds java.time.temporal.ChronoField/OFFSET_SECONDS)
(def nano-of-second java.time.temporal.ChronoField/NANO_OF_SECOND)
(def nano-of-day java.time.temporal.ChronoField/NANO_OF_DAY)
(def aligned-day-of-week-in-month java.time.temporal.ChronoField/ALIGNED_DAY_OF_WEEK_IN_MONTH)
(def month-of-year java.time.temporal.ChronoField/MONTH_OF_YEAR)
(def hour-of-ampm java.time.temporal.ChronoField/HOUR_OF_AMPM)
(def year java.time.temporal.ChronoField/YEAR)
(def micro-of-second java.time.temporal.ChronoField/MICRO_OF_SECOND)
(def aligned-week-of-year java.time.temporal.ChronoField/ALIGNED_WEEK_OF_YEAR)
(def proleptic-month java.time.temporal.ChronoField/PROLEPTIC_MONTH)
(def day-of-month java.time.temporal.ChronoField/DAY_OF_MONTH)
(def second-of-minute java.time.temporal.ChronoField/SECOND_OF_MINUTE)
(def second-of-day java.time.temporal.ChronoField/SECOND_OF_DAY)
(def epoch-day java.time.temporal.ChronoField/EPOCH_DAY)
(def day-of-year java.time.temporal.ChronoField/DAY_OF_YEAR)
(def aligned-week-of-month java.time.temporal.ChronoField/ALIGNED_WEEK_OF_MONTH)
(def day-of-week java.time.temporal.ChronoField/DAY_OF_WEEK)
(def clock-hour-of-ampm java.time.temporal.ChronoField/CLOCK_HOUR_OF_AMPM)
(def minute-of-day java.time.temporal.ChronoField/MINUTE_OF_DAY)
(def aligned-day-of-week-in-year java.time.temporal.ChronoField/ALIGNED_DAY_OF_WEEK_IN_YEAR)
(def minute-of-hour java.time.temporal.ChronoField/MINUTE_OF_HOUR)
(def hour-of-day java.time.temporal.ChronoField/HOUR_OF_DAY)
(def milli-of-day java.time.temporal.ChronoField/MILLI_OF_DAY)
(def micro-of-day java.time.temporal.ChronoField/MICRO_OF_DAY)
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.ChronoField this8712] (.getRangeUnit this8712)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.ChronoField this8713] (.range this8713)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.temporal.ChronoField/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoField [^java.lang.String java-lang-String8714] (java.time.temporal.ChronoField/valueOf java-lang-String8714)) (^java.lang.Enum [^java.lang.Class java-lang-Class8715 ^java.lang.String java-lang-String8716] (java.time.temporal.ChronoField/valueOf java-lang-Class8715 java-lang-String8716)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.ChronoField this8717 ^java.util.Map java-util-Map8718 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8719 ^java.time.format.ResolverStyle java-time-format-ResolverStyle8720] (.resolve this8717 java-util-Map8718 java-time-temporal-TemporalAccessor8719 java-time-format-ResolverStyle8720)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this8721] (.ordinal this8721)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this8722 ^long long8723] (.checkValidIntValue this8722 long8723)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.ChronoField this8724] (.getBaseUnit this8724)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^java.time.temporal.ChronoField this8725] (.toString this8725)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this8726] (.isDateBased this8726)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.ChronoField this8727 ^java.util.Locale java-util-Locale8728] (.getDisplayName this8727 java-util-Locale8728)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^java.time.temporal.ChronoField this8729] (.name this8729)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this8730 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8731] (.isSupportedBy this8730 java-time-temporal-TemporalAccessor8731)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.ChronoField this8732 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8733] (.rangeRefinedBy this8732 java-time-temporal-TemporalAccessor8733)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Class [^java.time.temporal.ChronoField this8734] (.getDeclaringClass this8734)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this8735] (.hashCode this8735)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoField this8736 ^java.time.temporal.Temporal java-time-temporal-Temporal8737 ^long long8738] (.adjustInto this8736 java-time-temporal-Temporal8737 long8738)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.ChronoField this8739 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8740] (.getFrom this8739 java-time-temporal-TemporalAccessor8740)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"] ["java.time.temporal.ChronoField" "java.lang.Enum"]))} (^java.lang.Integer [this8741 G__8742] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__8742)) (clojure.core/let [G__8742 ^"java.lang.Object" G__8742] (.compareTo ^java.time.temporal.ChronoField this8741 G__8742)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__8742)) (clojure.core/let [G__8742 ^"java.lang.Enum" G__8742] (.compareTo ^java.time.temporal.ChronoField this8741 G__8742)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this8743 ^java.lang.Object java-lang-Object8744] (.equals this8743 java-lang-Object8744)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this8745] (.isTimeBased this8745)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^long [^java.time.temporal.ChronoField this8746 ^long long8747] (.checkValidValue this8746 long8747)))
