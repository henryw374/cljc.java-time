(ns cljc.java-time.temporal.temporal-field (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.temporal :refer [TemporalField]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.temporal TemporalField])))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this13637] (jti/getter rangeUnit this13637)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this13638] (.range this13638)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.TemporalField this13639 ^java.util.Map java-util-Map13640 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13641 ^java.time.format.ResolverStyle java-time-format-ResolverStyle13642] (.resolve this13639 java-util-Map13640 java-time-temporal-TemporalAccessor13641 java-time-format-ResolverStyle13642)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this13643] (jti/getter baseUnit this13643)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^java.time.temporal.TemporalField this13644] (.toString this13644)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this13645] (.isDateBased this13645)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.TemporalField this13646 ^java.util.Locale java-util-Locale13647] (jti/getter displayName this13646 java-util-Locale13647)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this13648 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13649] (.isSupportedBy this13648 java-time-temporal-TemporalAccessor13649)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this13650 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13651] (.rangeRefinedBy this13650 java-time-temporal-TemporalAccessor13651)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.TemporalField this13652 ^java.time.temporal.Temporal java-time-temporal-Temporal13653 ^long long13654] (.adjustInto this13652 java-time-temporal-Temporal13653 long13654)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.TemporalField this13655 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13656] (jti/getter from this13655 java-time-temporal-TemporalAccessor13656)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this13657] (.isTimeBased this13657)))
