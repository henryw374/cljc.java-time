(ns cljc.java-time.temporal.temporal-field (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.temporal :refer [TemporalField]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.temporal TemporalField])))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this4856] (jti/getter rangeUnit this4856)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this4857] (.range this4857)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.TemporalField this4858 ^java.util.Map java-util-Map4859 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4860 ^java.time.format.ResolverStyle java-time-format-ResolverStyle4861] (.resolve this4858 java-util-Map4859 java-time-temporal-TemporalAccessor4860 java-time-format-ResolverStyle4861)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.TemporalField this4862] (jti/getter baseUnit this4862)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.String [^java.time.temporal.TemporalField this4863] (.toString this4863)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this4864] (.isDateBased this4864)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.TemporalField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.TemporalField this4865 ^java.util.Locale java-util-Locale4866] (jti/getter displayName this4865 java-util-Locale4866)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this4867 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4868] (.isSupportedBy this4867 java-time-temporal-TemporalAccessor4868)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalField this4869 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4870] (.rangeRefinedBy this4869 java-time-temporal-TemporalAccessor4870)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.TemporalField this4871 ^java.time.temporal.Temporal java-time-temporal-Temporal4872 ^long long4873] (.adjustInto this4871 java-time-temporal-Temporal4872 long4873)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.TemporalField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.TemporalField this4874 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4875] (jti/getter from this4874 java-time-temporal-TemporalAccessor4875)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalField this4876] (.isTimeBased this4876)))
