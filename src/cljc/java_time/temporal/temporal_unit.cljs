(ns cljc.java-time.temporal.temporal-unit (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [TemporalUnit]]))
(clojure.core/defn is-duration-estimated {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^boolean [^js/JSJoda.TemporalUnit this8825] (.isDurationEstimated this8825)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^boolean [^js/JSJoda.TemporalUnit this8826] (.isDateBased this8826)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^java.lang.String [^js/JSJoda.TemporalUnit this8827] (.toString this8827)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalUnit" "java.time.temporal.Temporal"]))} (^boolean [^js/JSJoda.TemporalUnit this8828 ^js/JSJoda.Temporal java-time-temporal-Temporal8829] (.isSupportedBy this8828 java-time-temporal-Temporal8829)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^boolean [^js/JSJoda.TemporalUnit this8830] (.isTimeBased this8830)))
(clojure.core/defn get-duration {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^js/JSJoda.TemporalUnit this8831] (.duration this8831)))
(clojure.core/defn add-to {:arglists (quote (["java.time.temporal.TemporalUnit" "java.time.temporal.Temporal" "long"]))} (^js/JSJoda.Temporal [^js/JSJoda.TemporalUnit this8832 ^js/JSJoda.Temporal java-time-temporal-Temporal8833 ^long long8834] (.addTo this8832 java-time-temporal-Temporal8833 long8834)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.TemporalUnit" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^long [^js/JSJoda.TemporalUnit this8835 ^js/JSJoda.Temporal java-time-temporal-Temporal8836 ^js/JSJoda.Temporal java-time-temporal-Temporal8837] (.between this8835 java-time-temporal-Temporal8836 java-time-temporal-Temporal8837)))
