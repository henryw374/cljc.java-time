(ns cljc.java-time.temporal.temporal-unit (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [TemporalUnit]]))
(clojure.core/defn get-duration {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^js/JSJoda.TemporalUnit this8879] (.duration this8879)))
(clojure.core/defn is-duration-estimated {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^boolean [^js/JSJoda.TemporalUnit this8880] (.isDurationEstimated this8880)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^boolean [^js/JSJoda.TemporalUnit this8881] (.isDateBased this8881)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^boolean [^js/JSJoda.TemporalUnit this8882] (.isTimeBased this8882)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalUnit" "java.time.temporal.Temporal"]))} (^boolean [^js/JSJoda.TemporalUnit this8883 ^js/JSJoda.Temporal java-time-temporal-Temporal8884] (.isSupportedBy this8883 java-time-temporal-Temporal8884)))
(clojure.core/defn add-to {:arglists (quote (["java.time.temporal.TemporalUnit" "java.time.temporal.Temporal" "long"]))} (^js/JSJoda.Temporal [^js/JSJoda.TemporalUnit this8885 ^js/JSJoda.Temporal java-time-temporal-Temporal8886 ^long long8887] (.addTo this8885 java-time-temporal-Temporal8886 long8887)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.TemporalUnit" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^long [^js/JSJoda.TemporalUnit this8888 ^js/JSJoda.Temporal java-time-temporal-Temporal8889 ^js/JSJoda.Temporal java-time-temporal-Temporal8890] (.between this8888 java-time-temporal-Temporal8889 java-time-temporal-Temporal8890)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^java.lang.String [^js/JSJoda.TemporalUnit this8891] (.toString this8891)))
