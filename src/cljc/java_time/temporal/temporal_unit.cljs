(ns cljc.java-time.temporal.temporal-unit (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [TemporalUnit]]))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^java.lang.String [^js/JSJoda.TemporalUnit this5836] (.toString this5836)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.TemporalUnit" "java.time.temporal.Temporal"]))} (^boolean [^js/JSJoda.TemporalUnit this5837 ^js/JSJoda.Temporal java-time-temporal-Temporal5838] (.isSupportedBy this5837 java-time-temporal-Temporal5838)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^boolean [^js/JSJoda.TemporalUnit this5839] (.isTimeBased this5839)))
(clojure.core/defn get-duration {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^js/JSJoda.TemporalUnit this5840] (.duration this5840)))
(clojure.core/defn add-to {:arglists (quote (["java.time.temporal.TemporalUnit" "java.time.temporal.Temporal" "long"]))} (^js/JSJoda.Temporal [^js/JSJoda.TemporalUnit this5841 ^js/JSJoda.Temporal java-time-temporal-Temporal5842 ^long long5843] (.addTo this5841 java-time-temporal-Temporal5842 long5843)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.TemporalUnit" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^long [^js/JSJoda.TemporalUnit this5844 ^js/JSJoda.Temporal java-time-temporal-Temporal5845 ^js/JSJoda.Temporal java-time-temporal-Temporal5846] (.between this5844 java-time-temporal-Temporal5845 java-time-temporal-Temporal5846)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^boolean [^js/JSJoda.TemporalUnit this5847] (.isDateBased this5847)))
(clojure.core/defn is-duration-estimated {:arglists (quote (["java.time.temporal.TemporalUnit"]))} (^boolean [^js/JSJoda.TemporalUnit this5848] (.isDurationEstimated this5848)))
