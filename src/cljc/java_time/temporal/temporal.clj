(ns cljc.java-time.temporal.temporal (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal Temporal]))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.Temporal this8594 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8595] (.range this8594 java-time-temporal-TemporalField8595)))
(clojure.core/defn plus {:arglists (quote (["java.time.temporal.Temporal" "long" "java.time.temporal.TemporalUnit"] ["java.time.temporal.Temporal" "java.time.temporal.TemporalAmount"]))} (^java.time.temporal.Temporal [^java.time.temporal.Temporal this8596 ^long long8597 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8598] (.plus this8596 long8597 java-time-temporal-TemporalUnit8598)) (^java.time.temporal.Temporal [^java.time.temporal.Temporal this8599 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount8600] (.plus this8599 java-time-temporal-TemporalAmount8600)))
(clojure.core/defn query {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.temporal.Temporal this8601 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery8602] (.query this8601 java-time-temporal-TemporalQuery8602)))
(clojure.core/defn minus {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalAmount"] ["java.time.temporal.Temporal" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.temporal.Temporal [^java.time.temporal.Temporal this8603 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount8604] (.minus this8603 java-time-temporal-TemporalAmount8604)) (^java.time.temporal.Temporal [^java.time.temporal.Temporal this8605 ^long long8606 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8607] (.minus this8605 long8606 java-time-temporal-TemporalUnit8607)))
(clojure.core/defn get-long {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.Temporal this8608 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8609] (.getLong this8608 java-time-temporal-TemporalField8609)))
(clojure.core/defn until {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.temporal.Temporal this8610 ^java.time.temporal.Temporal java-time-temporal-Temporal8611 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8612] (.until this8610 java-time-temporal-Temporal8611 java-time-temporal-TemporalUnit8612)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this8613 G__8614] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__8614)) (clojure.core/let [G__8614 ^"java.time.temporal.TemporalUnit" G__8614] (.isSupported ^java.time.temporal.Temporal this8613 G__8614)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__8614)) (clojure.core/let [G__8614 ^"java.time.temporal.TemporalField" G__8614] (.isSupported ^java.time.temporal.Temporal this8613 G__8614)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalAdjuster"] ["java.time.temporal.Temporal" "java.time.temporal.TemporalField" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.Temporal this8615 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster8616] (.with this8615 java-time-temporal-TemporalAdjuster8616)) (^java.time.temporal.Temporal [^java.time.temporal.Temporal this8617 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8618 ^long long8619] (.with this8617 java-time-temporal-TemporalField8618 long8619)))
(clojure.core/defn get {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.Temporal this8620 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8621] (.get this8620 java-time-temporal-TemporalField8621)))
