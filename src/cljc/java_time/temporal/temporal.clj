(ns cljc.java-time.temporal.temporal (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.temporal Temporal]))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.Temporal this15123 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15124] (.range this15123 java-time-temporal-TemporalField15124)))
(clojure.core/defn plus {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalAmount"] ["java.time.temporal.Temporal" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.temporal.Temporal [^java.time.temporal.Temporal this15125 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount15126] (.plus this15125 java-time-temporal-TemporalAmount15126)) (^java.time.temporal.Temporal [^java.time.temporal.Temporal this15127 ^long long15128 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit15129] (.plus this15127 long15128 java-time-temporal-TemporalUnit15129)))
(clojure.core/defn query {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.temporal.Temporal this15130 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery15131] (.query this15130 java-time-temporal-TemporalQuery15131)))
(clojure.core/defn minus {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalAmount"] ["java.time.temporal.Temporal" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.temporal.Temporal [^java.time.temporal.Temporal this15132 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount15133] (.minus this15132 java-time-temporal-TemporalAmount15133)) (^java.time.temporal.Temporal [^java.time.temporal.Temporal this15134 ^long long15135 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit15136] (.minus this15134 long15135 java-time-temporal-TemporalUnit15136)))
(clojure.core/defn get-long {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.Temporal this15137 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15138] (.getLong this15137 java-time-temporal-TemporalField15138)))
(clojure.core/defn until {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.temporal.Temporal this15139 ^java.time.temporal.Temporal java-time-temporal-Temporal15140 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit15141] (.until this15139 java-time-temporal-Temporal15140 java-time-temporal-TemporalUnit15141)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this15142 G__15143] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__15143)) (clojure.core/let [G__15143 ^"java.time.temporal.ChronoUnit" G__15143] (.isSupported ^java.time.temporal.Temporal this15142 G__15143)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__15143)) (clojure.core/let [G__15143 ^"java.time.temporal.TemporalField" G__15143] (.isSupported ^java.time.temporal.Temporal this15142 G__15143)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField" "long"] ["java.time.temporal.Temporal" "java.time.temporal.TemporalAdjuster"]))} (^java.time.temporal.Temporal [^java.time.temporal.Temporal this15144 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15145 ^long long15146] (.with this15144 java-time-temporal-TemporalField15145 long15146)) (^java.time.temporal.Temporal [^java.time.temporal.Temporal this15147 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster15148] (.with this15147 java-time-temporal-TemporalAdjuster15148)))
(clojure.core/defn get {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.Temporal this15149 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15150] (.get this15149 java-time-temporal-TemporalField15150)))
