(ns cljc.java-time.temporal.temporal-accessor (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.temporal :refer [TemporalAccessor]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.temporal TemporalAccessor])))
(clojure.core/defn get {:arglists (quote (["java.time.temporal.TemporalAccessor" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.TemporalAccessor this13581 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13582] (.get this13581 java-time-temporal-TemporalField13582)))
(clojure.core/defn get-long {:arglists (quote (["java.time.temporal.TemporalAccessor" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.TemporalAccessor this13583 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13584] (.getLong this13583 java-time-temporal-TemporalField13584)))
(clojure.core/defn query {:arglists (quote (["java.time.temporal.TemporalAccessor" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.temporal.TemporalAccessor this13585 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13586] (.query this13585 java-time-temporal-TemporalQuery13586)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.temporal.TemporalAccessor" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.temporal.TemporalAccessor this13587 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13588] (.isSupported this13587 java-time-temporal-TemporalField13588)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.TemporalAccessor" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.TemporalAccessor this13589 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13590] (.range this13589 java-time-temporal-TemporalField13590)))
