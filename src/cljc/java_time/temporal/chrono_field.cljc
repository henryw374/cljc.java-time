(ns cljc.java-time.temporal.chrono-field (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.temporal :refer [ChronoField]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.temporal ChronoField])))
(def milli-of-second #? (:clj java.time.temporal.ChronoField/MILLI_OF_SECOND :cljs (. java.time.temporal.ChronoField -MILLI_OF_SECOND)))
(def year-of-era #? (:clj java.time.temporal.ChronoField/YEAR_OF_ERA :cljs (. java.time.temporal.ChronoField -YEAR_OF_ERA)))
(def clock-hour-of-day #? (:clj java.time.temporal.ChronoField/CLOCK_HOUR_OF_DAY :cljs (. java.time.temporal.ChronoField -CLOCK_HOUR_OF_DAY)))
(def era #? (:clj java.time.temporal.ChronoField/ERA :cljs (. java.time.temporal.ChronoField -ERA)))
(def instant-seconds #? (:clj java.time.temporal.ChronoField/INSTANT_SECONDS :cljs (. java.time.temporal.ChronoField -INSTANT_SECONDS)))
(def ampm-of-day #? (:clj java.time.temporal.ChronoField/AMPM_OF_DAY :cljs (. java.time.temporal.ChronoField -AMPM_OF_DAY)))
(def offset-seconds #? (:clj java.time.temporal.ChronoField/OFFSET_SECONDS :cljs (. java.time.temporal.ChronoField -OFFSET_SECONDS)))
(def nano-of-second #? (:clj java.time.temporal.ChronoField/NANO_OF_SECOND :cljs (. java.time.temporal.ChronoField -NANO_OF_SECOND)))
(def nano-of-day #? (:clj java.time.temporal.ChronoField/NANO_OF_DAY :cljs (. java.time.temporal.ChronoField -NANO_OF_DAY)))
(def aligned-day-of-week-in-month #? (:clj java.time.temporal.ChronoField/ALIGNED_DAY_OF_WEEK_IN_MONTH :cljs (. java.time.temporal.ChronoField -ALIGNED_DAY_OF_WEEK_IN_MONTH)))
(def month-of-year #? (:clj java.time.temporal.ChronoField/MONTH_OF_YEAR :cljs (. java.time.temporal.ChronoField -MONTH_OF_YEAR)))
(def hour-of-ampm #? (:clj java.time.temporal.ChronoField/HOUR_OF_AMPM :cljs (. java.time.temporal.ChronoField -HOUR_OF_AMPM)))
(def year #? (:clj java.time.temporal.ChronoField/YEAR :cljs (. java.time.temporal.ChronoField -YEAR)))
(def micro-of-second #? (:clj java.time.temporal.ChronoField/MICRO_OF_SECOND :cljs (. java.time.temporal.ChronoField -MICRO_OF_SECOND)))
(def aligned-week-of-year #? (:clj java.time.temporal.ChronoField/ALIGNED_WEEK_OF_YEAR :cljs (. java.time.temporal.ChronoField -ALIGNED_WEEK_OF_YEAR)))
(def proleptic-month #? (:clj java.time.temporal.ChronoField/PROLEPTIC_MONTH :cljs (. java.time.temporal.ChronoField -PROLEPTIC_MONTH)))
(def day-of-month #? (:clj java.time.temporal.ChronoField/DAY_OF_MONTH :cljs (. java.time.temporal.ChronoField -DAY_OF_MONTH)))
(def second-of-minute #? (:clj java.time.temporal.ChronoField/SECOND_OF_MINUTE :cljs (. java.time.temporal.ChronoField -SECOND_OF_MINUTE)))
(def second-of-day #? (:clj java.time.temporal.ChronoField/SECOND_OF_DAY :cljs (. java.time.temporal.ChronoField -SECOND_OF_DAY)))
(def epoch-day #? (:clj java.time.temporal.ChronoField/EPOCH_DAY :cljs (. java.time.temporal.ChronoField -EPOCH_DAY)))
(def day-of-year #? (:clj java.time.temporal.ChronoField/DAY_OF_YEAR :cljs (. java.time.temporal.ChronoField -DAY_OF_YEAR)))
(def aligned-week-of-month #? (:clj java.time.temporal.ChronoField/ALIGNED_WEEK_OF_MONTH :cljs (. java.time.temporal.ChronoField -ALIGNED_WEEK_OF_MONTH)))
(def day-of-week #? (:clj java.time.temporal.ChronoField/DAY_OF_WEEK :cljs (. java.time.temporal.ChronoField -DAY_OF_WEEK)))
(def clock-hour-of-ampm #? (:clj java.time.temporal.ChronoField/CLOCK_HOUR_OF_AMPM :cljs (. java.time.temporal.ChronoField -CLOCK_HOUR_OF_AMPM)))
(def minute-of-day #? (:clj java.time.temporal.ChronoField/MINUTE_OF_DAY :cljs (. java.time.temporal.ChronoField -MINUTE_OF_DAY)))
(def aligned-day-of-week-in-year #? (:clj java.time.temporal.ChronoField/ALIGNED_DAY_OF_WEEK_IN_YEAR :cljs (. java.time.temporal.ChronoField -ALIGNED_DAY_OF_WEEK_IN_YEAR)))
(def minute-of-hour #? (:clj java.time.temporal.ChronoField/MINUTE_OF_HOUR :cljs (. java.time.temporal.ChronoField -MINUTE_OF_HOUR)))
(def hour-of-day #? (:clj java.time.temporal.ChronoField/HOUR_OF_DAY :cljs (. java.time.temporal.ChronoField -HOUR_OF_DAY)))
(def milli-of-day #? (:clj java.time.temporal.ChronoField/MILLI_OF_DAY :cljs (. java.time.temporal.ChronoField -MILLI_OF_DAY)))
(def micro-of-day #? (:clj java.time.temporal.ChronoField/MICRO_OF_DAY :cljs (. java.time.temporal.ChronoField -MICRO_OF_DAY)))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.ChronoField this13545] (jti/getter rangeUnit this13545)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.ChronoField this13546] (.range this13546)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.temporal.ChronoField values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoField [^java.lang.String java-lang-String13547] (. java.time.temporal.ChronoField valueOf java-lang-String13547)) (^java.lang.Enum [^java.lang.Class java-lang-Class13548 ^java.lang.String java-lang-String13549] (. java.time.temporal.ChronoField valueOf java-lang-Class13548 java-lang-String13549)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^java.time.temporal.TemporalAccessor [^java.time.temporal.ChronoField this13550 ^java.util.Map java-util-Map13551 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13552 ^java.time.format.ResolverStyle java-time-format-ResolverStyle13553] (.resolve this13550 java-util-Map13551 java-time-temporal-TemporalAccessor13552 java-time-format-ResolverStyle13553)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this13554] (.ordinal this13554)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this13555 ^long long13556] (.checkValidIntValue this13555 long13556)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.time.temporal.TemporalUnit [^java.time.temporal.ChronoField this13557] (jti/getter baseUnit this13557)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^java.time.temporal.ChronoField this13558] (.toString this13558)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this13559] (.isDateBased this13559)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Locale"]))} (^java.lang.String [^java.time.temporal.ChronoField this13560 ^java.util.Locale java-util-Locale13561] (jti/getter displayName this13560 java-util-Locale13561)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^java.time.temporal.ChronoField this13562] (.name this13562)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this13563 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13564] (.isSupportedBy this13563 java-time-temporal-TemporalAccessor13564)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^java.time.temporal.ValueRange [^java.time.temporal.ChronoField this13565 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13566] (.rangeRefinedBy this13565 java-time-temporal-TemporalAccessor13566)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Class [^java.time.temporal.ChronoField this13567] (jti/getter declaringClass this13567)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Integer [^java.time.temporal.ChronoField this13568] (.hashCode this13568)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoField this13569 ^java.time.temporal.Temporal java-time-temporal-Temporal13570 ^long long13571] (.adjustInto this13569 java-time-temporal-Temporal13570 long13571)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^long [^java.time.temporal.ChronoField this13572 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13573] (jti/getter from this13572 java-time-temporal-TemporalAccessor13573)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"] ["java.time.temporal.ChronoField" "java.lang.Enum"]))} (^java.lang.Integer [this13574 G__13575] #? (:cljs (.compareTo ^java.time.temporal.ChronoField this13574 G__13575) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13575)) (clojure.core/let [G__13575 ^"java.lang.Object" G__13575] (.compareTo ^java.time.temporal.ChronoField this13574 G__13575)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__13575)) (clojure.core/let [G__13575 ^"java.lang.Enum" G__13575] (.compareTo ^java.time.temporal.ChronoField this13574 G__13575)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this13576 ^java.lang.Object java-lang-Object13577] (.equals this13576 java-lang-Object13577)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Boolean [^java.time.temporal.ChronoField this13578] (.isTimeBased this13578)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^long [^java.time.temporal.ChronoField this13579 ^long long13580] (.checkValidValue this13579 long13580)))
