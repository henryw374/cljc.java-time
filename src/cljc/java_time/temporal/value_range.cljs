(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [ValueRange]]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this5879] (.minimum this5879)))
(clojure.core/defn of {:arglists (quote (["long" "long" "long"] ["long" "long" "long" "long"] ["long" "long"]))} (^js/JSJoda.ValueRange [^long long5880 ^long long5881 ^long long5882] (js-invoke java.time.temporal.ValueRange "of" long5880 long5881 long5882)) (^js/JSJoda.ValueRange [^long long5883 ^long long5884 ^long long5885 ^long long5886] (js-invoke java.time.temporal.ValueRange "of" long5883 long5884 long5885 long5886)) (^js/JSJoda.ValueRange [^long long5887 ^long long5888] (js-invoke java.time.temporal.ValueRange "of" long5887 long5888)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^boolean [^js/JSJoda.ValueRange this5889 ^long long5890] (.isValidValue this5889 long5890)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ValueRange this5891 ^long long5892 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5893] (.checkValidIntValue this5891 long5892 java-time-temporal-TemporalField5893)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^js/JSJoda.ValueRange this5894] (.toString this5894)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^boolean [^js/JSJoda.ValueRange this5895] (.isIntValue this5895)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this5896] (.smallestMaximum this5896)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^boolean [^js/JSJoda.ValueRange this5897 ^long long5898] (.isValidIntValue this5897 long5898)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^int [^js/JSJoda.ValueRange this5899] (.hashCode this5899)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^boolean [^js/JSJoda.ValueRange this5900] (.isFixed this5900)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this5901] (.maximum this5901)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^boolean [^js/JSJoda.ValueRange this5902 ^java.lang.Object java-lang-Object5903] (.equals this5902 java-lang-Object5903)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this5904] (.largestMinimum this5904)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ValueRange this5905 ^long long5906 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5907] (.checkValidValue this5905 long5906 java-time-temporal-TemporalField5907)))
