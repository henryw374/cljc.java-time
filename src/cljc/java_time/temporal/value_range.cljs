(ns cljc.java-time.temporal.value-range (:require [java.time.temporal :refer [ValueRange]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this51092] (.minimum this51092)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long"] ["long" "long" "long" "long"]))} (^java.time.temporal.ValueRange [^long long51093 ^long long51094] (. java.time.temporal.ValueRange of long51093 long51094)) (^java.time.temporal.ValueRange [^long long51095 ^long long51096 ^long long51097] (. java.time.temporal.ValueRange of long51095 long51096 long51097)) (^java.time.temporal.ValueRange [^long long51098 ^long long51099 ^long long51100 ^long long51101] (. java.time.temporal.ValueRange of long51098 long51099 long51100 long51101)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this51102 ^long long51103] (.isValidValue this51102 long51103)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this51104 ^long long51105 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51106] (.checkValidIntValue this51104 long51105 java-time-temporal-TemporalField51106)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^java.time.temporal.ValueRange this51107] (.toString this51107)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this51108] (.isIntValue this51108)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this51109] (.smallestMaximum this51109)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this51110 ^long long51111] (.isValidIntValue this51110 long51111)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this51112] (.hashCode this51112)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this51113] (.isFixed this51113)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this51114] (.maximum this51114)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this51115 ^java.lang.Object java-lang-Object51116] (.equals this51115 java-lang-Object51116)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this51117] (.largestMinimum this51117)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.ValueRange this51118 ^long long51119 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51120] (.checkValidValue this51118 long51119 java-time-temporal-TemporalField51120)))
