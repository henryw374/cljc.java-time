(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time.temporal :refer [ValueRange]]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this15424] (.minimum this15424)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long"] ["long" "long" "long" "long"]))} (^js/JSJoda.ValueRange [^long long15425 ^long long15426] (js-invoke java.time.temporal.ValueRange "of" long15425 long15426)) (^js/JSJoda.ValueRange [^long long15427 ^long long15428 ^long long15429] (js-invoke java.time.temporal.ValueRange "of" long15427 long15428 long15429)) (^js/JSJoda.ValueRange [^long long15430 ^long long15431 ^long long15432 ^long long15433] (js-invoke java.time.temporal.ValueRange "of" long15430 long15431 long15432 long15433)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^boolean [^js/JSJoda.ValueRange this15434 ^long long15435] (.isValidValue this15434 long15435)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ValueRange this15436 ^long long15437 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15438] (.checkValidIntValue this15436 long15437 java-time-temporal-TemporalField15438)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^js/JSJoda.ValueRange this15439] (.toString this15439)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^boolean [^js/JSJoda.ValueRange this15440] (.isIntValue this15440)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this15441] (.smallestMaximum this15441)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^boolean [^js/JSJoda.ValueRange this15442 ^long long15443] (.isValidIntValue this15442 long15443)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^int [^js/JSJoda.ValueRange this15444] (.hashCode this15444)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^boolean [^js/JSJoda.ValueRange this15445] (.isFixed this15445)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this15446] (.maximum this15446)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^boolean [^js/JSJoda.ValueRange this15447 ^java.lang.Object java-lang-Object15448] (.equals this15447 java-lang-Object15448)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this15449] (.largestMinimum this15449)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ValueRange this15450 ^long long15451 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15452] (.checkValidValue this15450 long15451 java-time-temporal-TemporalField15452)))
