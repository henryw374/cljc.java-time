(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [ValueRange]]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this8921] (.minimum this8921)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long"] ["long" "long" "long" "long"]))} (^js/JSJoda.ValueRange [^long long8922 ^long long8923] (js-invoke java.time.temporal.ValueRange "of" long8922 long8923)) (^js/JSJoda.ValueRange [^long long8924 ^long long8925 ^long long8926] (js-invoke java.time.temporal.ValueRange "of" long8924 long8925 long8926)) (^js/JSJoda.ValueRange [^long long8927 ^long long8928 ^long long8929 ^long long8930] (js-invoke java.time.temporal.ValueRange "of" long8927 long8928 long8929 long8930)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^boolean [^js/JSJoda.ValueRange this8931 ^long long8932] (.isValidValue this8931 long8932)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ValueRange this8933 ^long long8934 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8935] (.checkValidIntValue this8933 long8934 java-time-temporal-TemporalField8935)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^js/JSJoda.ValueRange this8936] (.toString this8936)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^boolean [^js/JSJoda.ValueRange this8937] (.isIntValue this8937)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this8938] (.smallestMaximum this8938)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^boolean [^js/JSJoda.ValueRange this8939 ^long long8940] (.isValidIntValue this8939 long8940)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^int [^js/JSJoda.ValueRange this8941] (.hashCode this8941)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^boolean [^js/JSJoda.ValueRange this8942] (.isFixed this8942)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this8943] (.maximum this8943)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^boolean [^js/JSJoda.ValueRange this8944 ^java.lang.Object java-lang-Object8945] (.equals this8944 java-lang-Object8945)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this8946] (.largestMinimum this8946)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ValueRange this8947 ^long long8948 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8949] (.checkValidValue this8947 long8948 java-time-temporal-TemporalField8949)))
