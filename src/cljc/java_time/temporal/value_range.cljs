(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [ValueRange]]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this61583] (.minimum this61583)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long" "long"] ["long" "long" "long"]))} (^js/JSJoda.ValueRange [^long long61584 ^long long61585] (js-invoke java.time.temporal.ValueRange "of" long61584 long61585)) (^js/JSJoda.ValueRange [^long long61586 ^long long61587 ^long long61588 ^long long61589] (js-invoke java.time.temporal.ValueRange "of" long61586 long61587 long61588 long61589)) (^js/JSJoda.ValueRange [^long long61590 ^long long61591 ^long long61592] (js-invoke java.time.temporal.ValueRange "of" long61590 long61591 long61592)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^boolean [^js/JSJoda.ValueRange this61593 ^long long61594] (.isValidValue this61593 long61594)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ValueRange this61595 ^long long61596 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61597] (.checkValidIntValue this61595 long61596 java-time-temporal-TemporalField61597)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^js/JSJoda.ValueRange this61598] (.toString this61598)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^boolean [^js/JSJoda.ValueRange this61599] (.isIntValue this61599)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this61600] (.smallestMaximum this61600)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^boolean [^js/JSJoda.ValueRange this61601 ^long long61602] (.isValidIntValue this61601 long61602)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^int [^js/JSJoda.ValueRange this61603] (.hashCode this61603)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^boolean [^js/JSJoda.ValueRange this61604] (.isFixed this61604)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this61605] (.maximum this61605)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^boolean [^js/JSJoda.ValueRange this61606 ^java.lang.Object java-lang-Object61607] (.equals this61606 java-lang-Object61607)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this61608] (.largestMinimum this61608)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ValueRange this61609 ^long long61610 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61611] (.checkValidValue this61609 long61610 java-time-temporal-TemporalField61611)))
