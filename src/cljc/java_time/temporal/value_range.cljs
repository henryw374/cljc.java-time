(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [ValueRange]]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this13100] (.minimum this13100)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long" "long"] ["long" "long" "long"]))} (^java.time.temporal.ValueRange [^long long13101 ^long long13102] (. java.time.temporal.ValueRange of long13101 long13102)) (^java.time.temporal.ValueRange [^long long13103 ^long long13104 ^long long13105 ^long long13106] (. java.time.temporal.ValueRange of long13103 long13104 long13105 long13106)) (^java.time.temporal.ValueRange [^long long13107 ^long long13108 ^long long13109] (. java.time.temporal.ValueRange of long13107 long13108 long13109)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13110 ^long long13111] (.isValidValue this13110 long13111)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this13112 ^long long13113 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13114] (.checkValidIntValue this13112 long13113 java-time-temporal-TemporalField13114)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^java.time.temporal.ValueRange this13115] (.toString this13115)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13116] (.isIntValue this13116)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this13117] (.smallestMaximum this13117)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13118 ^long long13119] (.isValidIntValue this13118 long13119)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Integer [^java.time.temporal.ValueRange this13120] (.hashCode this13120)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13121] (.isFixed this13121)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this13122] (.maximum this13122)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ValueRange this13123 ^java.lang.Object java-lang-Object13124] (.equals this13123 java-lang-Object13124)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^java.time.temporal.ValueRange this13125] (.largestMinimum this13125)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.ValueRange this13126 ^long long13127 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13128] (.checkValidValue this13126 long13127 java-time-temporal-TemporalField13128)))
