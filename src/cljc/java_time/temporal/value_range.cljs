(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [ValueRange]]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this5878] (.minimum this5878)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long" "long"] ["long" "long" "long"]))} (^js/JSJoda.ValueRange [^long long5879 ^long long5880] (js-invoke java.time.temporal.ValueRange "of" long5879 long5880)) (^js/JSJoda.ValueRange [^long long5881 ^long long5882 ^long long5883 ^long long5884] (js-invoke java.time.temporal.ValueRange "of" long5881 long5882 long5883 long5884)) (^js/JSJoda.ValueRange [^long long5885 ^long long5886 ^long long5887] (js-invoke java.time.temporal.ValueRange "of" long5885 long5886 long5887)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^boolean [^js/JSJoda.ValueRange this5888 ^long long5889] (.isValidValue this5888 long5889)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ValueRange this5890 ^long long5891 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5892] (.checkValidIntValue this5890 long5891 java-time-temporal-TemporalField5892)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^js/JSJoda.ValueRange this5893] (.toString this5893)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^boolean [^js/JSJoda.ValueRange this5894] (.isIntValue this5894)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this5895] (.smallestMaximum this5895)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^boolean [^js/JSJoda.ValueRange this5896 ^long long5897] (.isValidIntValue this5896 long5897)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^int [^js/JSJoda.ValueRange this5898] (.hashCode this5898)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^boolean [^js/JSJoda.ValueRange this5899] (.isFixed this5899)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this5900] (.maximum this5900)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^boolean [^js/JSJoda.ValueRange this5901 ^java.lang.Object java-lang-Object5902] (.equals this5901 java-lang-Object5902)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this5903] (.largestMinimum this5903)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ValueRange this5904 ^long long5905 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5906] (.checkValidValue this5904 long5905 java-time-temporal-TemporalField5906)))
