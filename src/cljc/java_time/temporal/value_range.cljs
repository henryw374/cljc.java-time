(ns cljc.java-time.temporal.value-range (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [ValueRange]]))
(clojure.core/defn get-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this8867] (.minimum this8867)))
(clojure.core/defn of {:arglists (quote (["long" "long"] ["long" "long" "long" "long"] ["long" "long" "long"]))} (^js/JSJoda.ValueRange [^long long8868 ^long long8869] (js-invoke java.time.temporal.ValueRange "of" long8868 long8869)) (^js/JSJoda.ValueRange [^long long8870 ^long long8871 ^long long8872 ^long long8873] (js-invoke java.time.temporal.ValueRange "of" long8870 long8871 long8872 long8873)) (^js/JSJoda.ValueRange [^long long8874 ^long long8875 ^long long8876] (js-invoke java.time.temporal.ValueRange "of" long8874 long8875 long8876)))
(clojure.core/defn is-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^boolean [^js/JSJoda.ValueRange this8877 ^long long8878] (.isValidValue this8877 long8878)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ValueRange this8879 ^long long8880 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8881] (.checkValidIntValue this8879 long8880 java-time-temporal-TemporalField8881)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ValueRange"]))} (^java.lang.String [^js/JSJoda.ValueRange this8882] (.toString this8882)))
(clojure.core/defn is-int-value {:arglists (quote (["java.time.temporal.ValueRange"]))} (^boolean [^js/JSJoda.ValueRange this8883] (.isIntValue this8883)))
(clojure.core/defn get-smallest-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this8884] (.smallestMaximum this8884)))
(clojure.core/defn is-valid-int-value {:arglists (quote (["java.time.temporal.ValueRange" "long"]))} (^boolean [^js/JSJoda.ValueRange this8885 ^long long8886] (.isValidIntValue this8885 long8886)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ValueRange"]))} (^int [^js/JSJoda.ValueRange this8887] (.hashCode this8887)))
(clojure.core/defn is-fixed {:arglists (quote (["java.time.temporal.ValueRange"]))} (^boolean [^js/JSJoda.ValueRange this8888] (.isFixed this8888)))
(clojure.core/defn get-maximum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this8889] (.maximum this8889)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ValueRange" "java.lang.Object"]))} (^boolean [^js/JSJoda.ValueRange this8890 ^java.lang.Object java-lang-Object8891] (.equals this8890 java-lang-Object8891)))
(clojure.core/defn get-largest-minimum {:arglists (quote (["java.time.temporal.ValueRange"]))} (^long [^js/JSJoda.ValueRange this8892] (.largestMinimum this8892)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ValueRange" "long" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ValueRange this8893 ^long long8894 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8895] (.checkValidValue this8893 long8894 java-time-temporal-TemporalField8895)))
