(ns cljc.java-time.temporal.chrono-unit (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.temporal :refer [ChronoUnit]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.temporal ChronoUnit])))
(def millis #? (:clj java.time.temporal.ChronoUnit/MILLIS :cljs (. java.time.temporal.ChronoUnit -MILLIS)))
(def minutes #? (:clj java.time.temporal.ChronoUnit/MINUTES :cljs (. java.time.temporal.ChronoUnit -MINUTES)))
(def micros #? (:clj java.time.temporal.ChronoUnit/MICROS :cljs (. java.time.temporal.ChronoUnit -MICROS)))
(def half-days #? (:clj java.time.temporal.ChronoUnit/HALF_DAYS :cljs (. java.time.temporal.ChronoUnit -HALF_DAYS)))
(def millennia #? (:clj java.time.temporal.ChronoUnit/MILLENNIA :cljs (. java.time.temporal.ChronoUnit -MILLENNIA)))
(def years #? (:clj java.time.temporal.ChronoUnit/YEARS :cljs (. java.time.temporal.ChronoUnit -YEARS)))
(def decades #? (:clj java.time.temporal.ChronoUnit/DECADES :cljs (. java.time.temporal.ChronoUnit -DECADES)))
(def days #? (:clj java.time.temporal.ChronoUnit/DAYS :cljs (. java.time.temporal.ChronoUnit -DAYS)))
(def centuries #? (:clj java.time.temporal.ChronoUnit/CENTURIES :cljs (. java.time.temporal.ChronoUnit -CENTURIES)))
(def weeks #? (:clj java.time.temporal.ChronoUnit/WEEKS :cljs (. java.time.temporal.ChronoUnit -WEEKS)))
(def hours #? (:clj java.time.temporal.ChronoUnit/HOURS :cljs (. java.time.temporal.ChronoUnit -HOURS)))
(def eras #? (:clj java.time.temporal.ChronoUnit/ERAS :cljs (. java.time.temporal.ChronoUnit -ERAS)))
(def seconds #? (:clj java.time.temporal.ChronoUnit/SECONDS :cljs (. java.time.temporal.ChronoUnit -SECONDS)))
(def months #? (:clj java.time.temporal.ChronoUnit/MONTHS :cljs (. java.time.temporal.ChronoUnit -MONTHS)))
(def nanos #? (:clj java.time.temporal.ChronoUnit/NANOS :cljs (. java.time.temporal.ChronoUnit -NANOS)))
(def forever #? (:clj java.time.temporal.ChronoUnit/FOREVER :cljs (. java.time.temporal.ChronoUnit -FOREVER)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.temporal.ChronoUnit values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoUnit [^java.lang.String java-lang-String13521] (. java.time.temporal.ChronoUnit valueOf java-lang-String13521)) (^java.lang.Enum [^java.lang.Class java-lang-Class13522 ^java.lang.String java-lang-String13523] (. java.time.temporal.ChronoUnit valueOf java-lang-Class13522 java-lang-String13523)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this13524] (.ordinal this13524)))
(clojure.core/defn is-duration-estimated {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this13525] (.isDurationEstimated this13525)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this13526] (.toString this13526)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this13527] (.isDateBased this13527)))
(clojure.core/defn add-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoUnit this13528 ^java.time.temporal.Temporal java-time-temporal-Temporal13529 ^long long13530] (.addTo this13528 java-time-temporal-Temporal13529 long13530)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this13531] (.name this13531)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this13532 ^java.time.temporal.Temporal java-time-temporal-Temporal13533] (.isSupportedBy this13532 java-time-temporal-Temporal13533)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Class [^java.time.temporal.ChronoUnit this13534] (jti/getter declaringClass this13534)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^long [^java.time.temporal.ChronoUnit this13535 ^java.time.temporal.Temporal java-time-temporal-Temporal13536 ^java.time.temporal.Temporal java-time-temporal-Temporal13537] (.between this13535 java-time-temporal-Temporal13536 java-time-temporal-Temporal13537)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this13538] (.hashCode this13538)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"] ["java.time.temporal.ChronoUnit" "java.lang.Enum"]))} (^java.lang.Integer [this13539 G__13540] #? (:cljs (.compareTo ^java.time.temporal.ChronoUnit this13539 G__13540) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13540)) (clojure.core/let [G__13540 ^"java.lang.Object" G__13540] (.compareTo ^java.time.temporal.ChronoUnit this13539 G__13540)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__13540)) (clojure.core/let [G__13540 ^"java.lang.Enum" G__13540] (.compareTo ^java.time.temporal.ChronoUnit this13539 G__13540)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-duration {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.time.Duration [^java.time.temporal.ChronoUnit this13541] (jti/getter duration this13541)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this13542 ^java.lang.Object java-lang-Object13543] (.equals this13542 java-lang-Object13543)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this13544] (.isTimeBased this13544)))
