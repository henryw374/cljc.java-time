(ns cljc.java-time.temporal.chrono-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [ChronoField]]))
(def milli-of-second (goog.object/get java.time.temporal.ChronoField "MILLI_OF_SECOND"))
(def year-of-era (goog.object/get java.time.temporal.ChronoField "YEAR_OF_ERA"))
(def clock-hour-of-day (goog.object/get java.time.temporal.ChronoField "CLOCK_HOUR_OF_DAY"))
(def era (goog.object/get java.time.temporal.ChronoField "ERA"))
(def instant-seconds (goog.object/get java.time.temporal.ChronoField "INSTANT_SECONDS"))
(def ampm-of-day (goog.object/get java.time.temporal.ChronoField "AMPM_OF_DAY"))
(def offset-seconds (goog.object/get java.time.temporal.ChronoField "OFFSET_SECONDS"))
(def nano-of-second (goog.object/get java.time.temporal.ChronoField "NANO_OF_SECOND"))
(def nano-of-day (goog.object/get java.time.temporal.ChronoField "NANO_OF_DAY"))
(def aligned-day-of-week-in-month (goog.object/get java.time.temporal.ChronoField "ALIGNED_DAY_OF_WEEK_IN_MONTH"))
(def month-of-year (goog.object/get java.time.temporal.ChronoField "MONTH_OF_YEAR"))
(def hour-of-ampm (goog.object/get java.time.temporal.ChronoField "HOUR_OF_AMPM"))
(def year (goog.object/get java.time.temporal.ChronoField "YEAR"))
(def micro-of-second (goog.object/get java.time.temporal.ChronoField "MICRO_OF_SECOND"))
(def aligned-week-of-year (goog.object/get java.time.temporal.ChronoField "ALIGNED_WEEK_OF_YEAR"))
(def proleptic-month (goog.object/get java.time.temporal.ChronoField "PROLEPTIC_MONTH"))
(def day-of-month (goog.object/get java.time.temporal.ChronoField "DAY_OF_MONTH"))
(def second-of-minute (goog.object/get java.time.temporal.ChronoField "SECOND_OF_MINUTE"))
(def second-of-day (goog.object/get java.time.temporal.ChronoField "SECOND_OF_DAY"))
(def epoch-day (goog.object/get java.time.temporal.ChronoField "EPOCH_DAY"))
(def day-of-year (goog.object/get java.time.temporal.ChronoField "DAY_OF_YEAR"))
(def aligned-week-of-month (goog.object/get java.time.temporal.ChronoField "ALIGNED_WEEK_OF_MONTH"))
(def day-of-week (goog.object/get java.time.temporal.ChronoField "DAY_OF_WEEK"))
(def clock-hour-of-ampm (goog.object/get java.time.temporal.ChronoField "CLOCK_HOUR_OF_AMPM"))
(def minute-of-day (goog.object/get java.time.temporal.ChronoField "MINUTE_OF_DAY"))
(def aligned-day-of-week-in-year (goog.object/get java.time.temporal.ChronoField "ALIGNED_DAY_OF_WEEK_IN_YEAR"))
(def minute-of-hour (goog.object/get java.time.temporal.ChronoField "MINUTE_OF_HOUR"))
(def hour-of-day (goog.object/get java.time.temporal.ChronoField "HOUR_OF_DAY"))
(def milli-of-day (goog.object/get java.time.temporal.ChronoField "MILLI_OF_DAY"))
(def micro-of-day (goog.object/get java.time.temporal.ChronoField "MICRO_OF_DAY"))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.ChronoField this8802] (.rangeUnit this8802)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.ChronoField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ChronoField this8803] (.range this8803)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.temporal.ChronoField "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.ChronoField [^java.lang.String java-lang-String8804] (js-invoke java.time.temporal.ChronoField "valueOf" java-lang-String8804)) (^java.lang.Enum [^java.lang.Class java-lang-Class8805 ^java.lang.String java-lang-String8806] (js-invoke java.time.temporal.ChronoField "valueOf" java-lang-Class8805 java-lang-String8806)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.ChronoField this8807 ^java.util.Map java-util-Map8808 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8809 ^js/JSJoda.ResolverStyle java-time-format-ResolverStyle8810] (.resolve this8807 java-util-Map8808 java-time-temporal-TemporalAccessor8809 java-time-format-ResolverStyle8810)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoField"]))} (^int [^js/JSJoda.ChronoField this8811] (.ordinal this8811)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^int [^js/JSJoda.ChronoField this8812 ^long long8813] (.checkValidIntValue this8812 long8813)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.ChronoField this8814] (.baseUnit this8814)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^js/JSJoda.ChronoField this8815] (.toString this8815)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^boolean [^js/JSJoda.ChronoField this8816] (.isDateBased this8816)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.ChronoField this8817 ^java.util.Locale java-util-Locale8818] (.displayName this8817 java-util-Locale8818)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^js/JSJoda.ChronoField this8819] (.name this8819)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^boolean [^js/JSJoda.ChronoField this8820 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8821] (.isSupportedBy this8820 java-time-temporal-TemporalAccessor8821)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ChronoField this8822 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8823] (.rangeRefinedBy this8822 java-time-temporal-TemporalAccessor8823)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Class [^js/JSJoda.ChronoField this8824] (.declaringClass this8824)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoField"]))} (^int [^js/JSJoda.ChronoField this8825] (.hashCode this8825)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.Temporal" "long"]))} (^js/JSJoda.Temporal [^js/JSJoda.ChronoField this8826 ^js/JSJoda.Temporal java-time-temporal-Temporal8827 ^long long8828] (.adjustInto this8826 java-time-temporal-Temporal8827 long8828)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^long [^js/JSJoda.ChronoField this8829 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8830] (.from this8829 java-time-temporal-TemporalAccessor8830)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"] ["java.time.temporal.ChronoField" "java.lang.Enum"]))} (^int [this8831 G__8832] (.compareTo ^js/JSJoda.ChronoField this8831 G__8832)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"]))} (^boolean [^js/JSJoda.ChronoField this8833 ^java.lang.Object java-lang-Object8834] (.equals this8833 java-lang-Object8834)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^boolean [^js/JSJoda.ChronoField this8835] (.isTimeBased this8835)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^long [^js/JSJoda.ChronoField this8836 ^long long8837] (.checkValidValue this8836 long8837)))
