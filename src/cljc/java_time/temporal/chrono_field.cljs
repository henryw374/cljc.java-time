(ns cljc.java-time.temporal.chrono-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [ChronoField]]))
(def milli-of-second (goog.object/get java.time.temporal.ChronoField "MILLI_OF_SECOND"))
(def year-of-era (goog.object/get java.time.temporal.ChronoField "YEAR_OF_ERA"))
(def clock-hour-of-day (goog.object/get java.time.temporal.ChronoField "CLOCK_HOUR_OF_DAY"))
(def era (goog.object/get java.time.temporal.ChronoField "ERA"))
(def instant-seconds (goog.object/get java.time.temporal.ChronoField "INSTANT_SECONDS"))
(def ampm-of-day (goog.object/get java.time.temporal.ChronoField "AMPM_OF_DAY"))
(def offset-seconds (goog.object/get java.time.temporal.ChronoField "OFFSET_SECONDS"))
(def nano-of-second (goog.object/get java.time.temporal.ChronoField "NANO_OF_SECOND"))
(def nano-of-day (goog.object/get java.time.temporal.ChronoField "NANO_OF_DAY"))
(def aligned-day-of-week-in-month (goog.object/get java.time.temporal.ChronoField "ALIGNED_DAY_OF_WEEK_IN_MONTH"))
(def month-of-year (goog.object/get java.time.temporal.ChronoField "MONTH_OF_YEAR"))
(def hour-of-ampm (goog.object/get java.time.temporal.ChronoField "HOUR_OF_AMPM"))
(def year (goog.object/get java.time.temporal.ChronoField "YEAR"))
(def micro-of-second (goog.object/get java.time.temporal.ChronoField "MICRO_OF_SECOND"))
(def aligned-week-of-year (goog.object/get java.time.temporal.ChronoField "ALIGNED_WEEK_OF_YEAR"))
(def proleptic-month (goog.object/get java.time.temporal.ChronoField "PROLEPTIC_MONTH"))
(def day-of-month (goog.object/get java.time.temporal.ChronoField "DAY_OF_MONTH"))
(def second-of-minute (goog.object/get java.time.temporal.ChronoField "SECOND_OF_MINUTE"))
(def second-of-day (goog.object/get java.time.temporal.ChronoField "SECOND_OF_DAY"))
(def epoch-day (goog.object/get java.time.temporal.ChronoField "EPOCH_DAY"))
(def day-of-year (goog.object/get java.time.temporal.ChronoField "DAY_OF_YEAR"))
(def aligned-week-of-month (goog.object/get java.time.temporal.ChronoField "ALIGNED_WEEK_OF_MONTH"))
(def day-of-week (goog.object/get java.time.temporal.ChronoField "DAY_OF_WEEK"))
(def clock-hour-of-ampm (goog.object/get java.time.temporal.ChronoField "CLOCK_HOUR_OF_AMPM"))
(def minute-of-day (goog.object/get java.time.temporal.ChronoField "MINUTE_OF_DAY"))
(def aligned-day-of-week-in-year (goog.object/get java.time.temporal.ChronoField "ALIGNED_DAY_OF_WEEK_IN_YEAR"))
(def minute-of-hour (goog.object/get java.time.temporal.ChronoField "MINUTE_OF_HOUR"))
(def hour-of-day (goog.object/get java.time.temporal.ChronoField "HOUR_OF_DAY"))
(def milli-of-day (goog.object/get java.time.temporal.ChronoField "MILLI_OF_DAY"))
(def micro-of-day (goog.object/get java.time.temporal.ChronoField "MICRO_OF_DAY"))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.ChronoField this5760] (.rangeUnit this5760)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.ChronoField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ChronoField this5761] (.range this5761)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.temporal.ChronoField "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.ChronoField [^java.lang.String java-lang-String5762] (js-invoke java.time.temporal.ChronoField "valueOf" java-lang-String5762)) (^java.lang.Enum [^java.lang.Class java-lang-Class5763 ^java.lang.String java-lang-String5764] (js-invoke java.time.temporal.ChronoField "valueOf" java-lang-Class5763 java-lang-String5764)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.ChronoField this5765 ^java.util.Map java-util-Map5766 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5767 ^js/JSJoda.ResolverStyle java-time-format-ResolverStyle5768] (.resolve this5765 java-util-Map5766 java-time-temporal-TemporalAccessor5767 java-time-format-ResolverStyle5768)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoField"]))} (^int [^js/JSJoda.ChronoField this5769] (.ordinal this5769)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^int [^js/JSJoda.ChronoField this5770 ^long long5771] (.checkValidIntValue this5770 long5771)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.ChronoField this5772] (.baseUnit this5772)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^js/JSJoda.ChronoField this5773] (.toString this5773)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^boolean [^js/JSJoda.ChronoField this5774] (.isDateBased this5774)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.ChronoField this5775 ^java.util.Locale java-util-Locale5776] (.displayName this5775 java-util-Locale5776)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^js/JSJoda.ChronoField this5777] (.name this5777)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^boolean [^js/JSJoda.ChronoField this5778 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5779] (.isSupportedBy this5778 java-time-temporal-TemporalAccessor5779)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ChronoField this5780 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5781] (.rangeRefinedBy this5780 java-time-temporal-TemporalAccessor5781)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Class [^js/JSJoda.ChronoField this5782] (.declaringClass this5782)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoField"]))} (^int [^js/JSJoda.ChronoField this5783] (.hashCode this5783)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.Temporal" "long"]))} (^js/JSJoda.Temporal [^js/JSJoda.ChronoField this5784 ^js/JSJoda.Temporal java-time-temporal-Temporal5785 ^long long5786] (.adjustInto this5784 java-time-temporal-Temporal5785 long5786)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^long [^js/JSJoda.ChronoField this5787 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5788] (.from this5787 java-time-temporal-TemporalAccessor5788)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Enum"]))} (^int [^js/JSJoda.ChronoField this5789 ^java.lang.Enum java-lang-Enum5790] (.compareTo this5789 java-lang-Enum5790)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"]))} (^boolean [^js/JSJoda.ChronoField this5791 ^java.lang.Object java-lang-Object5792] (.equals this5791 java-lang-Object5792)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^boolean [^js/JSJoda.ChronoField this5793] (.isTimeBased this5793)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^long [^js/JSJoda.ChronoField this5794 ^long long5795] (.checkValidValue this5794 long5795)))
