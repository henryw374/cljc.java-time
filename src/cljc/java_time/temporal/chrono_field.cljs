(ns cljc.java-time.temporal.chrono-field (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [ChronoField]]))
(def milli-of-second (goog.object/get java.time.temporal.ChronoField "MILLI_OF_SECOND"))
(def year-of-era (goog.object/get java.time.temporal.ChronoField "YEAR_OF_ERA"))
(def clock-hour-of-day (goog.object/get java.time.temporal.ChronoField "CLOCK_HOUR_OF_DAY"))
(def era (goog.object/get java.time.temporal.ChronoField "ERA"))
(def instant-seconds (goog.object/get java.time.temporal.ChronoField "INSTANT_SECONDS"))
(def ampm-of-day (goog.object/get java.time.temporal.ChronoField "AMPM_OF_DAY"))
(def offset-seconds (goog.object/get java.time.temporal.ChronoField "OFFSET_SECONDS"))
(def nano-of-second (goog.object/get java.time.temporal.ChronoField "NANO_OF_SECOND"))
(def nano-of-day (goog.object/get java.time.temporal.ChronoField "NANO_OF_DAY"))
(def aligned-day-of-week-in-month (goog.object/get java.time.temporal.ChronoField "ALIGNED_DAY_OF_WEEK_IN_MONTH"))
(def month-of-year (goog.object/get java.time.temporal.ChronoField "MONTH_OF_YEAR"))
(def hour-of-ampm (goog.object/get java.time.temporal.ChronoField "HOUR_OF_AMPM"))
(def year (goog.object/get java.time.temporal.ChronoField "YEAR"))
(def micro-of-second (goog.object/get java.time.temporal.ChronoField "MICRO_OF_SECOND"))
(def aligned-week-of-year (goog.object/get java.time.temporal.ChronoField "ALIGNED_WEEK_OF_YEAR"))
(def proleptic-month (goog.object/get java.time.temporal.ChronoField "PROLEPTIC_MONTH"))
(def day-of-month (goog.object/get java.time.temporal.ChronoField "DAY_OF_MONTH"))
(def second-of-minute (goog.object/get java.time.temporal.ChronoField "SECOND_OF_MINUTE"))
(def second-of-day (goog.object/get java.time.temporal.ChronoField "SECOND_OF_DAY"))
(def epoch-day (goog.object/get java.time.temporal.ChronoField "EPOCH_DAY"))
(def day-of-year (goog.object/get java.time.temporal.ChronoField "DAY_OF_YEAR"))
(def aligned-week-of-month (goog.object/get java.time.temporal.ChronoField "ALIGNED_WEEK_OF_MONTH"))
(def day-of-week (goog.object/get java.time.temporal.ChronoField "DAY_OF_WEEK"))
(def clock-hour-of-ampm (goog.object/get java.time.temporal.ChronoField "CLOCK_HOUR_OF_AMPM"))
(def minute-of-day (goog.object/get java.time.temporal.ChronoField "MINUTE_OF_DAY"))
(def aligned-day-of-week-in-year (goog.object/get java.time.temporal.ChronoField "ALIGNED_DAY_OF_WEEK_IN_YEAR"))
(def minute-of-hour (goog.object/get java.time.temporal.ChronoField "MINUTE_OF_HOUR"))
(def hour-of-day (goog.object/get java.time.temporal.ChronoField "HOUR_OF_DAY"))
(def milli-of-day (goog.object/get java.time.temporal.ChronoField "MILLI_OF_DAY"))
(def micro-of-day (goog.object/get java.time.temporal.ChronoField "MICRO_OF_DAY"))
(clojure.core/defn get-range-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.ChronoField this61464] (.rangeUnit this61464)))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.ChronoField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ChronoField this61465] (.range this61465)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.temporal.ChronoField "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.ChronoField [^java.lang.String java-lang-String61466] (js-invoke java.time.temporal.ChronoField "valueOf" java-lang-String61466)) (^java.lang.Enum [^java.lang.Class java-lang-Class61467 ^java.lang.String java-lang-String61468] (js-invoke java.time.temporal.ChronoField "valueOf" java-lang-Class61467 java-lang-String61468)))
(clojure.core/defn resolve {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Map" "java.time.temporal.TemporalAccessor" "java.time.format.ResolverStyle"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.ChronoField this61469 ^java.util.Map java-util-Map61470 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor61471 ^js/JSJoda.ResolverStyle java-time-format-ResolverStyle61472] (.resolve this61469 java-util-Map61470 java-time-temporal-TemporalAccessor61471 java-time-format-ResolverStyle61472)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoField"]))} (^int [^js/JSJoda.ChronoField this61473] (.ordinal this61473)))
(clojure.core/defn check-valid-int-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^int [^js/JSJoda.ChronoField this61474 ^long long61475] (.checkValidIntValue this61474 long61475)))
(clojure.core/defn get-base-unit {:arglists (quote (["java.time.temporal.ChronoField"]))} (^js/JSJoda.TemporalUnit [^js/JSJoda.ChronoField this61476] (.baseUnit this61476)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^js/JSJoda.ChronoField this61477] (.toString this61477)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^boolean [^js/JSJoda.ChronoField this61478] (.isDateBased this61478)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.temporal.ChronoField" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.ChronoField this61479 ^java.util.Locale java-util-Locale61480] (.displayName this61479 java-util-Locale61480)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.String [^js/JSJoda.ChronoField this61481] (.name this61481)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^boolean [^js/JSJoda.ChronoField this61482 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor61483] (.isSupportedBy this61482 java-time-temporal-TemporalAccessor61483)))
(clojure.core/defn range-refined-by {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ChronoField this61484 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor61485] (.rangeRefinedBy this61484 java-time-temporal-TemporalAccessor61485)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoField"]))} (^java.lang.Class [^js/JSJoda.ChronoField this61486] (.declaringClass this61486)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoField"]))} (^int [^js/JSJoda.ChronoField this61487] (.hashCode this61487)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.Temporal" "long"]))} (^js/JSJoda.Temporal [^js/JSJoda.ChronoField this61488 ^js/JSJoda.Temporal java-time-temporal-Temporal61489 ^long long61490] (.adjustInto this61488 java-time-temporal-Temporal61489 long61490)))
(clojure.core/defn get-from {:arglists (quote (["java.time.temporal.ChronoField" "java.time.temporal.TemporalAccessor"]))} (^long [^js/JSJoda.ChronoField this61491 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor61492] (.from this61491 java-time-temporal-TemporalAccessor61492)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"] ["java.time.temporal.ChronoField" "java.lang.Enum"]))} (^int [this61493 G__61494] (.compareTo ^js/JSJoda.ChronoField this61493 G__61494)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoField" "java.lang.Object"]))} (^boolean [^js/JSJoda.ChronoField this61495 ^java.lang.Object java-lang-Object61496] (.equals this61495 java-lang-Object61496)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoField"]))} (^boolean [^js/JSJoda.ChronoField this61497] (.isTimeBased this61497)))
(clojure.core/defn check-valid-value {:arglists (quote (["java.time.temporal.ChronoField" "long"]))} (^long [^js/JSJoda.ChronoField this61498 ^long long61499] (.checkValidValue this61498 long61499)))
