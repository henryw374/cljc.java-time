(ns cljc.java-time.temporal.week-fields (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time.temporal :refer [WeekFields]]))
(def sunday-start (goog.object/get java.time.temporal.WeekFields "SUNDAY_START"))
(def iso (goog.object/get java.time.temporal.WeekFields "ISO"))
(def week-based-years (goog.object/get java.time.temporal.WeekFields "WEEK_BASED_YEARS"))
(clojure.core/defn day-of-week {:arglists (quote (["java.time.temporal.WeekFields"]))} (^js/JSJoda.TemporalField [^js/JSJoda.WeekFields this15706] (.dayOfWeek this15706)))
(clojure.core/defn of {:arglists (quote (["java.util.Locale"] ["java.time.DayOfWeek" "int"]))} (^js/JSJoda.WeekFields [^java.util.Locale java-util-Locale15707] (js-invoke java.time.temporal.WeekFields "of" java-util-Locale15707)) (^js/JSJoda.WeekFields [^js/JSJoda.DayOfWeek java-time-DayOfWeek15708 ^int int15709] (js-invoke java.time.temporal.WeekFields "of" java-time-DayOfWeek15708 int15709)))
(clojure.core/defn get-first-day-of-week {:arglists (quote (["java.time.temporal.WeekFields"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.WeekFields this15710] (.firstDayOfWeek this15710)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.WeekFields"]))} (^java.lang.String [^js/JSJoda.WeekFields this15711] (.toString this15711)))
(clojure.core/defn week-based-year {:arglists (quote (["java.time.temporal.WeekFields"]))} (^js/JSJoda.TemporalField [^js/JSJoda.WeekFields this15712] (.weekBasedYear this15712)))
(clojure.core/defn week-of-year {:arglists (quote (["java.time.temporal.WeekFields"]))} (^js/JSJoda.TemporalField [^js/JSJoda.WeekFields this15713] (.weekOfYear this15713)))
(clojure.core/defn week-of-week-based-year {:arglists (quote (["java.time.temporal.WeekFields"]))} (^js/JSJoda.TemporalField [^js/JSJoda.WeekFields this15714] (.weekOfWeekBasedYear this15714)))
(clojure.core/defn week-of-month {:arglists (quote (["java.time.temporal.WeekFields"]))} (^js/JSJoda.TemporalField [^js/JSJoda.WeekFields this15715] (.weekOfMonth this15715)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.WeekFields"]))} (^int [^js/JSJoda.WeekFields this15716] (.hashCode this15716)))
(clojure.core/defn get-minimal-days-in-first-week {:arglists (quote (["java.time.temporal.WeekFields"]))} (^int [^js/JSJoda.WeekFields this15717] (.minimalDaysInFirstWeek this15717)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.WeekFields" "java.lang.Object"]))} (^boolean [^js/JSJoda.WeekFields this15718 ^java.lang.Object java-lang-Object15719] (.equals this15718 java-lang-Object15719)))
