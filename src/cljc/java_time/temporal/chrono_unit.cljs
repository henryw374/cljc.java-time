(ns cljc.java-time.temporal.chrono-unit (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [ChronoUnit]]))
(def millis (. java.time.temporal.ChronoUnit -MILLIS))
(def minutes (. java.time.temporal.ChronoUnit -MINUTES))
(def micros (. java.time.temporal.ChronoUnit -MICROS))
(def half-days (. java.time.temporal.ChronoUnit -HALF_DAYS))
(def millennia (. java.time.temporal.ChronoUnit -MILLENNIA))
(def years (. java.time.temporal.ChronoUnit -YEARS))
(def decades (. java.time.temporal.ChronoUnit -DECADES))
(def days (. java.time.temporal.ChronoUnit -DAYS))
(def centuries (. java.time.temporal.ChronoUnit -CENTURIES))
(def weeks (. java.time.temporal.ChronoUnit -WEEKS))
(def hours (. java.time.temporal.ChronoUnit -HOURS))
(def eras (. java.time.temporal.ChronoUnit -ERAS))
(def seconds (. java.time.temporal.ChronoUnit -SECONDS))
(def months (. java.time.temporal.ChronoUnit -MONTHS))
(def nanos (. java.time.temporal.ChronoUnit -NANOS))
(def forever (. java.time.temporal.ChronoUnit -FOREVER))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.temporal.ChronoUnit values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.temporal.ChronoUnit [^java.lang.String java-lang-String12921] (. java.time.temporal.ChronoUnit valueOf java-lang-String12921)) (^java.lang.Enum [^java.lang.Class java-lang-Class12922 ^java.lang.String java-lang-String12923] (. java.time.temporal.ChronoUnit valueOf java-lang-Class12922 java-lang-String12923)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this12924] (.ordinal this12924)))
(clojure.core/defn is-duration-estimated {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this12925] (.isDurationEstimated this12925)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this12926] (.toString this12926)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this12927] (.isDateBased this12927)))
(clojure.core/defn add-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.ChronoUnit this12928 ^java.time.temporal.Temporal java-time-temporal-Temporal12929 ^long long12930] (.addTo this12928 java-time-temporal-Temporal12929 long12930)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^java.time.temporal.ChronoUnit this12931] (.name this12931)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this12932 ^java.time.temporal.Temporal java-time-temporal-Temporal12933] (.isSupportedBy this12932 java-time-temporal-Temporal12933)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Class [^java.time.temporal.ChronoUnit this12934] (.declaringClass this12934)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^long [^java.time.temporal.ChronoUnit this12935 ^java.time.temporal.Temporal java-time-temporal-Temporal12936 ^java.time.temporal.Temporal java-time-temporal-Temporal12937] (.between this12935 java-time-temporal-Temporal12936 java-time-temporal-Temporal12937)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Integer [^java.time.temporal.ChronoUnit this12938] (.hashCode this12938)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"] ["java.time.temporal.ChronoUnit" "java.lang.Enum"]))} (^java.lang.Integer [this12939 G__12940] (.compareTo ^java.time.temporal.ChronoUnit this12939 G__12940)))
(clojure.core/defn get-duration {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.time.Duration [^java.time.temporal.ChronoUnit this12941] (.duration this12941)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this12942 ^java.lang.Object java-lang-Object12943] (.equals this12942 java-lang-Object12943)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Boolean [^java.time.temporal.ChronoUnit this12944] (.isTimeBased this12944)))
