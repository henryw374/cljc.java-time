(ns cljc.java-time.temporal.chrono-unit (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.temporal :refer [ChronoUnit]]))
(def millis (goog.object/get java.time.temporal.ChronoUnit "MILLIS"))
(def minutes (goog.object/get java.time.temporal.ChronoUnit "MINUTES"))
(def micros (goog.object/get java.time.temporal.ChronoUnit "MICROS"))
(def half-days (goog.object/get java.time.temporal.ChronoUnit "HALF_DAYS"))
(def millennia (goog.object/get java.time.temporal.ChronoUnit "MILLENNIA"))
(def years (goog.object/get java.time.temporal.ChronoUnit "YEARS"))
(def decades (goog.object/get java.time.temporal.ChronoUnit "DECADES"))
(def days (goog.object/get java.time.temporal.ChronoUnit "DAYS"))
(def centuries (goog.object/get java.time.temporal.ChronoUnit "CENTURIES"))
(def weeks (goog.object/get java.time.temporal.ChronoUnit "WEEKS"))
(def hours (goog.object/get java.time.temporal.ChronoUnit "HOURS"))
(def eras (goog.object/get java.time.temporal.ChronoUnit "ERAS"))
(def seconds (goog.object/get java.time.temporal.ChronoUnit "SECONDS"))
(def months (goog.object/get java.time.temporal.ChronoUnit "MONTHS"))
(def nanos (goog.object/get java.time.temporal.ChronoUnit "NANOS"))
(def forever (goog.object/get java.time.temporal.ChronoUnit "FOREVER"))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.temporal.ChronoUnit "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.ChronoUnit [^java.lang.String java-lang-String61404] (js-invoke java.time.temporal.ChronoUnit "valueOf" java-lang-String61404)) (^java.lang.Enum [^java.lang.Class java-lang-Class61405 ^java.lang.String java-lang-String61406] (js-invoke java.time.temporal.ChronoUnit "valueOf" java-lang-Class61405 java-lang-String61406)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^int [^js/JSJoda.ChronoUnit this61407] (.ordinal this61407)))
(clojure.core/defn is-duration-estimated {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^boolean [^js/JSJoda.ChronoUnit this61408] (.isDurationEstimated this61408)))
(clojure.core/defn to-string {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^js/JSJoda.ChronoUnit this61409] (.toString this61409)))
(clojure.core/defn is-date-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^boolean [^js/JSJoda.ChronoUnit this61410] (.isDateBased this61410)))
(clojure.core/defn add-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "long"]))} (^js/JSJoda.Temporal [^js/JSJoda.ChronoUnit this61411 ^js/JSJoda.Temporal java-time-temporal-Temporal61412 ^long long61413] (.addTo this61411 java-time-temporal-Temporal61412 long61413)))
(clojure.core/defn name {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.String [^js/JSJoda.ChronoUnit this61414] (.name this61414)))
(clojure.core/defn is-supported-by {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal"]))} (^boolean [^js/JSJoda.ChronoUnit this61415 ^js/JSJoda.Temporal java-time-temporal-Temporal61416] (.isSupportedBy this61415 java-time-temporal-Temporal61416)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^java.lang.Class [^js/JSJoda.ChronoUnit this61417] (.declaringClass this61417)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.ChronoUnit" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^long [^js/JSJoda.ChronoUnit this61418 ^js/JSJoda.Temporal java-time-temporal-Temporal61419 ^js/JSJoda.Temporal java-time-temporal-Temporal61420] (.between this61418 java-time-temporal-Temporal61419 java-time-temporal-Temporal61420)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^int [^js/JSJoda.ChronoUnit this61421] (.hashCode this61421)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"] ["java.time.temporal.ChronoUnit" "java.lang.Enum"]))} (^int [this61422 G__61423] (.compareTo ^js/JSJoda.ChronoUnit this61422 G__61423)))
(clojure.core/defn get-duration {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^js/JSJoda.Duration [^js/JSJoda.ChronoUnit this61424] (.duration this61424)))
(clojure.core/defn equals {:arglists (quote (["java.time.temporal.ChronoUnit" "java.lang.Object"]))} (^boolean [^js/JSJoda.ChronoUnit this61425 ^java.lang.Object java-lang-Object61426] (.equals this61425 java-lang-Object61426)))
(clojure.core/defn is-time-based {:arglists (quote (["java.time.temporal.ChronoUnit"]))} (^boolean [^js/JSJoda.ChronoUnit this61427] (.isTimeBased this61427)))
