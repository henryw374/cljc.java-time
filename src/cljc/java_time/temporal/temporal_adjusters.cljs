(ns cljc.java-time.temporal.temporal-adjusters (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time.temporal :refer [TemporalAdjusters]]))
(clojure.core/defn next {:arglists (quote (["java.time.DayOfWeek"]))} (^js/JSJoda.TemporalAdjuster [^js/JSJoda.DayOfWeek java-time-DayOfWeek15493] (js-invoke java.time.temporal.TemporalAdjusters "next" java-time-DayOfWeek15493)))
(clojure.core/defn next-or-same {:arglists (quote (["java.time.DayOfWeek"]))} (^js/JSJoda.TemporalAdjuster [^js/JSJoda.DayOfWeek java-time-DayOfWeek15494] (js-invoke java.time.temporal.TemporalAdjusters "nextOrSame" java-time-DayOfWeek15494)))
(clojure.core/defn first-day-of-next-month {:arglists (quote ([]))} (^js/JSJoda.TemporalAdjuster [] (js-invoke java.time.temporal.TemporalAdjusters "firstDayOfNextMonth")))
(clojure.core/defn first-day-of-month {:arglists (quote ([]))} (^js/JSJoda.TemporalAdjuster [] (js-invoke java.time.temporal.TemporalAdjusters "firstDayOfMonth")))
(clojure.core/defn first-day-of-year {:arglists (quote ([]))} (^js/JSJoda.TemporalAdjuster [] (js-invoke java.time.temporal.TemporalAdjusters "firstDayOfYear")))
(clojure.core/defn of-date-adjuster {:arglists (quote (["java.util.function.UnaryOperator"]))} (^js/JSJoda.TemporalAdjuster [^java.util.function.UnaryOperator java-util-function-UnaryOperator15495] (js-invoke java.time.temporal.TemporalAdjusters "ofDateAdjuster" java-util-function-UnaryOperator15495)))
(clojure.core/defn last-day-of-year {:arglists (quote ([]))} (^js/JSJoda.TemporalAdjuster [] (js-invoke java.time.temporal.TemporalAdjusters "lastDayOfYear")))
(clojure.core/defn first-in-month {:arglists (quote (["java.time.DayOfWeek"]))} (^js/JSJoda.TemporalAdjuster [^js/JSJoda.DayOfWeek java-time-DayOfWeek15496] (js-invoke java.time.temporal.TemporalAdjusters "firstInMonth" java-time-DayOfWeek15496)))
(clojure.core/defn previous-or-same {:arglists (quote (["java.time.DayOfWeek"]))} (^js/JSJoda.TemporalAdjuster [^js/JSJoda.DayOfWeek java-time-DayOfWeek15497] (js-invoke java.time.temporal.TemporalAdjusters "previousOrSame" java-time-DayOfWeek15497)))
(clojure.core/defn previous {:arglists (quote (["java.time.DayOfWeek"]))} (^js/JSJoda.TemporalAdjuster [^js/JSJoda.DayOfWeek java-time-DayOfWeek15498] (js-invoke java.time.temporal.TemporalAdjusters "previous" java-time-DayOfWeek15498)))
(clojure.core/defn last-day-of-month {:arglists (quote ([]))} (^js/JSJoda.TemporalAdjuster [] (js-invoke java.time.temporal.TemporalAdjusters "lastDayOfMonth")))
(clojure.core/defn last-in-month {:arglists (quote (["java.time.DayOfWeek"]))} (^js/JSJoda.TemporalAdjuster [^js/JSJoda.DayOfWeek java-time-DayOfWeek15499] (js-invoke java.time.temporal.TemporalAdjusters "lastInMonth" java-time-DayOfWeek15499)))
(clojure.core/defn first-day-of-next-year {:arglists (quote ([]))} (^js/JSJoda.TemporalAdjuster [] (js-invoke java.time.temporal.TemporalAdjusters "firstDayOfNextYear")))
(clojure.core/defn day-of-week-in-month {:arglists (quote (["int" "java.time.DayOfWeek"]))} (^js/JSJoda.TemporalAdjuster [^int int15500 ^js/JSJoda.DayOfWeek java-time-DayOfWeek15501] (js-invoke java.time.temporal.TemporalAdjusters "dayOfWeekInMonth" int15500 java-time-DayOfWeek15501)))
