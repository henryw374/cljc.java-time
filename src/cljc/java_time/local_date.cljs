(ns cljc.java-time.local-date (:require [java.time :refer [LocalDate]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def max (. java.time.LocalDate -MAX))
(def min (. java.time.LocalDate -MIN))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48471 ^long long48472] (.minusWeeks this48471 long48472)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48473 ^long long48474] (.plusWeeks this48473 long48474)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48475] (.lengthOfYear this48475)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this48476 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48477] (.range this48476 java-time-temporal-TemporalField48477)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this48478] (.era this48478)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"] ["int" "java.time.Month" "int"]))} (^java.time.LocalDate [G__48480 G__48481 G__48482] (. java.time.LocalDate of G__48480 G__48481 G__48482)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this48483 ^java.lang.Integer int48484] (.withMonth this48483 int48484)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this48485 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate48486] (.isEqual this48485 java-time-chrono-ChronoLocalDate48486)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48487] (.year this48487)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this48488] (.toEpochDay this48488)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48489] (.dayOfYear this48489)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this48490 G__48491 G__48492] (.plus ^java.time.LocalDate this48490 G__48491 G__48492)) (^java.lang.Object [this48493 G__48494] (.plus ^java.time.LocalDate this48493 G__48494)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this48495] (.isLeapYear this48495)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this48496 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery48497] (.query this48496 java-time-temporal-TemporalQuery48497)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this48498] (.dayOfWeek this48498)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this48499] (.toString this48499)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48500 ^long long48501] (.plusMonths this48500 long48501)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this48502 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate48503] (.isBefore this48502 java-time-chrono-ChronoLocalDate48503)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48504 ^long long48505] (.minusMonths this48504 long48505)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this48506 G__48507 G__48508] (.minus ^java.time.LocalDate this48506 G__48507 G__48508)) (^java.lang.Object [this48509 G__48510] (.minus ^java.time.LocalDate this48509 G__48510)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48511 ^long long48512] (.plusDays this48511 long48512)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this48513 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48514] (.getLong this48513 java-time-temporal-TemporalField48514)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this48515 ^java.lang.Integer int48516] (.withYear this48515 int48516)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48517] (.lengthOfMonth this48517)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^long [^java.time.LocalDate this48518 ^java.time.temporal.Temporal java-time-temporal-Temporal48519 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit48520] (.until this48518 java-time-temporal-Temporal48519 java-time-temporal-TemporalUnit48520)) (^java.lang.Object [this48521 G__48522] (.until ^java.time.LocalDate this48521 G__48522)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long48523] (. java.time.LocalDate ofEpochDay long48523)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this48524 ^java.lang.Integer int48525] (.withDayOfMonth this48524 int48525)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48526] (.dayOfMonth this48526)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor48527] (. java.time.LocalDate from java-time-temporal-TemporalAccessor48527)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this48528 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate48529] (.isAfter this48528 java-time-chrono-ChronoLocalDate48529)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"] ["java.time.LocalDate" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this48530 G__48531] (.isSupported ^java.time.LocalDate this48530 G__48531)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48532 ^long long48533] (.minusYears this48532 long48533)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this48534] (.chronology ^java.time.LocalDate this48534)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence48535] (. java.time.LocalDate parse java-lang-CharSequence48535)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence48536 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter48537] (. java.time.LocalDate parse java-lang-CharSequence48536 java-time-format-DateTimeFormatter48537)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48538] (.hashCode this48538)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this48539 ^java.time.temporal.Temporal java-time-temporal-Temporal48540] (.adjustInto this48539 java-time-temporal-Temporal48540)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this48541 G__48542 G__48543] (.with ^java.time.LocalDate this48541 G__48542 G__48543)) (^java.lang.Object [this48544 G__48545] (.with ^java.time.LocalDate this48544 G__48545)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.LocalDate [] (. java.time.LocalDate now)) (^java.time.LocalDate [G__48547] (. java.time.LocalDate now G__48547)))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.LocalDate this48548] (.atStartOfDay this48548)) (^java.time.ZonedDateTime [^java.time.LocalDate this48549 ^java.time.ZoneId java-time-ZoneId48550] (.atStartOfDay this48549 java-time-ZoneId48550)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48551] (.monthValue this48551)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this48552 ^java.lang.Integer int48553] (.withDayOfYear this48552 int48553)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Integer [this48554 G__48555] (.compareTo ^java.time.LocalDate this48554 G__48555)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this48556] (.month this48556)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int48557 ^java.lang.Integer int48558] (. java.time.LocalDate ofYearDay int48557 int48558)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this48559 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48560] (.get this48559 java-time-temporal-TemporalField48560)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this48561 ^java.lang.Object java-lang-Object48562] (.equals this48561 java-lang-Object48562)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.LocalTime"]))} (^java.lang.Object [this48563 G__48564] (.atTime ^java.time.LocalDate this48563 G__48564)) (^java.time.LocalDateTime [^java.time.LocalDate this48565 ^java.lang.Integer int48566 ^java.lang.Integer int48567 ^java.lang.Integer int48568 ^java.lang.Integer int48569] (.atTime this48565 int48566 int48567 int48568 int48569)) (^java.time.LocalDateTime [^java.time.LocalDate this48570 ^java.lang.Integer int48571 ^java.lang.Integer int48572 ^java.lang.Integer int48573] (.atTime this48570 int48571 int48572 int48573)) (^java.time.LocalDateTime [^java.time.LocalDate this48574 ^java.lang.Integer int48575 ^java.lang.Integer int48576] (.atTime this48574 int48575 int48576)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this48577 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter48578] (.format this48577 java-time-format-DateTimeFormatter48578)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48579 ^long long48580] (.plusYears this48579 long48580)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48581 ^long long48582] (.minusDays this48581 long48582)))
