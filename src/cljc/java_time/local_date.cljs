(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalDate]]))
(def max (. java.time.LocalDate -MAX))
(def min (. java.time.LocalDate -MIN))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10479 ^long long10480] (.minusWeeks this10479 long10480)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10481 ^long long10482] (.plusWeeks this10481 long10482)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10483] (.lengthOfYear this10483)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this10484 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10485] (.range this10484 java-time-temporal-TemporalField10485)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this10486] (.era this10486)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int"] ["int" "int" "int"]))} (^java.time.LocalDate [G__10488 G__10489 G__10490] (. java.time.LocalDate of G__10488 G__10489 G__10490)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this10491 ^java.lang.Integer int10492] (.withMonth this10491 int10492)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this10493 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate10494] (.isEqual this10493 java-time-chrono-ChronoLocalDate10494)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10495] (.year this10495)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this10496] (.toEpochDay this10496)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10497] (.dayOfYear this10497)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this10498 G__10499 G__10500] (.plus ^java.time.LocalDate this10498 G__10499 G__10500)) (^java.lang.Object [this10501 G__10502] (.plus ^java.time.LocalDate this10501 G__10502)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this10503] (.isLeapYear this10503)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this10504 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery10505] (.query this10504 java-time-temporal-TemporalQuery10505)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this10506] (.dayOfWeek this10506)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this10507] (.toString this10507)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10508 ^long long10509] (.plusMonths this10508 long10509)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this10510 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate10511] (.isBefore this10510 java-time-chrono-ChronoLocalDate10511)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10512 ^long long10513] (.minusMonths this10512 long10513)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this10514 G__10515] (.minus ^java.time.LocalDate this10514 G__10515)) (^java.lang.Object [this10516 G__10517 G__10518] (.minus ^java.time.LocalDate this10516 G__10517 G__10518)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10519 ^long long10520] (.plusDays this10519 long10520)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this10521 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10522] (.getLong this10521 java-time-temporal-TemporalField10522)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this10523 ^java.lang.Integer int10524] (.withYear this10523 int10524)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10525] (.lengthOfMonth this10525)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Object [this10526 G__10527] (.until ^java.time.LocalDate this10526 G__10527)) (^long [^java.time.LocalDate this10528 ^java.time.temporal.Temporal java-time-temporal-Temporal10529 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit10530] (.until this10528 java-time-temporal-Temporal10529 java-time-temporal-TemporalUnit10530)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long10531] (. java.time.LocalDate ofEpochDay long10531)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this10532 ^java.lang.Integer int10533] (.withDayOfMonth this10532 int10533)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10534] (.dayOfMonth this10534)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor10535] (. java.time.LocalDate from java-time-temporal-TemporalAccessor10535)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this10536 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate10537] (.isAfter this10536 java-time-chrono-ChronoLocalDate10537)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this10538 G__10539] (.isSupported ^java.time.LocalDate this10538 G__10539)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10540 ^long long10541] (.minusYears this10540 long10541)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this10542] (.chronology ^java.time.LocalDate this10542)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence10543] (. java.time.LocalDate parse java-lang-CharSequence10543)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence10544 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter10545] (. java.time.LocalDate parse java-lang-CharSequence10544 java-time-format-DateTimeFormatter10545)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10546] (.hashCode this10546)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this10547 ^java.time.temporal.Temporal java-time-temporal-Temporal10548] (.adjustInto this10547 java-time-temporal-Temporal10548)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this10549 G__10550 G__10551] (.with ^java.time.LocalDate this10549 G__10550 G__10551)) (^java.lang.Object [this10552 G__10553] (.with ^java.time.LocalDate this10552 G__10553)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDate [] (. java.time.LocalDate now)) (^java.time.LocalDate [G__10555] (. java.time.LocalDate now G__10555)))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.LocalDate this10556] (.atStartOfDay this10556)) (^java.time.ZonedDateTime [^java.time.LocalDate this10557 ^java.time.ZoneId java-time-ZoneId10558] (.atStartOfDay this10557 java-time-ZoneId10558)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10559] (.monthValue this10559)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this10560 ^java.lang.Integer int10561] (.withDayOfYear this10560 int10561)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Integer [this10562 G__10563] (.compareTo ^java.time.LocalDate this10562 G__10563)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this10564] (.month this10564)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int10565 ^java.lang.Integer int10566] (. java.time.LocalDate ofYearDay int10565 int10566)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this10567 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10568] (.get this10567 java-time-temporal-TemporalField10568)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this10569 ^java.lang.Object java-lang-Object10570] (.equals this10569 java-lang-Object10570)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "int" "int"]))} (^java.lang.Object [this10571 G__10572] (.atTime ^java.time.LocalDate this10571 G__10572)) (^java.time.LocalDateTime [^java.time.LocalDate this10573 ^java.lang.Integer int10574 ^java.lang.Integer int10575 ^java.lang.Integer int10576] (.atTime this10573 int10574 int10575 int10576)) (^java.time.LocalDateTime [^java.time.LocalDate this10577 ^java.lang.Integer int10578 ^java.lang.Integer int10579 ^java.lang.Integer int10580 ^java.lang.Integer int10581] (.atTime this10577 int10578 int10579 int10580 int10581)) (^java.time.LocalDateTime [^java.time.LocalDate this10582 ^java.lang.Integer int10583 ^java.lang.Integer int10584] (.atTime this10582 int10583 int10584)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this10585 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter10586] (.format this10585 java-time-format-DateTimeFormatter10586)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10587 ^long long10588] (.plusYears this10587 long10588)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10589 ^long long10590] (.minusDays this10589 long10590)))
