(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalDate]]))
(def max (goog.object/get java.time.LocalDate "MAX"))
(def min (goog.object/get java.time.LocalDate "MIN"))
(def epoch (goog.object/get java.time.LocalDate "EPOCH"))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this6256 ^long long6257] (.minusWeeks this6256 long6257)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this6258 ^long long6259] (.plusWeeks this6258 long6259)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this6260] (.lengthOfYear this6260)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalDate this6261 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6262] (.range this6261 java-time-temporal-TemporalField6262)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this6263] (.era ^js/JSJoda.LocalDate this6263)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int"] ["int" "int" "int"]))} (^js/JSJoda.LocalDate [G__6265 G__6266 G__6267] (js-invoke java.time.LocalDate "of" G__6265 G__6266 G__6267)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this6268 ^int int6269] (.withMonth this6268 int6269)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this6270 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate6271] (.isEqual this6270 java-time-chrono-ChronoLocalDate6271)))
(clojure.core/defn dates-until {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"] ["java.time.LocalDate" "java.time.LocalDate" "java.time.Period"]))} (^java.util.stream.Stream [^js/JSJoda.LocalDate this6272 ^js/JSJoda.LocalDate java-time-LocalDate6273] (.datesUntil this6272 java-time-LocalDate6273)) (^java.util.stream.Stream [^js/JSJoda.LocalDate this6274 ^js/JSJoda.LocalDate java-time-LocalDate6275 ^js/JSJoda.Period java-time-Period6276] (.datesUntil this6274 java-time-LocalDate6275 java-time-Period6276)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this6277] (.year this6277)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^js/JSJoda.LocalDate this6278] (.toEpochDay this6278)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this6279] (.dayOfYear this6279)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6280 G__6281 G__6282] (.plus ^js/JSJoda.LocalDate this6280 G__6281 G__6282)) (^java.lang.Object [this6283 G__6284] (.plus ^js/JSJoda.LocalDate this6283 G__6284)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^boolean [^js/JSJoda.LocalDate this6285] (.isLeapYear this6285)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalDate this6286 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery6287] (.query this6286 java-time-temporal-TemporalQuery6287)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.LocalDate this6288] (.dayOfWeek this6288)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^js/JSJoda.LocalDate this6289] (.toString this6289)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this6290 ^long long6291] (.plusMonths this6290 long6291)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this6292 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate6293] (.isBefore this6292 java-time-chrono-ChronoLocalDate6293)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this6294 ^long long6295] (.minusMonths this6294 long6295)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6296 G__6297] (.minus ^js/JSJoda.LocalDate this6296 G__6297)) (^java.lang.Object [this6298 G__6299 G__6300] (.minus ^js/JSJoda.LocalDate this6298 G__6299 G__6300)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this6301 ^long long6302] (.plusDays this6301 long6302)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalDate this6303 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6304] (.getLong this6303 java-time-temporal-TemporalField6304)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this6305 ^int int6306] (.withYear this6305 int6306)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"]))} (^long [^js/JSJoda.LocalDate this6307 ^js/JSJoda.LocalTime java-time-LocalTime6308 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6309] (.toEpochSecond this6307 java-time-LocalTime6308 java-time-ZoneOffset6309)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this6310] (.lengthOfMonth this6310)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6311 G__6312] (.until ^js/JSJoda.LocalDate this6311 G__6312)) (^long [^js/JSJoda.LocalDate this6313 ^js/JSJoda.Temporal java-time-temporal-Temporal6314 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit6315] (.until this6313 java-time-temporal-Temporal6314 java-time-temporal-TemporalUnit6315)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalDate [^long long6316] (js-invoke java.time.LocalDate "ofEpochDay" long6316)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this6317 ^int int6318] (.withDayOfMonth this6317 int6318)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this6319] (.dayOfMonth this6319)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalDate [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor6320] (js-invoke java.time.LocalDate "from" java-time-temporal-TemporalAccessor6320)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this6321 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate6322] (.isAfter this6321 java-time-chrono-ChronoLocalDate6322)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^boolean [this6323 G__6324] (.isSupported ^js/JSJoda.LocalDate this6323 G__6324)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this6325 ^long long6326] (.minusYears this6325 long6326)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this6327] (.chronology ^js/JSJoda.LocalDate this6327)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.LocalDate [^java.lang.CharSequence java-lang-CharSequence6328 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6329] (js-invoke java.time.LocalDate "parse" java-lang-CharSequence6328 java-time-format-DateTimeFormatter6329)) (^js/JSJoda.LocalDate [^java.lang.CharSequence java-lang-CharSequence6330] (js-invoke java.time.LocalDate "parse" java-lang-CharSequence6330)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this6331] (.hashCode this6331)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalDate this6332 ^js/JSJoda.Temporal java-time-temporal-Temporal6333] (.adjustInto this6332 java-time-temporal-Temporal6333)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this6334 G__6335] (.with ^js/JSJoda.LocalDate this6334 G__6335)) (^java.lang.Object [this6336 G__6337 G__6338] (.with ^js/JSJoda.LocalDate this6336 G__6337 G__6338)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^js/JSJoda.LocalDate [G__6340] (js-invoke java.time.LocalDate "now" G__6340)) (^js/JSJoda.LocalDate [] (js-invoke java.time.LocalDate "now")))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate" "java.time.ZoneId"] ["java.time.LocalDate"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDate this6341 ^js/JSJoda.ZoneId java-time-ZoneId6342] (.atStartOfDay this6341 java-time-ZoneId6342)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this6343] (.atStartOfDay this6343)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this6344] (.monthValue this6344)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this6345 ^int int6346] (.withDayOfYear this6345 int6346)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.lang.Object"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^int [this6347 G__6348] (.compareTo ^js/JSJoda.LocalDate this6347 G__6348)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.Month [^js/JSJoda.LocalDate this6349] (.month this6349)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Instant java-time-Instant6350 ^js/JSJoda.ZoneId java-time-ZoneId6351] (js-invoke java.time.LocalDate "ofInstant" java-time-Instant6350 java-time-ZoneId6351)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^js/JSJoda.LocalDate [^int int6352 ^int int6353] (js-invoke java.time.LocalDate "ofYearDay" int6352 int6353)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalDate this6354 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6355] (.get this6354 java-time-temporal-TemporalField6355)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalDate this6356 ^java.lang.Object java-lang-Object6357] (.equals this6356 java-lang-Object6357)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "int" "int"] ["java.time.LocalDate" "int" "int" "int" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this6358 ^int int6359 ^int int6360 ^int int6361] (.atTime this6358 int6359 int6360 int6361)) (^java.lang.Object [this6362 G__6363] (.atTime ^js/JSJoda.LocalDate this6362 G__6363)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this6364 ^int int6365 ^int int6366] (.atTime this6364 int6365 int6366)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this6367 ^int int6368 ^int int6369 ^int int6370 ^int int6371] (.atTime this6367 int6368 int6369 int6370 int6371)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalDate this6372 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6373] (.format this6372 java-time-format-DateTimeFormatter6373)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this6374 ^long long6375] (.plusYears this6374 long6375)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this6376 ^long long6377] (.minusDays this6376 long6377)))
