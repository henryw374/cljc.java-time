(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalDate]]))
(def max (goog.object/get java.time.LocalDate "MAX"))
(def min (goog.object/get java.time.LocalDate "MIN"))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3257 ^long long3258] (.minusWeeks this3257 long3258)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3259 ^long long3260] (.plusWeeks this3259 long3260)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3261] (.lengthOfYear this3261)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalDate this3262 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3263] (.range this3262 java-time-temporal-TemporalField3263)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.Era [^js/JSJoda.LocalDate this3264] (.era this3264)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"] ["int" "java.time.Month" "int"]))} (^js/JSJoda.LocalDate [G__3266 G__3267 G__3268] (js-invoke java.time.LocalDate "of" G__3266 G__3267 G__3268)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3269 ^int int3270] (.withMonth this3269 int3270)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this3271 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate3272] (.isEqual this3271 java-time-chrono-ChronoLocalDate3272)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3273] (.year this3273)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^js/JSJoda.LocalDate this3274] (.toEpochDay this3274)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3275] (.dayOfYear this3275)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3276 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3277] (.plus this3276 java-time-temporal-TemporalAmount3277)) (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3278 ^long long3279 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3280] (.plus this3278 long3279 java-time-temporal-TemporalUnit3280)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^boolean [^js/JSJoda.LocalDate this3281] (.isLeapYear this3281)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalDate this3282 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery3283] (.query this3282 java-time-temporal-TemporalQuery3283)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.LocalDate this3284] (.dayOfWeek this3284)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^js/JSJoda.LocalDate this3285] (.toString this3285)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3286 ^long long3287] (.plusMonths this3286 long3287)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this3288 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate3289] (.isBefore this3288 java-time-chrono-ChronoLocalDate3289)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3290 ^long long3291] (.minusMonths this3290 long3291)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3292 ^long long3293 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3294] (.minus this3292 long3293 java-time-temporal-TemporalUnit3294)) (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3295 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3296] (.minus this3295 java-time-temporal-TemporalAmount3296)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3297 ^long long3298] (.plusDays this3297 long3298)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalDate this3299 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3300] (.getLong this3299 java-time-temporal-TemporalField3300)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3301 ^int int3302] (.withYear this3301 int3302)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3303] (.lengthOfMonth this3303)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^long [^js/JSJoda.LocalDate this3304 ^js/JSJoda.Temporal java-time-temporal-Temporal3305 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3306] (.until this3304 java-time-temporal-Temporal3305 java-time-temporal-TemporalUnit3306)) (^js/JSJoda.Period [^js/JSJoda.LocalDate this3307 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate3308] (.until this3307 java-time-chrono-ChronoLocalDate3308)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalDate [^long long3309] (js-invoke java.time.LocalDate "ofEpochDay" long3309)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3310 ^int int3311] (.withDayOfMonth this3310 int3311)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3312] (.dayOfMonth this3312)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalDate [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor3313] (js-invoke java.time.LocalDate "from" java-time-temporal-TemporalAccessor3313)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this3314 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate3315] (.isAfter this3314 java-time-chrono-ChronoLocalDate3315)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"] ["java.time.LocalDate" "java.time.temporal.TemporalUnit"]))} (^boolean [this3316 G__3317] (.isSupported ^js/JSJoda.LocalDate this3316 G__3317)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3318 ^long long3319] (.minusYears this3318 long3319)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.IsoChronology [^js/JSJoda.LocalDate this3320] (.chronology this3320)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.LocalDate [^java.lang.CharSequence java-lang-CharSequence3321] (js-invoke java.time.LocalDate "parse" java-lang-CharSequence3321)) (^js/JSJoda.LocalDate [^java.lang.CharSequence java-lang-CharSequence3322 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter3323] (js-invoke java.time.LocalDate "parse" java-lang-CharSequence3322 java-time-format-DateTimeFormatter3323)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3324] (.hashCode this3324)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalDate this3325 ^js/JSJoda.Temporal java-time-temporal-Temporal3326] (.adjustInto this3325 java-time-temporal-Temporal3326)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3327 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3328 ^long long3329] (.with this3327 java-time-temporal-TemporalField3328 long3329)) (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3330 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster3331] (.with this3330 java-time-temporal-TemporalAdjuster3331)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.LocalDate [] (js-invoke java.time.LocalDate "now")) (^js/JSJoda.LocalDate [G__3333] (js-invoke java.time.LocalDate "now" G__3333)))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this3334] (.atStartOfDay this3334)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDate this3335 ^js/JSJoda.ZoneId java-time-ZoneId3336] (.atStartOfDay this3335 java-time-ZoneId3336)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3337] (.monthValue this3337)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3338 ^int int3339] (.withDayOfYear this3338 int3339)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^int [^js/JSJoda.LocalDate this3340 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate3341] (.compareTo this3340 java-time-chrono-ChronoLocalDate3341)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.Month [^js/JSJoda.LocalDate this3342] (.month this3342)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^js/JSJoda.LocalDate [^int int3343 ^int int3344] (js-invoke java.time.LocalDate "ofYearDay" int3343 int3344)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalDate this3345 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3346] (.get this3345 java-time-temporal-TemporalField3346)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalDate this3347 ^java.lang.Object java-lang-Object3348] (.equals this3347 java-lang-Object3348)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "java.time.LocalTime"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this3349 ^int int3350 ^int int3351 ^int int3352] (.atTime this3349 int3350 int3351 int3352)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this3353 ^int int3354 ^int int3355] (.atTime this3353 int3354 int3355)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this3356 ^int int3357 ^int int3358 ^int int3359 ^int int3360] (.atTime this3356 int3357 int3358 int3359 int3360)) (^java.lang.Object [this3361 G__3362] (.atTime ^js/JSJoda.LocalDate this3361 G__3362)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalDate this3363 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter3364] (.format this3363 java-time-format-DateTimeFormatter3364)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3365 ^long long3366] (.plusYears this3365 long3366)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3367 ^long long3368] (.minusDays this3367 long3368)))
