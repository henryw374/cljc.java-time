(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalDate]]))
(def max (goog.object/get java.time.LocalDate "MAX"))
(def min (goog.object/get java.time.LocalDate "MIN"))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3258 ^long long3259] (.minusWeeks this3258 long3259)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3260 ^long long3261] (.plusWeeks this3260 long3261)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3262] (.lengthOfYear this3262)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalDate this3263 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3264] (.range this3263 java-time-temporal-TemporalField3264)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.Era [^js/JSJoda.LocalDate this3265] (.era this3265)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int"] ["int" "int" "int"]))} (^js/JSJoda.LocalDate [G__3267 G__3268 G__3269] (js-invoke java.time.LocalDate "of" G__3267 G__3268 G__3269)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3270 ^int int3271] (.withMonth this3270 int3271)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this3272 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate3273] (.isEqual this3272 java-time-chrono-ChronoLocalDate3273)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3274] (.year this3274)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^js/JSJoda.LocalDate this3275] (.toEpochDay this3275)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3276] (.dayOfYear this3276)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3277 ^long long3278 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3279] (.plus this3277 long3278 java-time-temporal-TemporalUnit3279)) (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3280 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3281] (.plus this3280 java-time-temporal-TemporalAmount3281)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^boolean [^js/JSJoda.LocalDate this3282] (.isLeapYear this3282)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalDate this3283 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery3284] (.query this3283 java-time-temporal-TemporalQuery3284)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.LocalDate this3285] (.dayOfWeek this3285)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^js/JSJoda.LocalDate this3286] (.toString this3286)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3287 ^long long3288] (.plusMonths this3287 long3288)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this3289 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate3290] (.isBefore this3289 java-time-chrono-ChronoLocalDate3290)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3291 ^long long3292] (.minusMonths this3291 long3292)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3293 ^long long3294 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3295] (.minus this3293 long3294 java-time-temporal-TemporalUnit3295)) (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3296 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3297] (.minus this3296 java-time-temporal-TemporalAmount3297)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3298 ^long long3299] (.plusDays this3298 long3299)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalDate this3300 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3301] (.getLong this3300 java-time-temporal-TemporalField3301)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3302 ^int int3303] (.withYear this3302 int3303)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3304] (.lengthOfMonth this3304)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Period [^js/JSJoda.LocalDate this3305 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate3306] (.until this3305 java-time-chrono-ChronoLocalDate3306)) (^long [^js/JSJoda.LocalDate this3307 ^js/JSJoda.Temporal java-time-temporal-Temporal3308 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3309] (.until this3307 java-time-temporal-Temporal3308 java-time-temporal-TemporalUnit3309)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalDate [^long long3310] (js-invoke java.time.LocalDate "ofEpochDay" long3310)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3311 ^int int3312] (.withDayOfMonth this3311 int3312)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3313] (.dayOfMonth this3313)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalDate [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor3314] (js-invoke java.time.LocalDate "from" java-time-temporal-TemporalAccessor3314)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this3315 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate3316] (.isAfter this3315 java-time-chrono-ChronoLocalDate3316)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^boolean [this3317 G__3318] (.isSupported ^js/JSJoda.LocalDate this3317 G__3318)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3319 ^long long3320] (.minusYears this3319 long3320)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.IsoChronology [^js/JSJoda.LocalDate this3321] (.chronology this3321)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.LocalDate [^java.lang.CharSequence java-lang-CharSequence3322 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter3323] (js-invoke java.time.LocalDate "parse" java-lang-CharSequence3322 java-time-format-DateTimeFormatter3323)) (^js/JSJoda.LocalDate [^java.lang.CharSequence java-lang-CharSequence3324] (js-invoke java.time.LocalDate "parse" java-lang-CharSequence3324)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3325] (.hashCode this3325)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalDate this3326 ^js/JSJoda.Temporal java-time-temporal-Temporal3327] (.adjustInto this3326 java-time-temporal-Temporal3327)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3328 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster3329] (.with this3328 java-time-temporal-TemporalAdjuster3329)) (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3330 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3331 ^long long3332] (.with this3330 java-time-temporal-TemporalField3331 long3332)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^js/JSJoda.LocalDate [G__3334] (js-invoke java.time.LocalDate "now" G__3334)) (^js/JSJoda.LocalDate [] (js-invoke java.time.LocalDate "now")))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this3335] (.atStartOfDay this3335)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDate this3336 ^js/JSJoda.ZoneId java-time-ZoneId3337] (.atStartOfDay this3336 java-time-ZoneId3337)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this3338] (.monthValue this3338)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3339 ^int int3340] (.withDayOfYear this3339 int3340)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^int [^js/JSJoda.LocalDate this3341 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate3342] (.compareTo this3341 java-time-chrono-ChronoLocalDate3342)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.Month [^js/JSJoda.LocalDate this3343] (.month this3343)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^js/JSJoda.LocalDate [^int int3344 ^int int3345] (js-invoke java.time.LocalDate "ofYearDay" int3344 int3345)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalDate this3346 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3347] (.get this3346 java-time-temporal-TemporalField3347)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalDate this3348 ^java.lang.Object java-lang-Object3349] (.equals this3348 java-lang-Object3349)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "int" "int"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "java.time.OffsetTime"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this3350 ^int int3351 ^int int3352 ^int int3353 ^int int3354] (.atTime this3350 int3351 int3352 int3353 int3354)) (^java.lang.Object [this3355 G__3356] (.atTime ^js/JSJoda.LocalDate this3355 G__3356)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this3357 ^int int3358 ^int int3359] (.atTime this3357 int3358 int3359)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this3360 ^int int3361 ^int int3362 ^int int3363] (.atTime this3360 int3361 int3362 int3363)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalDate this3364 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter3365] (.format this3364 java-time-format-DateTimeFormatter3365)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3366 ^long long3367] (.plusYears this3366 long3367)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this3368 ^long long3369] (.minusDays this3368 long3369)))
