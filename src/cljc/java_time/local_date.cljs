(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalDate]]))
(def max (goog.object/get java.time.LocalDate "MAX"))
(def min (goog.object/get java.time.LocalDate "MIN"))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this58962 ^long long58963] (.minusWeeks this58962 long58963)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this58964 ^long long58965] (.plusWeeks this58964 long58965)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this58966] (.lengthOfYear this58966)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalDate this58967 ^js/JSJoda.TemporalField java-time-temporal-TemporalField58968] (.range this58967 java-time-temporal-TemporalField58968)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.Era [^js/JSJoda.LocalDate this58969] (.era this58969)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int"] ["int" "int" "int"]))} (^js/JSJoda.LocalDate [G__58971 G__58972 G__58973] (js-invoke java.time.LocalDate "of" G__58971 G__58972 G__58973)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this58974 ^int int58975] (.withMonth this58974 int58975)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this58976 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate58977] (.isEqual this58976 java-time-chrono-ChronoLocalDate58977)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this58978] (.year this58978)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^js/JSJoda.LocalDate this58979] (.toEpochDay this58979)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this58980] (.dayOfYear this58980)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this58981 G__58982 G__58983] (.plus ^js/JSJoda.LocalDate this58981 G__58982 G__58983)) (^java.lang.Object [this58984 G__58985] (.plus ^js/JSJoda.LocalDate this58984 G__58985)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^boolean [^js/JSJoda.LocalDate this58986] (.isLeapYear this58986)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalDate this58987 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery58988] (.query this58987 java-time-temporal-TemporalQuery58988)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.LocalDate this58989] (.dayOfWeek this58989)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^js/JSJoda.LocalDate this58990] (.toString this58990)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this58991 ^long long58992] (.plusMonths this58991 long58992)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this58993 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate58994] (.isBefore this58993 java-time-chrono-ChronoLocalDate58994)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this58995 ^long long58996] (.minusMonths this58995 long58996)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this58997 G__58998] (.minus ^js/JSJoda.LocalDate this58997 G__58998)) (^java.lang.Object [this58999 G__59000 G__59001] (.minus ^js/JSJoda.LocalDate this58999 G__59000 G__59001)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this59002 ^long long59003] (.plusDays this59002 long59003)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalDate this59004 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59005] (.getLong this59004 java-time-temporal-TemporalField59005)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this59006 ^int int59007] (.withYear this59006 int59007)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this59008] (.lengthOfMonth this59008)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Object [this59009 G__59010] (.until ^js/JSJoda.LocalDate this59009 G__59010)) (^long [^js/JSJoda.LocalDate this59011 ^js/JSJoda.Temporal java-time-temporal-Temporal59012 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit59013] (.until this59011 java-time-temporal-Temporal59012 java-time-temporal-TemporalUnit59013)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalDate [^long long59014] (js-invoke java.time.LocalDate "ofEpochDay" long59014)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this59015 ^int int59016] (.withDayOfMonth this59015 int59016)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this59017] (.dayOfMonth this59017)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalDate [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor59018] (js-invoke java.time.LocalDate "from" java-time-temporal-TemporalAccessor59018)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this59019 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate59020] (.isAfter this59019 java-time-chrono-ChronoLocalDate59020)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^boolean [this59021 G__59022] (.isSupported ^js/JSJoda.LocalDate this59021 G__59022)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this59023 ^long long59024] (.minusYears this59023 long59024)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this59025] (.chronology ^js/JSJoda.LocalDate this59025)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.LocalDate [^java.lang.CharSequence java-lang-CharSequence59026] (js-invoke java.time.LocalDate "parse" java-lang-CharSequence59026)) (^js/JSJoda.LocalDate [^java.lang.CharSequence java-lang-CharSequence59027 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter59028] (js-invoke java.time.LocalDate "parse" java-lang-CharSequence59027 java-time-format-DateTimeFormatter59028)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this59029] (.hashCode this59029)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalDate this59030 ^js/JSJoda.Temporal java-time-temporal-Temporal59031] (.adjustInto this59030 java-time-temporal-Temporal59031)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this59032 G__59033 G__59034] (.with ^js/JSJoda.LocalDate this59032 G__59033 G__59034)) (^java.lang.Object [this59035 G__59036] (.with ^js/JSJoda.LocalDate this59035 G__59036)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.LocalDate [] (js-invoke java.time.LocalDate "now")) (^js/JSJoda.LocalDate [G__59038] (js-invoke java.time.LocalDate "now" G__59038)))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this59039] (.atStartOfDay this59039)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDate this59040 ^js/JSJoda.ZoneId java-time-ZoneId59041] (.atStartOfDay this59040 java-time-ZoneId59041)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this59042] (.monthValue this59042)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this59043 ^int int59044] (.withDayOfYear this59043 int59044)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.lang.Object"]))} (^int [this59045 G__59046] (.compareTo ^js/JSJoda.LocalDate this59045 G__59046)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.Month [^js/JSJoda.LocalDate this59047] (.month this59047)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^js/JSJoda.LocalDate [^int int59048 ^int int59049] (js-invoke java.time.LocalDate "ofYearDay" int59048 int59049)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalDate this59050 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59051] (.get this59050 java-time-temporal-TemporalField59051)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalDate this59052 ^java.lang.Object java-lang-Object59053] (.equals this59052 java-lang-Object59053)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "int" "int"]))} (^java.lang.Object [this59054 G__59055] (.atTime ^js/JSJoda.LocalDate this59054 G__59055)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this59056 ^int int59057 ^int int59058 ^int int59059] (.atTime this59056 int59057 int59058 int59059)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this59060 ^int int59061 ^int int59062 ^int int59063 ^int int59064] (.atTime this59060 int59061 int59062 int59063 int59064)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this59065 ^int int59066 ^int int59067] (.atTime this59065 int59066 int59067)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalDate this59068 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter59069] (.format this59068 java-time-format-DateTimeFormatter59069)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this59070 ^long long59071] (.plusYears this59070 long59071)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this59072 ^long long59073] (.minusDays this59072 long59073)))
