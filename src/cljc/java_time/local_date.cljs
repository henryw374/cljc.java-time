(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [LocalDate]]))
(def max (goog.object/get java.time.LocalDate "MAX"))
(def min (goog.object/get java.time.LocalDate "MIN"))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12775 ^long long12776] (.minusWeeks this12775 long12776)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12777 ^long long12778] (.plusWeeks this12777 long12778)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this12779] (.lengthOfYear this12779)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalDate this12780 ^js/JSJoda.TemporalField java-time-temporal-TemporalField12781] (.range this12780 java-time-temporal-TemporalField12781)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.Era [^js/JSJoda.LocalDate this12782] (.era this12782)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int"] ["int" "int" "int"]))} (^js/JSJoda.LocalDate [G__12784 G__12785 G__12786] (js-invoke java.time.LocalDate "of" G__12784 G__12785 G__12786)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12787 ^int int12788] (.withMonth this12787 int12788)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this12789 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate12790] (.isEqual this12789 java-time-chrono-ChronoLocalDate12790)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this12791] (.year this12791)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^js/JSJoda.LocalDate this12792] (.toEpochDay this12792)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this12793] (.dayOfYear this12793)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12794 ^long long12795 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit12796] (.plus this12794 long12795 java-time-temporal-TemporalUnit12796)) (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12797 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount12798] (.plus this12797 java-time-temporal-TemporalAmount12798)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^boolean [^js/JSJoda.LocalDate this12799] (.isLeapYear this12799)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalDate this12800 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery12801] (.query this12800 java-time-temporal-TemporalQuery12801)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.LocalDate this12802] (.dayOfWeek this12802)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^js/JSJoda.LocalDate this12803] (.toString this12803)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12804 ^long long12805] (.plusMonths this12804 long12805)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this12806 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate12807] (.isBefore this12806 java-time-chrono-ChronoLocalDate12807)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12808 ^long long12809] (.minusMonths this12808 long12809)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12810 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount12811] (.minus this12810 java-time-temporal-TemporalAmount12811)) (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12812 ^long long12813 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit12814] (.minus this12812 long12813 java-time-temporal-TemporalUnit12814)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12815 ^long long12816] (.plusDays this12815 long12816)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalDate this12817 ^js/JSJoda.TemporalField java-time-temporal-TemporalField12818] (.getLong this12817 java-time-temporal-TemporalField12818)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12819 ^int int12820] (.withYear this12819 int12820)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this12821] (.lengthOfMonth this12821)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^long [^js/JSJoda.LocalDate this12822 ^js/JSJoda.Temporal java-time-temporal-Temporal12823 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit12824] (.until this12822 java-time-temporal-Temporal12823 java-time-temporal-TemporalUnit12824)) (^js/JSJoda.Period [^js/JSJoda.LocalDate this12825 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate12826] (.until this12825 java-time-chrono-ChronoLocalDate12826)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalDate [^long long12827] (js-invoke java.time.LocalDate "ofEpochDay" long12827)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12828 ^int int12829] (.withDayOfMonth this12828 int12829)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this12830] (.dayOfMonth this12830)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalDate [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor12831] (js-invoke java.time.LocalDate "from" java-time-temporal-TemporalAccessor12831)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^boolean [^js/JSJoda.LocalDate this12832 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate12833] (.isAfter this12832 java-time-chrono-ChronoLocalDate12833)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"] ["java.time.LocalDate" "java.time.temporal.TemporalUnit"]))} (^boolean [this12834 G__12835] (.isSupported ^js/JSJoda.LocalDate this12834 G__12835)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12836 ^long long12837] (.minusYears this12836 long12837)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.IsoChronology [^js/JSJoda.LocalDate this12838] (.chronology this12838)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.LocalDate [^java.lang.CharSequence java-lang-CharSequence12839] (js-invoke java.time.LocalDate "parse" java-lang-CharSequence12839)) (^js/JSJoda.LocalDate [^java.lang.CharSequence java-lang-CharSequence12840 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter12841] (js-invoke java.time.LocalDate "parse" java-lang-CharSequence12840 java-time-format-DateTimeFormatter12841)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this12842] (.hashCode this12842)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalDate this12843 ^js/JSJoda.Temporal java-time-temporal-Temporal12844] (.adjustInto this12843 java-time-temporal-Temporal12844)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12845 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster12846] (.with this12845 java-time-temporal-TemporalAdjuster12846)) (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12847 ^js/JSJoda.TemporalField java-time-temporal-TemporalField12848 ^long long12849] (.with this12847 java-time-temporal-TemporalField12848 long12849)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.LocalDate [] (js-invoke java.time.LocalDate "now")) (^js/JSJoda.LocalDate [G__12851] (js-invoke java.time.LocalDate "now" G__12851)))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this12852] (.atStartOfDay this12852)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDate this12853 ^js/JSJoda.ZoneId java-time-ZoneId12854] (.atStartOfDay this12853 java-time-ZoneId12854)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^int [^js/JSJoda.LocalDate this12855] (.monthValue this12855)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12856 ^int int12857] (.withDayOfYear this12856 int12857)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^int [^js/JSJoda.LocalDate this12858 ^js/JSJoda.ChronoLocalDate java-time-chrono-ChronoLocalDate12859] (.compareTo this12858 java-time-chrono-ChronoLocalDate12859)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^js/JSJoda.Month [^js/JSJoda.LocalDate this12860] (.month this12860)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^js/JSJoda.LocalDate [^int int12861 ^int int12862] (js-invoke java.time.LocalDate "ofYearDay" int12861 int12862)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalDate this12863 ^js/JSJoda.TemporalField java-time-temporal-TemporalField12864] (.get this12863 java-time-temporal-TemporalField12864)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalDate this12865 ^java.lang.Object java-lang-Object12866] (.equals this12865 java-lang-Object12866)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int"]))} (^java.lang.Object [this12867 G__12868] (.atTime ^js/JSJoda.LocalDate this12867 G__12868)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this12869 ^int int12870 ^int int12871 ^int int12872 ^int int12873] (.atTime this12869 int12870 int12871 int12872 int12873)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this12874 ^int int12875 ^int int12876 ^int int12877] (.atTime this12874 int12875 int12876 int12877)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate this12878 ^int int12879 ^int int12880] (.atTime this12878 int12879 int12880)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalDate this12881 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter12882] (.format this12881 java-time-format-DateTimeFormatter12882)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12883 ^long long12884] (.plusYears this12883 long12884)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDate this12885 ^long long12886] (.minusDays this12885 long12886)))
