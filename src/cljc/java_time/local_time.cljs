(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalTime]]))
(def max (goog.object/get java.time.LocalTime "MAX"))
(def noon (goog.object/get java.time.LocalTime "NOON"))
(def midnight (goog.object/get java.time.LocalTime "MIDNIGHT"))
(def min (goog.object/get java.time.LocalTime "MIN"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4771 ^long long4772] (.minusMinutes this4771 long4772)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4773 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4774] (.truncatedTo this4773 java-time-temporal-TemporalUnit4774)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalTime this4775 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4776] (.range this4775 java-time-temporal-TemporalField4776)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4777] (.hour this4777)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime this4778 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4779] (.atOffset this4778 java-time-ZoneOffset4779)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4780 ^long long4781] (.minusHours this4780 long4781)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int"] ["int" "int"] ["int" "int" "int"]))} (^js/JSJoda.LocalTime [^int int4782 ^int int4783 ^int int4784 ^int int4785] (js-invoke java.time.LocalTime "of" int4782 int4783 int4784 int4785)) (^js/JSJoda.LocalTime [^int int4786 ^int int4787] (js-invoke java.time.LocalTime "of" int4786 int4787)) (^js/JSJoda.LocalTime [^int int4788 ^int int4789 ^int int4790] (js-invoke java.time.LocalTime "of" int4788 int4789 int4790)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4791] (.nano this4791)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4792 ^long long4793] (.minusSeconds this4792 long4793)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4794] (.second this4794)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4795 ^long long4796] (.plusNanos this4795 long4796)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4797 ^long long4798 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4799] (.plus this4797 long4798 java-time-temporal-TemporalUnit4799)) (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4800 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4801] (.plus this4800 java-time-temporal-TemporalAmount4801)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4802 ^int int4803] (.withHour this4802 int4803)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4804 ^int int4805] (.withMinute this4804 int4805)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4806 ^long long4807] (.plusMinutes this4806 long4807)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalTime this4808 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery4809] (.query this4808 java-time-temporal-TemporalQuery4809)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalTime this4810 ^js/JSJoda.LocalDate java-time-LocalDate4811] (.atDate this4810 java-time-LocalDate4811)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^js/JSJoda.LocalTime this4812] (.toString this4812)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^boolean [^js/JSJoda.LocalTime this4813 ^js/JSJoda.LocalTime java-time-LocalTime4814] (.isBefore this4813 java-time-LocalTime4814)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4815 ^long long4816 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4817] (.minus this4815 long4816 java-time-temporal-TemporalUnit4817)) (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4818 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4819] (.minus this4818 java-time-temporal-TemporalAmount4819)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4820 ^long long4821] (.plusHours this4820 long4821)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4822] (.toSecondOfDay this4822)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalTime this4823 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4824] (.getLong this4823 java-time-temporal-TemporalField4824)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4825 ^int int4826] (.withNano this4825 int4826)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.LocalTime this4827 ^js/JSJoda.Temporal java-time-temporal-Temporal4828 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4829] (.until this4827 java-time-temporal-Temporal4828 java-time-temporal-TemporalUnit4829)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalTime [^long long4830] (js-invoke java.time.LocalTime "ofNanoOfDay" long4830)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor4831] (js-invoke java.time.LocalTime "from" java-time-temporal-TemporalAccessor4831)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^boolean [^js/JSJoda.LocalTime this4832 ^js/JSJoda.LocalTime java-time-LocalTime4833] (.isAfter this4832 java-time-LocalTime4833)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4834 ^long long4835] (.minusNanos this4834 long4835)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^boolean [this4836 G__4837] (.isSupported ^js/JSJoda.LocalTime this4836 G__4837)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.LocalTime [^java.lang.CharSequence java-lang-CharSequence4838] (js-invoke java.time.LocalTime "parse" java-lang-CharSequence4838)) (^js/JSJoda.LocalTime [^java.lang.CharSequence java-lang-CharSequence4839 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4840] (js-invoke java.time.LocalTime "parse" java-lang-CharSequence4839 java-time-format-DateTimeFormatter4840)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4841 ^int int4842] (.withSecond this4841 int4842)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4843] (.minute this4843)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4844] (.hashCode this4844)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalTime this4845 ^js/JSJoda.Temporal java-time-temporal-Temporal4846] (.adjustInto this4845 java-time-temporal-Temporal4846)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4847 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4848 ^long long4849] (.with this4847 java-time-temporal-TemporalField4848 long4849)) (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4850 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster4851] (.with this4850 java-time-temporal-TemporalAdjuster4851)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.LocalTime [] (js-invoke java.time.LocalTime "now")) (^js/JSJoda.LocalTime [G__4853] (js-invoke java.time.LocalTime "now" G__4853)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4854 ^js/JSJoda.LocalTime java-time-LocalTime4855] (.compareTo this4854 java-time-LocalTime4855)))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^js/JSJoda.LocalTime this4856] (.toNanoOfDay this4856)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4857 ^long long4858] (.plusSeconds this4857 long4858)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalTime this4859 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4860] (.get this4859 java-time-temporal-TemporalField4860)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalTime [^long long4861] (js-invoke java.time.LocalTime "ofSecondOfDay" long4861)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalTime this4862 ^java.lang.Object java-lang-Object4863] (.equals this4862 java-lang-Object4863)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalTime this4864 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4865] (.format this4864 java-time-format-DateTimeFormatter4865)))
