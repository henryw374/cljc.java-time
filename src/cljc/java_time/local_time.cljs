(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalTime]]))
(def max (goog.object/get java.time.LocalTime "MAX"))
(def noon (goog.object/get java.time.LocalTime "NOON"))
(def midnight (goog.object/get java.time.LocalTime "MIDNIGHT"))
(def min (goog.object/get java.time.LocalTime "MIN"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4770 ^long long4771] (.minusMinutes this4770 long4771)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4772 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4773] (.truncatedTo this4772 java-time-temporal-TemporalUnit4773)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalTime this4774 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4775] (.range this4774 java-time-temporal-TemporalField4775)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4776] (.hour this4776)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime this4777 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4778] (.atOffset this4777 java-time-ZoneOffset4778)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4779 ^long long4780] (.minusHours this4779 long4780)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int"] ["int" "int"] ["int" "int" "int"]))} (^js/JSJoda.LocalTime [^int int4781 ^int int4782 ^int int4783 ^int int4784] (js-invoke java.time.LocalTime "of" int4781 int4782 int4783 int4784)) (^js/JSJoda.LocalTime [^int int4785 ^int int4786] (js-invoke java.time.LocalTime "of" int4785 int4786)) (^js/JSJoda.LocalTime [^int int4787 ^int int4788 ^int int4789] (js-invoke java.time.LocalTime "of" int4787 int4788 int4789)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4790] (.nano this4790)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4791 ^long long4792] (.minusSeconds this4791 long4792)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4793] (.second this4793)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4794 ^long long4795] (.plusNanos this4794 long4795)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4796 ^long long4797 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4798] (.plus this4796 long4797 java-time-temporal-TemporalUnit4798)) (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4799 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4800] (.plus this4799 java-time-temporal-TemporalAmount4800)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4801 ^int int4802] (.withHour this4801 int4802)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4803 ^int int4804] (.withMinute this4803 int4804)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4805 ^long long4806] (.plusMinutes this4805 long4806)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalTime this4807 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery4808] (.query this4807 java-time-temporal-TemporalQuery4808)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalTime this4809 ^js/JSJoda.LocalDate java-time-LocalDate4810] (.atDate this4809 java-time-LocalDate4810)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^js/JSJoda.LocalTime this4811] (.toString this4811)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^boolean [^js/JSJoda.LocalTime this4812 ^js/JSJoda.LocalTime java-time-LocalTime4813] (.isBefore this4812 java-time-LocalTime4813)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4814 ^long long4815 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4816] (.minus this4814 long4815 java-time-temporal-TemporalUnit4816)) (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4817 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4818] (.minus this4817 java-time-temporal-TemporalAmount4818)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4819 ^long long4820] (.plusHours this4819 long4820)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4821] (.toSecondOfDay this4821)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalTime this4822 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4823] (.getLong this4822 java-time-temporal-TemporalField4823)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4824 ^int int4825] (.withNano this4824 int4825)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.LocalTime this4826 ^js/JSJoda.Temporal java-time-temporal-Temporal4827 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4828] (.until this4826 java-time-temporal-Temporal4827 java-time-temporal-TemporalUnit4828)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalTime [^long long4829] (js-invoke java.time.LocalTime "ofNanoOfDay" long4829)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor4830] (js-invoke java.time.LocalTime "from" java-time-temporal-TemporalAccessor4830)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^boolean [^js/JSJoda.LocalTime this4831 ^js/JSJoda.LocalTime java-time-LocalTime4832] (.isAfter this4831 java-time-LocalTime4832)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4833 ^long long4834] (.minusNanos this4833 long4834)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^boolean [this4835 G__4836] (.isSupported ^js/JSJoda.LocalTime this4835 G__4836)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.LocalTime [^java.lang.CharSequence java-lang-CharSequence4837 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4838] (js-invoke java.time.LocalTime "parse" java-lang-CharSequence4837 java-time-format-DateTimeFormatter4838)) (^js/JSJoda.LocalTime [^java.lang.CharSequence java-lang-CharSequence4839] (js-invoke java.time.LocalTime "parse" java-lang-CharSequence4839)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4840 ^int int4841] (.withSecond this4840 int4841)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4842] (.minute this4842)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4843] (.hashCode this4843)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalTime this4844 ^js/JSJoda.Temporal java-time-temporal-Temporal4845] (.adjustInto this4844 java-time-temporal-Temporal4845)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4846 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4847 ^long long4848] (.with this4846 java-time-temporal-TemporalField4847 long4848)) (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4849 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster4850] (.with this4849 java-time-temporal-TemporalAdjuster4850)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.LocalTime [] (js-invoke java.time.LocalTime "now")) (^js/JSJoda.LocalTime [G__4852] (js-invoke java.time.LocalTime "now" G__4852)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this4853 ^js/JSJoda.LocalTime java-time-LocalTime4854] (.compareTo this4853 java-time-LocalTime4854)))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^js/JSJoda.LocalTime this4855] (.toNanoOfDay this4855)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this4856 ^long long4857] (.plusSeconds this4856 long4857)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalTime this4858 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4859] (.get this4858 java-time-temporal-TemporalField4859)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalTime [^long long4860] (js-invoke java.time.LocalTime "ofSecondOfDay" long4860)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalTime this4861 ^java.lang.Object java-lang-Object4862] (.equals this4861 java-lang-Object4862)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalTime this4863 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4864] (.format this4863 java-time-format-DateTimeFormatter4864)))
