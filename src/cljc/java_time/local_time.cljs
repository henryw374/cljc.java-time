(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalTime]]))
(def max (goog.object/get java.time.LocalTime "MAX"))
(def noon (goog.object/get java.time.LocalTime "NOON"))
(def midnight (goog.object/get java.time.LocalTime "MIDNIGHT"))
(def min (goog.object/get java.time.LocalTime "MIN"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7759 ^long long7760] (.minusMinutes this7759 long7760)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7761 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7762] (.truncatedTo this7761 java-time-temporal-TemporalUnit7762)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalTime this7763 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7764] (.range this7763 java-time-temporal-TemporalField7764)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this7765] (.hour this7765)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime this7766 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7767] (.atOffset this7766 java-time-ZoneOffset7767)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7768 ^long long7769] (.minusHours this7768 long7769)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int"] ["int" "int"] ["int" "int" "int"]))} (^js/JSJoda.LocalTime [^int int7770 ^int int7771 ^int int7772 ^int int7773] (js-invoke java.time.LocalTime "of" int7770 int7771 int7772 int7773)) (^js/JSJoda.LocalTime [^int int7774 ^int int7775] (js-invoke java.time.LocalTime "of" int7774 int7775)) (^js/JSJoda.LocalTime [^int int7776 ^int int7777 ^int int7778] (js-invoke java.time.LocalTime "of" int7776 int7777 int7778)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this7779] (.nano this7779)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7780 ^long long7781] (.minusSeconds this7780 long7781)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this7782] (.second this7782)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7783 ^long long7784] (.plusNanos this7783 long7784)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7785 G__7786 G__7787] (.plus ^js/JSJoda.LocalTime this7785 G__7786 G__7787)) (^java.lang.Object [this7788 G__7789] (.plus ^js/JSJoda.LocalTime this7788 G__7789)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7790 ^int int7791] (.withHour this7790 int7791)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7792 ^int int7793] (.withMinute this7792 int7793)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7794 ^long long7795] (.plusMinutes this7794 long7795)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalTime this7796 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery7797] (.query this7796 java-time-temporal-TemporalQuery7797)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalTime this7798 ^js/JSJoda.LocalDate java-time-LocalDate7799] (.atDate this7798 java-time-LocalDate7799)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^js/JSJoda.LocalTime this7800] (.toString this7800)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^boolean [^js/JSJoda.LocalTime this7801 ^js/JSJoda.LocalTime java-time-LocalTime7802] (.isBefore this7801 java-time-LocalTime7802)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7803 G__7804] (.minus ^js/JSJoda.LocalTime this7803 G__7804)) (^java.lang.Object [this7805 G__7806 G__7807] (.minus ^js/JSJoda.LocalTime this7805 G__7806 G__7807)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7808 ^long long7809] (.plusHours this7808 long7809)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this7810] (.toSecondOfDay this7810)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalTime this7811 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7812] (.getLong this7811 java-time-temporal-TemporalField7812)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7813 ^int int7814] (.withNano this7813 int7814)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.LocalTime this7815 ^js/JSJoda.Temporal java-time-temporal-Temporal7816 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7817] (.until this7815 java-time-temporal-Temporal7816 java-time-temporal-TemporalUnit7817)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalTime [^long long7818] (js-invoke java.time.LocalTime "ofNanoOfDay" long7818)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor7819] (js-invoke java.time.LocalTime "from" java-time-temporal-TemporalAccessor7819)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^boolean [^js/JSJoda.LocalTime this7820 ^js/JSJoda.LocalTime java-time-LocalTime7821] (.isAfter this7820 java-time-LocalTime7821)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7822 ^long long7823] (.minusNanos this7822 long7823)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^boolean [this7824 G__7825] (.isSupported ^js/JSJoda.LocalTime this7824 G__7825)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.LocalTime [^java.lang.CharSequence java-lang-CharSequence7826 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter7827] (js-invoke java.time.LocalTime "parse" java-lang-CharSequence7826 java-time-format-DateTimeFormatter7827)) (^js/JSJoda.LocalTime [^java.lang.CharSequence java-lang-CharSequence7828] (js-invoke java.time.LocalTime "parse" java-lang-CharSequence7828)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7829 ^int int7830] (.withSecond this7829 int7830)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this7831] (.minute this7831)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this7832] (.hashCode this7832)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalTime this7833 ^js/JSJoda.Temporal java-time-temporal-Temporal7834] (.adjustInto this7833 java-time-temporal-Temporal7834)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this7835 G__7836] (.with ^js/JSJoda.LocalTime this7835 G__7836)) (^java.lang.Object [this7837 G__7838 G__7839] (.with ^js/JSJoda.LocalTime this7837 G__7838 G__7839)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^js/JSJoda.LocalTime [G__7841] (js-invoke java.time.LocalTime "now" G__7841)) (^js/JSJoda.LocalTime [] (js-invoke java.time.LocalTime "now")))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.lang.Object"] ["java.time.LocalTime" "java.time.LocalTime"]))} (^int [this7842 G__7843] (.compareTo ^js/JSJoda.LocalTime this7842 G__7843)))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^js/JSJoda.LocalTime this7844] (.toNanoOfDay this7844)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7845 ^long long7846] (.plusSeconds this7845 long7846)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalTime this7847 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7848] (.get this7847 java-time-temporal-TemporalField7848)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalTime [^long long7849] (js-invoke java.time.LocalTime "ofSecondOfDay" long7849)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalTime this7850 ^java.lang.Object java-lang-Object7851] (.equals this7850 java-lang-Object7851)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalTime this7852 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter7853] (.format this7852 java-time-format-DateTimeFormatter7853)))
