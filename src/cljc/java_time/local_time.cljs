(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalTime]]))
(def max (goog.object/get java.time.LocalTime "MAX"))
(def noon (goog.object/get java.time.LocalTime "NOON"))
(def midnight (goog.object/get java.time.LocalTime "MIDNIGHT"))
(def min (goog.object/get java.time.LocalTime "MIN"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7788 ^long long7789] (.minusMinutes this7788 long7789)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7790 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7791] (.truncatedTo this7790 java-time-temporal-TemporalUnit7791)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalTime this7792 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7793] (.range this7792 java-time-temporal-TemporalField7793)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this7794] (.hour this7794)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime this7795 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7796] (.atOffset this7795 java-time-ZoneOffset7796)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7797 ^long long7798] (.minusHours this7797 long7798)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["int" "int" "int" "int"] ["int" "int" "int"]))} (^js/JSJoda.LocalTime [^int int7799 ^int int7800] (js-invoke java.time.LocalTime "of" int7799 int7800)) (^js/JSJoda.LocalTime [^int int7801 ^int int7802 ^int int7803 ^int int7804] (js-invoke java.time.LocalTime "of" int7801 int7802 int7803 int7804)) (^js/JSJoda.LocalTime [^int int7805 ^int int7806 ^int int7807] (js-invoke java.time.LocalTime "of" int7805 int7806 int7807)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this7808] (.nano this7808)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7809 ^long long7810] (.minusSeconds this7809 long7810)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this7811] (.second this7811)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7812 ^long long7813] (.plusNanos this7812 long7813)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7814 G__7815] (.plus ^js/JSJoda.LocalTime this7814 G__7815)) (^java.lang.Object [this7816 G__7817 G__7818] (.plus ^js/JSJoda.LocalTime this7816 G__7817 G__7818)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7819 ^int int7820] (.withHour this7819 int7820)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7821 ^int int7822] (.withMinute this7821 int7822)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7823 ^long long7824] (.plusMinutes this7823 long7824)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalTime this7825 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery7826] (.query this7825 java-time-temporal-TemporalQuery7826)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalTime this7827 ^js/JSJoda.LocalDate java-time-LocalDate7828] (.atDate this7827 java-time-LocalDate7828)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^js/JSJoda.LocalTime this7829] (.toString this7829)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^boolean [^js/JSJoda.LocalTime this7830 ^js/JSJoda.LocalTime java-time-LocalTime7831] (.isBefore this7830 java-time-LocalTime7831)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this7832 G__7833 G__7834] (.minus ^js/JSJoda.LocalTime this7832 G__7833 G__7834)) (^java.lang.Object [this7835 G__7836] (.minus ^js/JSJoda.LocalTime this7835 G__7836)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7837 ^long long7838] (.plusHours this7837 long7838)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this7839] (.toSecondOfDay this7839)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalTime this7840 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7841] (.getLong this7840 java-time-temporal-TemporalField7841)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7842 ^int int7843] (.withNano this7842 int7843)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate" "java.time.ZoneOffset"]))} (^long [^js/JSJoda.LocalTime this7844 ^js/JSJoda.LocalDate java-time-LocalDate7845 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7846] (.toEpochSecond this7844 java-time-LocalDate7845 java-time-ZoneOffset7846)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.LocalTime this7847 ^js/JSJoda.Temporal java-time-temporal-Temporal7848 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7849] (.until this7847 java-time-temporal-Temporal7848 java-time-temporal-TemporalUnit7849)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalTime [^long long7850] (js-invoke java.time.LocalTime "ofNanoOfDay" long7850)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor7851] (js-invoke java.time.LocalTime "from" java-time-temporal-TemporalAccessor7851)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^boolean [^js/JSJoda.LocalTime this7852 ^js/JSJoda.LocalTime java-time-LocalTime7853] (.isAfter this7852 java-time-LocalTime7853)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7854 ^long long7855] (.minusNanos this7854 long7855)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^boolean [this7856 G__7857] (.isSupported ^js/JSJoda.LocalTime this7856 G__7857)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.LocalTime [^java.lang.CharSequence java-lang-CharSequence7858 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter7859] (js-invoke java.time.LocalTime "parse" java-lang-CharSequence7858 java-time-format-DateTimeFormatter7859)) (^js/JSJoda.LocalTime [^java.lang.CharSequence java-lang-CharSequence7860] (js-invoke java.time.LocalTime "parse" java-lang-CharSequence7860)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7861 ^int int7862] (.withSecond this7861 int7862)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this7863] (.minute this7863)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this7864] (.hashCode this7864)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalTime this7865 ^js/JSJoda.Temporal java-time-temporal-Temporal7866] (.adjustInto this7865 java-time-temporal-Temporal7866)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this7867 G__7868 G__7869] (.with ^js/JSJoda.LocalTime this7867 G__7868 G__7869)) (^java.lang.Object [this7870 G__7871] (.with ^js/JSJoda.LocalTime this7870 G__7871)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^js/JSJoda.LocalTime [G__7873] (js-invoke java.time.LocalTime "now" G__7873)) (^js/JSJoda.LocalTime [] (js-invoke java.time.LocalTime "now")))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.lang.Object"] ["java.time.LocalTime" "java.time.LocalTime"]))} (^int [this7874 G__7875] (.compareTo ^js/JSJoda.LocalTime this7874 G__7875)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.LocalTime [^js/JSJoda.Instant java-time-Instant7876 ^js/JSJoda.ZoneId java-time-ZoneId7877] (js-invoke java.time.LocalTime "ofInstant" java-time-Instant7876 java-time-ZoneId7877)))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^js/JSJoda.LocalTime this7878] (.toNanoOfDay this7878)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this7879 ^long long7880] (.plusSeconds this7879 long7880)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalTime this7881 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7882] (.get this7881 java-time-temporal-TemporalField7882)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalTime [^long long7883] (js-invoke java.time.LocalTime "ofSecondOfDay" long7883)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalTime this7884 ^java.lang.Object java-lang-Object7885] (.equals this7884 java-lang-Object7885)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalTime this7886 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter7887] (.format this7886 java-time-format-DateTimeFormatter7887)))
