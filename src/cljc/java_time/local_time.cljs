(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalTime]]))
(def max (. java.time.LocalTime -MAX))
(def noon (. java.time.LocalTime -NOON))
(def midnight (. java.time.LocalTime -MIDNIGHT))
(def min (. java.time.LocalTime -MIN))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this11992 ^long long11993] (.minusMinutes this11992 long11993)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalTime [^java.time.LocalTime this11994 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11995] (.truncatedTo this11994 java-time-temporal-TemporalUnit11995)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalTime this11996 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11997] (.range this11996 java-time-temporal-TemporalField11997)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this11998] (.hour this11998)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime this11999 ^java.time.ZoneOffset java-time-ZoneOffset12000] (.atOffset this11999 java-time-ZoneOffset12000)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this12001 ^long long12002] (.minusHours this12001 long12002)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int"] ["int" "int"] ["int" "int" "int"]))} (^java.time.LocalTime [^java.lang.Integer int12003 ^java.lang.Integer int12004 ^java.lang.Integer int12005 ^java.lang.Integer int12006] (. java.time.LocalTime of int12003 int12004 int12005 int12006)) (^java.time.LocalTime [^java.lang.Integer int12007 ^java.lang.Integer int12008] (. java.time.LocalTime of int12007 int12008)) (^java.time.LocalTime [^java.lang.Integer int12009 ^java.lang.Integer int12010 ^java.lang.Integer int12011] (. java.time.LocalTime of int12009 int12010 int12011)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this12012] (.nano this12012)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this12013 ^long long12014] (.minusSeconds this12013 long12014)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this12015] (.second this12015)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this12016 ^long long12017] (.plusNanos this12016 long12017)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this12018 G__12019 G__12020] (.plus ^java.time.LocalTime this12018 G__12019 G__12020)) (^java.lang.Object [this12021 G__12022] (.plus ^java.time.LocalTime this12021 G__12022)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this12023 ^java.lang.Integer int12024] (.withHour this12023 int12024)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this12025 ^java.lang.Integer int12026] (.withMinute this12025 int12026)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this12027 ^long long12028] (.plusMinutes this12027 long12028)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalTime this12029 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12030] (.query this12029 java-time-temporal-TemporalQuery12030)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^java.time.LocalDateTime [^java.time.LocalTime this12031 ^java.time.LocalDate java-time-LocalDate12032] (.atDate this12031 java-time-LocalDate12032)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^java.time.LocalTime this12033] (.toString this12033)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this12034 ^java.time.LocalTime java-time-LocalTime12035] (.isBefore this12034 java-time-LocalTime12035)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12036 G__12037] (.minus ^java.time.LocalTime this12036 G__12037)) (^java.lang.Object [this12038 G__12039 G__12040] (.minus ^java.time.LocalTime this12038 G__12039 G__12040)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this12041 ^long long12042] (.plusHours this12041 long12042)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this12043] (.toSecondOfDay this12043)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalTime this12044 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12045] (.getLong this12044 java-time-temporal-TemporalField12045)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this12046 ^java.lang.Integer int12047] (.withNano this12046 int12047)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalTime this12048 ^java.time.temporal.Temporal java-time-temporal-Temporal12049 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12050] (.until this12048 java-time-temporal-Temporal12049 java-time-temporal-TemporalUnit12050)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long12051] (. java.time.LocalTime ofNanoOfDay long12051)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12052] (. java.time.LocalTime from java-time-temporal-TemporalAccessor12052)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this12053 ^java.time.LocalTime java-time-LocalTime12054] (.isAfter this12053 java-time-LocalTime12054)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this12055 ^long long12056] (.minusNanos this12055 long12056)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this12057 G__12058] (.isSupported ^java.time.LocalTime this12057 G__12058)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence12059] (. java.time.LocalTime parse java-lang-CharSequence12059)) (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence12060 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12061] (. java.time.LocalTime parse java-lang-CharSequence12060 java-time-format-DateTimeFormatter12061)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this12062 ^java.lang.Integer int12063] (.withSecond this12062 int12063)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this12064] (.minute this12064)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this12065] (.hashCode this12065)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalTime this12066 ^java.time.temporal.Temporal java-time-temporal-Temporal12067] (.adjustInto this12066 java-time-temporal-Temporal12067)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this12068 G__12069] (.with ^java.time.LocalTime this12068 G__12069)) (^java.lang.Object [this12070 G__12071 G__12072] (.with ^java.time.LocalTime this12070 G__12071 G__12072)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^java.time.LocalTime [G__12074] (. java.time.LocalTime now G__12074)) (^java.time.LocalTime [] (. java.time.LocalTime now)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"] ["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Integer [this12075 G__12076] (.compareTo ^java.time.LocalTime this12075 G__12076)))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^java.time.LocalTime this12077] (.toNanoOfDay this12077)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this12078 ^long long12079] (.plusSeconds this12078 long12079)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalTime this12080 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12081] (.get this12080 java-time-temporal-TemporalField12081)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long12082] (. java.time.LocalTime ofSecondOfDay long12082)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalTime this12083 ^java.lang.Object java-lang-Object12084] (.equals this12083 java-lang-Object12084)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalTime this12085 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12086] (.format this12085 java-time-format-DateTimeFormatter12086)))
