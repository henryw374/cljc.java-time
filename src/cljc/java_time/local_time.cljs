(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalTime]]))
(def max (goog.object/get java.time.LocalTime "MAX"))
(def noon (goog.object/get java.time.LocalTime "NOON"))
(def midnight (goog.object/get java.time.LocalTime "MIDNIGHT"))
(def min (goog.object/get java.time.LocalTime "MIN"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60475 ^long long60476] (.minusMinutes this60475 long60476)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60477 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit60478] (.truncatedTo this60477 java-time-temporal-TemporalUnit60478)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalTime this60479 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60480] (.range this60479 java-time-temporal-TemporalField60480)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this60481] (.hour this60481)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime this60482 ^js/JSJoda.ZoneOffset java-time-ZoneOffset60483] (.atOffset this60482 java-time-ZoneOffset60483)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60484 ^long long60485] (.minusHours this60484 long60485)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int"] ["int" "int"] ["int" "int" "int"]))} (^js/JSJoda.LocalTime [^int int60486 ^int int60487 ^int int60488 ^int int60489] (js-invoke java.time.LocalTime "of" int60486 int60487 int60488 int60489)) (^js/JSJoda.LocalTime [^int int60490 ^int int60491] (js-invoke java.time.LocalTime "of" int60490 int60491)) (^js/JSJoda.LocalTime [^int int60492 ^int int60493 ^int int60494] (js-invoke java.time.LocalTime "of" int60492 int60493 int60494)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this60495] (.nano this60495)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60496 ^long long60497] (.minusSeconds this60496 long60497)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this60498] (.second this60498)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60499 ^long long60500] (.plusNanos this60499 long60500)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this60501 G__60502 G__60503] (.plus ^js/JSJoda.LocalTime this60501 G__60502 G__60503)) (^java.lang.Object [this60504 G__60505] (.plus ^js/JSJoda.LocalTime this60504 G__60505)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60506 ^int int60507] (.withHour this60506 int60507)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60508 ^int int60509] (.withMinute this60508 int60509)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60510 ^long long60511] (.plusMinutes this60510 long60511)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalTime this60512 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery60513] (.query this60512 java-time-temporal-TemporalQuery60513)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalTime this60514 ^js/JSJoda.LocalDate java-time-LocalDate60515] (.atDate this60514 java-time-LocalDate60515)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^js/JSJoda.LocalTime this60516] (.toString this60516)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^boolean [^js/JSJoda.LocalTime this60517 ^js/JSJoda.LocalTime java-time-LocalTime60518] (.isBefore this60517 java-time-LocalTime60518)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this60519 G__60520] (.minus ^js/JSJoda.LocalTime this60519 G__60520)) (^java.lang.Object [this60521 G__60522 G__60523] (.minus ^js/JSJoda.LocalTime this60521 G__60522 G__60523)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60524 ^long long60525] (.plusHours this60524 long60525)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this60526] (.toSecondOfDay this60526)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalTime this60527 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60528] (.getLong this60527 java-time-temporal-TemporalField60528)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60529 ^int int60530] (.withNano this60529 int60530)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.LocalTime this60531 ^js/JSJoda.Temporal java-time-temporal-Temporal60532 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit60533] (.until this60531 java-time-temporal-Temporal60532 java-time-temporal-TemporalUnit60533)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalTime [^long long60534] (js-invoke java.time.LocalTime "ofNanoOfDay" long60534)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor60535] (js-invoke java.time.LocalTime "from" java-time-temporal-TemporalAccessor60535)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^boolean [^js/JSJoda.LocalTime this60536 ^js/JSJoda.LocalTime java-time-LocalTime60537] (.isAfter this60536 java-time-LocalTime60537)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60538 ^long long60539] (.minusNanos this60538 long60539)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^boolean [this60540 G__60541] (.isSupported ^js/JSJoda.LocalTime this60540 G__60541)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.LocalTime [^java.lang.CharSequence java-lang-CharSequence60542] (js-invoke java.time.LocalTime "parse" java-lang-CharSequence60542)) (^js/JSJoda.LocalTime [^java.lang.CharSequence java-lang-CharSequence60543 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter60544] (js-invoke java.time.LocalTime "parse" java-lang-CharSequence60543 java-time-format-DateTimeFormatter60544)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60545 ^int int60546] (.withSecond this60545 int60546)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this60547] (.minute this60547)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this60548] (.hashCode this60548)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalTime this60549 ^js/JSJoda.Temporal java-time-temporal-Temporal60550] (.adjustInto this60549 java-time-temporal-Temporal60550)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this60551 G__60552] (.with ^js/JSJoda.LocalTime this60551 G__60552)) (^java.lang.Object [this60553 G__60554 G__60555] (.with ^js/JSJoda.LocalTime this60553 G__60554 G__60555)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^js/JSJoda.LocalTime [G__60557] (js-invoke java.time.LocalTime "now" G__60557)) (^js/JSJoda.LocalTime [] (js-invoke java.time.LocalTime "now")))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"] ["java.time.LocalTime" "java.lang.Object"]))} (^int [this60558 G__60559] (.compareTo ^js/JSJoda.LocalTime this60558 G__60559)))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^js/JSJoda.LocalTime this60560] (.toNanoOfDay this60560)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this60561 ^long long60562] (.plusSeconds this60561 long60562)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalTime this60563 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60564] (.get this60563 java-time-temporal-TemporalField60564)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalTime [^long long60565] (js-invoke java.time.LocalTime "ofSecondOfDay" long60565)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalTime this60566 ^java.lang.Object java-lang-Object60567] (.equals this60566 java-lang-Object60567)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalTime this60568 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter60569] (.format this60568 java-time-format-DateTimeFormatter60569)))
