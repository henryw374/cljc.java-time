(ns cljc.java-time.local-time (:require [java.time :refer [LocalTime]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def max (. java.time.LocalTime -MAX))
(def noon (. java.time.LocalTime -NOON))
(def midnight (. java.time.LocalTime -MIDNIGHT))
(def min (. java.time.LocalTime -MIN))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this49984 ^long long49985] (.minusMinutes this49984 long49985)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalTime [^java.time.LocalTime this49986 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49987] (.truncatedTo this49986 java-time-temporal-TemporalUnit49987)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalTime this49988 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49989] (.range this49988 java-time-temporal-TemporalField49989)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this49990] (.hour this49990)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime this49991 ^java.time.ZoneOffset java-time-ZoneOffset49992] (.atOffset this49991 java-time-ZoneOffset49992)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this49993 ^long long49994] (.minusHours this49993 long49994)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["int" "int" "int"] ["int" "int" "int" "int"]))} (^java.time.LocalTime [^java.lang.Integer int49995 ^java.lang.Integer int49996] (. java.time.LocalTime of int49995 int49996)) (^java.time.LocalTime [^java.lang.Integer int49997 ^java.lang.Integer int49998 ^java.lang.Integer int49999] (. java.time.LocalTime of int49997 int49998 int49999)) (^java.time.LocalTime [^java.lang.Integer int50000 ^java.lang.Integer int50001 ^java.lang.Integer int50002 ^java.lang.Integer int50003] (. java.time.LocalTime of int50000 int50001 int50002 int50003)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this50004] (.nano this50004)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this50005 ^long long50006] (.minusSeconds this50005 long50006)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this50007] (.second this50007)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this50008 ^long long50009] (.plusNanos this50008 long50009)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this50010 G__50011 G__50012] (.plus ^java.time.LocalTime this50010 G__50011 G__50012)) (^java.lang.Object [this50013 G__50014] (.plus ^java.time.LocalTime this50013 G__50014)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this50015 ^java.lang.Integer int50016] (.withHour this50015 int50016)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this50017 ^java.lang.Integer int50018] (.withMinute this50017 int50018)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this50019 ^long long50020] (.plusMinutes this50019 long50020)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalTime this50021 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery50022] (.query this50021 java-time-temporal-TemporalQuery50022)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^java.time.LocalDateTime [^java.time.LocalTime this50023 ^java.time.LocalDate java-time-LocalDate50024] (.atDate this50023 java-time-LocalDate50024)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^java.time.LocalTime this50025] (.toString this50025)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this50026 ^java.time.LocalTime java-time-LocalTime50027] (.isBefore this50026 java-time-LocalTime50027)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this50028 G__50029 G__50030] (.minus ^java.time.LocalTime this50028 G__50029 G__50030)) (^java.lang.Object [this50031 G__50032] (.minus ^java.time.LocalTime this50031 G__50032)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this50033 ^long long50034] (.plusHours this50033 long50034)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this50035] (.toSecondOfDay this50035)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalTime this50036 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50037] (.getLong this50036 java-time-temporal-TemporalField50037)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this50038 ^java.lang.Integer int50039] (.withNano this50038 int50039)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalTime this50040 ^java.time.temporal.Temporal java-time-temporal-Temporal50041 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit50042] (.until this50040 java-time-temporal-Temporal50041 java-time-temporal-TemporalUnit50042)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long50043] (. java.time.LocalTime ofNanoOfDay long50043)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor50044] (. java.time.LocalTime from java-time-temporal-TemporalAccessor50044)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this50045 ^java.time.LocalTime java-time-LocalTime50046] (.isAfter this50045 java-time-LocalTime50046)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this50047 ^long long50048] (.minusNanos this50047 long50048)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"] ["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this50049 G__50050] (.isSupported ^java.time.LocalTime this50049 G__50050)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence50051] (. java.time.LocalTime parse java-lang-CharSequence50051)) (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence50052 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter50053] (. java.time.LocalTime parse java-lang-CharSequence50052 java-time-format-DateTimeFormatter50053)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this50054 ^java.lang.Integer int50055] (.withSecond this50054 int50055)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this50056] (.minute this50056)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this50057] (.hashCode this50057)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalTime this50058 ^java.time.temporal.Temporal java-time-temporal-Temporal50059] (.adjustInto this50058 java-time-temporal-Temporal50059)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this50060 G__50061 G__50062] (.with ^java.time.LocalTime this50060 G__50061 G__50062)) (^java.lang.Object [this50063 G__50064] (.with ^java.time.LocalTime this50063 G__50064)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.LocalTime [] (. java.time.LocalTime now)) (^java.time.LocalTime [G__50066] (. java.time.LocalTime now G__50066)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"] ["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Integer [this50067 G__50068] (.compareTo ^java.time.LocalTime this50067 G__50068)))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^java.time.LocalTime this50069] (.toNanoOfDay this50069)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this50070 ^long long50071] (.plusSeconds this50070 long50071)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalTime this50072 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50073] (.get this50072 java-time-temporal-TemporalField50073)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long50074] (. java.time.LocalTime ofSecondOfDay long50074)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalTime this50075 ^java.lang.Object java-lang-Object50076] (.equals this50075 java-lang-Object50076)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalTime this50077 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter50078] (.format this50077 java-time-format-DateTimeFormatter50078)))
