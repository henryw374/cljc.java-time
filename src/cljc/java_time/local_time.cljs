(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [LocalTime]]))
(def max (goog.object/get java.time.LocalTime "MAX"))
(def noon (goog.object/get java.time.LocalTime "NOON"))
(def midnight (goog.object/get java.time.LocalTime "MIDNIGHT"))
(def min (goog.object/get java.time.LocalTime "MIN"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14288 ^long long14289] (.minusMinutes this14288 long14289)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14290 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14291] (.truncatedTo this14290 java-time-temporal-TemporalUnit14291)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalTime this14292 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14293] (.range this14292 java-time-temporal-TemporalField14293)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this14294] (.hour this14294)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime this14295 ^js/JSJoda.ZoneOffset java-time-ZoneOffset14296] (.atOffset this14295 java-time-ZoneOffset14296)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14297 ^long long14298] (.minusHours this14297 long14298)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"] ["int" "int" "int" "int"] ["int" "int"]))} (^js/JSJoda.LocalTime [^int int14299 ^int int14300 ^int int14301] (js-invoke java.time.LocalTime "of" int14299 int14300 int14301)) (^js/JSJoda.LocalTime [^int int14302 ^int int14303 ^int int14304 ^int int14305] (js-invoke java.time.LocalTime "of" int14302 int14303 int14304 int14305)) (^js/JSJoda.LocalTime [^int int14306 ^int int14307] (js-invoke java.time.LocalTime "of" int14306 int14307)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this14308] (.nano this14308)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14309 ^long long14310] (.minusSeconds this14309 long14310)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this14311] (.second this14311)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14312 ^long long14313] (.plusNanos this14312 long14313)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14314 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount14315] (.plus this14314 java-time-temporal-TemporalAmount14315)) (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14316 ^long long14317 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14318] (.plus this14316 long14317 java-time-temporal-TemporalUnit14318)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14319 ^int int14320] (.withHour this14319 int14320)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14321 ^int int14322] (.withMinute this14321 int14322)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14323 ^long long14324] (.plusMinutes this14323 long14324)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalTime this14325 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery14326] (.query this14325 java-time-temporal-TemporalQuery14326)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalTime this14327 ^js/JSJoda.LocalDate java-time-LocalDate14328] (.atDate this14327 java-time-LocalDate14328)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^js/JSJoda.LocalTime this14329] (.toString this14329)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^boolean [^js/JSJoda.LocalTime this14330 ^js/JSJoda.LocalTime java-time-LocalTime14331] (.isBefore this14330 java-time-LocalTime14331)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14332 ^long long14333 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14334] (.minus this14332 long14333 java-time-temporal-TemporalUnit14334)) (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14335 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount14336] (.minus this14335 java-time-temporal-TemporalAmount14336)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14337 ^long long14338] (.plusHours this14337 long14338)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this14339] (.toSecondOfDay this14339)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalTime this14340 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14341] (.getLong this14340 java-time-temporal-TemporalField14341)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14342 ^int int14343] (.withNano this14342 int14343)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.LocalTime this14344 ^js/JSJoda.Temporal java-time-temporal-Temporal14345 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14346] (.until this14344 java-time-temporal-Temporal14345 java-time-temporal-TemporalUnit14346)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalTime [^long long14347] (js-invoke java.time.LocalTime "ofNanoOfDay" long14347)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor14348] (js-invoke java.time.LocalTime "from" java-time-temporal-TemporalAccessor14348)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^boolean [^js/JSJoda.LocalTime this14349 ^js/JSJoda.LocalTime java-time-LocalTime14350] (.isAfter this14349 java-time-LocalTime14350)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14351 ^long long14352] (.minusNanos this14351 long14352)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^boolean [this14353 G__14354] (.isSupported ^js/JSJoda.LocalTime this14353 G__14354)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.LocalTime [^java.lang.CharSequence java-lang-CharSequence14355] (js-invoke java.time.LocalTime "parse" java-lang-CharSequence14355)) (^js/JSJoda.LocalTime [^java.lang.CharSequence java-lang-CharSequence14356 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter14357] (js-invoke java.time.LocalTime "parse" java-lang-CharSequence14356 java-time-format-DateTimeFormatter14357)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14358 ^int int14359] (.withSecond this14358 int14359)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this14360] (.minute this14360)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this14361] (.hashCode this14361)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalTime this14362 ^js/JSJoda.Temporal java-time-temporal-Temporal14363] (.adjustInto this14362 java-time-temporal-Temporal14363)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14364 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster14365] (.with this14364 java-time-temporal-TemporalAdjuster14365)) (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14366 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14367 ^long long14368] (.with this14366 java-time-temporal-TemporalField14367 long14368)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.LocalTime [] (js-invoke java.time.LocalTime "now")) (^js/JSJoda.LocalTime [G__14370] (js-invoke java.time.LocalTime "now" G__14370)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^int [^js/JSJoda.LocalTime this14371 ^js/JSJoda.LocalTime java-time-LocalTime14372] (.compareTo this14371 java-time-LocalTime14372)))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^js/JSJoda.LocalTime this14373] (.toNanoOfDay this14373)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalTime this14374 ^long long14375] (.plusSeconds this14374 long14375)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalTime this14376 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14377] (.get this14376 java-time-temporal-TemporalField14377)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^js/JSJoda.LocalTime [^long long14378] (js-invoke java.time.LocalTime "ofSecondOfDay" long14378)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalTime this14379 ^java.lang.Object java-lang-Object14380] (.equals this14379 java-lang-Object14380)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalTime this14381 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter14382] (.format this14381 java-time-format-DateTimeFormatter14382)))
