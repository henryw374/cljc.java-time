(ns cljc.java-time.instant (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Instant]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Instant])))
(def min #? (:clj java.time.Instant/MIN :cljs (. java.time.Instant -MIN)))
(def epoch #? (:clj java.time.Instant/EPOCH :cljs (. java.time.Instant -EPOCH)))
(def max #? (:clj java.time.Instant/MAX :cljs (. java.time.Instant -MAX)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this12762 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12763] (.truncatedTo this12762 java-time-temporal-TemporalUnit12763)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Instant this12764 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12765] (.range this12764 java-time-temporal-TemporalField12765)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long"] ["long" "long"]))} (^java.time.Instant [^long long12766] (. java.time.Instant ofEpochSecond long12766)) (^java.time.Instant [^long long12767 ^long long12768] (. java.time.Instant ofEpochSecond long12767 long12768)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.Instant this12769 ^java.time.ZoneOffset java-time-ZoneOffset12770] (.atOffset this12769 java-time-ZoneOffset12770)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this12771 ^long long12772] (.minusMillis this12771 long12772)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this12773] (jti/getter nano this12773)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this12774 ^long long12775] (.plusMillis this12774 long12775)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this12776 ^long long12777] (.minusSeconds this12776 long12777)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this12778 ^long long12779] (.plusNanos this12778 long12779)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12780 G__12781] #? (:cljs (.plus ^java.time.Instant this12780 G__12781) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12781)) (clojure.core/let [G__12781 ^"java.time.temporal.TemporalAmount" G__12781] (.plus ^java.time.Instant this12780 G__12781)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12781)) (clojure.core/let [G__12781 ^"java.time.temporal.TemporalAmount" G__12781] (.plus ^java.time.Instant this12780 G__12781)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12782 G__12783 G__12784] #? (:cljs (.plus ^java.time.Instant this12782 G__12783 G__12784) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12783) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12784)) (clojure.core/let [G__12783 (clojure.core/long G__12783) G__12784 ^"java.time.temporal.TemporalUnit" G__12784] (.plus ^java.time.Instant this12782 G__12783 G__12784)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12783) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12784)) (clojure.core/let [G__12783 (clojure.core/long G__12783) G__12784 ^"java.time.temporal.TemporalUnit" G__12784] (.plus ^java.time.Instant this12782 G__12783 G__12784)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Instant this12785 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12786] (.query this12785 java-time-temporal-TemporalQuery12786)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^java.time.Instant this12787] (.toString this12787)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this12788 ^java.time.Instant java-time-Instant12789] (.isBefore this12788 java-time-Instant12789)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this12790 G__12791] #? (:cljs (.minus ^java.time.Instant this12790 G__12791) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12791)) (clojure.core/let [G__12791 ^"java.time.temporal.TemporalAmount" G__12791] (.minus ^java.time.Instant this12790 G__12791)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12791)) (clojure.core/let [G__12791 ^"java.time.temporal.TemporalAmount" G__12791] (.minus ^java.time.Instant this12790 G__12791)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12792 G__12793 G__12794] #? (:cljs (.minus ^java.time.Instant this12792 G__12793 G__12794) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12793) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12794)) (clojure.core/let [G__12793 (clojure.core/long G__12793) G__12794 ^"java.time.temporal.TemporalUnit" G__12794] (.minus ^java.time.Instant this12792 G__12793 G__12794)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12793) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12794)) (clojure.core/let [G__12793 (clojure.core/long G__12793) G__12794 ^"java.time.temporal.TemporalUnit" G__12794] (.minus ^java.time.Instant this12792 G__12793 G__12794)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant this12795 ^java.time.ZoneId java-time-ZoneId12796] (.atZone this12795 java-time-ZoneId12796)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^java.time.Instant [^long long12797] (. java.time.Instant ofEpochMilli long12797)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^java.time.Instant this12798 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12799] (.getLong this12798 java-time-temporal-TemporalField12799)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Instant this12800 ^java.time.temporal.Temporal java-time-temporal-Temporal12801 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12802] (.until this12800 java-time-temporal-Temporal12801 java-time-temporal-TemporalUnit12802)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Instant [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12803] (. java.time.Instant from java-time-temporal-TemporalAccessor12803)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this12804 ^java.time.Instant java-time-Instant12805] (.isAfter this12804 java-time-Instant12805)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this12806 ^long long12807] (.minusNanos this12806 long12807)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"] ["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this12808 G__12809] #? (:cljs (.isSupported ^java.time.Instant this12808 G__12809) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12809)) (clojure.core/let [G__12809 ^"java.time.temporal.TemporalField" G__12809] (.isSupported ^java.time.Instant this12808 G__12809)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12809)) (clojure.core/let [G__12809 ^"java.time.temporal.TemporalUnit" G__12809] (.isSupported ^java.time.Instant this12808 G__12809)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Instant [^java.lang.CharSequence java-lang-CharSequence12810] (. java.time.Instant parse java-lang-CharSequence12810)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this12811] (.hashCode this12811)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Instant this12812 ^java.time.temporal.Temporal java-time-temporal-Temporal12813] (.adjustInto this12812 java-time-temporal-Temporal12813)))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this12814 G__12815 G__12816] #? (:cljs (.with ^java.time.Instant this12814 G__12815 G__12816) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12815) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12816)) (clojure.core/let [G__12815 ^"java.time.temporal.TemporalField" G__12815 G__12816 (clojure.core/long G__12816)] (.with ^java.time.Instant this12814 G__12815 G__12816)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12815) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12816)) (clojure.core/let [G__12815 ^"java.time.temporal.TemporalField" G__12815 G__12816 (clojure.core/long G__12816)] (.with ^java.time.Instant this12814 G__12815 G__12816)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12817 G__12818] #? (:cljs (.with ^java.time.Instant this12817 G__12818) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12818)) (clojure.core/let [G__12818 ^"java.time.temporal.TemporalAdjuster" G__12818] (.with ^java.time.Instant this12817 G__12818)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12818)) (clojure.core/let [G__12818 ^"java.time.temporal.TemporalAdjuster" G__12818] (.with ^java.time.Instant this12817 G__12818)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"]))} (^java.time.Instant [] (. java.time.Instant now)) (^java.time.Instant [^java.time.Clock java-time-Clock12819] (. java.time.Instant now java-time-Clock12819)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this12820] (.toEpochMilli this12820)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this12821] (jti/getter epochSecond this12821)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.lang.Object"] ["java.time.Instant" "java.time.Instant"]))} (^java.lang.Integer [this12822 G__12823] #? (:cljs (.compareTo ^java.time.Instant this12822 G__12823) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__12823)) (clojure.core/let [G__12823 ^"java.lang.Object" G__12823] (.compareTo ^java.time.Instant this12822 G__12823)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Instant") G__12823)) (clojure.core/let [G__12823 ^"java.time.Instant" G__12823] (.compareTo ^java.time.Instant this12822 G__12823)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this12824 ^long long12825] (.plusSeconds this12824 long12825)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Instant this12826 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12827] (.get this12826 java-time-temporal-TemporalField12827)))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Instant this12828 ^java.lang.Object java-lang-Object12829] (.equals this12828 java-lang-Object12829)))
