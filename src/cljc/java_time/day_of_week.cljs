(ns cljc.java-time.day-of-week (:require [java.time :refer [DayOfWeek]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def saturday (. java.time.DayOfWeek -SATURDAY))
(def thursday (. java.time.DayOfWeek -THURSDAY))
(def friday (. java.time.DayOfWeek -FRIDAY))
(def wednesday (. java.time.DayOfWeek -WEDNESDAY))
(def sunday (. java.time.DayOfWeek -SUNDAY))
(def monday (. java.time.DayOfWeek -MONDAY))
(def tuesday (. java.time.DayOfWeek -TUESDAY))
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this49855 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49856] (.range this49855 java-time-temporal-TemporalField49856)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.DayOfWeek values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String49857] (. java.time.DayOfWeek valueOf java-lang-String49857)) (^java.lang.Enum [^java.lang.Class java-lang-Class49858 ^java.lang.String java-lang-String49859] (. java.time.DayOfWeek valueOf java-lang-Class49858 java-lang-String49859)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int49860] (. java.time.DayOfWeek of int49860)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this49861] (.ordinal this49861)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this49862 ^long long49863] (.plus this49862 long49863)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this49864 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery49865] (.query this49864 java-time-temporal-TemporalQuery49865)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this49866] (.toString this49866)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this49867 ^long long49868] (.minus this49867 long49868)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this49869 ^java.time.format.TextStyle java-time-format-TextStyle49870 ^java.util.Locale java-util-Locale49871] (.displayName this49869 java-time-format-TextStyle49870 java-util-Locale49871)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this49872] (.value this49872)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this49873] (.name this49873)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this49874 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49875] (.getLong this49874 java-time-temporal-TemporalField49875)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this49876] (.declaringClass this49876)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor49877] (. java.time.DayOfWeek from java-time-temporal-TemporalAccessor49877)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this49878 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49879] (.isSupported this49878 java-time-temporal-TemporalField49879)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this49880] (.hashCode this49880)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this49881 ^java.time.temporal.Temporal java-time-temporal-Temporal49882] (.adjustInto this49881 java-time-temporal-Temporal49882)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [this49883 G__49884] (.compareTo ^java.time.DayOfWeek this49883 G__49884)))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this49885 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49886] (.get this49885 java-time-temporal-TemporalField49886)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this49887 ^java.lang.Object java-lang-Object49888] (.equals this49887 java-lang-Object49888)))
