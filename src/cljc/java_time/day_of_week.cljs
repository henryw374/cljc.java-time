(ns cljc.java-time.day-of-week (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [DayOfWeek]]))
(def saturday (. java.time.DayOfWeek -SATURDAY))
(def thursday (. java.time.DayOfWeek -THURSDAY))
(def friday (. java.time.DayOfWeek -FRIDAY))
(def wednesday (. java.time.DayOfWeek -WEDNESDAY))
(def sunday (. java.time.DayOfWeek -SUNDAY))
(def monday (. java.time.DayOfWeek -MONDAY))
(def tuesday (. java.time.DayOfWeek -TUESDAY))
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this11863 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11864] (.range this11863 java-time-temporal-TemporalField11864)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.DayOfWeek values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String11865] (. java.time.DayOfWeek valueOf java-lang-String11865)) (^java.lang.Enum [^java.lang.Class java-lang-Class11866 ^java.lang.String java-lang-String11867] (. java.time.DayOfWeek valueOf java-lang-Class11866 java-lang-String11867)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int11868] (. java.time.DayOfWeek of int11868)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this11869] (.ordinal this11869)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this11870 ^long long11871] (.plus this11870 long11871)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this11872 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery11873] (.query this11872 java-time-temporal-TemporalQuery11873)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this11874] (.toString this11874)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this11875 ^long long11876] (.minus this11875 long11876)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this11877 ^java.time.format.TextStyle java-time-format-TextStyle11878 ^java.util.Locale java-util-Locale11879] (.displayName this11877 java-time-format-TextStyle11878 java-util-Locale11879)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this11880] (.value this11880)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this11881] (.name this11881)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this11882 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11883] (.getLong this11882 java-time-temporal-TemporalField11883)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this11884] (.declaringClass this11884)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor11885] (. java.time.DayOfWeek from java-time-temporal-TemporalAccessor11885)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this11886 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11887] (.isSupported this11886 java-time-temporal-TemporalField11887)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this11888] (.hashCode this11888)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this11889 ^java.time.temporal.Temporal java-time-temporal-Temporal11890] (.adjustInto this11889 java-time-temporal-Temporal11890)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [this11891 G__11892] (.compareTo ^java.time.DayOfWeek this11891 G__11892)))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this11893 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11894] (.get this11893 java-time-temporal-TemporalField11894)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this11895 ^java.lang.Object java-lang-Object11896] (.equals this11895 java-lang-Object11896)))
