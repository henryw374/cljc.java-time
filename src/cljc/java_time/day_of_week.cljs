(ns cljc.java-time.day-of-week (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [DayOfWeek]]))
(def saturday (goog.object/get java.time.DayOfWeek "SATURDAY"))
(def thursday (goog.object/get java.time.DayOfWeek "THURSDAY"))
(def friday (goog.object/get java.time.DayOfWeek "FRIDAY"))
(def wednesday (goog.object/get java.time.DayOfWeek "WEDNESDAY"))
(def sunday (goog.object/get java.time.DayOfWeek "SUNDAY"))
(def monday (goog.object/get java.time.DayOfWeek "MONDAY"))
(def tuesday (goog.object/get java.time.DayOfWeek "TUESDAY"))
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.DayOfWeek this7654 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7655] (.range this7654 java-time-temporal-TemporalField7655)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.DayOfWeek "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.DayOfWeek [^java.lang.String java-lang-String7656] (js-invoke java.time.DayOfWeek "valueOf" java-lang-String7656)) (^java.lang.Enum [^java.lang.Class java-lang-Class7657 ^java.lang.String java-lang-String7658] (js-invoke java.time.DayOfWeek "valueOf" java-lang-Class7657 java-lang-String7658)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.DayOfWeek [^int int7659] (js-invoke java.time.DayOfWeek "of" int7659)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^int [^js/JSJoda.DayOfWeek this7660] (.ordinal this7660)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.DayOfWeek this7661 ^long long7662] (.plus this7661 long7662)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.DayOfWeek this7663 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery7664] (.query this7663 java-time-temporal-TemporalQuery7664)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^js/JSJoda.DayOfWeek this7665] (.toString this7665)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.DayOfWeek this7666 ^long long7667] (.minus this7666 long7667)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.DayOfWeek this7668 ^js/JSJoda.TextStyle java-time-format-TextStyle7669 ^java.util.Locale java-util-Locale7670] (.displayName this7668 java-time-format-TextStyle7669 java-util-Locale7670)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^int [^js/JSJoda.DayOfWeek this7671] (.value this7671)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^js/JSJoda.DayOfWeek this7672] (.name this7672)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.DayOfWeek this7673 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7674] (.getLong this7673 java-time-temporal-TemporalField7674)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^js/JSJoda.DayOfWeek this7675] (.declaringClass this7675)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor7676] (js-invoke java.time.DayOfWeek "from" java-time-temporal-TemporalAccessor7676)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.DayOfWeek this7677 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7678] (.isSupported this7677 java-time-temporal-TemporalField7678)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^int [^js/JSJoda.DayOfWeek this7679] (.hashCode this7679)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.DayOfWeek this7680 ^js/JSJoda.Temporal java-time-temporal-Temporal7681] (.adjustInto this7680 java-time-temporal-Temporal7681)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^int [this7682 G__7683] (.compareTo ^js/JSJoda.DayOfWeek this7682 G__7683)))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.DayOfWeek this7684 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7685] (.get this7684 java-time-temporal-TemporalField7685)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^boolean [^js/JSJoda.DayOfWeek this7686 ^java.lang.Object java-lang-Object7687] (.equals this7686 java-lang-Object7687)))
