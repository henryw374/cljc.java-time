(ns cljc.java-time.day-of-week (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [DayOfWeek]]))
(def saturday (goog.object/get java.time.DayOfWeek "SATURDAY"))
(def thursday (goog.object/get java.time.DayOfWeek "THURSDAY"))
(def friday (goog.object/get java.time.DayOfWeek "FRIDAY"))
(def wednesday (goog.object/get java.time.DayOfWeek "WEDNESDAY"))
(def sunday (goog.object/get java.time.DayOfWeek "SUNDAY"))
(def monday (goog.object/get java.time.DayOfWeek "MONDAY"))
(def tuesday (goog.object/get java.time.DayOfWeek "TUESDAY"))
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.DayOfWeek this4642 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4643] (.range this4642 java-time-temporal-TemporalField4643)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.DayOfWeek "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.DayOfWeek [^java.lang.String java-lang-String4644] (js-invoke java.time.DayOfWeek "valueOf" java-lang-String4644)) (^java.lang.Enum [^java.lang.Class java-lang-Class4645 ^java.lang.String java-lang-String4646] (js-invoke java.time.DayOfWeek "valueOf" java-lang-Class4645 java-lang-String4646)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.DayOfWeek [^int int4647] (js-invoke java.time.DayOfWeek "of" int4647)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^int [^js/JSJoda.DayOfWeek this4648] (.ordinal this4648)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.DayOfWeek this4649 ^long long4650] (.plus this4649 long4650)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.DayOfWeek this4651 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery4652] (.query this4651 java-time-temporal-TemporalQuery4652)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^js/JSJoda.DayOfWeek this4653] (.toString this4653)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.DayOfWeek this4654 ^long long4655] (.minus this4654 long4655)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.DayOfWeek this4656 ^js/JSJoda.TextStyle java-time-format-TextStyle4657 ^java.util.Locale java-util-Locale4658] (.displayName this4656 java-time-format-TextStyle4657 java-util-Locale4658)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^int [^js/JSJoda.DayOfWeek this4659] (.value this4659)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^js/JSJoda.DayOfWeek this4660] (.name this4660)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.DayOfWeek this4661 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4662] (.getLong this4661 java-time-temporal-TemporalField4662)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^js/JSJoda.DayOfWeek this4663] (.declaringClass this4663)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor4664] (js-invoke java.time.DayOfWeek "from" java-time-temporal-TemporalAccessor4664)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.DayOfWeek this4665 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4666] (.isSupported this4665 java-time-temporal-TemporalField4666)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^int [^js/JSJoda.DayOfWeek this4667] (.hashCode this4667)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.DayOfWeek this4668 ^js/JSJoda.Temporal java-time-temporal-Temporal4669] (.adjustInto this4668 java-time-temporal-Temporal4669)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Enum"]))} (^int [^js/JSJoda.DayOfWeek this4670 ^java.lang.Enum java-lang-Enum4671] (.compareTo this4670 java-lang-Enum4671)))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.DayOfWeek this4672 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4673] (.get this4672 java-time-temporal-TemporalField4673)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^boolean [^js/JSJoda.DayOfWeek this4674 ^java.lang.Object java-lang-Object4675] (.equals this4674 java-lang-Object4675)))
