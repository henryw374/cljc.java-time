(ns cljc.java-time.day-of-week (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [DayOfWeek]]))
(def saturday (goog.object/get java.time.DayOfWeek "SATURDAY"))
(def thursday (goog.object/get java.time.DayOfWeek "THURSDAY"))
(def friday (goog.object/get java.time.DayOfWeek "FRIDAY"))
(def wednesday (goog.object/get java.time.DayOfWeek "WEDNESDAY"))
(def sunday (goog.object/get java.time.DayOfWeek "SUNDAY"))
(def monday (goog.object/get java.time.DayOfWeek "MONDAY"))
(def tuesday (goog.object/get java.time.DayOfWeek "TUESDAY"))
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.DayOfWeek this7630 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7631] (.range this7630 java-time-temporal-TemporalField7631)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.DayOfWeek "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.DayOfWeek [^java.lang.String java-lang-String7632] (js-invoke java.time.DayOfWeek "valueOf" java-lang-String7632)) (^java.lang.Enum [^java.lang.Class java-lang-Class7633 ^java.lang.String java-lang-String7634] (js-invoke java.time.DayOfWeek "valueOf" java-lang-Class7633 java-lang-String7634)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.DayOfWeek [^int int7635] (js-invoke java.time.DayOfWeek "of" int7635)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^int [^js/JSJoda.DayOfWeek this7636] (.ordinal this7636)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.DayOfWeek this7637 ^long long7638] (.plus this7637 long7638)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.DayOfWeek this7639 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery7640] (.query this7639 java-time-temporal-TemporalQuery7640)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^js/JSJoda.DayOfWeek this7641] (.toString this7641)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.DayOfWeek this7642 ^long long7643] (.minus this7642 long7643)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.DayOfWeek this7644 ^js/JSJoda.TextStyle java-time-format-TextStyle7645 ^java.util.Locale java-util-Locale7646] (.displayName this7644 java-time-format-TextStyle7645 java-util-Locale7646)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^int [^js/JSJoda.DayOfWeek this7647] (.value this7647)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^js/JSJoda.DayOfWeek this7648] (.name this7648)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.DayOfWeek this7649 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7650] (.getLong this7649 java-time-temporal-TemporalField7650)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^js/JSJoda.DayOfWeek this7651] (.declaringClass this7651)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor7652] (js-invoke java.time.DayOfWeek "from" java-time-temporal-TemporalAccessor7652)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.DayOfWeek this7653 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7654] (.isSupported this7653 java-time-temporal-TemporalField7654)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^int [^js/JSJoda.DayOfWeek this7655] (.hashCode this7655)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.DayOfWeek this7656 ^js/JSJoda.Temporal java-time-temporal-Temporal7657] (.adjustInto this7656 java-time-temporal-Temporal7657)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^int [this7658 G__7659] (.compareTo ^js/JSJoda.DayOfWeek this7658 G__7659)))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.DayOfWeek this7660 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7661] (.get this7660 java-time-temporal-TemporalField7661)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^boolean [^js/JSJoda.DayOfWeek this7662 ^java.lang.Object java-lang-Object7663] (.equals this7662 java-lang-Object7663)))
