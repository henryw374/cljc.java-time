(ns cljc.java-time.day-of-week (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [DayOfWeek]]))
(def saturday (goog.object/get java.time.DayOfWeek "SATURDAY"))
(def thursday (goog.object/get java.time.DayOfWeek "THURSDAY"))
(def friday (goog.object/get java.time.DayOfWeek "FRIDAY"))
(def wednesday (goog.object/get java.time.DayOfWeek "WEDNESDAY"))
(def sunday (goog.object/get java.time.DayOfWeek "SUNDAY"))
(def monday (goog.object/get java.time.DayOfWeek "MONDAY"))
(def tuesday (goog.object/get java.time.DayOfWeek "TUESDAY"))
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.DayOfWeek this60346 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60347] (.range this60346 java-time-temporal-TemporalField60347)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.DayOfWeek "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.DayOfWeek [^java.lang.String java-lang-String60348] (js-invoke java.time.DayOfWeek "valueOf" java-lang-String60348)) (^java.lang.Enum [^java.lang.Class java-lang-Class60349 ^java.lang.String java-lang-String60350] (js-invoke java.time.DayOfWeek "valueOf" java-lang-Class60349 java-lang-String60350)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.DayOfWeek [^int int60351] (js-invoke java.time.DayOfWeek "of" int60351)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^int [^js/JSJoda.DayOfWeek this60352] (.ordinal this60352)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.DayOfWeek this60353 ^long long60354] (.plus this60353 long60354)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.DayOfWeek this60355 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery60356] (.query this60355 java-time-temporal-TemporalQuery60356)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^js/JSJoda.DayOfWeek this60357] (.toString this60357)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.DayOfWeek this60358 ^long long60359] (.minus this60358 long60359)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.DayOfWeek this60360 ^js/JSJoda.TextStyle java-time-format-TextStyle60361 ^java.util.Locale java-util-Locale60362] (.displayName this60360 java-time-format-TextStyle60361 java-util-Locale60362)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^int [^js/JSJoda.DayOfWeek this60363] (.value this60363)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^js/JSJoda.DayOfWeek this60364] (.name this60364)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.DayOfWeek this60365 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60366] (.getLong this60365 java-time-temporal-TemporalField60366)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^js/JSJoda.DayOfWeek this60367] (.declaringClass this60367)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor60368] (js-invoke java.time.DayOfWeek "from" java-time-temporal-TemporalAccessor60368)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.DayOfWeek this60369 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60370] (.isSupported this60369 java-time-temporal-TemporalField60370)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^int [^js/JSJoda.DayOfWeek this60371] (.hashCode this60371)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.DayOfWeek this60372 ^js/JSJoda.Temporal java-time-temporal-Temporal60373] (.adjustInto this60372 java-time-temporal-Temporal60373)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^int [this60374 G__60375] (.compareTo ^js/JSJoda.DayOfWeek this60374 G__60375)))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.DayOfWeek this60376 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60377] (.get this60376 java-time-temporal-TemporalField60377)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^boolean [^js/JSJoda.DayOfWeek this60378 ^java.lang.Object java-lang-Object60379] (.equals this60378 java-lang-Object60379)))
