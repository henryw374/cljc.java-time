(ns cljc.java-time.month-day (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [MonthDay]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time MonthDay])))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.LocalDate [^java.time.MonthDay this4376 ^java.lang.Integer int4377] (.atYear this4376 int4377)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.MonthDay this4378 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4379] (.range this4378 java-time-temporal-TemporalField4379)))
(clojure.core/defn of {:arglists (quote (["java.time.Month" "int"] ["int" "int"]))} (^java.time.MonthDay [G__4381 G__4382] #? (:cljs (. java.time.MonthDay of G__4381 G__4382) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__4381) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__4382)) (clojure.core/let [G__4381 ^"java.time.Month" G__4381 G__4382 (clojure.core/int G__4382)] (. java.time.MonthDay of G__4381 G__4382)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__4381) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__4382)) (clojure.core/let [G__4381 (clojure.core/int G__4381) G__4382 (clojure.core/int G__4382)] (. java.time.MonthDay of G__4381 G__4382)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this4383 ^java.lang.Integer int4384] (.withMonth this4383 int4384)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.MonthDay this4385 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4386] (.query this4385 java-time-temporal-TemporalQuery4386)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^java.time.MonthDay this4387] (.toString this4387)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this4388 ^java.time.MonthDay java-time-MonthDay4389] (.isBefore this4388 java-time-MonthDay4389)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^java.time.MonthDay this4390 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4391] (.getLong this4390 java-time-temporal-TemporalField4391)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this4392 ^java.lang.Integer int4393] (.withDayOfMonth this4392 int4393)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this4394] (jti/getter dayOfMonth this4394)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.MonthDay [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4395] (. java.time.MonthDay from java-time-temporal-TemporalAccessor4395)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this4396 ^java.time.MonthDay java-time-MonthDay4397] (.isAfter this4396 java-time-MonthDay4397)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.MonthDay this4398 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4399] (.isSupported this4398 java-time-temporal-TemporalField4399)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence4400] (. java.time.MonthDay parse java-lang-CharSequence4400)) (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence4401 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4402] (. java.time.MonthDay parse java-lang-CharSequence4401 java-time-format-DateTimeFormatter4402)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.lang.Boolean [^java.time.MonthDay this4403 ^java.lang.Integer int4404] (.isValidYear this4403 int4404)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this4405] (.hashCode this4405)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.MonthDay this4406 ^java.time.temporal.Temporal java-time-temporal-Temporal4407] (.adjustInto this4406 java-time-temporal-Temporal4407)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^java.time.MonthDay [^java.time.MonthDay this4408 ^java.time.Month java-time-Month4409] (.with this4408 java-time-Month4409)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^java.time.MonthDay [G__4411] #? (:cljs (. java.time.MonthDay now G__4411) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__4411)) (clojure.core/let [G__4411 ^"java.time.ZoneId" G__4411] (. java.time.MonthDay now G__4411)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__4411)) (clojure.core/let [G__4411 ^"java.time.Clock" G__4411] (. java.time.MonthDay now G__4411)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.MonthDay [] (. java.time.MonthDay now)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this4412] (jti/getter monthValue this4412)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"] ["java.time.MonthDay" "java.lang.Object"]))} (^java.lang.Integer [this4413 G__4414] #? (:cljs (.compareTo ^java.time.MonthDay this4413 G__4414) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.MonthDay") G__4414)) (clojure.core/let [G__4414 ^"java.time.MonthDay" G__4414] (.compareTo ^java.time.MonthDay this4413 G__4414)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__4414)) (clojure.core/let [G__4414 ^"java.lang.Object" G__4414] (.compareTo ^java.time.MonthDay this4413 G__4414)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^java.time.Month [^java.time.MonthDay this4415] (jti/getter month this4415)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.MonthDay this4416 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4417] (.get this4416 java-time-temporal-TemporalField4417)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.MonthDay this4418 ^java.lang.Object java-lang-Object4419] (.equals this4418 java-lang-Object4419)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.MonthDay this4420 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4421] (.format this4420 java-time-format-DateTimeFormatter4421)))
