(ns cljc.java-time.month-day (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [MonthDay]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time MonthDay])))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.LocalDate [^java.time.MonthDay this13157 ^java.lang.Integer int13158] (.atYear this13157 int13158)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.MonthDay this13159 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13160] (.range this13159 java-time-temporal-TemporalField13160)))
(clojure.core/defn of {:arglists (quote (["java.time.Month" "int"] ["int" "int"]))} (^java.time.MonthDay [G__13162 G__13163] #? (:cljs (. java.time.MonthDay of G__13162 G__13163) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__13162) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13163)) (clojure.core/let [G__13162 ^"java.time.Month" G__13162 G__13163 (clojure.core/int G__13163)] (. java.time.MonthDay of G__13162 G__13163)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13162) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13163)) (clojure.core/let [G__13162 (clojure.core/int G__13162) G__13163 (clojure.core/int G__13163)] (. java.time.MonthDay of G__13162 G__13163)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this13164 ^java.lang.Integer int13165] (.withMonth this13164 int13165)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.MonthDay this13166 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13167] (.query this13166 java-time-temporal-TemporalQuery13167)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^java.time.MonthDay this13168] (.toString this13168)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this13169 ^java.time.MonthDay java-time-MonthDay13170] (.isBefore this13169 java-time-MonthDay13170)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^java.time.MonthDay this13171 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13172] (.getLong this13171 java-time-temporal-TemporalField13172)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this13173 ^java.lang.Integer int13174] (.withDayOfMonth this13173 int13174)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this13175] (jti/getter dayOfMonth this13175)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.MonthDay [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13176] (. java.time.MonthDay from java-time-temporal-TemporalAccessor13176)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this13177 ^java.time.MonthDay java-time-MonthDay13178] (.isAfter this13177 java-time-MonthDay13178)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.MonthDay this13179 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13180] (.isSupported this13179 java-time-temporal-TemporalField13180)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence13181 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13182] (. java.time.MonthDay parse java-lang-CharSequence13181 java-time-format-DateTimeFormatter13182)) (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence13183] (. java.time.MonthDay parse java-lang-CharSequence13183)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.lang.Boolean [^java.time.MonthDay this13184 ^java.lang.Integer int13185] (.isValidYear this13184 int13185)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this13186] (.hashCode this13186)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.MonthDay this13187 ^java.time.temporal.Temporal java-time-temporal-Temporal13188] (.adjustInto this13187 java-time-temporal-Temporal13188)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^java.time.MonthDay [^java.time.MonthDay this13189 ^java.time.Month java-time-Month13190] (.with this13189 java-time-Month13190)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^java.time.MonthDay [G__13192] #? (:cljs (. java.time.MonthDay now G__13192) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13192)) (clojure.core/let [G__13192 ^"java.time.ZoneId" G__13192] (. java.time.MonthDay now G__13192)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__13192)) (clojure.core/let [G__13192 ^"java.time.Clock" G__13192] (. java.time.MonthDay now G__13192)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.MonthDay [] (. java.time.MonthDay now)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this13193] (jti/getter monthValue this13193)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.lang.Object"] ["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Integer [this13194 G__13195] #? (:cljs (.compareTo ^java.time.MonthDay this13194 G__13195) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13195)) (clojure.core/let [G__13195 ^"java.lang.Object" G__13195] (.compareTo ^java.time.MonthDay this13194 G__13195)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.MonthDay") G__13195)) (clojure.core/let [G__13195 ^"java.time.MonthDay" G__13195] (.compareTo ^java.time.MonthDay this13194 G__13195)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^java.time.Month [^java.time.MonthDay this13196] (jti/getter month this13196)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.MonthDay this13197 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13198] (.get this13197 java-time-temporal-TemporalField13198)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.MonthDay this13199 ^java.lang.Object java-lang-Object13200] (.equals this13199 java-lang-Object13200)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.MonthDay this13201 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13202] (.format this13201 java-time-format-DateTimeFormatter13202)))
