(ns cljc.java-time.zone-id (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZoneId]]))
(def short-ids (. java.time.ZoneId -SHORT_IDS))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneId getAvailableZoneIds)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.time.ZoneId [^java.lang.String java-lang-String11813] (. java.time.ZoneId of java-lang-String11813)) (^java.time.ZoneId [^java.lang.String java-lang-String11814 ^java.util.Map java-util-Map11815] (. java.time.ZoneId of java-lang-String11814 java-util-Map11815)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String11816 ^java.time.ZoneOffset java-time-ZoneOffset11817] (. java.time.ZoneId ofOffset java-lang-String11816 java-time-ZoneOffset11817)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this11818] (.toString this11818)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneId" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneId this11819 ^java.time.format.TextStyle java-time-format-TextStyle11820 ^java.util.Locale java-util-Locale11821] (.displayName this11819 java-time-format-TextStyle11820 java-util-Locale11821)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneId"]))} (^java.time.zone.ZoneRules [^java.time.ZoneId this11822] (.rules this11822)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this11823] (.id this11823)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneId"]))} (^java.time.ZoneId [^java.time.ZoneId this11824] (.normalized this11824)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneId systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZoneId [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor11825] (. java.time.ZoneId from java-time-temporal-TemporalAccessor11825)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.Integer [^java.time.ZoneId this11826] (.hashCode this11826)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneId" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneId this11827 ^java.lang.Object java-lang-Object11828] (.equals this11827 java-lang-Object11828)))
