(ns cljc.java-time.zone-id (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [ZoneId]]))
(def short-ids (goog.object/get java.time.ZoneId "SHORT_IDS"))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (js-invoke java.time.ZoneId "getAvailableZoneIds")))
(clojure.core/defn of {:arglists (quote (["java.lang.String" "java.util.Map"] ["java.lang.String"]))} (^js/JSJoda.ZoneId [^java.lang.String java-lang-String14109 ^java.util.Map java-util-Map14110] (js-invoke java.time.ZoneId "of" java-lang-String14109 java-util-Map14110)) (^js/JSJoda.ZoneId [^java.lang.String java-lang-String14111] (js-invoke java.time.ZoneId "of" java-lang-String14111)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^java.lang.String java-lang-String14112 ^js/JSJoda.ZoneOffset java-time-ZoneOffset14113] (js-invoke java.time.ZoneId "ofOffset" java-lang-String14112 java-time-ZoneOffset14113)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^js/JSJoda.ZoneId this14114] (.toString this14114)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneId" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.ZoneId this14115 ^js/JSJoda.TextStyle java-time-format-TextStyle14116 ^java.util.Locale java-util-Locale14117] (.displayName this14115 java-time-format-TextStyle14116 java-util-Locale14117)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.ZoneRules [^js/JSJoda.ZoneId this14118] (.rules this14118)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^js/JSJoda.ZoneId this14119] (.id this14119)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZoneId this14120] (.normalized this14120)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^js/JSJoda.ZoneId [] (js-invoke java.time.ZoneId "systemDefault")))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ZoneId [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor14121] (js-invoke java.time.ZoneId "from" java-time-temporal-TemporalAccessor14121)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneId"]))} (^int [^js/JSJoda.ZoneId this14122] (.hashCode this14122)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneId" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZoneId this14123 ^java.lang.Object java-lang-Object14124] (.equals this14123 java-lang-Object14124)))
