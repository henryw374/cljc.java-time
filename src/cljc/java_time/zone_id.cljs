(ns cljc.java-time.zone-id (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZoneId]]))
(def short-ids (goog.object/get java.time.ZoneId "SHORT_IDS"))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (js-invoke java.time.ZoneId "getAvailableZoneIds")))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^js/JSJoda.ZoneId [^java.lang.String java-lang-String60296] (js-invoke java.time.ZoneId "of" java-lang-String60296)) (^js/JSJoda.ZoneId [^java.lang.String java-lang-String60297 ^java.util.Map java-util-Map60298] (js-invoke java.time.ZoneId "of" java-lang-String60297 java-util-Map60298)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^java.lang.String java-lang-String60299 ^js/JSJoda.ZoneOffset java-time-ZoneOffset60300] (js-invoke java.time.ZoneId "ofOffset" java-lang-String60299 java-time-ZoneOffset60300)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^js/JSJoda.ZoneId this60301] (.toString this60301)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneId" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.ZoneId this60302 ^js/JSJoda.TextStyle java-time-format-TextStyle60303 ^java.util.Locale java-util-Locale60304] (.displayName this60302 java-time-format-TextStyle60303 java-util-Locale60304)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.ZoneRules [^js/JSJoda.ZoneId this60305] (.rules this60305)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^js/JSJoda.ZoneId this60306] (.id this60306)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZoneId this60307] (.normalized this60307)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^js/JSJoda.ZoneId [] (js-invoke java.time.ZoneId "systemDefault")))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ZoneId [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor60308] (js-invoke java.time.ZoneId "from" java-time-temporal-TemporalAccessor60308)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneId"]))} (^int [^js/JSJoda.ZoneId this60309] (.hashCode this60309)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneId" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZoneId this60310 ^java.lang.Object java-lang-Object60311] (.equals this60310 java-lang-Object60311)))
