(ns cljc.java-time.zone-id (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZoneId]]))
(def short-ids (goog.object/get java.time.ZoneId "SHORT_IDS"))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (js-invoke java.time.ZoneId "getAvailableZoneIds")))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^js/JSJoda.ZoneId [^java.lang.String java-lang-String7604] (js-invoke java.time.ZoneId "of" java-lang-String7604)) (^js/JSJoda.ZoneId [^java.lang.String java-lang-String7605 ^java.util.Map java-util-Map7606] (js-invoke java.time.ZoneId "of" java-lang-String7605 java-util-Map7606)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^java.lang.String java-lang-String7607 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7608] (js-invoke java.time.ZoneId "ofOffset" java-lang-String7607 java-time-ZoneOffset7608)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^js/JSJoda.ZoneId this7609] (.toString this7609)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneId" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.ZoneId this7610 ^js/JSJoda.TextStyle java-time-format-TextStyle7611 ^java.util.Locale java-util-Locale7612] (.displayName this7610 java-time-format-TextStyle7611 java-util-Locale7612)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.ZoneRules [^js/JSJoda.ZoneId this7613] (.rules this7613)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^js/JSJoda.ZoneId this7614] (.id this7614)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZoneId this7615] (.normalized this7615)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^js/JSJoda.ZoneId [] (js-invoke java.time.ZoneId "systemDefault")))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ZoneId [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor7616] (js-invoke java.time.ZoneId "from" java-time-temporal-TemporalAccessor7616)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneId"]))} (^int [^js/JSJoda.ZoneId this7617] (.hashCode this7617)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneId" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZoneId this7618 ^java.lang.Object java-lang-Object7619] (.equals this7618 java-lang-Object7619)))
