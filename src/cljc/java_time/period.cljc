(ns cljc.java-time.period (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Period]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Period])))
(def zero #? (:clj java.time.Period/ZERO :cljs (. java.time.Period -ZERO)))
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this12201] (jti/getter months this12201)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int12202] (. java.time.Period ofWeeks int12202)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int12203] (. java.time.Period ofDays int12203)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this12204] (.isNegative this12204)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^java.time.Period [^java.lang.Integer int12205 ^java.lang.Integer int12206 ^java.lang.Integer int12207] (. java.time.Period of int12205 int12206 int12207)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this12208] (.isZero this12208)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"] ["java.time.Period" "int"]))} (^java.lang.Object [this12209 G__12210] #? (:cljs (.multipliedBy ^java.time.Period this12209 G__12210) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12210)) (clojure.core/let [G__12210 (clojure.core/int G__12210)] (.multipliedBy ^java.time.Period this12209 G__12210)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12210)) (clojure.core/let [G__12210 (clojure.core/int G__12210)] (.multipliedBy ^java.time.Period this12209 G__12210)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^java.time.Period this12211] (jti/getter units this12211)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this12212 ^java.lang.Integer int12213] (.withDays this12212 int12213)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12214 G__12215] #? (:cljs (.plus ^java.time.Period this12214 G__12215) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12215)) (clojure.core/let [G__12215 ^"java.time.temporal.TemporalAmount" G__12215] (.plus ^java.time.Period this12214 G__12215)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12215)) (clojure.core/let [G__12215 ^"java.time.temporal.TemporalAmount" G__12215] (.plus ^java.time.Period this12214 G__12215)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int12216] (. java.time.Period ofMonths int12216)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^java.time.Period this12217] (.toString this12217)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this12218 ^long long12219] (.plusMonths this12218 long12219)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this12220 ^long long12221] (.minusMonths this12220 long12221)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12222 G__12223] #? (:cljs (.minus ^java.time.Period this12222 G__12223) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12223)) (clojure.core/let [G__12223 ^"java.time.temporal.TemporalAmount" G__12223] (.minus ^java.time.Period this12222 G__12223)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12223)) (clojure.core/let [G__12223 ^"java.time.temporal.TemporalAmount" G__12223] (.minus ^java.time.Period this12222 G__12223)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this12224 ^java.time.temporal.Temporal java-time-temporal-Temporal12225] (.addTo this12224 java-time-temporal-Temporal12225)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^java.time.Period this12226] (.toTotalMonths this12226)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this12227 ^long long12228] (.plusDays this12227 long12228)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int12229] (. java.time.Period ofYears int12229)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this12230] (jti/getter days this12230)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this12231] #? (:cljs (.negated ^java.time.Period this12231) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this12231)) (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this12231)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this12232] (jti/getter years this12232)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this12233 ^java.lang.Integer int12234] (.withYears this12233 int12234)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this12235] #? (:cljs (.normalized ^java.time.Period this12235) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this12235)) (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this12235)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this12236 ^java.lang.Integer int12237] (.withMonths this12236 int12237)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^java.time.Period [^java.time.LocalDate java-time-LocalDate12238 ^java.time.LocalDate java-time-LocalDate12239] (. java.time.Period between java-time-LocalDate12238 java-time-LocalDate12239)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount12240] (. java.time.Period from java-time-temporal-TemporalAmount12240)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this12241 ^long long12242] (.minusYears this12241 long12242)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this12243] #? (:cljs (jti/getter chronology ^java.time.Period this12243) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.Period this12243)) (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.Period this12243)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Period [^java.lang.CharSequence java-lang-CharSequence12244] (. java.time.Period parse java-lang-CharSequence12244)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this12245] (.hashCode this12245)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this12246 ^java.time.temporal.Temporal java-time-temporal-Temporal12247] (.subtractFrom this12246 java-time-temporal-Temporal12247)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Period this12248 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12249] (.get this12248 java-time-temporal-TemporalUnit12249)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Period this12250 ^java.lang.Object java-lang-Object12251] (.equals this12250 java-lang-Object12251)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this12252 ^long long12253] (.plusYears this12252 long12253)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this12254 ^long long12255] (.minusDays this12254 long12255)))
