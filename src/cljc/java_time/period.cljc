(ns cljc.java-time.period (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Period]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Period])))
(def zero (. java.time.Period -ZERO))
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this3420] (jti/getter months this3420)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int3421] (. java.time.Period ofWeeks int3421)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int3422] (. java.time.Period ofDays int3422)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this3423] (.isNegative this3423)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^java.time.Period [^java.lang.Integer int3424 ^java.lang.Integer int3425 ^java.lang.Integer int3426] (. java.time.Period of int3424 int3425 int3426)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this3427] (.isZero this3427)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"] ["java.time.Period" "int"]))} (^java.lang.Object [this3428 G__3429] #? (:cljs (.multipliedBy ^java.time.Period this3428 G__3429) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__3429)) (clojure.core/let [G__3429 (clojure.core/int G__3429)] (.multipliedBy ^java.time.Period this3428 G__3429)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__3429)) (clojure.core/let [G__3429 (clojure.core/int G__3429)] (.multipliedBy ^java.time.Period this3428 G__3429)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^java.time.Period this3430] (jti/getter units this3430)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this3431 ^java.lang.Integer int3432] (.withDays this3431 int3432)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this3433 G__3434] #? (:cljs (.plus ^java.time.Period this3433 G__3434) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3434)) (clojure.core/let [G__3434 ^"java.time.temporal.TemporalAmount" G__3434] (.plus ^java.time.Period this3433 G__3434)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3434)) (clojure.core/let [G__3434 ^"java.time.temporal.TemporalAmount" G__3434] (.plus ^java.time.Period this3433 G__3434)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int3435] (. java.time.Period ofMonths int3435)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^java.time.Period this3436] (.toString this3436)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this3437 ^long long3438] (.plusMonths this3437 long3438)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this3439 ^long long3440] (.minusMonths this3439 long3440)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this3441 G__3442] #? (:cljs (.minus ^java.time.Period this3441 G__3442) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3442)) (clojure.core/let [G__3442 ^"java.time.temporal.TemporalAmount" G__3442] (.minus ^java.time.Period this3441 G__3442)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3442)) (clojure.core/let [G__3442 ^"java.time.temporal.TemporalAmount" G__3442] (.minus ^java.time.Period this3441 G__3442)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this3443 ^java.time.temporal.Temporal java-time-temporal-Temporal3444] (.addTo this3443 java-time-temporal-Temporal3444)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^java.time.Period this3445] (.toTotalMonths this3445)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this3446 ^long long3447] (.plusDays this3446 long3447)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int3448] (. java.time.Period ofYears int3448)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this3449] (jti/getter days this3449)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this3450] #? (:cljs (.negated ^java.time.Period this3450) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this3450)) (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this3450)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this3451] (jti/getter years this3451)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this3452 ^java.lang.Integer int3453] (.withYears this3452 int3453)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this3454] #? (:cljs (.normalized ^java.time.Period this3454) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this3454)) (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this3454)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this3455 ^java.lang.Integer int3456] (.withMonths this3455 int3456)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^java.time.Period [^java.time.LocalDate java-time-LocalDate3457 ^java.time.LocalDate java-time-LocalDate3458] (. java.time.Period between java-time-LocalDate3457 java-time-LocalDate3458)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3459] (. java.time.Period from java-time-temporal-TemporalAmount3459)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this3460 ^long long3461] (.minusYears this3460 long3461)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this3462] #? (:cljs (jti/getter chronology ^java.time.Period this3462) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.Period this3462)) (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.Period this3462)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Period [^java.lang.CharSequence java-lang-CharSequence3463] (. java.time.Period parse java-lang-CharSequence3463)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this3464] (.hashCode this3464)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this3465 ^java.time.temporal.Temporal java-time-temporal-Temporal3466] (.subtractFrom this3465 java-time-temporal-Temporal3466)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Period this3467 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3468] (.get this3467 java-time-temporal-TemporalUnit3468)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Period this3469 ^java.lang.Object java-lang-Object3470] (.equals this3469 java-lang-Object3470)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this3471 ^long long3472] (.plusYears this3471 long3472)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this3473 ^long long3474] (.minusDays this3473 long3474)))
