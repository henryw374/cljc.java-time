(ns cljc.java-time.year-month (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time YearMonth]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this15222] (.lengthOfYear this15222)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this15223 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15224] (.range this15223 java-time-temporal-TemporalField15224)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this15225 ^java.lang.Integer int15226] (.isValidDay this15225 int15226)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["int" "java.time.Month"]))} (^java.time.YearMonth [G__15228 G__15229] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__15228) (clojure.core/instance? java.lang.Number G__15229)) (clojure.core/let [G__15228 (clojure.core/int G__15228) G__15229 (clojure.core/int G__15229)] (java.time.YearMonth/of G__15228 G__15229)) (clojure.core/and (clojure.core/instance? java.lang.Number G__15228) (clojure.core/instance? java.time.Month G__15229)) (clojure.core/let [G__15228 (clojure.core/int G__15228) G__15229 ^"java.time.Month" G__15229] (java.time.YearMonth/of G__15228 G__15229)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this15230 ^java.lang.Integer int15231] (.withMonth this15230 int15231)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this15232 ^java.lang.Integer int15233] (.atDay this15232 int15233)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this15234] (.getYear this15234)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.time.YearMonth [^java.time.YearMonth this15235 ^long long15236 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit15237] (.plus this15235 long15236 java-time-temporal-TemporalUnit15237)) (^java.time.YearMonth [^java.time.YearMonth this15238 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount15239] (.plus this15238 java-time-temporal-TemporalAmount15239)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this15240] (.isLeapYear this15240)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this15241 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery15242] (.query this15241 java-time-temporal-TemporalQuery15242)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this15243] (.toString this15243)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this15244 ^long long15245] (.plusMonths this15244 long15245)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this15246 ^java.time.YearMonth java-time-YearMonth15247] (.isBefore this15246 java-time-YearMonth15247)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this15248 ^long long15249] (.minusMonths this15248 long15249)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.YearMonth [^java.time.YearMonth this15250 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount15251] (.minus this15250 java-time-temporal-TemporalAmount15251)) (^java.time.YearMonth [^java.time.YearMonth this15252 ^long long15253 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit15254] (.minus this15252 long15253 java-time-temporal-TemporalUnit15254)))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this15255 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15256] (.getLong this15255 java-time-temporal-TemporalField15256)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this15257 ^java.lang.Integer int15258] (.withYear this15257 int15258)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this15259] (.atEndOfMonth this15259)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this15260] (.lengthOfMonth this15260)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this15261 ^java.time.temporal.Temporal java-time-temporal-Temporal15262 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit15263] (.until this15261 java-time-temporal-Temporal15262 java-time-temporal-TemporalUnit15263)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15264] (java.time.YearMonth/from java-time-temporal-TemporalAccessor15264)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this15265 ^java.time.YearMonth java-time-YearMonth15266] (.isAfter this15265 java-time-YearMonth15266)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"] ["java.time.YearMonth" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this15267 G__15268] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__15268)) (clojure.core/let [G__15268 ^"java.time.temporal.TemporalField" G__15268] (.isSupported ^java.time.YearMonth this15267 G__15268)) (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__15268)) (clojure.core/let [G__15268 ^"java.time.temporal.ChronoUnit" G__15268] (.isSupported ^java.time.YearMonth this15267 G__15268)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this15269 ^long long15270] (.minusYears this15269 long15270)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence15271 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter15272] (java.time.YearMonth/parse java-lang-CharSequence15271 java-time-format-DateTimeFormatter15272)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence15273] (java.time.YearMonth/parse java-lang-CharSequence15273)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this15274] (.hashCode this15274)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this15275 ^java.time.temporal.Temporal java-time-temporal-Temporal15276] (.adjustInto this15275 java-time-temporal-Temporal15276)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"]))} (^java.time.YearMonth [^java.time.YearMonth this15277 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15278 ^long long15279] (.with this15277 java-time-temporal-TemporalField15278 long15279)) (^java.time.YearMonth [^java.time.YearMonth this15280 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster15281] (.with this15280 java-time-temporal-TemporalAdjuster15281)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.YearMonth [] (java.time.YearMonth/now)) (^java.time.YearMonth [G__15283] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__15283)) (clojure.core/let [G__15283 ^"java.time.Clock" G__15283] (java.time.YearMonth/now G__15283)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__15283)) (clojure.core/let [G__15283 ^"java.time.ZoneId" G__15283] (java.time.YearMonth/now G__15283)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this15284] (.getMonthValue this15284)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this15285 ^java.time.YearMonth java-time-YearMonth15286] (.compareTo this15285 java-time-YearMonth15286)))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this15287] (.getMonth this15287)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this15288 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15289] (.get this15288 java-time-temporal-TemporalField15289)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this15290 ^java.lang.Object java-lang-Object15291] (.equals this15290 java-lang-Object15291)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this15292 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter15293] (.format this15292 java-time-format-DateTimeFormatter15293)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this15294 ^long long15295] (.plusYears this15294 long15295)))
