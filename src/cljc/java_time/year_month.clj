(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time YearMonth]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this5325] (.lengthOfYear this5325)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this5326 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5327] (.range this5326 java-time-temporal-TemporalField5327)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this5328 ^java.lang.Integer int5329] (.isValidDay this5328 int5329)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^java.time.YearMonth [G__5331 G__5332] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__5331) (clojure.core/instance? java.time.Month G__5332)) (clojure.core/let [G__5331 (clojure.core/int G__5331) G__5332 ^"java.time.Month" G__5332] (java.time.YearMonth/of G__5331 G__5332)) (clojure.core/and (clojure.core/instance? java.lang.Number G__5331) (clojure.core/instance? java.lang.Number G__5332)) (clojure.core/let [G__5331 (clojure.core/int G__5331) G__5332 (clojure.core/int G__5332)] (java.time.YearMonth/of G__5331 G__5332)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this5333 ^java.lang.Integer int5334] (.withMonth this5333 int5334)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this5335 ^java.lang.Integer int5336] (.atDay this5335 int5336)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this5337] (.getYear this5337)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.YearMonth [^java.time.YearMonth this5338 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount5339] (.plus this5338 java-time-temporal-TemporalAmount5339)) (^java.time.YearMonth [^java.time.YearMonth this5340 ^long long5341 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit5342] (.plus this5340 long5341 java-time-temporal-TemporalUnit5342)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this5343] (.isLeapYear this5343)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this5344 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery5345] (.query this5344 java-time-temporal-TemporalQuery5345)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this5346] (.toString this5346)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this5347 ^long long5348] (.plusMonths this5347 long5348)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this5349 ^java.time.YearMonth java-time-YearMonth5350] (.isBefore this5349 java-time-YearMonth5350)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this5351 ^long long5352] (.minusMonths this5351 long5352)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.time.YearMonth [^java.time.YearMonth this5353 ^long long5354 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit5355] (.minus this5353 long5354 java-time-temporal-TemporalUnit5355)) (^java.time.YearMonth [^java.time.YearMonth this5356 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount5357] (.minus this5356 java-time-temporal-TemporalAmount5357)))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this5358 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5359] (.getLong this5358 java-time-temporal-TemporalField5359)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this5360 ^java.lang.Integer int5361] (.withYear this5360 int5361)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this5362] (.atEndOfMonth this5362)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this5363] (.lengthOfMonth this5363)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this5364 ^java.time.temporal.Temporal java-time-temporal-Temporal5365 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit5366] (.until this5364 java-time-temporal-Temporal5365 java-time-temporal-TemporalUnit5366)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5367] (java.time.YearMonth/from java-time-temporal-TemporalAccessor5367)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this5368 ^java.time.YearMonth java-time-YearMonth5369] (.isAfter this5368 java-time-YearMonth5369)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this5370 G__5371] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__5371)) (clojure.core/let [G__5371 ^"java.time.temporal.ChronoUnit" G__5371] (.isSupported ^java.time.YearMonth this5370 G__5371)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__5371)) (clojure.core/let [G__5371 ^"java.time.temporal.TemporalField" G__5371] (.isSupported ^java.time.YearMonth this5370 G__5371)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this5372 ^long long5373] (.minusYears this5372 long5373)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence5374] (java.time.YearMonth/parse java-lang-CharSequence5374)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence5375 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter5376] (java.time.YearMonth/parse java-lang-CharSequence5375 java-time-format-DateTimeFormatter5376)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this5377] (.hashCode this5377)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this5378 ^java.time.temporal.Temporal java-time-temporal-Temporal5379] (.adjustInto this5378 java-time-temporal-Temporal5379)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"]))} (^java.time.YearMonth [^java.time.YearMonth this5380 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5381 ^long long5382] (.with this5380 java-time-temporal-TemporalField5381 long5382)) (^java.time.YearMonth [^java.time.YearMonth this5383 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster5384] (.with this5383 java-time-temporal-TemporalAdjuster5384)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^java.time.YearMonth [G__5386] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__5386)) (clojure.core/let [G__5386 ^"java.time.ZoneId" G__5386] (java.time.YearMonth/now G__5386)) (clojure.core/and (clojure.core/instance? java.time.Clock G__5386)) (clojure.core/let [G__5386 ^"java.time.Clock" G__5386] (java.time.YearMonth/now G__5386)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.YearMonth [] (java.time.YearMonth/now)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this5387] (.getMonthValue this5387)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this5388 ^java.time.YearMonth java-time-YearMonth5389] (.compareTo this5388 java-time-YearMonth5389)))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this5390] (.getMonth this5390)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this5391 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5392] (.get this5391 java-time-temporal-TemporalField5392)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this5393 ^java.lang.Object java-lang-Object5394] (.equals this5393 java-lang-Object5394)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this5395 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter5396] (.format this5395 java-time-format-DateTimeFormatter5396)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this5397 ^long long5398] (.plusYears this5397 long5398)))
