(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time YearMonth]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this8314] (.lengthOfYear this8314)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this8315 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8316] (.range this8315 java-time-temporal-TemporalField8316)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this8317 ^java.lang.Integer int8318] (.isValidDay this8317 int8318)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^java.time.YearMonth [G__8320 G__8321] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__8320) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__8321)) (clojure.core/let [G__8320 (clojure.core/int G__8320) G__8321 ^"java.time.Month" G__8321] (java.time.YearMonth/of G__8320 G__8321)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__8320) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__8321)) (clojure.core/let [G__8320 (clojure.core/int G__8320) G__8321 (clojure.core/int G__8321)] (java.time.YearMonth/of G__8320 G__8321)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this8322 ^java.lang.Integer int8323] (.withMonth this8322 int8323)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this8324 ^java.lang.Integer int8325] (.atDay this8324 int8325)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this8326] (.getYear this8326)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this8327 G__8328] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__8328)) (clojure.core/let [G__8328 ^"java.time.temporal.TemporalAmount" G__8328] (.plus ^java.time.YearMonth this8327 G__8328)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__8328)) (clojure.core/let [G__8328 ^"java.time.temporal.TemporalAmount" G__8328] (.plus ^java.time.YearMonth this8327 G__8328)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this8329 G__8330 G__8331] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8330) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__8331)) (clojure.core/let [G__8330 (clojure.core/long G__8330) G__8331 ^"java.time.temporal.TemporalUnit" G__8331] (.plus ^java.time.YearMonth this8329 G__8330 G__8331)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8330) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__8331)) (clojure.core/let [G__8330 (clojure.core/long G__8330) G__8331 ^"java.time.temporal.TemporalUnit" G__8331] (.plus ^java.time.YearMonth this8329 G__8330 G__8331)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this8332] (.isLeapYear this8332)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this8333 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery8334] (.query this8333 java-time-temporal-TemporalQuery8334)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this8335] (.toString this8335)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this8336 ^long long8337] (.plusMonths this8336 long8337)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this8338 ^java.time.YearMonth java-time-YearMonth8339] (.isBefore this8338 java-time-YearMonth8339)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this8340 ^long long8341] (.minusMonths this8340 long8341)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this8342 G__8343] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__8343)) (clojure.core/let [G__8343 ^"java.time.temporal.TemporalAmount" G__8343] (.minus ^java.time.YearMonth this8342 G__8343)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__8343)) (clojure.core/let [G__8343 ^"java.time.temporal.TemporalAmount" G__8343] (.minus ^java.time.YearMonth this8342 G__8343)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this8344 G__8345 G__8346] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8345) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__8346)) (clojure.core/let [G__8345 (clojure.core/long G__8345) G__8346 ^"java.time.temporal.TemporalUnit" G__8346] (.minus ^java.time.YearMonth this8344 G__8345 G__8346)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8345) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__8346)) (clojure.core/let [G__8345 (clojure.core/long G__8345) G__8346 ^"java.time.temporal.TemporalUnit" G__8346] (.minus ^java.time.YearMonth this8344 G__8345 G__8346)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this8347 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8348] (.getLong this8347 java-time-temporal-TemporalField8348)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this8349 ^java.lang.Integer int8350] (.withYear this8349 int8350)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this8351] (.atEndOfMonth this8351)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this8352] (.lengthOfMonth this8352)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this8353 ^java.time.temporal.Temporal java-time-temporal-Temporal8354 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8355] (.until this8353 java-time-temporal-Temporal8354 java-time-temporal-TemporalUnit8355)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8356] (java.time.YearMonth/from java-time-temporal-TemporalAccessor8356)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this8357 ^java.time.YearMonth java-time-YearMonth8358] (.isAfter this8357 java-time-YearMonth8358)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this8359 G__8360] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__8360)) (clojure.core/let [G__8360 ^"java.time.temporal.TemporalUnit" G__8360] (.isSupported ^java.time.YearMonth this8359 G__8360)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__8360)) (clojure.core/let [G__8360 ^"java.time.temporal.TemporalField" G__8360] (.isSupported ^java.time.YearMonth this8359 G__8360)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this8361 ^long long8362] (.minusYears this8361 long8362)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence8363] (java.time.YearMonth/parse java-lang-CharSequence8363)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence8364 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter8365] (java.time.YearMonth/parse java-lang-CharSequence8364 java-time-format-DateTimeFormatter8365)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this8366] (.hashCode this8366)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this8367 ^java.time.temporal.Temporal java-time-temporal-Temporal8368] (.adjustInto this8367 java-time-temporal-Temporal8368)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this8369 G__8370 G__8371] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__8370) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8371)) (clojure.core/let [G__8370 ^"java.time.temporal.TemporalField" G__8370 G__8371 (clojure.core/long G__8371)] (.with ^java.time.YearMonth this8369 G__8370 G__8371)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__8370) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8371)) (clojure.core/let [G__8370 ^"java.time.temporal.TemporalField" G__8370 G__8371 (clojure.core/long G__8371)] (.with ^java.time.YearMonth this8369 G__8370 G__8371)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this8372 G__8373] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__8373)) (clojure.core/let [G__8373 ^"java.time.temporal.TemporalAdjuster" G__8373] (.with ^java.time.YearMonth this8372 G__8373)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__8373)) (clojure.core/let [G__8373 ^"java.time.temporal.TemporalAdjuster" G__8373] (.with ^java.time.YearMonth this8372 G__8373)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.YearMonth [] (java.time.YearMonth/now)) (^java.time.YearMonth [G__8375] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__8375)) (clojure.core/let [G__8375 ^"java.time.Clock" G__8375] (java.time.YearMonth/now G__8375)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__8375)) (clojure.core/let [G__8375 ^"java.time.ZoneId" G__8375] (java.time.YearMonth/now G__8375)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this8376] (.getMonthValue this8376)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"] ["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Integer [this8377 G__8378] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.YearMonth") G__8378)) (clojure.core/let [G__8378 ^"java.time.YearMonth" G__8378] (.compareTo ^java.time.YearMonth this8377 G__8378)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__8378)) (clojure.core/let [G__8378 ^"java.lang.Object" G__8378] (.compareTo ^java.time.YearMonth this8377 G__8378)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this8379] (.getMonth this8379)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this8380 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8381] (.get this8380 java-time-temporal-TemporalField8381)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this8382 ^java.lang.Object java-lang-Object8383] (.equals this8382 java-lang-Object8383)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this8384 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter8385] (.format this8384 java-time-format-DateTimeFormatter8385)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this8386 ^long long8387] (.plusYears this8386 long8387)))
