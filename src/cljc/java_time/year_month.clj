(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time YearMonth]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this61030] (.lengthOfYear this61030)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this61031 ^java.time.temporal.TemporalField java-time-temporal-TemporalField61032] (.range this61031 java-time-temporal-TemporalField61032)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this61033 ^java.lang.Integer int61034] (.isValidDay this61033 int61034)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^java.time.YearMonth [G__61036 G__61037] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__61036) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__61037)) (clojure.core/let [G__61036 (clojure.core/int G__61036) G__61037 ^"java.time.Month" G__61037] (java.time.YearMonth/of G__61036 G__61037)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__61036) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__61037)) (clojure.core/let [G__61036 (clojure.core/int G__61036) G__61037 (clojure.core/int G__61037)] (java.time.YearMonth/of G__61036 G__61037)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this61038 ^java.lang.Integer int61039] (.withMonth this61038 int61039)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this61040 ^java.lang.Integer int61041] (.atDay this61040 int61041)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this61042] (.getYear this61042)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this61043 G__61044 G__61045] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__61044) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__61045)) (clojure.core/let [G__61044 (clojure.core/long G__61044) G__61045 ^"java.time.temporal.TemporalUnit" G__61045] (.plus ^java.time.YearMonth this61043 G__61044 G__61045)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__61044) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__61045)) (clojure.core/let [G__61044 (clojure.core/long G__61044) G__61045 ^"java.time.temporal.TemporalUnit" G__61045] (.plus ^java.time.YearMonth this61043 G__61044 G__61045)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this61046 G__61047] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__61047)) (clojure.core/let [G__61047 ^"java.time.temporal.TemporalAmount" G__61047] (.plus ^java.time.YearMonth this61046 G__61047)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__61047)) (clojure.core/let [G__61047 ^"java.time.temporal.TemporalAmount" G__61047] (.plus ^java.time.YearMonth this61046 G__61047)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this61048] (.isLeapYear this61048)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this61049 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery61050] (.query this61049 java-time-temporal-TemporalQuery61050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this61051] (.toString this61051)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this61052 ^long long61053] (.plusMonths this61052 long61053)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this61054 ^java.time.YearMonth java-time-YearMonth61055] (.isBefore this61054 java-time-YearMonth61055)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this61056 ^long long61057] (.minusMonths this61056 long61057)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this61058 G__61059] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__61059)) (clojure.core/let [G__61059 ^"java.time.temporal.TemporalAmount" G__61059] (.minus ^java.time.YearMonth this61058 G__61059)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__61059)) (clojure.core/let [G__61059 ^"java.time.temporal.TemporalAmount" G__61059] (.minus ^java.time.YearMonth this61058 G__61059)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this61060 G__61061 G__61062] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__61061) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__61062)) (clojure.core/let [G__61061 (clojure.core/long G__61061) G__61062 ^"java.time.temporal.TemporalUnit" G__61062] (.minus ^java.time.YearMonth this61060 G__61061 G__61062)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__61061) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__61062)) (clojure.core/let [G__61061 (clojure.core/long G__61061) G__61062 ^"java.time.temporal.TemporalUnit" G__61062] (.minus ^java.time.YearMonth this61060 G__61061 G__61062)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this61063 ^java.time.temporal.TemporalField java-time-temporal-TemporalField61064] (.getLong this61063 java-time-temporal-TemporalField61064)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this61065 ^java.lang.Integer int61066] (.withYear this61065 int61066)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this61067] (.atEndOfMonth this61067)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this61068] (.lengthOfMonth this61068)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this61069 ^java.time.temporal.Temporal java-time-temporal-Temporal61070 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit61071] (.until this61069 java-time-temporal-Temporal61070 java-time-temporal-TemporalUnit61071)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor61072] (java.time.YearMonth/from java-time-temporal-TemporalAccessor61072)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this61073 ^java.time.YearMonth java-time-YearMonth61074] (.isAfter this61073 java-time-YearMonth61074)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this61075 G__61076] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__61076)) (clojure.core/let [G__61076 ^"java.time.temporal.TemporalUnit" G__61076] (.isSupported ^java.time.YearMonth this61075 G__61076)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__61076)) (clojure.core/let [G__61076 ^"java.time.temporal.TemporalField" G__61076] (.isSupported ^java.time.YearMonth this61075 G__61076)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this61077 ^long long61078] (.minusYears this61077 long61078)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence61079] (java.time.YearMonth/parse java-lang-CharSequence61079)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence61080 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter61081] (java.time.YearMonth/parse java-lang-CharSequence61080 java-time-format-DateTimeFormatter61081)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this61082] (.hashCode this61082)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this61083 ^java.time.temporal.Temporal java-time-temporal-Temporal61084] (.adjustInto this61083 java-time-temporal-Temporal61084)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this61085 G__61086 G__61087] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__61086) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__61087)) (clojure.core/let [G__61086 ^"java.time.temporal.TemporalField" G__61086 G__61087 (clojure.core/long G__61087)] (.with ^java.time.YearMonth this61085 G__61086 G__61087)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__61086) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__61087)) (clojure.core/let [G__61086 ^"java.time.temporal.TemporalField" G__61086 G__61087 (clojure.core/long G__61087)] (.with ^java.time.YearMonth this61085 G__61086 G__61087)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this61088 G__61089] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__61089)) (clojure.core/let [G__61089 ^"java.time.temporal.TemporalAdjuster" G__61089] (.with ^java.time.YearMonth this61088 G__61089)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__61089)) (clojure.core/let [G__61089 ^"java.time.temporal.TemporalAdjuster" G__61089] (.with ^java.time.YearMonth this61088 G__61089)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.YearMonth [G__61091] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__61091)) (clojure.core/let [G__61091 ^"java.time.Clock" G__61091] (java.time.YearMonth/now G__61091)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__61091)) (clojure.core/let [G__61091 ^"java.time.ZoneId" G__61091] (java.time.YearMonth/now G__61091)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.YearMonth [] (java.time.YearMonth/now)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this61092] (.getMonthValue this61092)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"] ["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Integer [this61093 G__61094] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.YearMonth") G__61094)) (clojure.core/let [G__61094 ^"java.time.YearMonth" G__61094] (.compareTo ^java.time.YearMonth this61093 G__61094)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__61094)) (clojure.core/let [G__61094 ^"java.lang.Object" G__61094] (.compareTo ^java.time.YearMonth this61093 G__61094)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this61095] (.getMonth this61095)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this61096 ^java.time.temporal.TemporalField java-time-temporal-TemporalField61097] (.get this61096 java-time-temporal-TemporalField61097)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this61098 ^java.lang.Object java-lang-Object61099] (.equals this61098 java-lang-Object61099)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this61100 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter61101] (.format this61100 java-time-format-DateTimeFormatter61101)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this61102 ^long long61103] (.plusYears this61102 long61103)))
