(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time YearMonth]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this8366] (.lengthOfYear this8366)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this8367 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8368] (.range this8367 java-time-temporal-TemporalField8368)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this8369 ^java.lang.Integer int8370] (.isValidDay this8369 int8370)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^java.time.YearMonth [G__8372 G__8373] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__8372) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__8373)) (clojure.core/let [G__8372 (clojure.core/int G__8372) G__8373 ^"java.time.Month" G__8373] (java.time.YearMonth/of G__8372 G__8373)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__8372) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__8373)) (clojure.core/let [G__8372 (clojure.core/int G__8372) G__8373 (clojure.core/int G__8373)] (java.time.YearMonth/of G__8372 G__8373)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this8374 ^java.lang.Integer int8375] (.withMonth this8374 int8375)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this8376 ^java.lang.Integer int8377] (.atDay this8376 int8377)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this8378] (.getYear this8378)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this8379 G__8380 G__8381] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8380) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__8381)) (clojure.core/let [G__8380 (clojure.core/long G__8380) G__8381 ^"java.time.temporal.TemporalUnit" G__8381] (.plus ^java.time.YearMonth this8379 G__8380 G__8381)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8380) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__8381)) (clojure.core/let [G__8380 (clojure.core/long G__8380) G__8381 ^"java.time.temporal.TemporalUnit" G__8381] (.plus ^java.time.YearMonth this8379 G__8380 G__8381)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this8382 G__8383] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__8383)) (clojure.core/let [G__8383 ^"java.time.temporal.TemporalAmount" G__8383] (.plus ^java.time.YearMonth this8382 G__8383)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__8383)) (clojure.core/let [G__8383 ^"java.time.temporal.TemporalAmount" G__8383] (.plus ^java.time.YearMonth this8382 G__8383)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this8384] (.isLeapYear this8384)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this8385 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery8386] (.query this8385 java-time-temporal-TemporalQuery8386)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this8387] (.toString this8387)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this8388 ^long long8389] (.plusMonths this8388 long8389)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this8390 ^java.time.YearMonth java-time-YearMonth8391] (.isBefore this8390 java-time-YearMonth8391)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this8392 ^long long8393] (.minusMonths this8392 long8393)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this8394 G__8395] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__8395)) (clojure.core/let [G__8395 ^"java.time.temporal.TemporalAmount" G__8395] (.minus ^java.time.YearMonth this8394 G__8395)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__8395)) (clojure.core/let [G__8395 ^"java.time.temporal.TemporalAmount" G__8395] (.minus ^java.time.YearMonth this8394 G__8395)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this8396 G__8397 G__8398] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8397) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__8398)) (clojure.core/let [G__8397 (clojure.core/long G__8397) G__8398 ^"java.time.temporal.TemporalUnit" G__8398] (.minus ^java.time.YearMonth this8396 G__8397 G__8398)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8397) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__8398)) (clojure.core/let [G__8397 (clojure.core/long G__8397) G__8398 ^"java.time.temporal.TemporalUnit" G__8398] (.minus ^java.time.YearMonth this8396 G__8397 G__8398)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this8399 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8400] (.getLong this8399 java-time-temporal-TemporalField8400)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this8401 ^java.lang.Integer int8402] (.withYear this8401 int8402)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this8403] (.atEndOfMonth this8403)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this8404] (.lengthOfMonth this8404)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this8405 ^java.time.temporal.Temporal java-time-temporal-Temporal8406 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8407] (.until this8405 java-time-temporal-Temporal8406 java-time-temporal-TemporalUnit8407)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8408] (java.time.YearMonth/from java-time-temporal-TemporalAccessor8408)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this8409 ^java.time.YearMonth java-time-YearMonth8410] (.isAfter this8409 java-time-YearMonth8410)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this8411 G__8412] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__8412)) (clojure.core/let [G__8412 ^"java.time.temporal.TemporalUnit" G__8412] (.isSupported ^java.time.YearMonth this8411 G__8412)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__8412)) (clojure.core/let [G__8412 ^"java.time.temporal.TemporalField" G__8412] (.isSupported ^java.time.YearMonth this8411 G__8412)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this8413 ^long long8414] (.minusYears this8413 long8414)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence8415 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter8416] (java.time.YearMonth/parse java-lang-CharSequence8415 java-time-format-DateTimeFormatter8416)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence8417] (java.time.YearMonth/parse java-lang-CharSequence8417)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this8418] (.hashCode this8418)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this8419 ^java.time.temporal.Temporal java-time-temporal-Temporal8420] (.adjustInto this8419 java-time-temporal-Temporal8420)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this8421 G__8422 G__8423] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__8422) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8423)) (clojure.core/let [G__8422 ^"java.time.temporal.TemporalField" G__8422 G__8423 (clojure.core/long G__8423)] (.with ^java.time.YearMonth this8421 G__8422 G__8423)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__8422) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8423)) (clojure.core/let [G__8422 ^"java.time.temporal.TemporalField" G__8422 G__8423 (clojure.core/long G__8423)] (.with ^java.time.YearMonth this8421 G__8422 G__8423)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this8424 G__8425] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__8425)) (clojure.core/let [G__8425 ^"java.time.temporal.TemporalAdjuster" G__8425] (.with ^java.time.YearMonth this8424 G__8425)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__8425)) (clojure.core/let [G__8425 ^"java.time.temporal.TemporalAdjuster" G__8425] (.with ^java.time.YearMonth this8424 G__8425)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^java.time.YearMonth [G__8427] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__8427)) (clojure.core/let [G__8427 ^"java.time.ZoneId" G__8427] (java.time.YearMonth/now G__8427)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__8427)) (clojure.core/let [G__8427 ^"java.time.Clock" G__8427] (java.time.YearMonth/now G__8427)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.YearMonth [] (java.time.YearMonth/now)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this8428] (.getMonthValue this8428)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"] ["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Integer [this8429 G__8430] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.YearMonth") G__8430)) (clojure.core/let [G__8430 ^"java.time.YearMonth" G__8430] (.compareTo ^java.time.YearMonth this8429 G__8430)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__8430)) (clojure.core/let [G__8430 ^"java.lang.Object" G__8430] (.compareTo ^java.time.YearMonth this8429 G__8430)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this8431] (.getMonth this8431)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this8432 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8433] (.get this8432 java-time-temporal-TemporalField8433)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this8434 ^java.lang.Object java-lang-Object8435] (.equals this8434 java-lang-Object8435)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this8436 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter8437] (.format this8436 java-time-format-DateTimeFormatter8437)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this8438 ^long long8439] (.plusYears this8438 long8439)))
