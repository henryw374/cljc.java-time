(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time YearMonth]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this7262] (.lengthOfYear this7262)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this7263 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7264] (.range this7263 java-time-temporal-TemporalField7264)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this7265 ^java.lang.Integer int7266] (.isValidDay this7265 int7266)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^java.time.YearMonth [G__7268 G__7269] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__7268) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__7269)) (clojure.core/let [G__7268 (clojure.core/int G__7268) G__7269 ^"java.time.Month" G__7269] (. java.time.YearMonth of G__7268 G__7269)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__7268) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__7269)) (clojure.core/let [G__7268 (clojure.core/int G__7268) G__7269 (clojure.core/int G__7269)] (. java.time.YearMonth of G__7268 G__7269)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this7270 ^java.lang.Integer int7271] (.withMonth this7270 int7271)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this7272 ^java.lang.Integer int7273] (.atDay this7272 int7273)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this7274] (.getYear this7274)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7275 G__7276] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7276)) (clojure.core/let [G__7276 ^"java.time.temporal.TemporalAmount" G__7276] (.plus ^java.time.YearMonth this7275 G__7276)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7276)) (clojure.core/let [G__7276 ^"java.time.temporal.TemporalAmount" G__7276] (.plus ^java.time.YearMonth this7275 G__7276)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this7277 G__7278 G__7279] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7278) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7279)) (clojure.core/let [G__7278 (clojure.core/long G__7278) G__7279 ^"java.time.temporal.TemporalUnit" G__7279] (.plus ^java.time.YearMonth this7277 G__7278 G__7279)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7278) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7279)) (clojure.core/let [G__7278 (clojure.core/long G__7278) G__7279 ^"java.time.temporal.TemporalUnit" G__7279] (.plus ^java.time.YearMonth this7277 G__7278 G__7279)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this7280] (.isLeapYear this7280)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this7281 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7282] (.query this7281 java-time-temporal-TemporalQuery7282)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this7283] (.toString this7283)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this7284 ^long long7285] (.plusMonths this7284 long7285)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this7286 ^java.time.YearMonth java-time-YearMonth7287] (.isBefore this7286 java-time-YearMonth7287)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this7288 ^long long7289] (.minusMonths this7288 long7289)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this7290 G__7291] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7291)) (clojure.core/let [G__7291 ^"java.time.temporal.TemporalAmount" G__7291] (.minus ^java.time.YearMonth this7290 G__7291)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7291)) (clojure.core/let [G__7291 ^"java.time.temporal.TemporalAmount" G__7291] (.minus ^java.time.YearMonth this7290 G__7291)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this7292 G__7293 G__7294] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7293) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7294)) (clojure.core/let [G__7293 (clojure.core/long G__7293) G__7294 ^"java.time.temporal.TemporalUnit" G__7294] (.minus ^java.time.YearMonth this7292 G__7293 G__7294)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7293) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7294)) (clojure.core/let [G__7293 (clojure.core/long G__7293) G__7294 ^"java.time.temporal.TemporalUnit" G__7294] (.minus ^java.time.YearMonth this7292 G__7293 G__7294)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this7295 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7296] (.getLong this7295 java-time-temporal-TemporalField7296)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this7297 ^java.lang.Integer int7298] (.withYear this7297 int7298)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this7299] (.atEndOfMonth this7299)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this7300] (.lengthOfMonth this7300)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this7301 ^java.time.temporal.Temporal java-time-temporal-Temporal7302 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7303] (.until this7301 java-time-temporal-Temporal7302 java-time-temporal-TemporalUnit7303)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7304] (. java.time.YearMonth from java-time-temporal-TemporalAccessor7304)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this7305 ^java.time.YearMonth java-time-YearMonth7306] (.isAfter this7305 java-time-YearMonth7306)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this7307 G__7308] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7308)) (clojure.core/let [G__7308 ^"java.time.temporal.TemporalUnit" G__7308] (.isSupported ^java.time.YearMonth this7307 G__7308)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7308)) (clojure.core/let [G__7308 ^"java.time.temporal.TemporalField" G__7308] (.isSupported ^java.time.YearMonth this7307 G__7308)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this7309 ^long long7310] (.minusYears this7309 long7310)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence7311] (. java.time.YearMonth parse java-lang-CharSequence7311)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence7312 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter7313] (. java.time.YearMonth parse java-lang-CharSequence7312 java-time-format-DateTimeFormatter7313)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this7314] (.hashCode this7314)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this7315 ^java.time.temporal.Temporal java-time-temporal-Temporal7316] (.adjustInto this7315 java-time-temporal-Temporal7316)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this7317 G__7318 G__7319] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7318) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7319)) (clojure.core/let [G__7318 ^"java.time.temporal.TemporalField" G__7318 G__7319 (clojure.core/long G__7319)] (.with ^java.time.YearMonth this7317 G__7318 G__7319)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7318) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7319)) (clojure.core/let [G__7318 ^"java.time.temporal.TemporalField" G__7318 G__7319 (clojure.core/long G__7319)] (.with ^java.time.YearMonth this7317 G__7318 G__7319)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this7320 G__7321] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__7321)) (clojure.core/let [G__7321 ^"java.time.temporal.TemporalAdjuster" G__7321] (.with ^java.time.YearMonth this7320 G__7321)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__7321)) (clojure.core/let [G__7321 ^"java.time.temporal.TemporalAdjuster" G__7321] (.with ^java.time.YearMonth this7320 G__7321)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] [] ["java.time.ZoneId"]))} (^java.time.YearMonth [G__7323] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__7323)) (clojure.core/let [G__7323 ^"java.time.Clock" G__7323] (. java.time.YearMonth now G__7323)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__7323)) (clojure.core/let [G__7323 ^"java.time.ZoneId" G__7323] (. java.time.YearMonth now G__7323)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.YearMonth [] (. java.time.YearMonth now)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this7324] (.getMonthValue this7324)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.lang.Object"] ["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Integer [this7325 G__7326] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7326)) (clojure.core/let [G__7326 ^"java.lang.Object" G__7326] (.compareTo ^java.time.YearMonth this7325 G__7326)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.YearMonth") G__7326)) (clojure.core/let [G__7326 ^"java.time.YearMonth" G__7326] (.compareTo ^java.time.YearMonth this7325 G__7326)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this7327] (.getMonth this7327)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this7328 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7329] (.get this7328 java-time-temporal-TemporalField7329)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this7330 ^java.lang.Object java-lang-Object7331] (.equals this7330 java-lang-Object7331)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this7332 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter7333] (.format this7332 java-time-format-DateTimeFormatter7333)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this7334 ^long long7335] (.plusYears this7334 long7335)))
