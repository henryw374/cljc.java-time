(ns cljc.java-time.year-month (:import [java.time YearMonth]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this50539] (.lengthOfYear this50539)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this50540 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50541] (.range this50540 java-time-temporal-TemporalField50541)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this50542 ^java.lang.Integer int50543] (.isValidDay this50542 int50543)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^java.time.YearMonth [G__50545 G__50546] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__50545) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__50546)) (clojure.core/let [G__50545 (clojure.core/int G__50545) G__50546 ^"java.time.Month" G__50546] (. java.time.YearMonth of G__50545 G__50546)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__50545) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__50546)) (clojure.core/let [G__50545 (clojure.core/int G__50545) G__50546 (clojure.core/int G__50546)] (. java.time.YearMonth of G__50545 G__50546)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this50547 ^java.lang.Integer int50548] (.withMonth this50547 int50548)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this50549 ^java.lang.Integer int50550] (.atDay this50549 int50550)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this50551] (.getYear this50551)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this50552 G__50553] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__50553)) (clojure.core/let [G__50553 ^"java.time.temporal.TemporalAmount" G__50553] (.plus ^java.time.YearMonth this50552 G__50553)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__50553)) (clojure.core/let [G__50553 ^"java.time.temporal.TemporalAmount" G__50553] (.plus ^java.time.YearMonth this50552 G__50553)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this50554 G__50555 G__50556] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__50555) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__50556)) (clojure.core/let [G__50555 (clojure.core/long G__50555) G__50556 ^"java.time.temporal.TemporalUnit" G__50556] (.plus ^java.time.YearMonth this50554 G__50555 G__50556)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__50555) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__50556)) (clojure.core/let [G__50555 (clojure.core/long G__50555) G__50556 ^"java.time.temporal.TemporalUnit" G__50556] (.plus ^java.time.YearMonth this50554 G__50555 G__50556)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this50557] (.isLeapYear this50557)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this50558 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery50559] (.query this50558 java-time-temporal-TemporalQuery50559)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this50560] (.toString this50560)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this50561 ^long long50562] (.plusMonths this50561 long50562)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this50563 ^java.time.YearMonth java-time-YearMonth50564] (.isBefore this50563 java-time-YearMonth50564)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this50565 ^long long50566] (.minusMonths this50565 long50566)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this50567 G__50568] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__50568)) (clojure.core/let [G__50568 ^"java.time.temporal.TemporalAmount" G__50568] (.minus ^java.time.YearMonth this50567 G__50568)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__50568)) (clojure.core/let [G__50568 ^"java.time.temporal.TemporalAmount" G__50568] (.minus ^java.time.YearMonth this50567 G__50568)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this50569 G__50570 G__50571] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__50570) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__50571)) (clojure.core/let [G__50570 (clojure.core/long G__50570) G__50571 ^"java.time.temporal.TemporalUnit" G__50571] (.minus ^java.time.YearMonth this50569 G__50570 G__50571)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__50570) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__50571)) (clojure.core/let [G__50570 (clojure.core/long G__50570) G__50571 ^"java.time.temporal.TemporalUnit" G__50571] (.minus ^java.time.YearMonth this50569 G__50570 G__50571)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this50572 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50573] (.getLong this50572 java-time-temporal-TemporalField50573)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this50574 ^java.lang.Integer int50575] (.withYear this50574 int50575)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this50576] (.atEndOfMonth this50576)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this50577] (.lengthOfMonth this50577)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this50578 ^java.time.temporal.Temporal java-time-temporal-Temporal50579 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit50580] (.until this50578 java-time-temporal-Temporal50579 java-time-temporal-TemporalUnit50580)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor50581] (. java.time.YearMonth from java-time-temporal-TemporalAccessor50581)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this50582 ^java.time.YearMonth java-time-YearMonth50583] (.isAfter this50582 java-time-YearMonth50583)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this50584 G__50585] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__50585)) (clojure.core/let [G__50585 ^"java.time.temporal.TemporalUnit" G__50585] (.isSupported ^java.time.YearMonth this50584 G__50585)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__50585)) (clojure.core/let [G__50585 ^"java.time.temporal.TemporalField" G__50585] (.isSupported ^java.time.YearMonth this50584 G__50585)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this50586 ^long long50587] (.minusYears this50586 long50587)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence50588] (. java.time.YearMonth parse java-lang-CharSequence50588)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence50589 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter50590] (. java.time.YearMonth parse java-lang-CharSequence50589 java-time-format-DateTimeFormatter50590)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this50591] (.hashCode this50591)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this50592 ^java.time.temporal.Temporal java-time-temporal-Temporal50593] (.adjustInto this50592 java-time-temporal-Temporal50593)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this50594 G__50595 G__50596] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__50595) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__50596)) (clojure.core/let [G__50595 ^"java.time.temporal.TemporalField" G__50595 G__50596 (clojure.core/long G__50596)] (.with ^java.time.YearMonth this50594 G__50595 G__50596)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__50595) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__50596)) (clojure.core/let [G__50595 ^"java.time.temporal.TemporalField" G__50595 G__50596 (clojure.core/long G__50596)] (.with ^java.time.YearMonth this50594 G__50595 G__50596)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this50597 G__50598] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__50598)) (clojure.core/let [G__50598 ^"java.time.temporal.TemporalAdjuster" G__50598] (.with ^java.time.YearMonth this50597 G__50598)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__50598)) (clojure.core/let [G__50598 ^"java.time.temporal.TemporalAdjuster" G__50598] (.with ^java.time.YearMonth this50597 G__50598)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.YearMonth [] (. java.time.YearMonth now)) (^java.time.YearMonth [G__50600] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__50600)) (clojure.core/let [G__50600 ^"java.time.Clock" G__50600] (. java.time.YearMonth now G__50600)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__50600)) (clojure.core/let [G__50600 ^"java.time.ZoneId" G__50600] (. java.time.YearMonth now G__50600)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this50601] (.getMonthValue this50601)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"] ["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Integer [this50602 G__50603] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.YearMonth") G__50603)) (clojure.core/let [G__50603 ^"java.time.YearMonth" G__50603] (.compareTo ^java.time.YearMonth this50602 G__50603)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__50603)) (clojure.core/let [G__50603 ^"java.lang.Object" G__50603] (.compareTo ^java.time.YearMonth this50602 G__50603)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this50604] (.getMonth this50604)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this50605 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50606] (.get this50605 java-time-temporal-TemporalField50606)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this50607 ^java.lang.Object java-lang-Object50608] (.equals this50607 java-lang-Object50608)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this50609 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter50610] (.format this50609 java-time-format-DateTimeFormatter50610)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this50611 ^long long50612] (.plusYears this50611 long50612)))
