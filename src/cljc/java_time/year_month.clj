(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time YearMonth]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this14843] (.lengthOfYear this14843)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this14844 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14845] (.range this14844 java-time-temporal-TemporalField14845)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this14846 ^java.lang.Integer int14847] (.isValidDay this14846 int14847)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["int" "java.time.Month"]))} (^java.time.YearMonth [G__14849 G__14850] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__14849) (clojure.core/instance? java.lang.Number G__14850)) (clojure.core/let [G__14849 (clojure.core/int G__14849) G__14850 (clojure.core/int G__14850)] (java.time.YearMonth/of G__14849 G__14850)) (clojure.core/and (clojure.core/instance? java.lang.Number G__14849) (clojure.core/instance? java.time.Month G__14850)) (clojure.core/let [G__14849 (clojure.core/int G__14849) G__14850 ^"java.time.Month" G__14850] (java.time.YearMonth/of G__14849 G__14850)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this14851 ^java.lang.Integer int14852] (.withMonth this14851 int14852)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this14853 ^java.lang.Integer int14854] (.atDay this14853 int14854)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this14855] (.getYear this14855)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.YearMonth [^java.time.YearMonth this14856 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount14857] (.plus this14856 java-time-temporal-TemporalAmount14857)) (^java.time.YearMonth [^java.time.YearMonth this14858 ^long long14859 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14860] (.plus this14858 long14859 java-time-temporal-TemporalUnit14860)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this14861] (.isLeapYear this14861)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this14862 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery14863] (.query this14862 java-time-temporal-TemporalQuery14863)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this14864] (.toString this14864)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this14865 ^long long14866] (.plusMonths this14865 long14866)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this14867 ^java.time.YearMonth java-time-YearMonth14868] (.isBefore this14867 java-time-YearMonth14868)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this14869 ^long long14870] (.minusMonths this14869 long14870)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.YearMonth [^java.time.YearMonth this14871 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount14872] (.minus this14871 java-time-temporal-TemporalAmount14872)) (^java.time.YearMonth [^java.time.YearMonth this14873 ^long long14874 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14875] (.minus this14873 long14874 java-time-temporal-TemporalUnit14875)))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this14876 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14877] (.getLong this14876 java-time-temporal-TemporalField14877)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this14878 ^java.lang.Integer int14879] (.withYear this14878 int14879)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this14880] (.atEndOfMonth this14880)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this14881] (.lengthOfMonth this14881)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this14882 ^java.time.temporal.Temporal java-time-temporal-Temporal14883 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14884] (.until this14882 java-time-temporal-Temporal14883 java-time-temporal-TemporalUnit14884)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14885] (java.time.YearMonth/from java-time-temporal-TemporalAccessor14885)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this14886 ^java.time.YearMonth java-time-YearMonth14887] (.isAfter this14886 java-time-YearMonth14887)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this14888 G__14889] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__14889)) (clojure.core/let [G__14889 ^"java.time.temporal.ChronoUnit" G__14889] (.isSupported ^java.time.YearMonth this14888 G__14889)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__14889)) (clojure.core/let [G__14889 ^"java.time.temporal.TemporalField" G__14889] (.isSupported ^java.time.YearMonth this14888 G__14889)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this14890 ^long long14891] (.minusYears this14890 long14891)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence14892] (java.time.YearMonth/parse java-lang-CharSequence14892)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence14893 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter14894] (java.time.YearMonth/parse java-lang-CharSequence14893 java-time-format-DateTimeFormatter14894)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this14895] (.hashCode this14895)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this14896 ^java.time.temporal.Temporal java-time-temporal-Temporal14897] (.adjustInto this14896 java-time-temporal-Temporal14897)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this14898 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster14899] (.with this14898 java-time-temporal-TemporalAdjuster14899)) (^java.time.YearMonth [^java.time.YearMonth this14900 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14901 ^long long14902] (.with this14900 java-time-temporal-TemporalField14901 long14902)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.YearMonth [] (java.time.YearMonth/now)) (^java.time.YearMonth [G__14904] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__14904)) (clojure.core/let [G__14904 ^"java.time.ZoneId" G__14904] (java.time.YearMonth/now G__14904)) (clojure.core/and (clojure.core/instance? java.time.Clock G__14904)) (clojure.core/let [G__14904 ^"java.time.Clock" G__14904] (java.time.YearMonth/now G__14904)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this14905] (.getMonthValue this14905)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this14906 ^java.time.YearMonth java-time-YearMonth14907] (.compareTo this14906 java-time-YearMonth14907)))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this14908] (.getMonth this14908)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this14909 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14910] (.get this14909 java-time-temporal-TemporalField14910)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this14911 ^java.lang.Object java-lang-Object14912] (.equals this14911 java-lang-Object14912)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this14913 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter14914] (.format this14913 java-time-format-DateTimeFormatter14914)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this14915 ^long long14916] (.plusYears this14915 long14916)))
