(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time YearMonth]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this5326] (.lengthOfYear this5326)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this5327 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5328] (.range this5327 java-time-temporal-TemporalField5328)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this5329 ^java.lang.Integer int5330] (.isValidDay this5329 int5330)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["int" "java.time.Month"]))} (^java.time.YearMonth [G__5332 G__5333] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__5332) (clojure.core/instance? java.lang.Number G__5333)) (clojure.core/let [G__5332 (clojure.core/int G__5332) G__5333 (clojure.core/int G__5333)] (java.time.YearMonth/of G__5332 G__5333)) (clojure.core/and (clojure.core/instance? java.lang.Number G__5332) (clojure.core/instance? java.time.Month G__5333)) (clojure.core/let [G__5332 (clojure.core/int G__5332) G__5333 ^"java.time.Month" G__5333] (java.time.YearMonth/of G__5332 G__5333)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this5334 ^java.lang.Integer int5335] (.withMonth this5334 int5335)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this5336 ^java.lang.Integer int5337] (.atDay this5336 int5337)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this5338] (.getYear this5338)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.YearMonth [^java.time.YearMonth this5339 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount5340] (.plus this5339 java-time-temporal-TemporalAmount5340)) (^java.time.YearMonth [^java.time.YearMonth this5341 ^long long5342 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit5343] (.plus this5341 long5342 java-time-temporal-TemporalUnit5343)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this5344] (.isLeapYear this5344)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this5345 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery5346] (.query this5345 java-time-temporal-TemporalQuery5346)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this5347] (.toString this5347)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this5348 ^long long5349] (.plusMonths this5348 long5349)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this5350 ^java.time.YearMonth java-time-YearMonth5351] (.isBefore this5350 java-time-YearMonth5351)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this5352 ^long long5353] (.minusMonths this5352 long5353)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.time.YearMonth [^java.time.YearMonth this5354 ^long long5355 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit5356] (.minus this5354 long5355 java-time-temporal-TemporalUnit5356)) (^java.time.YearMonth [^java.time.YearMonth this5357 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount5358] (.minus this5357 java-time-temporal-TemporalAmount5358)))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this5359 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5360] (.getLong this5359 java-time-temporal-TemporalField5360)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this5361 ^java.lang.Integer int5362] (.withYear this5361 int5362)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this5363] (.atEndOfMonth this5363)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this5364] (.lengthOfMonth this5364)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this5365 ^java.time.temporal.Temporal java-time-temporal-Temporal5366 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit5367] (.until this5365 java-time-temporal-Temporal5366 java-time-temporal-TemporalUnit5367)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5368] (java.time.YearMonth/from java-time-temporal-TemporalAccessor5368)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this5369 ^java.time.YearMonth java-time-YearMonth5370] (.isAfter this5369 java-time-YearMonth5370)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this5371 G__5372] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalUnit G__5372)) (clojure.core/let [G__5372 ^"java.time.temporal.TemporalUnit" G__5372] (.isSupported ^java.time.YearMonth this5371 G__5372)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__5372)) (clojure.core/let [G__5372 ^"java.time.temporal.TemporalField" G__5372] (.isSupported ^java.time.YearMonth this5371 G__5372)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this5373 ^long long5374] (.minusYears this5373 long5374)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence5375 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter5376] (java.time.YearMonth/parse java-lang-CharSequence5375 java-time-format-DateTimeFormatter5376)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence5377] (java.time.YearMonth/parse java-lang-CharSequence5377)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this5378] (.hashCode this5378)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this5379 ^java.time.temporal.Temporal java-time-temporal-Temporal5380] (.adjustInto this5379 java-time-temporal-Temporal5380)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this5381 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster5382] (.with this5381 java-time-temporal-TemporalAdjuster5382)) (^java.time.YearMonth [^java.time.YearMonth this5383 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5384 ^long long5385] (.with this5383 java-time-temporal-TemporalField5384 long5385)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.YearMonth [] (java.time.YearMonth/now)) (^java.time.YearMonth [G__5387] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__5387)) (clojure.core/let [G__5387 ^"java.time.Clock" G__5387] (java.time.YearMonth/now G__5387)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__5387)) (clojure.core/let [G__5387 ^"java.time.ZoneId" G__5387] (java.time.YearMonth/now G__5387)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this5388] (.getMonthValue this5388)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this5389 ^java.time.YearMonth java-time-YearMonth5390] (.compareTo this5389 java-time-YearMonth5390)))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this5391] (.getMonth this5391)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this5392 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5393] (.get this5392 java-time-temporal-TemporalField5393)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this5394 ^java.lang.Object java-lang-Object5395] (.equals this5394 java-lang-Object5395)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this5396 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter5397] (.format this5396 java-time-format-DateTimeFormatter5397)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this5398 ^long long5399] (.plusYears this5398 long5399)))
