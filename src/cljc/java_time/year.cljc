(ns cljc.java-time.year (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Year]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Year])))
(def min-value #? (:clj java.time.Year/MIN_VALUE :cljs (. java.time.Year -MIN_VALUE)))
(def max-value #? (:clj java.time.Year/MAX_VALUE :cljs (. java.time.Year -MAX_VALUE)))
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Year this13283 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13284] (.range this13283 java-time-temporal-TemporalField13284)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Year [^java.lang.Integer int13285] (. java.time.Year of int13285)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^java.time.LocalDate [^java.time.Year this13286 ^java.lang.Integer int13287] (.atDay this13286 int13287)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this13288 G__13289] #? (:cljs (.plus ^java.time.Year this13288 G__13289) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13289)) (clojure.core/let [G__13289 ^"java.time.temporal.TemporalAmount" G__13289] (.plus ^java.time.Year this13288 G__13289)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13289)) (clojure.core/let [G__13289 ^"java.time.temporal.TemporalAmount" G__13289] (.plus ^java.time.Year this13288 G__13289)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13290 G__13291 G__13292] #? (:cljs (.plus ^java.time.Year this13290 G__13291 G__13292) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13291) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13292)) (clojure.core/let [G__13291 (clojure.core/long G__13291) G__13292 ^"java.time.temporal.TemporalUnit" G__13292] (.plus ^java.time.Year this13290 G__13291 G__13292)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13291) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13292)) (clojure.core/let [G__13291 (clojure.core/long G__13291) G__13292 ^"java.time.temporal.TemporalUnit" G__13292] (.plus ^java.time.Year this13290 G__13291 G__13292)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.Year this13293 ^java.time.MonthDay java-time-MonthDay13294] (.isValidMonthDay this13293 java-time-MonthDay13294)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Year this13295 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13296] (.query this13295 java-time-temporal-TemporalQuery13296)))
^{:line 81, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 81, :column 54} (quote ^{:line 81, :column 61} (["long"]))} ^{:line 82, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 82, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^java.time.Year this13297] (.toString this13297)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this13298 ^java.time.Year java-time-Year13299] (.isBefore this13298 java-time-Year13299)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this13300 G__13301 G__13302] #? (:cljs (.minus ^java.time.Year this13300 G__13301 G__13302) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13301) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13302)) (clojure.core/let [G__13301 (clojure.core/long G__13301) G__13302 ^"java.time.temporal.TemporalUnit" G__13302] (.minus ^java.time.Year this13300 G__13301 G__13302)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13301) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13302)) (clojure.core/let [G__13301 (clojure.core/long G__13301) G__13302 ^"java.time.temporal.TemporalUnit" G__13302] (.minus ^java.time.Year this13300 G__13301 G__13302)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13303 G__13304] #? (:cljs (.minus ^java.time.Year this13303 G__13304) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13304)) (clojure.core/let [G__13304 ^"java.time.temporal.TemporalAmount" G__13304] (.minus ^java.time.Year this13303 G__13304)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13304)) (clojure.core/let [G__13304 ^"java.time.temporal.TemporalAmount" G__13304] (.minus ^java.time.Year this13303 G__13304)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.time.LocalDate [^java.time.Year this13305 ^java.time.MonthDay java-time-MonthDay13306] (.atMonthDay this13305 java-time-MonthDay13306)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this13307] (jti/getter value this13307)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^java.time.Year this13308 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13309] (.getLong this13308 java-time-temporal-TemporalField13309)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "int"] ["java.time.Year" "java.time.Month"]))} (^java.time.YearMonth [this13310 G__13311] #? (:cljs (.atMonth ^java.time.Year this13310 G__13311) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13311)) (clojure.core/let [G__13311 (clojure.core/int G__13311)] (.atMonth ^java.time.Year this13310 G__13311)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__13311)) (clojure.core/let [G__13311 ^"java.time.Month" G__13311] (.atMonth ^java.time.Year this13310 G__13311)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Year this13312 ^java.time.temporal.Temporal java-time-temporal-Temporal13313 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13314] (.until this13312 java-time-temporal-Temporal13313 java-time-temporal-TemporalUnit13314)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this13315] (.length this13315)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Year [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13316] (. java.time.Year from java-time-temporal-TemporalAccessor13316)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this13317 ^java.time.Year java-time-Year13318] (.isAfter this13317 java-time-Year13318)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this13319 G__13320] #? (:cljs (.isSupported ^java.time.Year this13319 G__13320) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13320)) (clojure.core/let [G__13320 ^"java.time.temporal.TemporalUnit" G__13320] (.isSupported ^java.time.Year this13319 G__13320)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13320)) (clojure.core/let [G__13320 ^"java.time.temporal.TemporalField" G__13320] (.isSupported ^java.time.Year this13319 G__13320)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this13321 ^long long13322] (.minusYears this13321 long13322)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence13323 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13324] (. java.time.Year parse java-lang-CharSequence13323 java-time-format-DateTimeFormatter13324)) (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence13325] (. java.time.Year parse java-lang-CharSequence13325)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this13326] (.hashCode this13326)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Year this13327 ^java.time.temporal.Temporal java-time-temporal-Temporal13328] (.adjustInto this13327 java-time-temporal-Temporal13328)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this13329 G__13330] #? (:cljs (.with ^java.time.Year this13329 G__13330) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13330)) (clojure.core/let [G__13330 ^"java.time.temporal.TemporalAdjuster" G__13330] (.with ^java.time.Year this13329 G__13330)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13330)) (clojure.core/let [G__13330 ^"java.time.temporal.TemporalAdjuster" G__13330] (.with ^java.time.Year this13329 G__13330)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13331 G__13332 G__13333] #? (:cljs (.with ^java.time.Year this13331 G__13332 G__13333) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13332) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13333)) (clojure.core/let [G__13332 ^"java.time.temporal.TemporalField" G__13332 G__13333 (clojure.core/long G__13333)] (.with ^java.time.Year this13331 G__13332 G__13333)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13332) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13333)) (clojure.core/let [G__13332 ^"java.time.temporal.TemporalField" G__13332 G__13333 (clojure.core/long G__13333)] (.with ^java.time.Year this13331 G__13332 G__13333)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^java.time.Year [G__13335] #? (:cljs (. java.time.Year now G__13335) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13335)) (clojure.core/let [G__13335 ^"java.time.ZoneId" G__13335] (. java.time.Year now G__13335)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__13335)) (clojure.core/let [G__13335 ^"java.time.Clock" G__13335] (. java.time.Year now G__13335)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.Year [] (. java.time.Year now)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.lang.Object"] ["java.time.Year" "java.time.Year"]))} (^java.lang.Integer [this13336 G__13337] #? (:cljs (.compareTo ^java.time.Year this13336 G__13337) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13337)) (clojure.core/let [G__13337 ^"java.lang.Object" G__13337] (.compareTo ^java.time.Year this13336 G__13337)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Year") G__13337)) (clojure.core/let [G__13337 ^"java.time.Year" G__13337] (.compareTo ^java.time.Year this13336 G__13337)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Year this13338 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13339] (.get this13338 java-time-temporal-TemporalField13339)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Year this13340 ^java.lang.Object java-lang-Object13341] (.equals this13340 java-lang-Object13341)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.Year this13342 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13343] (.format this13342 java-time-format-DateTimeFormatter13343)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this13344 ^long long13345] (.plusYears this13344 long13345)))
