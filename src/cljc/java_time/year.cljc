(ns cljc.java-time.year (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Year]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Year])))
(def min-value (. java.time.Year -MIN_VALUE))
(def max-value (. java.time.Year -MAX_VALUE))
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Year this4502 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4503] (.range this4502 java-time-temporal-TemporalField4503)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Year [^java.lang.Integer int4504] (. java.time.Year of int4504)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^java.time.LocalDate [^java.time.Year this4505 ^java.lang.Integer int4506] (.atDay this4505 int4506)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this4507 G__4508 G__4509] #? (:cljs (.plus ^java.time.Year this4507 G__4508 G__4509) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__4508) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__4509)) (clojure.core/let [G__4508 (clojure.core/long G__4508) G__4509 ^"java.time.temporal.TemporalUnit" G__4509] (.plus ^java.time.Year this4507 G__4508 G__4509)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__4508) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__4509)) (clojure.core/let [G__4508 (clojure.core/long G__4508) G__4509 ^"java.time.temporal.TemporalUnit" G__4509] (.plus ^java.time.Year this4507 G__4508 G__4509)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this4510 G__4511] #? (:cljs (.plus ^java.time.Year this4510 G__4511) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__4511)) (clojure.core/let [G__4511 ^"java.time.temporal.TemporalAmount" G__4511] (.plus ^java.time.Year this4510 G__4511)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__4511)) (clojure.core/let [G__4511 ^"java.time.temporal.TemporalAmount" G__4511] (.plus ^java.time.Year this4510 G__4511)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.Year this4512 ^java.time.MonthDay java-time-MonthDay4513] (.isValidMonthDay this4512 java-time-MonthDay4513)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Year this4514 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4515] (.query this4514 java-time-temporal-TemporalQuery4515)))
^{:line 78, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 78, :column 54} (quote ^{:line 78, :column 61} (["long"]))} ^{:line 79, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 79, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^java.time.Year this4516] (.toString this4516)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this4517 ^java.time.Year java-time-Year4518] (.isBefore this4517 java-time-Year4518)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this4519 G__4520] #? (:cljs (.minus ^java.time.Year this4519 G__4520) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__4520)) (clojure.core/let [G__4520 ^"java.time.temporal.TemporalAmount" G__4520] (.minus ^java.time.Year this4519 G__4520)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__4520)) (clojure.core/let [G__4520 ^"java.time.temporal.TemporalAmount" G__4520] (.minus ^java.time.Year this4519 G__4520)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this4521 G__4522 G__4523] #? (:cljs (.minus ^java.time.Year this4521 G__4522 G__4523) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__4522) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__4523)) (clojure.core/let [G__4522 (clojure.core/long G__4522) G__4523 ^"java.time.temporal.TemporalUnit" G__4523] (.minus ^java.time.Year this4521 G__4522 G__4523)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__4522) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__4523)) (clojure.core/let [G__4522 (clojure.core/long G__4522) G__4523 ^"java.time.temporal.TemporalUnit" G__4523] (.minus ^java.time.Year this4521 G__4522 G__4523)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.time.LocalDate [^java.time.Year this4524 ^java.time.MonthDay java-time-MonthDay4525] (.atMonthDay this4524 java-time-MonthDay4525)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this4526] (jti/getter value this4526)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^java.time.Year this4527 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4528] (.getLong this4527 java-time-temporal-TemporalField4528)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "int"] ["java.time.Year" "java.time.Month"]))} (^java.time.YearMonth [this4529 G__4530] #? (:cljs (.atMonth ^java.time.Year this4529 G__4530) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__4530)) (clojure.core/let [G__4530 (clojure.core/int G__4530)] (.atMonth ^java.time.Year this4529 G__4530)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__4530)) (clojure.core/let [G__4530 ^"java.time.Month" G__4530] (.atMonth ^java.time.Year this4529 G__4530)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Year this4531 ^java.time.temporal.Temporal java-time-temporal-Temporal4532 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4533] (.until this4531 java-time-temporal-Temporal4532 java-time-temporal-TemporalUnit4533)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this4534] (.length this4534)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Year [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4535] (. java.time.Year from java-time-temporal-TemporalAccessor4535)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this4536 ^java.time.Year java-time-Year4537] (.isAfter this4536 java-time-Year4537)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"] ["java.time.Year" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this4538 G__4539] #? (:cljs (.isSupported ^java.time.Year this4538 G__4539) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__4539)) (clojure.core/let [G__4539 ^"java.time.temporal.TemporalField" G__4539] (.isSupported ^java.time.Year this4538 G__4539)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__4539)) (clojure.core/let [G__4539 ^"java.time.temporal.TemporalUnit" G__4539] (.isSupported ^java.time.Year this4538 G__4539)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this4540 ^long long4541] (.minusYears this4540 long4541)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence4542] (. java.time.Year parse java-lang-CharSequence4542)) (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence4543 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4544] (. java.time.Year parse java-lang-CharSequence4543 java-time-format-DateTimeFormatter4544)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this4545] (.hashCode this4545)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Year this4546 ^java.time.temporal.Temporal java-time-temporal-Temporal4547] (.adjustInto this4546 java-time-temporal-Temporal4547)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this4548 G__4549] #? (:cljs (.with ^java.time.Year this4548 G__4549) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__4549)) (clojure.core/let [G__4549 ^"java.time.temporal.TemporalAdjuster" G__4549] (.with ^java.time.Year this4548 G__4549)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__4549)) (clojure.core/let [G__4549 ^"java.time.temporal.TemporalAdjuster" G__4549] (.with ^java.time.Year this4548 G__4549)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this4550 G__4551 G__4552] #? (:cljs (.with ^java.time.Year this4550 G__4551 G__4552) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__4551) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__4552)) (clojure.core/let [G__4551 ^"java.time.temporal.TemporalField" G__4551 G__4552 (clojure.core/long G__4552)] (.with ^java.time.Year this4550 G__4551 G__4552)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__4551) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__4552)) (clojure.core/let [G__4551 ^"java.time.temporal.TemporalField" G__4551 G__4552 (clojure.core/long G__4552)] (.with ^java.time.Year this4550 G__4551 G__4552)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.Year [] (. java.time.Year now)) (^java.time.Year [G__4554] #? (:cljs (. java.time.Year now G__4554) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__4554)) (clojure.core/let [G__4554 ^"java.time.ZoneId" G__4554] (. java.time.Year now G__4554)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__4554)) (clojure.core/let [G__4554 ^"java.time.Clock" G__4554] (. java.time.Year now G__4554)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.lang.Object"] ["java.time.Year" "java.time.Year"]))} (^java.lang.Integer [this4555 G__4556] #? (:cljs (.compareTo ^java.time.Year this4555 G__4556) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__4556)) (clojure.core/let [G__4556 ^"java.lang.Object" G__4556] (.compareTo ^java.time.Year this4555 G__4556)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Year") G__4556)) (clojure.core/let [G__4556 ^"java.time.Year" G__4556] (.compareTo ^java.time.Year this4555 G__4556)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Year this4557 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4558] (.get this4557 java-time-temporal-TemporalField4558)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Year this4559 ^java.lang.Object java-lang-Object4560] (.equals this4559 java-lang-Object4560)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.Year this4561 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4562] (.format this4561 java-time-format-DateTimeFormatter4562)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this4563 ^long long4564] (.plusYears this4563 long4564)))
