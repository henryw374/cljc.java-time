(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [MonthDay]]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.MonthDay this8016 ^int int8017] (.atYear this8016 int8017)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.MonthDay this8018 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8019] (.range this8018 java-time-temporal-TemporalField8019)))
(clojure.core/defn of {:arglists (quote (["java.time.Month" "int"] ["int" "int"]))} (^js/JSJoda.MonthDay [G__8021 G__8022] (js-invoke java.time.MonthDay "of" G__8021 G__8022)))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this8023 ^int int8024] (.withMonth this8023 int8024)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.MonthDay this8025 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery8026] (.query this8025 java-time-temporal-TemporalQuery8026)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^js/JSJoda.MonthDay this8027] (.toString this8027)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.MonthDay this8028 ^js/JSJoda.MonthDay java-time-MonthDay8029] (.isBefore this8028 java-time-MonthDay8029)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.MonthDay this8030 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8031] (.getLong this8030 java-time-temporal-TemporalField8031)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this8032 ^int int8033] (.withDayOfMonth this8032 int8033)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this8034] (.dayOfMonth this8034)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.MonthDay [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8035] (js-invoke java.time.MonthDay "from" java-time-temporal-TemporalAccessor8035)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.MonthDay this8036 ^js/JSJoda.MonthDay java-time-MonthDay8037] (.isAfter this8036 java-time-MonthDay8037)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.MonthDay this8038 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8039] (.isSupported this8038 java-time-temporal-TemporalField8039)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.MonthDay [^java.lang.CharSequence java-lang-CharSequence8040 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter8041] (js-invoke java.time.MonthDay "parse" java-lang-CharSequence8040 java-time-format-DateTimeFormatter8041)) (^js/JSJoda.MonthDay [^java.lang.CharSequence java-lang-CharSequence8042] (js-invoke java.time.MonthDay "parse" java-lang-CharSequence8042)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^boolean [^js/JSJoda.MonthDay this8043 ^int int8044] (.isValidYear this8043 int8044)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this8045] (.hashCode this8045)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.MonthDay this8046 ^js/JSJoda.Temporal java-time-temporal-Temporal8047] (.adjustInto this8046 java-time-temporal-Temporal8047)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this8048 ^js/JSJoda.Month java-time-Month8049] (.with this8048 java-time-Month8049)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.MonthDay [] (js-invoke java.time.MonthDay "now")) (^js/JSJoda.MonthDay [G__8051] (js-invoke java.time.MonthDay "now" G__8051)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this8052] (.monthValue this8052)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.lang.Object"] ["java.time.MonthDay" "java.time.MonthDay"]))} (^int [this8053 G__8054] (.compareTo ^js/JSJoda.MonthDay this8053 G__8054)))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^js/JSJoda.Month [^js/JSJoda.MonthDay this8055] (.month this8055)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.MonthDay this8056 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8057] (.get this8056 java-time-temporal-TemporalField8057)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^boolean [^js/JSJoda.MonthDay this8058 ^java.lang.Object java-lang-Object8059] (.equals this8058 java-lang-Object8059)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.MonthDay this8060 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter8061] (.format this8060 java-time-format-DateTimeFormatter8061)))
