(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [MonthDay]]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.MonthDay this4994 ^int int4995] (.atYear this4994 int4995)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.MonthDay this4996 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4997] (.range this4996 java-time-temporal-TemporalField4997)))
(clojure.core/defn of {:arglists (quote (["java.time.Month" "int"] ["int" "int"]))} (^js/JSJoda.MonthDay [G__4999 G__5000] (js-invoke java.time.MonthDay "of" G__4999 G__5000)))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this5001 ^int int5002] (.withMonth this5001 int5002)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.MonthDay this5003 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery5004] (.query this5003 java-time-temporal-TemporalQuery5004)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^js/JSJoda.MonthDay this5005] (.toString this5005)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.MonthDay this5006 ^js/JSJoda.MonthDay java-time-MonthDay5007] (.isBefore this5006 java-time-MonthDay5007)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.MonthDay this5008 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5009] (.getLong this5008 java-time-temporal-TemporalField5009)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this5010 ^int int5011] (.withDayOfMonth this5010 int5011)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this5012] (.dayOfMonth this5012)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.MonthDay [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5013] (js-invoke java.time.MonthDay "from" java-time-temporal-TemporalAccessor5013)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.MonthDay this5014 ^js/JSJoda.MonthDay java-time-MonthDay5015] (.isAfter this5014 java-time-MonthDay5015)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.MonthDay this5016 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5017] (.isSupported this5016 java-time-temporal-TemporalField5017)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.MonthDay [^java.lang.CharSequence java-lang-CharSequence5018] (js-invoke java.time.MonthDay "parse" java-lang-CharSequence5018)) (^js/JSJoda.MonthDay [^java.lang.CharSequence java-lang-CharSequence5019 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter5020] (js-invoke java.time.MonthDay "parse" java-lang-CharSequence5019 java-time-format-DateTimeFormatter5020)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^boolean [^js/JSJoda.MonthDay this5021 ^int int5022] (.isValidYear this5021 int5022)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this5023] (.hashCode this5023)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.MonthDay this5024 ^js/JSJoda.Temporal java-time-temporal-Temporal5025] (.adjustInto this5024 java-time-temporal-Temporal5025)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this5026 ^js/JSJoda.Month java-time-Month5027] (.with this5026 java-time-Month5027)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.MonthDay [] (js-invoke java.time.MonthDay "now")) (^js/JSJoda.MonthDay [G__5029] (js-invoke java.time.MonthDay "now" G__5029)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this5030] (.monthValue this5030)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this5031 ^js/JSJoda.MonthDay java-time-MonthDay5032] (.compareTo this5031 java-time-MonthDay5032)))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^js/JSJoda.Month [^js/JSJoda.MonthDay this5033] (.month this5033)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.MonthDay this5034 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5035] (.get this5034 java-time-temporal-TemporalField5035)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^boolean [^js/JSJoda.MonthDay this5036 ^java.lang.Object java-lang-Object5037] (.equals this5036 java-lang-Object5037)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.MonthDay this5038 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter5039] (.format this5038 java-time-format-DateTimeFormatter5039)))
