(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [MonthDay]]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.MonthDay this4993 ^int int4994] (.atYear this4993 int4994)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.MonthDay this4995 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4996] (.range this4995 java-time-temporal-TemporalField4996)))
(clojure.core/defn of {:arglists (quote (["java.time.Month" "int"] ["int" "int"]))} (^js/JSJoda.MonthDay [G__4998 G__4999] (js-invoke java.time.MonthDay "of" G__4998 G__4999)))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this5000 ^int int5001] (.withMonth this5000 int5001)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.MonthDay this5002 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery5003] (.query this5002 java-time-temporal-TemporalQuery5003)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^js/JSJoda.MonthDay this5004] (.toString this5004)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.MonthDay this5005 ^js/JSJoda.MonthDay java-time-MonthDay5006] (.isBefore this5005 java-time-MonthDay5006)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.MonthDay this5007 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5008] (.getLong this5007 java-time-temporal-TemporalField5008)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this5009 ^int int5010] (.withDayOfMonth this5009 int5010)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this5011] (.dayOfMonth this5011)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.MonthDay [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5012] (js-invoke java.time.MonthDay "from" java-time-temporal-TemporalAccessor5012)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.MonthDay this5013 ^js/JSJoda.MonthDay java-time-MonthDay5014] (.isAfter this5013 java-time-MonthDay5014)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.MonthDay this5015 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5016] (.isSupported this5015 java-time-temporal-TemporalField5016)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.MonthDay [^java.lang.CharSequence java-lang-CharSequence5017] (js-invoke java.time.MonthDay "parse" java-lang-CharSequence5017)) (^js/JSJoda.MonthDay [^java.lang.CharSequence java-lang-CharSequence5018 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter5019] (js-invoke java.time.MonthDay "parse" java-lang-CharSequence5018 java-time-format-DateTimeFormatter5019)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^boolean [^js/JSJoda.MonthDay this5020 ^int int5021] (.isValidYear this5020 int5021)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this5022] (.hashCode this5022)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.MonthDay this5023 ^js/JSJoda.Temporal java-time-temporal-Temporal5024] (.adjustInto this5023 java-time-temporal-Temporal5024)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this5025 ^js/JSJoda.Month java-time-Month5026] (.with this5025 java-time-Month5026)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^js/JSJoda.MonthDay [G__5028] (js-invoke java.time.MonthDay "now" G__5028)) (^js/JSJoda.MonthDay [] (js-invoke java.time.MonthDay "now")))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this5029] (.monthValue this5029)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this5030 ^js/JSJoda.MonthDay java-time-MonthDay5031] (.compareTo this5030 java-time-MonthDay5031)))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^js/JSJoda.Month [^js/JSJoda.MonthDay this5032] (.month this5032)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.MonthDay this5033 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5034] (.get this5033 java-time-temporal-TemporalField5034)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^boolean [^js/JSJoda.MonthDay this5035 ^java.lang.Object java-lang-Object5036] (.equals this5035 java-lang-Object5036)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.MonthDay this5037 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter5038] (.format this5037 java-time-format-DateTimeFormatter5038)))
