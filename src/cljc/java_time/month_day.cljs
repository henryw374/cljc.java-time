(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [MonthDay]]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.MonthDay this60698 ^int int60699] (.atYear this60698 int60699)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.MonthDay this60700 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60701] (.range this60700 java-time-temporal-TemporalField60701)))
(clojure.core/defn of {:arglists (quote (["java.time.Month" "int"] ["int" "int"]))} (^js/JSJoda.MonthDay [G__60703 G__60704] (js-invoke java.time.MonthDay "of" G__60703 G__60704)))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this60705 ^int int60706] (.withMonth this60705 int60706)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.MonthDay this60707 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery60708] (.query this60707 java-time-temporal-TemporalQuery60708)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^js/JSJoda.MonthDay this60709] (.toString this60709)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.MonthDay this60710 ^js/JSJoda.MonthDay java-time-MonthDay60711] (.isBefore this60710 java-time-MonthDay60711)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.MonthDay this60712 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60713] (.getLong this60712 java-time-temporal-TemporalField60713)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this60714 ^int int60715] (.withDayOfMonth this60714 int60715)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this60716] (.dayOfMonth this60716)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.MonthDay [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor60717] (js-invoke java.time.MonthDay "from" java-time-temporal-TemporalAccessor60717)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.MonthDay this60718 ^js/JSJoda.MonthDay java-time-MonthDay60719] (.isAfter this60718 java-time-MonthDay60719)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.MonthDay this60720 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60721] (.isSupported this60720 java-time-temporal-TemporalField60721)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.MonthDay [^java.lang.CharSequence java-lang-CharSequence60722 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter60723] (js-invoke java.time.MonthDay "parse" java-lang-CharSequence60722 java-time-format-DateTimeFormatter60723)) (^js/JSJoda.MonthDay [^java.lang.CharSequence java-lang-CharSequence60724] (js-invoke java.time.MonthDay "parse" java-lang-CharSequence60724)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^boolean [^js/JSJoda.MonthDay this60725 ^int int60726] (.isValidYear this60725 int60726)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this60727] (.hashCode this60727)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.MonthDay this60728 ^js/JSJoda.Temporal java-time-temporal-Temporal60729] (.adjustInto this60728 java-time-temporal-Temporal60729)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this60730 ^js/JSJoda.Month java-time-Month60731] (.with this60730 java-time-Month60731)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.MonthDay [] (js-invoke java.time.MonthDay "now")) (^js/JSJoda.MonthDay [G__60733] (js-invoke java.time.MonthDay "now" G__60733)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this60734] (.monthValue this60734)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.lang.Object"] ["java.time.MonthDay" "java.time.MonthDay"]))} (^int [this60735 G__60736] (.compareTo ^js/JSJoda.MonthDay this60735 G__60736)))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^js/JSJoda.Month [^js/JSJoda.MonthDay this60737] (.month this60737)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.MonthDay this60738 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60739] (.get this60738 java-time-temporal-TemporalField60739)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^boolean [^js/JSJoda.MonthDay this60740 ^java.lang.Object java-lang-Object60741] (.equals this60740 java-lang-Object60741)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.MonthDay this60742 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter60743] (.format this60742 java-time-format-DateTimeFormatter60743)))
