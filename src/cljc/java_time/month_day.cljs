(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [MonthDay]]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.MonthDay this14511 ^int int14512] (.atYear this14511 int14512)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.MonthDay this14513 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14514] (.range this14513 java-time-temporal-TemporalField14514)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["java.time.Month" "int"]))} (^js/JSJoda.MonthDay [G__14516 G__14517] (js-invoke java.time.MonthDay "of" G__14516 G__14517)))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this14518 ^int int14519] (.withMonth this14518 int14519)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.MonthDay this14520 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery14521] (.query this14520 java-time-temporal-TemporalQuery14521)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^js/JSJoda.MonthDay this14522] (.toString this14522)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.MonthDay this14523 ^js/JSJoda.MonthDay java-time-MonthDay14524] (.isBefore this14523 java-time-MonthDay14524)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.MonthDay this14525 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14526] (.getLong this14525 java-time-temporal-TemporalField14526)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this14527 ^int int14528] (.withDayOfMonth this14527 int14528)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this14529] (.dayOfMonth this14529)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.MonthDay [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor14530] (js-invoke java.time.MonthDay "from" java-time-temporal-TemporalAccessor14530)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.MonthDay this14531 ^js/JSJoda.MonthDay java-time-MonthDay14532] (.isAfter this14531 java-time-MonthDay14532)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.MonthDay this14533 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14534] (.isSupported this14533 java-time-temporal-TemporalField14534)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.MonthDay [^java.lang.CharSequence java-lang-CharSequence14535 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter14536] (js-invoke java.time.MonthDay "parse" java-lang-CharSequence14535 java-time-format-DateTimeFormatter14536)) (^js/JSJoda.MonthDay [^java.lang.CharSequence java-lang-CharSequence14537] (js-invoke java.time.MonthDay "parse" java-lang-CharSequence14537)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^boolean [^js/JSJoda.MonthDay this14538 ^int int14539] (.isValidYear this14538 int14539)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this14540] (.hashCode this14540)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.MonthDay this14541 ^js/JSJoda.Temporal java-time-temporal-Temporal14542] (.adjustInto this14541 java-time-temporal-Temporal14542)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this14543 ^js/JSJoda.Month java-time-Month14544] (.with this14543 java-time-Month14544)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^js/JSJoda.MonthDay [G__14546] (js-invoke java.time.MonthDay "now" G__14546)) (^js/JSJoda.MonthDay [] (js-invoke java.time.MonthDay "now")))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this14547] (.monthValue this14547)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this14548 ^js/JSJoda.MonthDay java-time-MonthDay14549] (.compareTo this14548 java-time-MonthDay14549)))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^js/JSJoda.Month [^js/JSJoda.MonthDay this14550] (.month this14550)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.MonthDay this14551 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14552] (.get this14551 java-time-temporal-TemporalField14552)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^boolean [^js/JSJoda.MonthDay this14553 ^java.lang.Object java-lang-Object14554] (.equals this14553 java-lang-Object14554)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.MonthDay this14555 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter14556] (.format this14555 java-time-format-DateTimeFormatter14556)))
