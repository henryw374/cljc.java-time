(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [MonthDay]]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.MonthDay this7982 ^int int7983] (.atYear this7982 int7983)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.MonthDay this7984 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7985] (.range this7984 java-time-temporal-TemporalField7985)))
(clojure.core/defn of {:arglists (quote (["java.time.Month" "int"] ["int" "int"]))} (^js/JSJoda.MonthDay [G__7987 G__7988] (js-invoke java.time.MonthDay "of" G__7987 G__7988)))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this7989 ^int int7990] (.withMonth this7989 int7990)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.MonthDay this7991 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery7992] (.query this7991 java-time-temporal-TemporalQuery7992)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^js/JSJoda.MonthDay this7993] (.toString this7993)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.MonthDay this7994 ^js/JSJoda.MonthDay java-time-MonthDay7995] (.isBefore this7994 java-time-MonthDay7995)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.MonthDay this7996 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7997] (.getLong this7996 java-time-temporal-TemporalField7997)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this7998 ^int int7999] (.withDayOfMonth this7998 int7999)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this8000] (.dayOfMonth this8000)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.MonthDay [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8001] (js-invoke java.time.MonthDay "from" java-time-temporal-TemporalAccessor8001)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.MonthDay this8002 ^js/JSJoda.MonthDay java-time-MonthDay8003] (.isAfter this8002 java-time-MonthDay8003)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.MonthDay this8004 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8005] (.isSupported this8004 java-time-temporal-TemporalField8005)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.MonthDay [^java.lang.CharSequence java-lang-CharSequence8006 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter8007] (js-invoke java.time.MonthDay "parse" java-lang-CharSequence8006 java-time-format-DateTimeFormatter8007)) (^js/JSJoda.MonthDay [^java.lang.CharSequence java-lang-CharSequence8008] (js-invoke java.time.MonthDay "parse" java-lang-CharSequence8008)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^boolean [^js/JSJoda.MonthDay this8009 ^int int8010] (.isValidYear this8009 int8010)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this8011] (.hashCode this8011)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.MonthDay this8012 ^js/JSJoda.Temporal java-time-temporal-Temporal8013] (.adjustInto this8012 java-time-temporal-Temporal8013)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^js/JSJoda.MonthDay [^js/JSJoda.MonthDay this8014 ^js/JSJoda.Month java-time-Month8015] (.with this8014 java-time-Month8015)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.MonthDay [] (js-invoke java.time.MonthDay "now")) (^js/JSJoda.MonthDay [G__8017] (js-invoke java.time.MonthDay "now" G__8017)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^int [^js/JSJoda.MonthDay this8018] (.monthValue this8018)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"] ["java.time.MonthDay" "java.lang.Object"]))} (^int [this8019 G__8020] (.compareTo ^js/JSJoda.MonthDay this8019 G__8020)))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^js/JSJoda.Month [^js/JSJoda.MonthDay this8021] (.month this8021)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.MonthDay this8022 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8023] (.get this8022 java-time-temporal-TemporalField8023)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^boolean [^js/JSJoda.MonthDay this8024 ^java.lang.Object java-lang-Object8025] (.equals this8024 java-lang-Object8025)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.MonthDay this8026 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter8027] (.format this8026 java-time-format-DateTimeFormatter8027)))
