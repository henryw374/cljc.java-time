(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [MonthDay]]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.LocalDate [^java.time.MonthDay this12215 ^java.lang.Integer int12216] (.atYear this12215 int12216)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.MonthDay this12217 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12218] (.range this12217 java-time-temporal-TemporalField12218)))
(clojure.core/defn of {:arglists (quote (["java.time.Month" "int"] ["int" "int"]))} (^java.time.MonthDay [G__12220 G__12221] (. java.time.MonthDay of G__12220 G__12221)))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this12222 ^java.lang.Integer int12223] (.withMonth this12222 int12223)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.MonthDay this12224 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12225] (.query this12224 java-time-temporal-TemporalQuery12225)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^java.time.MonthDay this12226] (.toString this12226)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this12227 ^java.time.MonthDay java-time-MonthDay12228] (.isBefore this12227 java-time-MonthDay12228)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^java.time.MonthDay this12229 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12230] (.getLong this12229 java-time-temporal-TemporalField12230)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this12231 ^java.lang.Integer int12232] (.withDayOfMonth this12231 int12232)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this12233] (.dayOfMonth this12233)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.MonthDay [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12234] (. java.time.MonthDay from java-time-temporal-TemporalAccessor12234)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this12235 ^java.time.MonthDay java-time-MonthDay12236] (.isAfter this12235 java-time-MonthDay12236)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.MonthDay this12237 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12238] (.isSupported this12237 java-time-temporal-TemporalField12238)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence12239 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12240] (. java.time.MonthDay parse java-lang-CharSequence12239 java-time-format-DateTimeFormatter12240)) (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence12241] (. java.time.MonthDay parse java-lang-CharSequence12241)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.lang.Boolean [^java.time.MonthDay this12242 ^java.lang.Integer int12243] (.isValidYear this12242 int12243)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this12244] (.hashCode this12244)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.MonthDay this12245 ^java.time.temporal.Temporal java-time-temporal-Temporal12246] (.adjustInto this12245 java-time-temporal-Temporal12246)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^java.time.MonthDay [^java.time.MonthDay this12247 ^java.time.Month java-time-Month12248] (.with this12247 java-time-Month12248)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.MonthDay [] (. java.time.MonthDay now)) (^java.time.MonthDay [G__12250] (. java.time.MonthDay now G__12250)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this12251] (.monthValue this12251)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.lang.Object"] ["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Integer [this12252 G__12253] (.compareTo ^java.time.MonthDay this12252 G__12253)))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^java.time.Month [^java.time.MonthDay this12254] (.month this12254)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.MonthDay this12255 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12256] (.get this12255 java-time-temporal-TemporalField12256)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.MonthDay this12257 ^java.lang.Object java-lang-Object12258] (.equals this12257 java-lang-Object12258)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.MonthDay this12259 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12260] (.format this12259 java-time-format-DateTimeFormatter12260)))
