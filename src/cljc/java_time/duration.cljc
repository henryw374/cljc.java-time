(ns cljc.java-time.duration (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Duration]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Duration])))
(def zero (. java.time.Duration -ZERO))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4422 ^long long4423] (.minusMinutes this4422 long4423)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this4424] (.toNanos this4424)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4425 ^long long4426] (.minusMillis this4425 long4426)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4427 ^long long4428] (.minusHours this4427 long4428)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long4429] (. java.time.Duration ofDays long4429)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this4430] (.isNegative this4430)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long4431 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4432] (. java.time.Duration of long4431 java-time-temporal-TemporalUnit4432)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this4433] (.isZero this4433)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4434 ^long long4435] (.multipliedBy this4434 long4435)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this4436 ^java.lang.Integer int4437] (.withNanos this4436 int4437)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this4438] (jti/getter units this4438)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this4439] (jti/getter nano this4439)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4440 ^long long4441] (.plusMillis this4440 long4441)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this4442] (.toMinutes this4442)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4443 ^long long4444] (.minusSeconds this4443 long4444)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4445 ^long long4446] (.plusNanos this4445 long4446)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this4447 ^long long4448 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4449] (.plus this4447 long4448 java-time-temporal-TemporalUnit4449)) (^java.time.Duration [^java.time.Duration this4450 ^java.time.Duration java-time-Duration4451] (.plus this4450 java-time-Duration4451)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4452 ^long long4453] (.dividedBy this4452 long4453)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4454 ^long long4455] (.plusMinutes this4454 long4455)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this4456] (.toString this4456)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this4457 ^java.time.Duration java-time-Duration4458] (.minus this4457 java-time-Duration4458)) (^java.time.Duration [^java.time.Duration this4459 ^long long4460 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4461] (.minus this4459 long4460 java-time-temporal-TemporalUnit4461)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this4462 ^java.time.temporal.Temporal java-time-temporal-Temporal4463] (.addTo this4462 java-time-temporal-Temporal4463)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4464 ^long long4465] (.plusHours this4464 long4465)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4466 ^long long4467] (.plusDays this4466 long4467)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long4468] (. java.time.Duration ofHours long4468)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this4469] (.toMillis this4469)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this4470] (.toHours this4470)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long4471] (. java.time.Duration ofNanos long4471)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long4472] (. java.time.Duration ofMillis long4472)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this4473] (.negated this4473)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this4474] (.abs this4474)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal4475 ^java.time.temporal.Temporal java-time-temporal-Temporal4476] (. java.time.Duration between java-time-temporal-Temporal4475 java-time-temporal-Temporal4476)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this4477] (jti/getter seconds this4477)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4478] (. java.time.Duration from java-time-temporal-TemporalAmount4478)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4479 ^long long4480] (.minusNanos this4479 long4480)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence4481] (. java.time.Duration parse java-lang-CharSequence4481)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this4482] (.hashCode this4482)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4483 ^long long4484] (.withSeconds this4483 long4484)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long4485] (. java.time.Duration ofMinutes long4485)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this4486 ^java.time.temporal.Temporal java-time-temporal-Temporal4487] (.subtractFrom this4486 java-time-temporal-Temporal4487)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "java.lang.Object"]))} (^java.lang.Integer [this4488 G__4489] #? (:cljs (.compareTo ^java.time.Duration this4488 G__4489) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Duration") G__4489)) (clojure.core/let [G__4489 ^"java.time.Duration" G__4489] (.compareTo ^java.time.Duration this4488 G__4489)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__4489)) (clojure.core/let [G__4489 ^"java.lang.Object" G__4489] (.compareTo ^java.time.Duration this4488 G__4489)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4490 ^long long4491] (.plusSeconds this4490 long4491)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this4492 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4493] (.get this4492 java-time-temporal-TemporalUnit4493)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this4494 ^java.lang.Object java-lang-Object4495] (.equals this4494 java-lang-Object4495)))
(clojure.core/defn of-seconds {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Duration [^long long4496 ^long long4497] (. java.time.Duration ofSeconds long4496 long4497)) (^java.time.Duration [^long long4498] (. java.time.Duration ofSeconds long4498)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this4499 ^long long4500] (.minusDays this4499 long4500)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this4501] (.toDays this4501)))
