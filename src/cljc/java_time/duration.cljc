(ns cljc.java-time.duration (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Duration]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Duration])))
(def zero #? (:clj java.time.Duration/ZERO :cljs (. java.time.Duration -ZERO)))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13203 ^long long13204] (.minusMinutes this13203 long13204)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this13205] (.toNanos this13205)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13206 ^long long13207] (.minusMillis this13206 long13207)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13208 ^long long13209] (.minusHours this13208 long13209)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long13210] (. java.time.Duration ofDays long13210)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this13211] (.isNegative this13211)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long13212 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13213] (. java.time.Duration of long13212 java-time-temporal-TemporalUnit13213)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this13214] (.isZero this13214)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13215 ^long long13216] (.multipliedBy this13215 long13216)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this13217 ^java.lang.Integer int13218] (.withNanos this13217 int13218)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this13219] (jti/getter units this13219)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this13220] (jti/getter nano this13220)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13221 ^long long13222] (.plusMillis this13221 long13222)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this13223] (.toMinutes this13223)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13224 ^long long13225] (.minusSeconds this13224 long13225)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13226 ^long long13227] (.plusNanos this13226 long13227)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this13228 ^java.time.Duration java-time-Duration13229] (.plus this13228 java-time-Duration13229)) (^java.time.Duration [^java.time.Duration this13230 ^long long13231 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13232] (.plus this13230 long13231 java-time-temporal-TemporalUnit13232)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13233 ^long long13234] (.dividedBy this13233 long13234)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13235 ^long long13236] (.plusMinutes this13235 long13236)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this13237] (.toString this13237)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this13238 ^long long13239 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13240] (.minus this13238 long13239 java-time-temporal-TemporalUnit13240)) (^java.time.Duration [^java.time.Duration this13241 ^java.time.Duration java-time-Duration13242] (.minus this13241 java-time-Duration13242)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this13243 ^java.time.temporal.Temporal java-time-temporal-Temporal13244] (.addTo this13243 java-time-temporal-Temporal13244)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13245 ^long long13246] (.plusHours this13245 long13246)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13247 ^long long13248] (.plusDays this13247 long13248)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long13249] (. java.time.Duration ofHours long13249)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this13250] (.toMillis this13250)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this13251] (.toHours this13251)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long13252] (. java.time.Duration ofNanos long13252)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long13253] (. java.time.Duration ofMillis long13253)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this13254] (.negated this13254)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this13255] (.abs this13255)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal13256 ^java.time.temporal.Temporal java-time-temporal-Temporal13257] (. java.time.Duration between java-time-temporal-Temporal13256 java-time-temporal-Temporal13257)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this13258] (jti/getter seconds this13258)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount13259] (. java.time.Duration from java-time-temporal-TemporalAmount13259)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13260 ^long long13261] (.minusNanos this13260 long13261)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence13262] (. java.time.Duration parse java-lang-CharSequence13262)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this13263] (.hashCode this13263)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13264 ^long long13265] (.withSeconds this13264 long13265)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long13266] (. java.time.Duration ofMinutes long13266)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this13267 ^java.time.temporal.Temporal java-time-temporal-Temporal13268] (.subtractFrom this13267 java-time-temporal-Temporal13268)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "java.lang.Object"]))} (^java.lang.Integer [this13269 G__13270] #? (:cljs (.compareTo ^java.time.Duration this13269 G__13270) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Duration") G__13270)) (clojure.core/let [G__13270 ^"java.time.Duration" G__13270] (.compareTo ^java.time.Duration this13269 G__13270)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13270)) (clojure.core/let [G__13270 ^"java.lang.Object" G__13270] (.compareTo ^java.time.Duration this13269 G__13270)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13271 ^long long13272] (.plusSeconds this13271 long13272)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this13273 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13274] (.get this13273 java-time-temporal-TemporalUnit13274)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this13275 ^java.lang.Object java-lang-Object13276] (.equals this13275 java-lang-Object13276)))
(clojure.core/defn of-seconds {:arglists (quote (["long"] ["long" "long"]))} (^java.time.Duration [^long long13277] (. java.time.Duration ofSeconds long13277)) (^java.time.Duration [^long long13278 ^long long13279] (. java.time.Duration ofSeconds long13278 long13279)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this13280 ^long long13281] (.minusDays this13280 long13281)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this13282] (.toDays this13282)))
