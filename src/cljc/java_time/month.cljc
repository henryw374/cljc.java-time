(ns cljc.java-time.month (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Month]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Month])))
(def may #? (:clj java.time.Month/MAY :cljs (. java.time.Month -MAY)))
(def december #? (:clj java.time.Month/DECEMBER :cljs (. java.time.Month -DECEMBER)))
(def june #? (:clj java.time.Month/JUNE :cljs (. java.time.Month -JUNE)))
(def september #? (:clj java.time.Month/SEPTEMBER :cljs (. java.time.Month -SEPTEMBER)))
(def february #? (:clj java.time.Month/FEBRUARY :cljs (. java.time.Month -FEBRUARY)))
(def january #? (:clj java.time.Month/JANUARY :cljs (. java.time.Month -JANUARY)))
(def november #? (:clj java.time.Month/NOVEMBER :cljs (. java.time.Month -NOVEMBER)))
(def august #? (:clj java.time.Month/AUGUST :cljs (. java.time.Month -AUGUST)))
(def july #? (:clj java.time.Month/JULY :cljs (. java.time.Month -JULY)))
(def march #? (:clj java.time.Month/MARCH :cljs (. java.time.Month -MARCH)))
(def october #? (:clj java.time.Month/OCTOBER :cljs (. java.time.Month -OCTOBER)))
(def april #? (:clj java.time.Month/APRIL :cljs (. java.time.Month -APRIL)))
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Month this13116 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13117] (.range this13116 java-time-temporal-TemporalField13117)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.Month values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.Month [^java.lang.String java-lang-String13118] (. java.time.Month valueOf java-lang-String13118)) (^java.lang.Enum [^java.lang.Class java-lang-Class13119 ^java.lang.String java-lang-String13120] (. java.time.Month valueOf java-lang-Class13119 java-lang-String13120)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Month [^java.lang.Integer int13121] (. java.time.Month of int13121)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this13122] (.ordinal this13122)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^java.time.Month [^java.time.Month this13123] (.firstMonthOfQuarter this13123)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this13124] (.minLength this13124)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this13125 ^long long13126] (.plus this13125 long13126)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Month this13127 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13128] (.query this13127 java-time-temporal-TemporalQuery13128)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this13129] (.toString this13129)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this13130 ^java.lang.Boolean boolean13131] (.firstDayOfYear this13130 boolean13131)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this13132 ^long long13133] (.minus this13132 long13133)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.Month this13134 ^java.time.format.TextStyle java-time-format-TextStyle13135 ^java.util.Locale java-util-Locale13136] (jti/getter displayName this13134 java-time-format-TextStyle13135 java-util-Locale13136)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this13137] (jti/getter value this13137)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this13138] (.maxLength this13138)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this13139] (.name this13139)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^java.time.Month this13140 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13141] (.getLong this13140 java-time-temporal-TemporalField13141)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this13142 ^java.lang.Boolean boolean13143] (.length this13142 boolean13143)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^java.time.Month this13144] (jti/getter declaringClass this13144)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Month [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13145] (. java.time.Month from java-time-temporal-TemporalAccessor13145)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.Month this13146 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13147] (.isSupported this13146 java-time-temporal-TemporalField13147)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this13148] (.hashCode this13148)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Month this13149 ^java.time.temporal.Temporal java-time-temporal-Temporal13150] (.adjustInto this13149 java-time-temporal-Temporal13150)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Object"] ["java.time.Month" "java.lang.Enum"]))} (^java.lang.Integer [this13151 G__13152] #? (:cljs (.compareTo ^java.time.Month this13151 G__13152) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13152)) (clojure.core/let [G__13152 ^"java.lang.Object" G__13152] (.compareTo ^java.time.Month this13151 G__13152)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__13152)) (clojure.core/let [G__13152 ^"java.lang.Enum" G__13152] (.compareTo ^java.time.Month this13151 G__13152)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Month this13153 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13154] (.get this13153 java-time-temporal-TemporalField13154)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Month this13155 ^java.lang.Object java-lang-Object13156] (.equals this13155 java-lang-Object13156)))
