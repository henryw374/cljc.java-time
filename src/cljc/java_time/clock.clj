(ns cljc.java-time.clock (:import [java.time Clock]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(clojure.core/defn tick {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock50687 ^java.time.Duration java-time-Duration50688] (. java.time.Clock tick java-time-Clock50687 java-time-Duration50688)))
(clojure.core/defn offset {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock50689 ^java.time.Duration java-time-Duration50690] (. java.time.Clock offset java-time-Clock50689 java-time-Duration50690)))
(clojure.core/defn system-utc {:arglists (quote ([]))} (^java.time.Clock [] (. java.time.Clock systemUTC)))
(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^java.time.Clock [] (. java.time.Clock systemDefaultZone)))
(clojure.core/defn fixed {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Instant java-time-Instant50691 ^java.time.ZoneId java-time-ZoneId50692] (. java.time.Clock fixed java-time-Instant50691 java-time-ZoneId50692)))
(clojure.core/defn tick-minutes {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId50693] (. java.time.Clock tickMinutes java-time-ZoneId50693)))
(clojure.core/defn tick-seconds {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId50694] (. java.time.Clock tickSeconds java-time-ZoneId50694)))
(clojure.core/defn millis {:arglists (quote (["java.time.Clock"]))} (^long [^java.time.Clock this50695] (.millis this50695)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.Clock" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Clock this50696 ^java.time.ZoneId java-time-ZoneId50697] (.withZone this50696 java-time-ZoneId50697)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.Clock"]))} (^java.time.ZoneId [^java.time.Clock this50698] (.getZone this50698)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Clock"]))} (^java.lang.Integer [^java.time.Clock this50699] (.hashCode this50699)))
(clojure.core/defn system {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId50700] (. java.time.Clock system java-time-ZoneId50700)))
(clojure.core/defn instant {:arglists (quote (["java.time.Clock"]))} (^java.time.Instant [^java.time.Clock this50701] (.instant this50701)))
(clojure.core/defn equals {:arglists (quote (["java.time.Clock" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Clock this50702 ^java.lang.Object java-lang-Object50703] (.equals this50702 java-lang-Object50703)))
