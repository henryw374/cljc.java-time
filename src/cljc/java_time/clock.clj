(ns cljc.java-time.clock (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Clock]))
(clojure.core/defn tick {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock61178 ^java.time.Duration java-time-Duration61179] (java.time.Clock/tick java-time-Clock61178 java-time-Duration61179)))
(clojure.core/defn offset {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock61180 ^java.time.Duration java-time-Duration61181] (java.time.Clock/offset java-time-Clock61180 java-time-Duration61181)))
(clojure.core/defn system-utc {:arglists (quote ([]))} (^java.time.Clock [] (java.time.Clock/systemUTC)))
(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^java.time.Clock [] (java.time.Clock/systemDefaultZone)))
(clojure.core/defn fixed {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Instant java-time-Instant61182 ^java.time.ZoneId java-time-ZoneId61183] (java.time.Clock/fixed java-time-Instant61182 java-time-ZoneId61183)))
(clojure.core/defn tick-minutes {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId61184] (java.time.Clock/tickMinutes java-time-ZoneId61184)))
(clojure.core/defn tick-seconds {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId61185] (java.time.Clock/tickSeconds java-time-ZoneId61185)))
(clojure.core/defn millis {:arglists (quote (["java.time.Clock"]))} (^long [^java.time.Clock this61186] (.millis this61186)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.Clock" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Clock this61187 ^java.time.ZoneId java-time-ZoneId61188] (.withZone this61187 java-time-ZoneId61188)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.Clock"]))} (^java.time.ZoneId [^java.time.Clock this61189] (.getZone this61189)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Clock"]))} (^java.lang.Integer [^java.time.Clock this61190] (.hashCode this61190)))
(clojure.core/defn system {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId61191] (java.time.Clock/system java-time-ZoneId61191)))
(clojure.core/defn instant {:arglists (quote (["java.time.Clock"]))} (^java.time.Instant [^java.time.Clock this61192] (.instant this61192)))
(clojure.core/defn equals {:arglists (quote (["java.time.Clock" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Clock this61193 ^java.lang.Object java-lang-Object61194] (.equals this61193 java-lang-Object61194)))
