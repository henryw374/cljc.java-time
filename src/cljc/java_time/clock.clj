(ns cljc.java-time.clock (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Clock]))
(clojure.core/defn tick {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock5473 ^java.time.Duration java-time-Duration5474] (java.time.Clock/tick java-time-Clock5473 java-time-Duration5474)))
(clojure.core/defn offset {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock5475 ^java.time.Duration java-time-Duration5476] (java.time.Clock/offset java-time-Clock5475 java-time-Duration5476)))
(clojure.core/defn system-utc {:arglists (quote ([]))} (^java.time.Clock [] (java.time.Clock/systemUTC)))
(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^java.time.Clock [] (java.time.Clock/systemDefaultZone)))
(clojure.core/defn fixed {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Instant java-time-Instant5477 ^java.time.ZoneId java-time-ZoneId5478] (java.time.Clock/fixed java-time-Instant5477 java-time-ZoneId5478)))
(clojure.core/defn tick-minutes {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId5479] (java.time.Clock/tickMinutes java-time-ZoneId5479)))
(clojure.core/defn tick-seconds {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId5480] (java.time.Clock/tickSeconds java-time-ZoneId5480)))
(clojure.core/defn millis {:arglists (quote (["java.time.Clock"]))} (^long [^java.time.Clock this5481] (.millis this5481)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.Clock" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Clock this5482 ^java.time.ZoneId java-time-ZoneId5483] (.withZone this5482 java-time-ZoneId5483)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.Clock"]))} (^java.time.ZoneId [^java.time.Clock this5484] (.getZone this5484)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Clock"]))} (^java.lang.Integer [^java.time.Clock this5485] (.hashCode this5485)))
(clojure.core/defn system {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId5486] (java.time.Clock/system java-time-ZoneId5486)))
(clojure.core/defn instant {:arglists (quote (["java.time.Clock"]))} (^java.time.Instant [^java.time.Clock this5487] (.instant this5487)))
(clojure.core/defn equals {:arglists (quote (["java.time.Clock" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Clock this5488 ^java.lang.Object java-lang-Object5489] (.equals this5488 java-lang-Object5489)))
