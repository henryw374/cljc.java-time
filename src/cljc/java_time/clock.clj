(ns cljc.java-time.clock (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Clock]))
(clojure.core/defn tick {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock8462 ^java.time.Duration java-time-Duration8463] (java.time.Clock/tick java-time-Clock8462 java-time-Duration8463)))
(clojure.core/defn offset {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock8464 ^java.time.Duration java-time-Duration8465] (java.time.Clock/offset java-time-Clock8464 java-time-Duration8465)))
(clojure.core/defn system-utc {:arglists (quote ([]))} (^java.time.Clock [] (java.time.Clock/systemUTC)))
(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^java.time.Clock [] (java.time.Clock/systemDefaultZone)))
(clojure.core/defn fixed {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Instant java-time-Instant8466 ^java.time.ZoneId java-time-ZoneId8467] (java.time.Clock/fixed java-time-Instant8466 java-time-ZoneId8467)))
(clojure.core/defn tick-minutes {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId8468] (java.time.Clock/tickMinutes java-time-ZoneId8468)))
(clojure.core/defn tick-seconds {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId8469] (java.time.Clock/tickSeconds java-time-ZoneId8469)))
(clojure.core/defn millis {:arglists (quote (["java.time.Clock"]))} (^long [^java.time.Clock this8470] (.millis this8470)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.Clock" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Clock this8471 ^java.time.ZoneId java-time-ZoneId8472] (.withZone this8471 java-time-ZoneId8472)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.Clock"]))} (^java.time.ZoneId [^java.time.Clock this8473] (.getZone this8473)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Clock"]))} (^java.lang.Integer [^java.time.Clock this8474] (.hashCode this8474)))
(clojure.core/defn system {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId8475] (java.time.Clock/system java-time-ZoneId8475)))
(clojure.core/defn instant {:arglists (quote (["java.time.Clock"]))} (^java.time.Instant [^java.time.Clock this8476] (.instant this8476)))
(clojure.core/defn equals {:arglists (quote (["java.time.Clock" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Clock this8477 ^java.lang.Object java-lang-Object8478] (.equals this8477 java-lang-Object8478)))
