(ns cljc.java-time.local-date (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [LocalDate]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time LocalDate])))
(def max #? (:clj java.time.LocalDate/MAX :cljs (. java.time.LocalDate -MAX)))
(def min #? (:clj java.time.LocalDate/MIN :cljs (. java.time.LocalDate -MIN)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12256 ^long long12257] (.minusWeeks this12256 long12257)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12258 ^long long12259] (.plusWeeks this12258 long12259)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12260] (.lengthOfYear this12260)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this12261 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12262] (.range this12261 java-time-temporal-TemporalField12262)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this12263] (jti/getter era this12263)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int"] ["int" "int" "int"]))} (^java.time.LocalDate [G__12265 G__12266 G__12267] #? (:cljs (. java.time.LocalDate of G__12265 G__12266 G__12267) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12265) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__12266) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12267)) (clojure.core/let [G__12265 (clojure.core/int G__12265) G__12266 ^"java.time.Month" G__12266 G__12267 (clojure.core/int G__12267)] (. java.time.LocalDate of G__12265 G__12266 G__12267)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12265) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12266) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12267)) (clojure.core/let [G__12265 (clojure.core/int G__12265) G__12266 (clojure.core/int G__12266) G__12267 (clojure.core/int G__12267)] (. java.time.LocalDate of G__12265 G__12266 G__12267)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this12268 ^java.lang.Integer int12269] (.withMonth this12268 int12269)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this12270 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate12271] (.isEqual this12270 java-time-chrono-ChronoLocalDate12271)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12272] (jti/getter year this12272)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this12273] (.toEpochDay this12273)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12274] (jti/getter dayOfYear this12274)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12275 G__12276 G__12277] #? (:cljs (.plus ^java.time.LocalDate this12275 G__12276 G__12277) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12276) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12277)) (clojure.core/let [G__12276 (clojure.core/long G__12276) G__12277 ^"java.time.temporal.TemporalUnit" G__12277] (.plus ^java.time.LocalDate this12275 G__12276 G__12277)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12276) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12277)) (clojure.core/let [G__12276 (clojure.core/long G__12276) G__12277 ^"java.time.temporal.TemporalUnit" G__12277] (.plus ^java.time.LocalDate this12275 G__12276 G__12277)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12276) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12277)) (clojure.core/let [G__12276 (clojure.core/long G__12276) G__12277 ^"java.time.temporal.TemporalUnit" G__12277] (.plus ^java.time.LocalDate this12275 G__12276 G__12277)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12278 G__12279] #? (:cljs (.plus ^java.time.LocalDate this12278 G__12279) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12279)) (clojure.core/let [G__12279 ^"java.time.temporal.TemporalAmount" G__12279] (.plus ^java.time.LocalDate this12278 G__12279)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12279)) (clojure.core/let [G__12279 ^"java.time.temporal.TemporalAmount" G__12279] (.plus ^java.time.LocalDate this12278 G__12279)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12279)) (clojure.core/let [G__12279 ^"java.time.temporal.TemporalAmount" G__12279] (.plus ^java.time.LocalDate this12278 G__12279)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this12280] (.isLeapYear this12280)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this12281 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12282] (.query this12281 java-time-temporal-TemporalQuery12282)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this12283] (jti/getter dayOfWeek this12283)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this12284] (.toString this12284)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12285 ^long long12286] (.plusMonths this12285 long12286)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this12287 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate12288] (.isBefore this12287 java-time-chrono-ChronoLocalDate12288)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12289 ^long long12290] (.minusMonths this12289 long12290)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this12291 G__12292 G__12293] #? (:cljs (.minus ^java.time.LocalDate this12291 G__12292 G__12293) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12292) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12293)) (clojure.core/let [G__12292 (clojure.core/long G__12292) G__12293 ^"java.time.temporal.TemporalUnit" G__12293] (.minus ^java.time.LocalDate this12291 G__12292 G__12293)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12292) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12293)) (clojure.core/let [G__12292 (clojure.core/long G__12292) G__12293 ^"java.time.temporal.TemporalUnit" G__12293] (.minus ^java.time.LocalDate this12291 G__12292 G__12293)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12292) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12293)) (clojure.core/let [G__12292 (clojure.core/long G__12292) G__12293 ^"java.time.temporal.TemporalUnit" G__12293] (.minus ^java.time.LocalDate this12291 G__12292 G__12293)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12294 G__12295] #? (:cljs (.minus ^java.time.LocalDate this12294 G__12295) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12295)) (clojure.core/let [G__12295 ^"java.time.temporal.TemporalAmount" G__12295] (.minus ^java.time.LocalDate this12294 G__12295)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12295)) (clojure.core/let [G__12295 ^"java.time.temporal.TemporalAmount" G__12295] (.minus ^java.time.LocalDate this12294 G__12295)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12295)) (clojure.core/let [G__12295 ^"java.time.temporal.TemporalAmount" G__12295] (.minus ^java.time.LocalDate this12294 G__12295)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12296 ^long long12297] (.plusDays this12296 long12297)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this12298 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12299] (.getLong this12298 java-time-temporal-TemporalField12299)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this12300 ^java.lang.Integer int12301] (.withYear this12300 int12301)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12302] (.lengthOfMonth this12302)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this12303 G__12304] #? (:cljs (.until ^java.time.LocalDate this12303 G__12304) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__12304)) (clojure.core/let [G__12304 ^"java.time.chrono.ChronoLocalDate" G__12304] (.until ^java.time.LocalDate this12303 G__12304)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__12304)) (clojure.core/let [G__12304 ^"java.time.chrono.ChronoLocalDate" G__12304] (.until ^java.time.LocalDate this12303 G__12304)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^long [^java.time.LocalDate this12305 ^java.time.temporal.Temporal java-time-temporal-Temporal12306 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12307] (.until this12305 java-time-temporal-Temporal12306 java-time-temporal-TemporalUnit12307)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long12308] (. java.time.LocalDate ofEpochDay long12308)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this12309 ^java.lang.Integer int12310] (.withDayOfMonth this12309 int12310)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12311] (jti/getter dayOfMonth this12311)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12312] (. java.time.LocalDate from java-time-temporal-TemporalAccessor12312)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this12313 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate12314] (.isAfter this12313 java-time-chrono-ChronoLocalDate12314)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"] ["java.time.LocalDate" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this12315 G__12316] #? (:cljs (.isSupported ^java.time.LocalDate this12315 G__12316) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12316)) (clojure.core/let [G__12316 ^"java.time.temporal.TemporalField" G__12316] (.isSupported ^java.time.LocalDate this12315 G__12316)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12316)) (clojure.core/let [G__12316 ^"java.time.temporal.TemporalUnit" G__12316] (.isSupported ^java.time.LocalDate this12315 G__12316)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12317 ^long long12318] (.minusYears this12317 long12318)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this12319] #? (:cljs (jti/getter chronology ^java.time.LocalDate this12319) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.LocalDate this12319)) (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.LocalDate this12319)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence12320] (. java.time.LocalDate parse java-lang-CharSequence12320)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence12321 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12322] (. java.time.LocalDate parse java-lang-CharSequence12321 java-time-format-DateTimeFormatter12322)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12323] (.hashCode this12323)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this12324 ^java.time.temporal.Temporal java-time-temporal-Temporal12325] (.adjustInto this12324 java-time-temporal-Temporal12325)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this12326 G__12327] #? (:cljs (.with ^java.time.LocalDate this12326 G__12327) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12327)) (clojure.core/let [G__12327 ^"java.time.temporal.TemporalAdjuster" G__12327] (.with ^java.time.LocalDate this12326 G__12327)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12327)) (clojure.core/let [G__12327 ^"java.time.temporal.TemporalAdjuster" G__12327] (.with ^java.time.LocalDate this12326 G__12327)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12327)) (clojure.core/let [G__12327 ^"java.time.temporal.TemporalAdjuster" G__12327] (.with ^java.time.LocalDate this12326 G__12327)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12328 G__12329 G__12330] #? (:cljs (.with ^java.time.LocalDate this12328 G__12329 G__12330) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12329) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12330)) (clojure.core/let [G__12329 ^"java.time.temporal.TemporalField" G__12329 G__12330 (clojure.core/long G__12330)] (.with ^java.time.LocalDate this12328 G__12329 G__12330)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12329) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12330)) (clojure.core/let [G__12329 ^"java.time.temporal.TemporalField" G__12329 G__12330 (clojure.core/long G__12330)] (.with ^java.time.LocalDate this12328 G__12329 G__12330)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12329) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12330)) (clojure.core/let [G__12329 ^"java.time.temporal.TemporalField" G__12329 G__12330 (clojure.core/long G__12330)] (.with ^java.time.LocalDate this12328 G__12329 G__12330)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDate [] (. java.time.LocalDate now)) (^java.time.LocalDate [G__12332] #? (:cljs (. java.time.LocalDate now G__12332) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__12332)) (clojure.core/let [G__12332 ^"java.time.Clock" G__12332] (. java.time.LocalDate now G__12332)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12332)) (clojure.core/let [G__12332 ^"java.time.ZoneId" G__12332] (. java.time.LocalDate now G__12332)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate" "java.time.ZoneId"] ["java.time.LocalDate"]))} (^java.time.ZonedDateTime [^java.time.LocalDate this12333 ^java.time.ZoneId java-time-ZoneId12334] (.atStartOfDay this12333 java-time-ZoneId12334)) (^java.time.LocalDateTime [^java.time.LocalDate this12335] (.atStartOfDay this12335)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12336] (jti/getter monthValue this12336)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this12337 ^java.lang.Integer int12338] (.withDayOfYear this12337 int12338)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.lang.Object"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Integer [this12339 G__12340] #? (:cljs (.compareTo ^java.time.LocalDate this12339 G__12340) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__12340)) (clojure.core/let [G__12340 ^"java.lang.Object" G__12340] (.compareTo ^java.time.LocalDate this12339 G__12340)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__12340)) (clojure.core/let [G__12340 ^"java.time.chrono.ChronoLocalDate" G__12340] (.compareTo ^java.time.LocalDate this12339 G__12340)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this12341] (jti/getter month this12341)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int12342 ^java.lang.Integer int12343] (. java.time.LocalDate ofYearDay int12342 int12343)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this12344 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12345] (.get this12344 java-time-temporal-TemporalField12345)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this12346 ^java.lang.Object java-lang-Object12347] (.equals this12346 java-lang-Object12347)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "int" "int"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "int" "int" "int" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDate this12348 ^java.lang.Integer int12349 ^java.lang.Integer int12350] (.atTime this12348 int12349 int12350)) (^java.time.LocalDateTime [^java.time.LocalDate this12351 ^java.lang.Integer int12352 ^java.lang.Integer int12353 ^java.lang.Integer int12354] (.atTime this12351 int12352 int12353 int12354)) (^java.lang.Object [this12355 G__12356] #? (:cljs (.atTime ^java.time.LocalDate this12355 G__12356) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__12356)) (clojure.core/let [G__12356 ^"java.time.LocalTime" G__12356] (.atTime ^java.time.LocalDate this12355 G__12356)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__12356)) (clojure.core/let [G__12356 ^"java.time.LocalTime" G__12356] (.atTime ^java.time.LocalDate this12355 G__12356)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__12356)) (clojure.core/let [G__12356 ^"java.time.OffsetTime" G__12356] (.atTime ^java.time.LocalDate this12355 G__12356)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [^java.time.LocalDate this12357 ^java.lang.Integer int12358 ^java.lang.Integer int12359 ^java.lang.Integer int12360 ^java.lang.Integer int12361] (.atTime this12357 int12358 int12359 int12360 int12361)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this12362 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12363] (.format this12362 java-time-format-DateTimeFormatter12363)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12364 ^long long12365] (.plusYears this12364 long12365)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12366 ^long long12367] (.minusDays this12366 long12367)))
