(ns cljc.java-time.local-date (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [LocalDate]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time LocalDate])))
(def max (. java.time.LocalDate -MAX))
(def min (. java.time.LocalDate -MIN))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3475 ^long long3476] (.minusWeeks this3475 long3476)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3477 ^long long3478] (.plusWeeks this3477 long3478)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3479] (.lengthOfYear this3479)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this3480 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3481] (.range this3480 java-time-temporal-TemporalField3481)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this3482] (jti/getter era this3482)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int"] ["int" "int" "int"]))} (^java.time.LocalDate [G__3484 G__3485 G__3486] #? (:cljs (. java.time.LocalDate of G__3484 G__3485 G__3486) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__3484) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__3485) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__3486)) (clojure.core/let [G__3484 (clojure.core/int G__3484) G__3485 ^"java.time.Month" G__3485 G__3486 (clojure.core/int G__3486)] (. java.time.LocalDate of G__3484 G__3485 G__3486)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__3484) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__3485) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__3486)) (clojure.core/let [G__3484 (clojure.core/int G__3484) G__3485 (clojure.core/int G__3485) G__3486 (clojure.core/int G__3486)] (. java.time.LocalDate of G__3484 G__3485 G__3486)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this3487 ^java.lang.Integer int3488] (.withMonth this3487 int3488)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this3489 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3490] (.isEqual this3489 java-time-chrono-ChronoLocalDate3490)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3491] (jti/getter year this3491)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this3492] (.toEpochDay this3492)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3493] (jti/getter dayOfYear this3493)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this3494 G__3495] #? (:cljs (.plus ^java.time.LocalDate this3494 G__3495) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3495)) (clojure.core/let [G__3495 ^"java.time.temporal.TemporalAmount" G__3495] (.plus ^java.time.LocalDate this3494 G__3495)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3495)) (clojure.core/let [G__3495 ^"java.time.temporal.TemporalAmount" G__3495] (.plus ^java.time.LocalDate this3494 G__3495)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3495)) (clojure.core/let [G__3495 ^"java.time.temporal.TemporalAmount" G__3495] (.plus ^java.time.LocalDate this3494 G__3495)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this3496 G__3497 G__3498] #? (:cljs (.plus ^java.time.LocalDate this3496 G__3497 G__3498) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3497) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3498)) (clojure.core/let [G__3497 (clojure.core/long G__3497) G__3498 ^"java.time.temporal.TemporalUnit" G__3498] (.plus ^java.time.LocalDate this3496 G__3497 G__3498)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3497) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3498)) (clojure.core/let [G__3497 (clojure.core/long G__3497) G__3498 ^"java.time.temporal.TemporalUnit" G__3498] (.plus ^java.time.LocalDate this3496 G__3497 G__3498)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3497) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3498)) (clojure.core/let [G__3497 (clojure.core/long G__3497) G__3498 ^"java.time.temporal.TemporalUnit" G__3498] (.plus ^java.time.LocalDate this3496 G__3497 G__3498)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this3499] (.isLeapYear this3499)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this3500 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3501] (.query this3500 java-time-temporal-TemporalQuery3501)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this3502] (jti/getter dayOfWeek this3502)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this3503] (.toString this3503)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3504 ^long long3505] (.plusMonths this3504 long3505)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this3506 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3507] (.isBefore this3506 java-time-chrono-ChronoLocalDate3507)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3508 ^long long3509] (.minusMonths this3508 long3509)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this3510 G__3511] #? (:cljs (.minus ^java.time.LocalDate this3510 G__3511) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3511)) (clojure.core/let [G__3511 ^"java.time.temporal.TemporalAmount" G__3511] (.minus ^java.time.LocalDate this3510 G__3511)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3511)) (clojure.core/let [G__3511 ^"java.time.temporal.TemporalAmount" G__3511] (.minus ^java.time.LocalDate this3510 G__3511)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3511)) (clojure.core/let [G__3511 ^"java.time.temporal.TemporalAmount" G__3511] (.minus ^java.time.LocalDate this3510 G__3511)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this3512 G__3513 G__3514] #? (:cljs (.minus ^java.time.LocalDate this3512 G__3513 G__3514) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3513) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3514)) (clojure.core/let [G__3513 (clojure.core/long G__3513) G__3514 ^"java.time.temporal.TemporalUnit" G__3514] (.minus ^java.time.LocalDate this3512 G__3513 G__3514)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3513) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3514)) (clojure.core/let [G__3513 (clojure.core/long G__3513) G__3514 ^"java.time.temporal.TemporalUnit" G__3514] (.minus ^java.time.LocalDate this3512 G__3513 G__3514)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3513) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3514)) (clojure.core/let [G__3513 (clojure.core/long G__3513) G__3514 ^"java.time.temporal.TemporalUnit" G__3514] (.minus ^java.time.LocalDate this3512 G__3513 G__3514)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3515 ^long long3516] (.plusDays this3515 long3516)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this3517 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3518] (.getLong this3517 java-time-temporal-TemporalField3518)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this3519 ^java.lang.Integer int3520] (.withYear this3519 int3520)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3521] (.lengthOfMonth this3521)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this3522 G__3523] #? (:cljs (.until ^java.time.LocalDate this3522 G__3523) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__3523)) (clojure.core/let [G__3523 ^"java.time.chrono.ChronoLocalDate" G__3523] (.until ^java.time.LocalDate this3522 G__3523)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__3523)) (clojure.core/let [G__3523 ^"java.time.chrono.ChronoLocalDate" G__3523] (.until ^java.time.LocalDate this3522 G__3523)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^long [^java.time.LocalDate this3524 ^java.time.temporal.Temporal java-time-temporal-Temporal3525 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3526] (.until this3524 java-time-temporal-Temporal3525 java-time-temporal-TemporalUnit3526)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long3527] (. java.time.LocalDate ofEpochDay long3527)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this3528 ^java.lang.Integer int3529] (.withDayOfMonth this3528 int3529)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3530] (jti/getter dayOfMonth this3530)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor3531] (. java.time.LocalDate from java-time-temporal-TemporalAccessor3531)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this3532 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3533] (.isAfter this3532 java-time-chrono-ChronoLocalDate3533)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"] ["java.time.LocalDate" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this3534 G__3535] #? (:cljs (.isSupported ^java.time.LocalDate this3534 G__3535) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3535)) (clojure.core/let [G__3535 ^"java.time.temporal.TemporalField" G__3535] (.isSupported ^java.time.LocalDate this3534 G__3535)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3535)) (clojure.core/let [G__3535 ^"java.time.temporal.TemporalUnit" G__3535] (.isSupported ^java.time.LocalDate this3534 G__3535)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3536 ^long long3537] (.minusYears this3536 long3537)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this3538] #? (:cljs (jti/getter chronology ^java.time.LocalDate this3538) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.LocalDate this3538)) (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.LocalDate this3538)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence3539] (. java.time.LocalDate parse java-lang-CharSequence3539)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence3540 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3541] (. java.time.LocalDate parse java-lang-CharSequence3540 java-time-format-DateTimeFormatter3541)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3542] (.hashCode this3542)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this3543 ^java.time.temporal.Temporal java-time-temporal-Temporal3544] (.adjustInto this3543 java-time-temporal-Temporal3544)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this3545 G__3546 G__3547] #? (:cljs (.with ^java.time.LocalDate this3545 G__3546 G__3547) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3546) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3547)) (clojure.core/let [G__3546 ^"java.time.temporal.TemporalField" G__3546 G__3547 (clojure.core/long G__3547)] (.with ^java.time.LocalDate this3545 G__3546 G__3547)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3546) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3547)) (clojure.core/let [G__3546 ^"java.time.temporal.TemporalField" G__3546 G__3547 (clojure.core/long G__3547)] (.with ^java.time.LocalDate this3545 G__3546 G__3547)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3546) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3547)) (clojure.core/let [G__3546 ^"java.time.temporal.TemporalField" G__3546 G__3547 (clojure.core/long G__3547)] (.with ^java.time.LocalDate this3545 G__3546 G__3547)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this3548 G__3549] #? (:cljs (.with ^java.time.LocalDate this3548 G__3549) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__3549)) (clojure.core/let [G__3549 ^"java.time.temporal.TemporalAdjuster" G__3549] (.with ^java.time.LocalDate this3548 G__3549)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__3549)) (clojure.core/let [G__3549 ^"java.time.temporal.TemporalAdjuster" G__3549] (.with ^java.time.LocalDate this3548 G__3549)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__3549)) (clojure.core/let [G__3549 ^"java.time.temporal.TemporalAdjuster" G__3549] (.with ^java.time.LocalDate this3548 G__3549)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.LocalDate [G__3551] #? (:cljs (. java.time.LocalDate now G__3551) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__3551)) (clojure.core/let [G__3551 ^"java.time.Clock" G__3551] (. java.time.LocalDate now G__3551)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__3551)) (clojure.core/let [G__3551 ^"java.time.ZoneId" G__3551] (. java.time.LocalDate now G__3551)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDate [] (. java.time.LocalDate now)))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.LocalDate this3552] (.atStartOfDay this3552)) (^java.time.ZonedDateTime [^java.time.LocalDate this3553 ^java.time.ZoneId java-time-ZoneId3554] (.atStartOfDay this3553 java-time-ZoneId3554)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3555] (jti/getter monthValue this3555)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this3556 ^java.lang.Integer int3557] (.withDayOfYear this3556 int3557)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Integer [this3558 G__3559] #? (:cljs (.compareTo ^java.time.LocalDate this3558 G__3559) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__3559)) (clojure.core/let [G__3559 ^"java.time.chrono.ChronoLocalDate" G__3559] (.compareTo ^java.time.LocalDate this3558 G__3559)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__3559)) (clojure.core/let [G__3559 ^"java.lang.Object" G__3559] (.compareTo ^java.time.LocalDate this3558 G__3559)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this3560] (jti/getter month this3560)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int3561 ^java.lang.Integer int3562] (. java.time.LocalDate ofYearDay int3561 int3562)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this3563 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3564] (.get this3563 java-time-temporal-TemporalField3564)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this3565 ^java.lang.Object java-lang-Object3566] (.equals this3565 java-lang-Object3566)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "int" "int"] ["java.time.LocalDate" "int" "int" "int" "int"]))} (^java.lang.Object [this3567 G__3568] #? (:cljs (.atTime ^java.time.LocalDate this3567 G__3568) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__3568)) (clojure.core/let [G__3568 ^"java.time.OffsetTime" G__3568] (.atTime ^java.time.LocalDate this3567 G__3568)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__3568)) (clojure.core/let [G__3568 ^"java.time.LocalTime" G__3568] (.atTime ^java.time.LocalDate this3567 G__3568)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__3568)) (clojure.core/let [G__3568 ^"java.time.LocalTime" G__3568] (.atTime ^java.time.LocalDate this3567 G__3568)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [^java.time.LocalDate this3569 ^java.lang.Integer int3570 ^java.lang.Integer int3571 ^java.lang.Integer int3572] (.atTime this3569 int3570 int3571 int3572)) (^java.time.LocalDateTime [^java.time.LocalDate this3573 ^java.lang.Integer int3574 ^java.lang.Integer int3575] (.atTime this3573 int3574 int3575)) (^java.time.LocalDateTime [^java.time.LocalDate this3576 ^java.lang.Integer int3577 ^java.lang.Integer int3578 ^java.lang.Integer int3579 ^java.lang.Integer int3580] (.atTime this3576 int3577 int3578 int3579 int3580)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this3581 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3582] (.format this3581 java-time-format-DateTimeFormatter3582)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3583 ^long long3584] (.plusYears this3583 long3584)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3585 ^long long3586] (.minusDays this3585 long3586)))
