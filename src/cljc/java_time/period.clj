(ns cljc.java-time.period (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Period]))
(def zero java.time.Period/ZERO)
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this3035] (.getMonths this3035)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int3036] (java.time.Period/ofWeeks int3036)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int3037] (java.time.Period/ofDays int3037)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this3038] (.isNegative this3038)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^java.time.Period [^java.lang.Integer int3039 ^java.lang.Integer int3040 ^java.lang.Integer int3041] (java.time.Period/of int3039 int3040 int3041)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this3042] (.isZero this3042)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this3043 ^java.lang.Integer int3044] (.multipliedBy this3043 int3044)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^java.time.Period this3045] (.getUnits this3045)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this3046 ^java.lang.Integer int3047] (.withDays this3046 int3047)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.Period this3048 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3049] (.plus this3048 java-time-temporal-TemporalAmount3049)))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int3050] (java.time.Period/ofMonths int3050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^java.time.Period this3051] (.toString this3051)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this3052 ^long long3053] (.plusMonths this3052 long3053)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this3054 ^long long3055] (.minusMonths this3054 long3055)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.Period this3056 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3057] (.minus this3056 java-time-temporal-TemporalAmount3057)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this3058 ^java.time.temporal.Temporal java-time-temporal-Temporal3059] (.addTo this3058 java-time-temporal-Temporal3059)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^java.time.Period this3060] (.toTotalMonths this3060)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this3061 ^long long3062] (.plusDays this3061 long3062)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int3063] (java.time.Period/ofYears int3063)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this3064] (.getDays this3064)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"]))} (^java.time.Period [^java.time.Period this3065] (.negated this3065)))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this3066] (.getYears this3066)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this3067 ^java.lang.Integer int3068] (.withYears this3067 int3068)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"]))} (^java.time.Period [^java.time.Period this3069] (.normalized this3069)))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this3070 ^java.lang.Integer int3071] (.withMonths this3070 int3071)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^java.time.Period [^java.time.LocalDate java-time-LocalDate3072 ^java.time.LocalDate java-time-LocalDate3073] (java.time.Period/between java-time-LocalDate3072 java-time-LocalDate3073)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3074] (java.time.Period/from java-time-temporal-TemporalAmount3074)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this3075 ^long long3076] (.minusYears this3075 long3076)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"]))} (^java.time.chrono.IsoChronology [^java.time.Period this3077] (.getChronology this3077)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Period [^java.lang.CharSequence java-lang-CharSequence3078] (java.time.Period/parse java-lang-CharSequence3078)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this3079] (.hashCode this3079)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this3080 ^java.time.temporal.Temporal java-time-temporal-Temporal3081] (.subtractFrom this3080 java-time-temporal-Temporal3081)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Period this3082 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3083] (.get this3082 java-time-temporal-TemporalUnit3083)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Period this3084 ^java.lang.Object java-lang-Object3085] (.equals this3084 java-lang-Object3085)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this3086 ^long long3087] (.plusYears this3086 long3087)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this3088 ^long long3089] (.minusDays this3088 long3089)))
