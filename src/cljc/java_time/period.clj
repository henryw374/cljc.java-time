(ns cljc.java-time.period (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time Period]))
(def zero (. java.time.Period -ZERO))
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this6117] (.getMonths this6117)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int6118] (. java.time.Period ofWeeks int6118)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int6119] (. java.time.Period ofDays int6119)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this6120] (.isNegative this6120)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^java.time.Period [^java.lang.Integer int6121 ^java.lang.Integer int6122 ^java.lang.Integer int6123] (. java.time.Period of int6121 int6122 int6123)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this6124] (.isZero this6124)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"] ["java.time.Period" "int"]))} (^java.lang.Object [this6125 G__6126] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6126)) (clojure.core/let [G__6126 (clojure.core/int G__6126)] (.multipliedBy ^java.time.Period this6125 G__6126)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6126)) (clojure.core/let [G__6126 (clojure.core/int G__6126)] (.multipliedBy ^java.time.Period this6125 G__6126)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^java.time.Period this6127] (.getUnits this6127)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this6128 ^java.lang.Integer int6129] (.withDays this6128 int6129)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6130 G__6131] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6131)) (clojure.core/let [G__6131 ^"java.time.temporal.TemporalAmount" G__6131] (.plus ^java.time.Period this6130 G__6131)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6131)) (clojure.core/let [G__6131 ^"java.time.temporal.TemporalAmount" G__6131] (.plus ^java.time.Period this6130 G__6131)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int6132] (. java.time.Period ofMonths int6132)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^java.time.Period this6133] (.toString this6133)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this6134 ^long long6135] (.plusMonths this6134 long6135)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this6136 ^long long6137] (.minusMonths this6136 long6137)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6138 G__6139] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6139)) (clojure.core/let [G__6139 ^"java.time.temporal.TemporalAmount" G__6139] (.minus ^java.time.Period this6138 G__6139)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6139)) (clojure.core/let [G__6139 ^"java.time.temporal.TemporalAmount" G__6139] (.minus ^java.time.Period this6138 G__6139)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this6140 ^java.time.temporal.Temporal java-time-temporal-Temporal6141] (.addTo this6140 java-time-temporal-Temporal6141)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^java.time.Period this6142] (.toTotalMonths this6142)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this6143 ^long long6144] (.plusDays this6143 long6144)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int6145] (. java.time.Period ofYears int6145)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this6146] (.getDays this6146)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this6147] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this6147)) (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this6147)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this6148] (.getYears this6148)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this6149 ^java.lang.Integer int6150] (.withYears this6149 int6150)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this6151] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this6151)) (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this6151)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this6152 ^java.lang.Integer int6153] (.withMonths this6152 int6153)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^java.time.Period [^java.time.LocalDate java-time-LocalDate6154 ^java.time.LocalDate java-time-LocalDate6155] (. java.time.Period between java-time-LocalDate6154 java-time-LocalDate6155)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount6156] (. java.time.Period from java-time-temporal-TemporalAmount6156)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this6157 ^long long6158] (.minusYears this6157 long6158)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this6159] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.Period this6159)) (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.Period this6159)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Period [^java.lang.CharSequence java-lang-CharSequence6160] (. java.time.Period parse java-lang-CharSequence6160)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this6161] (.hashCode this6161)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this6162 ^java.time.temporal.Temporal java-time-temporal-Temporal6163] (.subtractFrom this6162 java-time-temporal-Temporal6163)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Period this6164 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6165] (.get this6164 java-time-temporal-TemporalUnit6165)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Period this6166 ^java.lang.Object java-lang-Object6167] (.equals this6166 java-lang-Object6167)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this6168 ^long long6169] (.plusYears this6168 long6169)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this6170 ^long long6171] (.minusDays this6170 long6171)))
