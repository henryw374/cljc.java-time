(ns cljc.java-time.period (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Period]))
(def zero java.time.Period/ZERO)
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this6024] (.getMonths this6024)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int6025] (java.time.Period/ofWeeks int6025)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int6026] (java.time.Period/ofDays int6026)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this6027] (.isNegative this6027)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^java.time.Period [^java.lang.Integer int6028 ^java.lang.Integer int6029 ^java.lang.Integer int6030] (java.time.Period/of int6028 int6029 int6030)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this6031] (.isZero this6031)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"] ["java.time.Period" "int"]))} (^java.lang.Object [this6032 G__6033] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6033)) (clojure.core/let [G__6033 (clojure.core/int G__6033)] (.multipliedBy ^java.time.Period this6032 G__6033)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6033)) (clojure.core/let [G__6033 (clojure.core/int G__6033)] (.multipliedBy ^java.time.Period this6032 G__6033)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^java.time.Period this6034] (.getUnits this6034)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this6035 ^java.lang.Integer int6036] (.withDays this6035 int6036)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6037 G__6038] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6038)) (clojure.core/let [G__6038 ^"java.time.temporal.TemporalAmount" G__6038] (.plus ^java.time.Period this6037 G__6038)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6038)) (clojure.core/let [G__6038 ^"java.time.temporal.TemporalAmount" G__6038] (.plus ^java.time.Period this6037 G__6038)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int6039] (java.time.Period/ofMonths int6039)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^java.time.Period this6040] (.toString this6040)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this6041 ^long long6042] (.plusMonths this6041 long6042)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this6043 ^long long6044] (.minusMonths this6043 long6044)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6045 G__6046] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6046)) (clojure.core/let [G__6046 ^"java.time.temporal.TemporalAmount" G__6046] (.minus ^java.time.Period this6045 G__6046)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6046)) (clojure.core/let [G__6046 ^"java.time.temporal.TemporalAmount" G__6046] (.minus ^java.time.Period this6045 G__6046)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this6047 ^java.time.temporal.Temporal java-time-temporal-Temporal6048] (.addTo this6047 java-time-temporal-Temporal6048)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^java.time.Period this6049] (.toTotalMonths this6049)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this6050 ^long long6051] (.plusDays this6050 long6051)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int6052] (java.time.Period/ofYears int6052)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this6053] (.getDays this6053)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this6054] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this6054)) (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this6054)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this6055] (.getYears this6055)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this6056 ^java.lang.Integer int6057] (.withYears this6056 int6057)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this6058] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this6058)) (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this6058)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this6059 ^java.lang.Integer int6060] (.withMonths this6059 int6060)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^java.time.Period [^java.time.LocalDate java-time-LocalDate6061 ^java.time.LocalDate java-time-LocalDate6062] (java.time.Period/between java-time-LocalDate6061 java-time-LocalDate6062)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount6063] (java.time.Period/from java-time-temporal-TemporalAmount6063)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this6064 ^long long6065] (.minusYears this6064 long6065)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this6066] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.Period this6066)) (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.Period this6066)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Period [^java.lang.CharSequence java-lang-CharSequence6067] (java.time.Period/parse java-lang-CharSequence6067)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this6068] (.hashCode this6068)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this6069 ^java.time.temporal.Temporal java-time-temporal-Temporal6070] (.subtractFrom this6069 java-time-temporal-Temporal6070)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Period this6071 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6072] (.get this6071 java-time-temporal-TemporalUnit6072)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Period this6073 ^java.lang.Object java-lang-Object6074] (.equals this6073 java-lang-Object6074)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this6075 ^long long6076] (.plusYears this6075 long6076)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this6077 ^long long6078] (.minusDays this6077 long6078)))
