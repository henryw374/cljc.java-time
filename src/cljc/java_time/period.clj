(ns cljc.java-time.period (:import [java.time Period]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def zero java.time.Period/ZERO)
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this48249] (.getMonths this48249)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int48250] (. java.time.Period ofWeeks int48250)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int48251] (. java.time.Period ofDays int48251)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this48252] (.isNegative this48252)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^java.time.Period [^java.lang.Integer int48253 ^java.lang.Integer int48254 ^java.lang.Integer int48255] (. java.time.Period of int48253 int48254 int48255)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this48256] (.isZero this48256)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"] ["java.time.Period" "int"]))} (^java.lang.Object [this48257 G__48258] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48258)) (clojure.core/let [G__48258 (clojure.core/int G__48258)] (.multipliedBy ^java.time.Period this48257 G__48258)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48258)) (clojure.core/let [G__48258 (clojure.core/int G__48258)] (.multipliedBy ^java.time.Period this48257 G__48258)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^java.time.Period this48259] (.getUnits this48259)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this48260 ^java.lang.Integer int48261] (.withDays this48260 int48261)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this48262 G__48263] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48263)) (clojure.core/let [G__48263 ^"java.time.temporal.TemporalAmount" G__48263] (.plus ^java.time.Period this48262 G__48263)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48263)) (clojure.core/let [G__48263 ^"java.time.temporal.TemporalAmount" G__48263] (.plus ^java.time.Period this48262 G__48263)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int48264] (. java.time.Period ofMonths int48264)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^java.time.Period this48265] (.toString this48265)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this48266 ^long long48267] (.plusMonths this48266 long48267)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this48268 ^long long48269] (.minusMonths this48268 long48269)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this48270 G__48271] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48271)) (clojure.core/let [G__48271 ^"java.time.temporal.TemporalAmount" G__48271] (.minus ^java.time.Period this48270 G__48271)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48271)) (clojure.core/let [G__48271 ^"java.time.temporal.TemporalAmount" G__48271] (.minus ^java.time.Period this48270 G__48271)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this48272 ^java.time.temporal.Temporal java-time-temporal-Temporal48273] (.addTo this48272 java-time-temporal-Temporal48273)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^java.time.Period this48274] (.toTotalMonths this48274)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this48275 ^long long48276] (.plusDays this48275 long48276)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int48277] (. java.time.Period ofYears int48277)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this48278] (.getDays this48278)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this48279] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this48279)) (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this48279)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this48280] (.getYears this48280)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this48281 ^java.lang.Integer int48282] (.withYears this48281 int48282)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this48283] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this48283)) (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this48283)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this48284 ^java.lang.Integer int48285] (.withMonths this48284 int48285)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^java.time.Period [^java.time.LocalDate java-time-LocalDate48286 ^java.time.LocalDate java-time-LocalDate48287] (. java.time.Period between java-time-LocalDate48286 java-time-LocalDate48287)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount48288] (. java.time.Period from java-time-temporal-TemporalAmount48288)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this48289 ^long long48290] (.minusYears this48289 long48290)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this48291] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.Period this48291)) (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.Period this48291)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Period [^java.lang.CharSequence java-lang-CharSequence48292] (. java.time.Period parse java-lang-CharSequence48292)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this48293] (.hashCode this48293)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this48294 ^java.time.temporal.Temporal java-time-temporal-Temporal48295] (.subtractFrom this48294 java-time-temporal-Temporal48295)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Period this48296 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit48297] (.get this48296 java-time-temporal-TemporalUnit48297)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Period this48298 ^java.lang.Object java-lang-Object48299] (.equals this48298 java-lang-Object48299)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this48300 ^long long48301] (.plusYears this48300 long48301)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this48302 ^long long48303] (.minusDays this48302 long48303)))
