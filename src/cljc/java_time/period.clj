(ns cljc.java-time.period (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Period]))
(def zero java.time.Period/ZERO)
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this10257] (.getMonths this10257)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int10258] (. java.time.Period ofWeeks int10258)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int10259] (. java.time.Period ofDays int10259)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this10260] (.isNegative this10260)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^java.time.Period [^java.lang.Integer int10261 ^java.lang.Integer int10262 ^java.lang.Integer int10263] (. java.time.Period of int10261 int10262 int10263)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this10264] (.isZero this10264)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"] ["java.time.Period" "int"]))} (^java.lang.Object [this10265 G__10266] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10266)) (clojure.core/let [G__10266 (clojure.core/int G__10266)] (.multipliedBy ^java.time.Period this10265 G__10266)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10266)) (clojure.core/let [G__10266 (clojure.core/int G__10266)] (.multipliedBy ^java.time.Period this10265 G__10266)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^java.time.Period this10267] (.getUnits this10267)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this10268 ^java.lang.Integer int10269] (.withDays this10268 int10269)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this10270 G__10271] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10271)) (clojure.core/let [G__10271 ^"java.time.temporal.TemporalAmount" G__10271] (.plus ^java.time.Period this10270 G__10271)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10271)) (clojure.core/let [G__10271 ^"java.time.temporal.TemporalAmount" G__10271] (.plus ^java.time.Period this10270 G__10271)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int10272] (. java.time.Period ofMonths int10272)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^java.time.Period this10273] (.toString this10273)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this10274 ^long long10275] (.plusMonths this10274 long10275)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this10276 ^long long10277] (.minusMonths this10276 long10277)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this10278 G__10279] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10279)) (clojure.core/let [G__10279 ^"java.time.temporal.TemporalAmount" G__10279] (.minus ^java.time.Period this10278 G__10279)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10279)) (clojure.core/let [G__10279 ^"java.time.temporal.TemporalAmount" G__10279] (.minus ^java.time.Period this10278 G__10279)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this10280 ^java.time.temporal.Temporal java-time-temporal-Temporal10281] (.addTo this10280 java-time-temporal-Temporal10281)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^java.time.Period this10282] (.toTotalMonths this10282)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this10283 ^long long10284] (.plusDays this10283 long10284)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int10285] (. java.time.Period ofYears int10285)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this10286] (.getDays this10286)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this10287] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this10287)) (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this10287)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this10288] (.getYears this10288)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this10289 ^java.lang.Integer int10290] (.withYears this10289 int10290)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this10291] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this10291)) (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this10291)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this10292 ^java.lang.Integer int10293] (.withMonths this10292 int10293)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^java.time.Period [^java.time.LocalDate java-time-LocalDate10294 ^java.time.LocalDate java-time-LocalDate10295] (. java.time.Period between java-time-LocalDate10294 java-time-LocalDate10295)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount10296] (. java.time.Period from java-time-temporal-TemporalAmount10296)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this10297 ^long long10298] (.minusYears this10297 long10298)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this10299] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.Period this10299)) (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.Period this10299)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Period [^java.lang.CharSequence java-lang-CharSequence10300] (. java.time.Period parse java-lang-CharSequence10300)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this10301] (.hashCode this10301)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this10302 ^java.time.temporal.Temporal java-time-temporal-Temporal10303] (.subtractFrom this10302 java-time-temporal-Temporal10303)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Period this10304 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit10305] (.get this10304 java-time-temporal-TemporalUnit10305)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Period this10306 ^java.lang.Object java-lang-Object10307] (.equals this10306 java-lang-Object10307)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this10308 ^long long10309] (.plusYears this10308 long10309)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this10310 ^long long10311] (.minusDays this10310 long10311)))
