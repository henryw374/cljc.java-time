(ns cljc.java-time.period (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Period]))
(def zero java.time.Period/ZERO)
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this58740] (.getMonths this58740)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int58741] (java.time.Period/ofWeeks int58741)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int58742] (java.time.Period/ofDays int58742)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this58743] (.isNegative this58743)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^java.time.Period [^java.lang.Integer int58744 ^java.lang.Integer int58745 ^java.lang.Integer int58746] (java.time.Period/of int58744 int58745 int58746)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this58747] (.isZero this58747)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"] ["java.time.Period" "int"]))} (^java.lang.Object [this58748 G__58749] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__58749)) (clojure.core/let [G__58749 (clojure.core/int G__58749)] (.multipliedBy ^java.time.Period this58748 G__58749)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__58749)) (clojure.core/let [G__58749 (clojure.core/int G__58749)] (.multipliedBy ^java.time.Period this58748 G__58749)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^java.time.Period this58750] (.getUnits this58750)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this58751 ^java.lang.Integer int58752] (.withDays this58751 int58752)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this58753 G__58754] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__58754)) (clojure.core/let [G__58754 ^"java.time.temporal.TemporalAmount" G__58754] (.plus ^java.time.Period this58753 G__58754)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__58754)) (clojure.core/let [G__58754 ^"java.time.temporal.TemporalAmount" G__58754] (.plus ^java.time.Period this58753 G__58754)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int58755] (java.time.Period/ofMonths int58755)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^java.time.Period this58756] (.toString this58756)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this58757 ^long long58758] (.plusMonths this58757 long58758)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this58759 ^long long58760] (.minusMonths this58759 long58760)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this58761 G__58762] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__58762)) (clojure.core/let [G__58762 ^"java.time.temporal.TemporalAmount" G__58762] (.minus ^java.time.Period this58761 G__58762)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__58762)) (clojure.core/let [G__58762 ^"java.time.temporal.TemporalAmount" G__58762] (.minus ^java.time.Period this58761 G__58762)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this58763 ^java.time.temporal.Temporal java-time-temporal-Temporal58764] (.addTo this58763 java-time-temporal-Temporal58764)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^java.time.Period this58765] (.toTotalMonths this58765)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this58766 ^long long58767] (.plusDays this58766 long58767)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int58768] (java.time.Period/ofYears int58768)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this58769] (.getDays this58769)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this58770] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this58770)) (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this58770)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this58771] (.getYears this58771)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this58772 ^java.lang.Integer int58773] (.withYears this58772 int58773)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this58774] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this58774)) (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this58774)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this58775 ^java.lang.Integer int58776] (.withMonths this58775 int58776)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^java.time.Period [^java.time.LocalDate java-time-LocalDate58777 ^java.time.LocalDate java-time-LocalDate58778] (java.time.Period/between java-time-LocalDate58777 java-time-LocalDate58778)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount58779] (java.time.Period/from java-time-temporal-TemporalAmount58779)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this58780 ^long long58781] (.minusYears this58780 long58781)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this58782] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.Period this58782)) (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.Period this58782)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Period [^java.lang.CharSequence java-lang-CharSequence58783] (java.time.Period/parse java-lang-CharSequence58783)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this58784] (.hashCode this58784)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this58785 ^java.time.temporal.Temporal java-time-temporal-Temporal58786] (.subtractFrom this58785 java-time-temporal-Temporal58786)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Period this58787 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit58788] (.get this58787 java-time-temporal-TemporalUnit58788)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Period this58789 ^java.lang.Object java-lang-Object58790] (.equals this58789 java-lang-Object58790)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this58791 ^long long58792] (.plusYears this58791 long58792)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this58793 ^long long58794] (.minusDays this58793 long58794)))
