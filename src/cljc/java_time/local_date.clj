(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalDate]))
(def max java.time.LocalDate/MAX)
(def min java.time.LocalDate/MIN)
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this58850 ^long long58851] (.minusWeeks this58850 long58851)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this58852 ^long long58853] (.plusWeeks this58852 long58853)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this58854] (.lengthOfYear this58854)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this58855 ^java.time.temporal.TemporalField java-time-temporal-TemporalField58856] (.range this58855 java-time-temporal-TemporalField58856)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this58857] (.getEra this58857)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int"] ["int" "int" "int"]))} (^java.time.LocalDate [G__58859 G__58860 G__58861] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__58859) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__58860) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__58861)) (clojure.core/let [G__58859 (clojure.core/int G__58859) G__58860 ^"java.time.Month" G__58860 G__58861 (clojure.core/int G__58861)] (java.time.LocalDate/of G__58859 G__58860 G__58861)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__58859) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__58860) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__58861)) (clojure.core/let [G__58859 (clojure.core/int G__58859) G__58860 (clojure.core/int G__58860) G__58861 (clojure.core/int G__58861)] (java.time.LocalDate/of G__58859 G__58860 G__58861)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this58862 ^java.lang.Integer int58863] (.withMonth this58862 int58863)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this58864 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate58865] (.isEqual this58864 java-time-chrono-ChronoLocalDate58865)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this58866] (.getYear this58866)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this58867] (.toEpochDay this58867)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this58868] (.getDayOfYear this58868)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this58869 G__58870 G__58871] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__58870) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__58871)) (clojure.core/let [G__58870 (clojure.core/long G__58870) G__58871 ^"java.time.temporal.TemporalUnit" G__58871] (.plus ^java.time.LocalDate this58869 G__58870 G__58871)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__58870) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__58871)) (clojure.core/let [G__58870 (clojure.core/long G__58870) G__58871 ^"java.time.temporal.TemporalUnit" G__58871] (.plus ^java.time.LocalDate this58869 G__58870 G__58871)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__58870) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__58871)) (clojure.core/let [G__58870 (clojure.core/long G__58870) G__58871 ^"java.time.temporal.TemporalUnit" G__58871] (.plus ^java.time.LocalDate this58869 G__58870 G__58871)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this58872 G__58873] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__58873)) (clojure.core/let [G__58873 ^"java.time.temporal.TemporalAmount" G__58873] (.plus ^java.time.LocalDate this58872 G__58873)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__58873)) (clojure.core/let [G__58873 ^"java.time.temporal.TemporalAmount" G__58873] (.plus ^java.time.LocalDate this58872 G__58873)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__58873)) (clojure.core/let [G__58873 ^"java.time.temporal.TemporalAmount" G__58873] (.plus ^java.time.LocalDate this58872 G__58873)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this58874] (.isLeapYear this58874)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this58875 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery58876] (.query this58875 java-time-temporal-TemporalQuery58876)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this58877] (.getDayOfWeek this58877)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this58878] (.toString this58878)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this58879 ^long long58880] (.plusMonths this58879 long58880)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this58881 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate58882] (.isBefore this58881 java-time-chrono-ChronoLocalDate58882)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this58883 ^long long58884] (.minusMonths this58883 long58884)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this58885 G__58886] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__58886)) (clojure.core/let [G__58886 ^"java.time.temporal.TemporalAmount" G__58886] (.minus ^java.time.LocalDate this58885 G__58886)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__58886)) (clojure.core/let [G__58886 ^"java.time.temporal.TemporalAmount" G__58886] (.minus ^java.time.LocalDate this58885 G__58886)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__58886)) (clojure.core/let [G__58886 ^"java.time.temporal.TemporalAmount" G__58886] (.minus ^java.time.LocalDate this58885 G__58886)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this58887 G__58888 G__58889] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__58888) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__58889)) (clojure.core/let [G__58888 (clojure.core/long G__58888) G__58889 ^"java.time.temporal.TemporalUnit" G__58889] (.minus ^java.time.LocalDate this58887 G__58888 G__58889)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__58888) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__58889)) (clojure.core/let [G__58888 (clojure.core/long G__58888) G__58889 ^"java.time.temporal.TemporalUnit" G__58889] (.minus ^java.time.LocalDate this58887 G__58888 G__58889)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__58888) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__58889)) (clojure.core/let [G__58888 (clojure.core/long G__58888) G__58889 ^"java.time.temporal.TemporalUnit" G__58889] (.minus ^java.time.LocalDate this58887 G__58888 G__58889)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this58890 ^long long58891] (.plusDays this58890 long58891)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this58892 ^java.time.temporal.TemporalField java-time-temporal-TemporalField58893] (.getLong this58892 java-time-temporal-TemporalField58893)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this58894 ^java.lang.Integer int58895] (.withYear this58894 int58895)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this58896] (.lengthOfMonth this58896)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Object [this58897 G__58898] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__58898)) (clojure.core/let [G__58898 ^"java.time.chrono.ChronoLocalDate" G__58898] (.until ^java.time.LocalDate this58897 G__58898)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__58898)) (clojure.core/let [G__58898 ^"java.time.chrono.ChronoLocalDate" G__58898] (.until ^java.time.LocalDate this58897 G__58898)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^long [^java.time.LocalDate this58899 ^java.time.temporal.Temporal java-time-temporal-Temporal58900 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit58901] (.until this58899 java-time-temporal-Temporal58900 java-time-temporal-TemporalUnit58901)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long58902] (java.time.LocalDate/ofEpochDay long58902)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this58903 ^java.lang.Integer int58904] (.withDayOfMonth this58903 int58904)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this58905] (.getDayOfMonth this58905)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor58906] (java.time.LocalDate/from java-time-temporal-TemporalAccessor58906)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this58907 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate58908] (.isAfter this58907 java-time-chrono-ChronoLocalDate58908)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this58909 G__58910] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__58910)) (clojure.core/let [G__58910 ^"java.time.temporal.TemporalUnit" G__58910] (.isSupported ^java.time.LocalDate this58909 G__58910)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__58910)) (clojure.core/let [G__58910 ^"java.time.temporal.TemporalField" G__58910] (.isSupported ^java.time.LocalDate this58909 G__58910)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this58911 ^long long58912] (.minusYears this58911 long58912)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this58913] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.LocalDate this58913)) (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.LocalDate this58913)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence58914] (java.time.LocalDate/parse java-lang-CharSequence58914)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence58915 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter58916] (java.time.LocalDate/parse java-lang-CharSequence58915 java-time-format-DateTimeFormatter58916)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this58917] (.hashCode this58917)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this58918 ^java.time.temporal.Temporal java-time-temporal-Temporal58919] (.adjustInto this58918 java-time-temporal-Temporal58919)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this58920 G__58921 G__58922] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__58921) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__58922)) (clojure.core/let [G__58921 ^"java.time.temporal.TemporalField" G__58921 G__58922 (clojure.core/long G__58922)] (.with ^java.time.LocalDate this58920 G__58921 G__58922)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__58921) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__58922)) (clojure.core/let [G__58921 ^"java.time.temporal.TemporalField" G__58921 G__58922 (clojure.core/long G__58922)] (.with ^java.time.LocalDate this58920 G__58921 G__58922)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__58921) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__58922)) (clojure.core/let [G__58921 ^"java.time.temporal.TemporalField" G__58921 G__58922 (clojure.core/long G__58922)] (.with ^java.time.LocalDate this58920 G__58921 G__58922)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this58923 G__58924] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__58924)) (clojure.core/let [G__58924 ^"java.time.temporal.TemporalAdjuster" G__58924] (.with ^java.time.LocalDate this58923 G__58924)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__58924)) (clojure.core/let [G__58924 ^"java.time.temporal.TemporalAdjuster" G__58924] (.with ^java.time.LocalDate this58923 G__58924)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__58924)) (clojure.core/let [G__58924 ^"java.time.temporal.TemporalAdjuster" G__58924] (.with ^java.time.LocalDate this58923 G__58924)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDate [] (java.time.LocalDate/now)) (^java.time.LocalDate [G__58926] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__58926)) (clojure.core/let [G__58926 ^"java.time.Clock" G__58926] (java.time.LocalDate/now G__58926)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__58926)) (clojure.core/let [G__58926 ^"java.time.ZoneId" G__58926] (java.time.LocalDate/now G__58926)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.LocalDate this58927] (.atStartOfDay this58927)) (^java.time.ZonedDateTime [^java.time.LocalDate this58928 ^java.time.ZoneId java-time-ZoneId58929] (.atStartOfDay this58928 java-time-ZoneId58929)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this58930] (.getMonthValue this58930)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this58931 ^java.lang.Integer int58932] (.withDayOfYear this58931 int58932)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Integer [this58933 G__58934] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__58934)) (clojure.core/let [G__58934 ^"java.time.chrono.ChronoLocalDate" G__58934] (.compareTo ^java.time.LocalDate this58933 G__58934)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__58934)) (clojure.core/let [G__58934 ^"java.lang.Object" G__58934] (.compareTo ^java.time.LocalDate this58933 G__58934)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this58935] (.getMonth this58935)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int58936 ^java.lang.Integer int58937] (java.time.LocalDate/ofYearDay int58936 int58937)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this58938 ^java.time.temporal.TemporalField java-time-temporal-TemporalField58939] (.get this58938 java-time-temporal-TemporalField58939)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this58940 ^java.lang.Object java-lang-Object58941] (.equals this58940 java-lang-Object58941)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "int" "int"]))} (^java.lang.Object [this58942 G__58943] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__58943)) (clojure.core/let [G__58943 ^"java.time.LocalTime" G__58943] (.atTime ^java.time.LocalDate this58942 G__58943)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__58943)) (clojure.core/let [G__58943 ^"java.time.LocalTime" G__58943] (.atTime ^java.time.LocalDate this58942 G__58943)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__58943)) (clojure.core/let [G__58943 ^"java.time.OffsetTime" G__58943] (.atTime ^java.time.LocalDate this58942 G__58943)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate this58944 ^java.lang.Integer int58945 ^java.lang.Integer int58946 ^java.lang.Integer int58947] (.atTime this58944 int58945 int58946 int58947)) (^java.time.LocalDateTime [^java.time.LocalDate this58948 ^java.lang.Integer int58949 ^java.lang.Integer int58950 ^java.lang.Integer int58951 ^java.lang.Integer int58952] (.atTime this58948 int58949 int58950 int58951 int58952)) (^java.time.LocalDateTime [^java.time.LocalDate this58953 ^java.lang.Integer int58954 ^java.lang.Integer int58955] (.atTime this58953 int58954 int58955)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this58956 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter58957] (.format this58956 java-time-format-DateTimeFormatter58957)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this58958 ^long long58959] (.plusYears this58958 long58959)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this58960 ^long long58961] (.minusDays this58960 long58961)))
