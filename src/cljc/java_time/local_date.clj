(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalDate]))
(def max java.time.LocalDate/MAX)
(def min java.time.LocalDate/MIN)
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6134 ^long long6135] (.minusWeeks this6134 long6135)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6136 ^long long6137] (.plusWeeks this6136 long6137)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6138] (.lengthOfYear this6138)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this6139 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6140] (.range this6139 java-time-temporal-TemporalField6140)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this6141] (.getEra this6141)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"] ["int" "java.time.Month" "int"]))} (^java.time.LocalDate [G__6143 G__6144 G__6145] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6143) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6144) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6145)) (clojure.core/let [G__6143 (clojure.core/int G__6143) G__6144 (clojure.core/int G__6144) G__6145 (clojure.core/int G__6145)] (java.time.LocalDate/of G__6143 G__6144 G__6145)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6143) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__6144) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6145)) (clojure.core/let [G__6143 (clojure.core/int G__6143) G__6144 ^"java.time.Month" G__6144 G__6145 (clojure.core/int G__6145)] (java.time.LocalDate/of G__6143 G__6144 G__6145)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this6146 ^java.lang.Integer int6147] (.withMonth this6146 int6147)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this6148 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate6149] (.isEqual this6148 java-time-chrono-ChronoLocalDate6149)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6150] (.getYear this6150)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this6151] (.toEpochDay this6151)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6152] (.getDayOfYear this6152)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6153 G__6154 G__6155] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6154) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6155)) (clojure.core/let [G__6154 (clojure.core/long G__6154) G__6155 ^"java.time.temporal.TemporalUnit" G__6155] (.plus ^java.time.LocalDate this6153 G__6154 G__6155)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6154) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6155)) (clojure.core/let [G__6154 (clojure.core/long G__6154) G__6155 ^"java.time.temporal.TemporalUnit" G__6155] (.plus ^java.time.LocalDate this6153 G__6154 G__6155)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6154) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6155)) (clojure.core/let [G__6154 (clojure.core/long G__6154) G__6155 ^"java.time.temporal.TemporalUnit" G__6155] (.plus ^java.time.LocalDate this6153 G__6154 G__6155)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6156 G__6157] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6157)) (clojure.core/let [G__6157 ^"java.time.temporal.TemporalAmount" G__6157] (.plus ^java.time.LocalDate this6156 G__6157)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6157)) (clojure.core/let [G__6157 ^"java.time.temporal.TemporalAmount" G__6157] (.plus ^java.time.LocalDate this6156 G__6157)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6157)) (clojure.core/let [G__6157 ^"java.time.temporal.TemporalAmount" G__6157] (.plus ^java.time.LocalDate this6156 G__6157)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this6158] (.isLeapYear this6158)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this6159 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery6160] (.query this6159 java-time-temporal-TemporalQuery6160)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this6161] (.getDayOfWeek this6161)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this6162] (.toString this6162)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6163 ^long long6164] (.plusMonths this6163 long6164)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this6165 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate6166] (.isBefore this6165 java-time-chrono-ChronoLocalDate6166)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6167 ^long long6168] (.minusMonths this6167 long6168)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6169 G__6170 G__6171] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6170) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6171)) (clojure.core/let [G__6170 (clojure.core/long G__6170) G__6171 ^"java.time.temporal.TemporalUnit" G__6171] (.minus ^java.time.LocalDate this6169 G__6170 G__6171)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6170) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6171)) (clojure.core/let [G__6170 (clojure.core/long G__6170) G__6171 ^"java.time.temporal.TemporalUnit" G__6171] (.minus ^java.time.LocalDate this6169 G__6170 G__6171)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6170) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6171)) (clojure.core/let [G__6170 (clojure.core/long G__6170) G__6171 ^"java.time.temporal.TemporalUnit" G__6171] (.minus ^java.time.LocalDate this6169 G__6170 G__6171)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6172 G__6173] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6173)) (clojure.core/let [G__6173 ^"java.time.temporal.TemporalAmount" G__6173] (.minus ^java.time.LocalDate this6172 G__6173)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6173)) (clojure.core/let [G__6173 ^"java.time.temporal.TemporalAmount" G__6173] (.minus ^java.time.LocalDate this6172 G__6173)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6173)) (clojure.core/let [G__6173 ^"java.time.temporal.TemporalAmount" G__6173] (.minus ^java.time.LocalDate this6172 G__6173)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6174 ^long long6175] (.plusDays this6174 long6175)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this6176 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6177] (.getLong this6176 java-time-temporal-TemporalField6177)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this6178 ^java.lang.Integer int6179] (.withYear this6178 int6179)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6180] (.lengthOfMonth this6180)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^long [^java.time.LocalDate this6181 ^java.time.temporal.Temporal java-time-temporal-Temporal6182 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6183] (.until this6181 java-time-temporal-Temporal6182 java-time-temporal-TemporalUnit6183)) (^java.lang.Object [this6184 G__6185] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__6185)) (clojure.core/let [G__6185 ^"java.time.chrono.ChronoLocalDate" G__6185] (.until ^java.time.LocalDate this6184 G__6185)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__6185)) (clojure.core/let [G__6185 ^"java.time.chrono.ChronoLocalDate" G__6185] (.until ^java.time.LocalDate this6184 G__6185)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long6186] (java.time.LocalDate/ofEpochDay long6186)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this6187 ^java.lang.Integer int6188] (.withDayOfMonth this6187 int6188)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6189] (.getDayOfMonth this6189)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor6190] (java.time.LocalDate/from java-time-temporal-TemporalAccessor6190)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this6191 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate6192] (.isAfter this6191 java-time-chrono-ChronoLocalDate6192)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this6193 G__6194] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6194)) (clojure.core/let [G__6194 ^"java.time.temporal.TemporalUnit" G__6194] (.isSupported ^java.time.LocalDate this6193 G__6194)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6194)) (clojure.core/let [G__6194 ^"java.time.temporal.TemporalField" G__6194] (.isSupported ^java.time.LocalDate this6193 G__6194)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6195 ^long long6196] (.minusYears this6195 long6196)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this6197] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.LocalDate this6197)) (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.LocalDate this6197)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence6198 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6199] (java.time.LocalDate/parse java-lang-CharSequence6198 java-time-format-DateTimeFormatter6199)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence6200] (java.time.LocalDate/parse java-lang-CharSequence6200)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6201] (.hashCode this6201)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this6202 ^java.time.temporal.Temporal java-time-temporal-Temporal6203] (.adjustInto this6202 java-time-temporal-Temporal6203)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this6204 G__6205] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6205)) (clojure.core/let [G__6205 ^"java.time.temporal.TemporalAdjuster" G__6205] (.with ^java.time.LocalDate this6204 G__6205)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6205)) (clojure.core/let [G__6205 ^"java.time.temporal.TemporalAdjuster" G__6205] (.with ^java.time.LocalDate this6204 G__6205)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6205)) (clojure.core/let [G__6205 ^"java.time.temporal.TemporalAdjuster" G__6205] (.with ^java.time.LocalDate this6204 G__6205)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6206 G__6207 G__6208] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6207) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6208)) (clojure.core/let [G__6207 ^"java.time.temporal.TemporalField" G__6207 G__6208 (clojure.core/long G__6208)] (.with ^java.time.LocalDate this6206 G__6207 G__6208)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6207) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6208)) (clojure.core/let [G__6207 ^"java.time.temporal.TemporalField" G__6207 G__6208 (clojure.core/long G__6208)] (.with ^java.time.LocalDate this6206 G__6207 G__6208)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6207) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6208)) (clojure.core/let [G__6207 ^"java.time.temporal.TemporalField" G__6207 G__6208 (clojure.core/long G__6208)] (.with ^java.time.LocalDate this6206 G__6207 G__6208)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.LocalDate [] (java.time.LocalDate/now)) (^java.time.LocalDate [G__6210] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6210)) (clojure.core/let [G__6210 ^"java.time.ZoneId" G__6210] (java.time.LocalDate/now G__6210)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__6210)) (clojure.core/let [G__6210 ^"java.time.Clock" G__6210] (java.time.LocalDate/now G__6210)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.LocalDate this6211] (.atStartOfDay this6211)) (^java.time.ZonedDateTime [^java.time.LocalDate this6212 ^java.time.ZoneId java-time-ZoneId6213] (.atStartOfDay this6212 java-time-ZoneId6213)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6214] (.getMonthValue this6214)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this6215 ^java.lang.Integer int6216] (.withDayOfYear this6215 int6216)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Integer [this6217 G__6218] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__6218)) (clojure.core/let [G__6218 ^"java.time.chrono.ChronoLocalDate" G__6218] (.compareTo ^java.time.LocalDate this6217 G__6218)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__6218)) (clojure.core/let [G__6218 ^"java.lang.Object" G__6218] (.compareTo ^java.time.LocalDate this6217 G__6218)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this6219] (.getMonth this6219)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int6220 ^java.lang.Integer int6221] (java.time.LocalDate/ofYearDay int6220 int6221)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this6222 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6223] (.get this6222 java-time-temporal-TemporalField6223)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this6224 ^java.lang.Object java-lang-Object6225] (.equals this6224 java-lang-Object6225)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.OffsetTime"]))} (^java.lang.Object [this6226 G__6227] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__6227)) (clojure.core/let [G__6227 ^"java.time.LocalTime" G__6227] (.atTime ^java.time.LocalDate this6226 G__6227)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__6227)) (clojure.core/let [G__6227 ^"java.time.LocalTime" G__6227] (.atTime ^java.time.LocalDate this6226 G__6227)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__6227)) (clojure.core/let [G__6227 ^"java.time.OffsetTime" G__6227] (.atTime ^java.time.LocalDate this6226 G__6227)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate this6228 ^java.lang.Integer int6229 ^java.lang.Integer int6230 ^java.lang.Integer int6231] (.atTime this6228 int6229 int6230 int6231)) (^java.time.LocalDateTime [^java.time.LocalDate this6232 ^java.lang.Integer int6233 ^java.lang.Integer int6234] (.atTime this6232 int6233 int6234)) (^java.time.LocalDateTime [^java.time.LocalDate this6235 ^java.lang.Integer int6236 ^java.lang.Integer int6237 ^java.lang.Integer int6238 ^java.lang.Integer int6239] (.atTime this6235 int6236 int6237 int6238 int6239)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this6240 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6241] (.format this6240 java-time-format-DateTimeFormatter6241)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6242 ^long long6243] (.plusYears this6242 long6243)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6244 ^long long6245] (.minusDays this6244 long6245)))
