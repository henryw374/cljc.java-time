(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time LocalDate]))
(def max (. java.time.LocalDate -MAX))
(def min (. java.time.LocalDate -MIN))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6172 ^long long6173] (.minusWeeks this6172 long6173)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6174 ^long long6175] (.plusWeeks this6174 long6175)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6176] (.lengthOfYear this6176)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this6177 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6178] (.range this6177 java-time-temporal-TemporalField6178)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this6179] (.getEra this6179)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"] ["int" "java.time.Month" "int"]))} (^java.time.LocalDate [G__6181 G__6182 G__6183] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6181) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6182) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6183)) (clojure.core/let [G__6181 (clojure.core/int G__6181) G__6182 (clojure.core/int G__6182) G__6183 (clojure.core/int G__6183)] (. java.time.LocalDate of G__6181 G__6182 G__6183)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6181) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__6182) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6183)) (clojure.core/let [G__6181 (clojure.core/int G__6181) G__6182 ^"java.time.Month" G__6182 G__6183 (clojure.core/int G__6183)] (. java.time.LocalDate of G__6181 G__6182 G__6183)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this6184 ^java.lang.Integer int6185] (.withMonth this6184 int6185)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this6186 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate6187] (.isEqual this6186 java-time-chrono-ChronoLocalDate6187)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6188] (.getYear this6188)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this6189] (.toEpochDay this6189)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6190] (.getDayOfYear this6190)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6191 G__6192 G__6193] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6192) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6193)) (clojure.core/let [G__6192 (clojure.core/long G__6192) G__6193 ^"java.time.temporal.TemporalUnit" G__6193] (.plus ^java.time.LocalDate this6191 G__6192 G__6193)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6192) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6193)) (clojure.core/let [G__6192 (clojure.core/long G__6192) G__6193 ^"java.time.temporal.TemporalUnit" G__6193] (.plus ^java.time.LocalDate this6191 G__6192 G__6193)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6192) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6193)) (clojure.core/let [G__6192 (clojure.core/long G__6192) G__6193 ^"java.time.temporal.TemporalUnit" G__6193] (.plus ^java.time.LocalDate this6191 G__6192 G__6193)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6194 G__6195] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6195)) (clojure.core/let [G__6195 ^"java.time.temporal.TemporalAmount" G__6195] (.plus ^java.time.LocalDate this6194 G__6195)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6195)) (clojure.core/let [G__6195 ^"java.time.temporal.TemporalAmount" G__6195] (.plus ^java.time.LocalDate this6194 G__6195)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6195)) (clojure.core/let [G__6195 ^"java.time.temporal.TemporalAmount" G__6195] (.plus ^java.time.LocalDate this6194 G__6195)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this6196] (.isLeapYear this6196)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this6197 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery6198] (.query this6197 java-time-temporal-TemporalQuery6198)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this6199] (.getDayOfWeek this6199)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this6200] (.toString this6200)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6201 ^long long6202] (.plusMonths this6201 long6202)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this6203 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate6204] (.isBefore this6203 java-time-chrono-ChronoLocalDate6204)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6205 ^long long6206] (.minusMonths this6205 long6206)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6207 G__6208] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6208)) (clojure.core/let [G__6208 ^"java.time.temporal.TemporalAmount" G__6208] (.minus ^java.time.LocalDate this6207 G__6208)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6208)) (clojure.core/let [G__6208 ^"java.time.temporal.TemporalAmount" G__6208] (.minus ^java.time.LocalDate this6207 G__6208)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6208)) (clojure.core/let [G__6208 ^"java.time.temporal.TemporalAmount" G__6208] (.minus ^java.time.LocalDate this6207 G__6208)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6209 G__6210 G__6211] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6210) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6211)) (clojure.core/let [G__6210 (clojure.core/long G__6210) G__6211 ^"java.time.temporal.TemporalUnit" G__6211] (.minus ^java.time.LocalDate this6209 G__6210 G__6211)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6210) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6211)) (clojure.core/let [G__6210 (clojure.core/long G__6210) G__6211 ^"java.time.temporal.TemporalUnit" G__6211] (.minus ^java.time.LocalDate this6209 G__6210 G__6211)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6210) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6211)) (clojure.core/let [G__6210 (clojure.core/long G__6210) G__6211 ^"java.time.temporal.TemporalUnit" G__6211] (.minus ^java.time.LocalDate this6209 G__6210 G__6211)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6212 ^long long6213] (.plusDays this6212 long6213)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this6214 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6215] (.getLong this6214 java-time-temporal-TemporalField6215)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this6216 ^java.lang.Integer int6217] (.withYear this6216 int6217)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6218] (.lengthOfMonth this6218)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6219 G__6220] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__6220)) (clojure.core/let [G__6220 ^"java.time.chrono.ChronoLocalDate" G__6220] (.until ^java.time.LocalDate this6219 G__6220)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__6220)) (clojure.core/let [G__6220 ^"java.time.chrono.ChronoLocalDate" G__6220] (.until ^java.time.LocalDate this6219 G__6220)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^long [^java.time.LocalDate this6221 ^java.time.temporal.Temporal java-time-temporal-Temporal6222 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6223] (.until this6221 java-time-temporal-Temporal6222 java-time-temporal-TemporalUnit6223)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long6224] (. java.time.LocalDate ofEpochDay long6224)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this6225 ^java.lang.Integer int6226] (.withDayOfMonth this6225 int6226)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6227] (.getDayOfMonth this6227)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor6228] (. java.time.LocalDate from java-time-temporal-TemporalAccessor6228)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this6229 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate6230] (.isAfter this6229 java-time-chrono-ChronoLocalDate6230)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"] ["java.time.LocalDate" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this6231 G__6232] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6232)) (clojure.core/let [G__6232 ^"java.time.temporal.TemporalField" G__6232] (.isSupported ^java.time.LocalDate this6231 G__6232)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6232)) (clojure.core/let [G__6232 ^"java.time.temporal.TemporalUnit" G__6232] (.isSupported ^java.time.LocalDate this6231 G__6232)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6233 ^long long6234] (.minusYears this6233 long6234)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this6235] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.LocalDate this6235)) (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.LocalDate this6235)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence6236] (. java.time.LocalDate parse java-lang-CharSequence6236)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence6237 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6238] (. java.time.LocalDate parse java-lang-CharSequence6237 java-time-format-DateTimeFormatter6238)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6239] (.hashCode this6239)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this6240 ^java.time.temporal.Temporal java-time-temporal-Temporal6241] (.adjustInto this6240 java-time-temporal-Temporal6241)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this6242 G__6243 G__6244] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6243) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6244)) (clojure.core/let [G__6243 ^"java.time.temporal.TemporalField" G__6243 G__6244 (clojure.core/long G__6244)] (.with ^java.time.LocalDate this6242 G__6243 G__6244)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6243) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6244)) (clojure.core/let [G__6243 ^"java.time.temporal.TemporalField" G__6243 G__6244 (clojure.core/long G__6244)] (.with ^java.time.LocalDate this6242 G__6243 G__6244)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6243) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6244)) (clojure.core/let [G__6243 ^"java.time.temporal.TemporalField" G__6243 G__6244 (clojure.core/long G__6244)] (.with ^java.time.LocalDate this6242 G__6243 G__6244)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6245 G__6246] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6246)) (clojure.core/let [G__6246 ^"java.time.temporal.TemporalAdjuster" G__6246] (.with ^java.time.LocalDate this6245 G__6246)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6246)) (clojure.core/let [G__6246 ^"java.time.temporal.TemporalAdjuster" G__6246] (.with ^java.time.LocalDate this6245 G__6246)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6246)) (clojure.core/let [G__6246 ^"java.time.temporal.TemporalAdjuster" G__6246] (.with ^java.time.LocalDate this6245 G__6246)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^java.time.LocalDate [G__6248] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6248)) (clojure.core/let [G__6248 ^"java.time.ZoneId" G__6248] (. java.time.LocalDate now G__6248)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__6248)) (clojure.core/let [G__6248 ^"java.time.Clock" G__6248] (. java.time.LocalDate now G__6248)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDate [] (. java.time.LocalDate now)))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate" "java.time.ZoneId"] ["java.time.LocalDate"]))} (^java.time.ZonedDateTime [^java.time.LocalDate this6249 ^java.time.ZoneId java-time-ZoneId6250] (.atStartOfDay this6249 java-time-ZoneId6250)) (^java.time.LocalDateTime [^java.time.LocalDate this6251] (.atStartOfDay this6251)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6252] (.getMonthValue this6252)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this6253 ^java.lang.Integer int6254] (.withDayOfYear this6253 int6254)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Integer [this6255 G__6256] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__6256)) (clojure.core/let [G__6256 ^"java.time.chrono.ChronoLocalDate" G__6256] (.compareTo ^java.time.LocalDate this6255 G__6256)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__6256)) (clojure.core/let [G__6256 ^"java.lang.Object" G__6256] (.compareTo ^java.time.LocalDate this6255 G__6256)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this6257] (.getMonth this6257)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int6258 ^java.lang.Integer int6259] (. java.time.LocalDate ofYearDay int6258 int6259)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this6260 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6261] (.get this6260 java-time-temporal-TemporalField6261)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this6262 ^java.lang.Object java-lang-Object6263] (.equals this6262 java-lang-Object6263)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"]))} (^java.time.LocalDateTime [^java.time.LocalDate this6264 ^java.lang.Integer int6265 ^java.lang.Integer int6266 ^java.lang.Integer int6267] (.atTime this6264 int6265 int6266 int6267)) (^java.time.LocalDateTime [^java.time.LocalDate this6268 ^java.lang.Integer int6269 ^java.lang.Integer int6270 ^java.lang.Integer int6271 ^java.lang.Integer int6272] (.atTime this6268 int6269 int6270 int6271 int6272)) (^java.lang.Object [this6273 G__6274] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__6274)) (clojure.core/let [G__6274 ^"java.time.OffsetTime" G__6274] (.atTime ^java.time.LocalDate this6273 G__6274)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__6274)) (clojure.core/let [G__6274 ^"java.time.LocalTime" G__6274] (.atTime ^java.time.LocalDate this6273 G__6274)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__6274)) (clojure.core/let [G__6274 ^"java.time.LocalTime" G__6274] (.atTime ^java.time.LocalDate this6273 G__6274)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate this6275 ^java.lang.Integer int6276 ^java.lang.Integer int6277] (.atTime this6275 int6276 int6277)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this6278 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6279] (.format this6278 java-time-format-DateTimeFormatter6279)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6280 ^long long6281] (.plusYears this6280 long6281)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6282 ^long long6283] (.minusDays this6282 long6283)))
