(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalDate]))
(def max java.time.LocalDate/MAX)
(def min java.time.LocalDate/MIN)
(def epoch java.time.LocalDate/EPOCH)
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6134 ^long long6135] (.minusWeeks this6134 long6135)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6136 ^long long6137] (.plusWeeks this6136 long6137)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6138] (.lengthOfYear this6138)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this6139 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6140] (.range this6139 java-time-temporal-TemporalField6140)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this6141] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.getEra ^java.time.LocalDate this6141)) (clojure.core/and) (clojure.core/let [] (.getEra ^java.time.LocalDate this6141)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int"] ["int" "int" "int"]))} (^java.time.LocalDate [G__6143 G__6144 G__6145] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6143) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__6144) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6145)) (clojure.core/let [G__6143 (clojure.core/int G__6143) G__6144 ^"java.time.Month" G__6144 G__6145 (clojure.core/int G__6145)] (java.time.LocalDate/of G__6143 G__6144 G__6145)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6143) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6144) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__6145)) (clojure.core/let [G__6143 (clojure.core/int G__6143) G__6144 (clojure.core/int G__6144) G__6145 (clojure.core/int G__6145)] (java.time.LocalDate/of G__6143 G__6144 G__6145)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this6146 ^java.lang.Integer int6147] (.withMonth this6146 int6147)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this6148 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate6149] (.isEqual this6148 java-time-chrono-ChronoLocalDate6149)))
(clojure.core/defn dates-until {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"] ["java.time.LocalDate" "java.time.LocalDate" "java.time.Period"]))} (^java.util.stream.Stream [^java.time.LocalDate this6150 ^java.time.LocalDate java-time-LocalDate6151] (.datesUntil this6150 java-time-LocalDate6151)) (^java.util.stream.Stream [^java.time.LocalDate this6152 ^java.time.LocalDate java-time-LocalDate6153 ^java.time.Period java-time-Period6154] (.datesUntil this6152 java-time-LocalDate6153 java-time-Period6154)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6155] (.getYear this6155)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this6156] (.toEpochDay this6156)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6157] (.getDayOfYear this6157)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6158 G__6159 G__6160] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6159) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6160)) (clojure.core/let [G__6159 (clojure.core/long G__6159) G__6160 ^"java.time.temporal.TemporalUnit" G__6160] (.plus ^java.time.LocalDate this6158 G__6159 G__6160)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6159) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6160)) (clojure.core/let [G__6159 (clojure.core/long G__6159) G__6160 ^"java.time.temporal.TemporalUnit" G__6160] (.plus ^java.time.LocalDate this6158 G__6159 G__6160)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6159) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6160)) (clojure.core/let [G__6159 (clojure.core/long G__6159) G__6160 ^"java.time.temporal.TemporalUnit" G__6160] (.plus ^java.time.LocalDate this6158 G__6159 G__6160)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6161 G__6162] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6162)) (clojure.core/let [G__6162 ^"java.time.temporal.TemporalAmount" G__6162] (.plus ^java.time.LocalDate this6161 G__6162)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6162)) (clojure.core/let [G__6162 ^"java.time.temporal.TemporalAmount" G__6162] (.plus ^java.time.LocalDate this6161 G__6162)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6162)) (clojure.core/let [G__6162 ^"java.time.temporal.TemporalAmount" G__6162] (.plus ^java.time.LocalDate this6161 G__6162)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this6163] (.isLeapYear this6163)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this6164 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery6165] (.query this6164 java-time-temporal-TemporalQuery6165)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this6166] (.getDayOfWeek this6166)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this6167] (.toString this6167)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6168 ^long long6169] (.plusMonths this6168 long6169)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this6170 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate6171] (.isBefore this6170 java-time-chrono-ChronoLocalDate6171)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6172 ^long long6173] (.minusMonths this6172 long6173)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6174 G__6175] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6175)) (clojure.core/let [G__6175 ^"java.time.temporal.TemporalAmount" G__6175] (.minus ^java.time.LocalDate this6174 G__6175)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6175)) (clojure.core/let [G__6175 ^"java.time.temporal.TemporalAmount" G__6175] (.minus ^java.time.LocalDate this6174 G__6175)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6175)) (clojure.core/let [G__6175 ^"java.time.temporal.TemporalAmount" G__6175] (.minus ^java.time.LocalDate this6174 G__6175)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6176 G__6177 G__6178] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6177) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6178)) (clojure.core/let [G__6177 (clojure.core/long G__6177) G__6178 ^"java.time.temporal.TemporalUnit" G__6178] (.minus ^java.time.LocalDate this6176 G__6177 G__6178)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6177) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6178)) (clojure.core/let [G__6177 (clojure.core/long G__6177) G__6178 ^"java.time.temporal.TemporalUnit" G__6178] (.minus ^java.time.LocalDate this6176 G__6177 G__6178)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6177) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6178)) (clojure.core/let [G__6177 (clojure.core/long G__6177) G__6178 ^"java.time.temporal.TemporalUnit" G__6178] (.minus ^java.time.LocalDate this6176 G__6177 G__6178)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6179 ^long long6180] (.plusDays this6179 long6180)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this6181 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6182] (.getLong this6181 java-time-temporal-TemporalField6182)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this6183 ^java.lang.Integer int6184] (.withYear this6183 int6184)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDate this6185 ^java.time.LocalTime java-time-LocalTime6186 ^java.time.ZoneOffset java-time-ZoneOffset6187] (.toEpochSecond this6185 java-time-LocalTime6186 java-time-ZoneOffset6187)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6188] (.lengthOfMonth this6188)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6189 G__6190] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__6190)) (clojure.core/let [G__6190 ^"java.time.chrono.ChronoLocalDate" G__6190] (.until ^java.time.LocalDate this6189 G__6190)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__6190)) (clojure.core/let [G__6190 ^"java.time.chrono.ChronoLocalDate" G__6190] (.until ^java.time.LocalDate this6189 G__6190)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^long [^java.time.LocalDate this6191 ^java.time.temporal.Temporal java-time-temporal-Temporal6192 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6193] (.until this6191 java-time-temporal-Temporal6192 java-time-temporal-TemporalUnit6193)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long6194] (java.time.LocalDate/ofEpochDay long6194)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this6195 ^java.lang.Integer int6196] (.withDayOfMonth this6195 int6196)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6197] (.getDayOfMonth this6197)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor6198] (java.time.LocalDate/from java-time-temporal-TemporalAccessor6198)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this6199 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate6200] (.isAfter this6199 java-time-chrono-ChronoLocalDate6200)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this6201 G__6202] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6202)) (clojure.core/let [G__6202 ^"java.time.temporal.TemporalUnit" G__6202] (.isSupported ^java.time.LocalDate this6201 G__6202)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6202)) (clojure.core/let [G__6202 ^"java.time.temporal.TemporalField" G__6202] (.isSupported ^java.time.LocalDate this6201 G__6202)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6203 ^long long6204] (.minusYears this6203 long6204)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this6205] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.LocalDate this6205)) (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.LocalDate this6205)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence6206 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6207] (java.time.LocalDate/parse java-lang-CharSequence6206 java-time-format-DateTimeFormatter6207)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence6208] (java.time.LocalDate/parse java-lang-CharSequence6208)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6209] (.hashCode this6209)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this6210 ^java.time.temporal.Temporal java-time-temporal-Temporal6211] (.adjustInto this6210 java-time-temporal-Temporal6211)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this6212 G__6213] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6213)) (clojure.core/let [G__6213 ^"java.time.temporal.TemporalAdjuster" G__6213] (.with ^java.time.LocalDate this6212 G__6213)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6213)) (clojure.core/let [G__6213 ^"java.time.temporal.TemporalAdjuster" G__6213] (.with ^java.time.LocalDate this6212 G__6213)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6213)) (clojure.core/let [G__6213 ^"java.time.temporal.TemporalAdjuster" G__6213] (.with ^java.time.LocalDate this6212 G__6213)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6214 G__6215 G__6216] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6215) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6216)) (clojure.core/let [G__6215 ^"java.time.temporal.TemporalField" G__6215 G__6216 (clojure.core/long G__6216)] (.with ^java.time.LocalDate this6214 G__6215 G__6216)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6215) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6216)) (clojure.core/let [G__6215 ^"java.time.temporal.TemporalField" G__6215 G__6216 (clojure.core/long G__6216)] (.with ^java.time.LocalDate this6214 G__6215 G__6216)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6215) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6216)) (clojure.core/let [G__6215 ^"java.time.temporal.TemporalField" G__6215 G__6216 (clojure.core/long G__6216)] (.with ^java.time.LocalDate this6214 G__6215 G__6216)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^java.time.LocalDate [G__6218] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6218)) (clojure.core/let [G__6218 ^"java.time.ZoneId" G__6218] (java.time.LocalDate/now G__6218)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__6218)) (clojure.core/let [G__6218 ^"java.time.Clock" G__6218] (java.time.LocalDate/now G__6218)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDate [] (java.time.LocalDate/now)))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate" "java.time.ZoneId"] ["java.time.LocalDate"]))} (^java.time.ZonedDateTime [^java.time.LocalDate this6219 ^java.time.ZoneId java-time-ZoneId6220] (.atStartOfDay this6219 java-time-ZoneId6220)) (^java.time.LocalDateTime [^java.time.LocalDate this6221] (.atStartOfDay this6221)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this6222] (.getMonthValue this6222)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this6223 ^java.lang.Integer int6224] (.withDayOfYear this6223 int6224)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.lang.Object"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Integer [this6225 G__6226] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__6226)) (clojure.core/let [G__6226 ^"java.lang.Object" G__6226] (.compareTo ^java.time.LocalDate this6225 G__6226)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__6226)) (clojure.core/let [G__6226 ^"java.time.chrono.ChronoLocalDate" G__6226] (.compareTo ^java.time.LocalDate this6225 G__6226)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this6227] (.getMonth this6227)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDate [^java.time.Instant java-time-Instant6228 ^java.time.ZoneId java-time-ZoneId6229] (java.time.LocalDate/ofInstant java-time-Instant6228 java-time-ZoneId6229)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int6230 ^java.lang.Integer int6231] (java.time.LocalDate/ofYearDay int6230 int6231)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this6232 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6233] (.get this6232 java-time-temporal-TemporalField6233)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this6234 ^java.lang.Object java-lang-Object6235] (.equals this6234 java-lang-Object6235)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "int" "int"] ["java.time.LocalDate" "int" "int" "int" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDate this6236 ^java.lang.Integer int6237 ^java.lang.Integer int6238 ^java.lang.Integer int6239] (.atTime this6236 int6237 int6238 int6239)) (^java.lang.Object [this6240 G__6241] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__6241)) (clojure.core/let [G__6241 ^"java.time.LocalTime" G__6241] (.atTime ^java.time.LocalDate this6240 G__6241)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__6241)) (clojure.core/let [G__6241 ^"java.time.LocalTime" G__6241] (.atTime ^java.time.LocalDate this6240 G__6241)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__6241)) (clojure.core/let [G__6241 ^"java.time.OffsetTime" G__6241] (.atTime ^java.time.LocalDate this6240 G__6241)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate this6242 ^java.lang.Integer int6243 ^java.lang.Integer int6244] (.atTime this6242 int6243 int6244)) (^java.time.LocalDateTime [^java.time.LocalDate this6245 ^java.lang.Integer int6246 ^java.lang.Integer int6247 ^java.lang.Integer int6248 ^java.lang.Integer int6249] (.atTime this6245 int6246 int6247 int6248 int6249)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this6250 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6251] (.format this6250 java-time-format-DateTimeFormatter6251)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6252 ^long long6253] (.plusYears this6252 long6253)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this6254 ^long long6255] (.minusDays this6254 long6255)))
