(ns cljc.java-time.local-date (:import [java.time LocalDate]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def max java.time.LocalDate/MAX)
(def min java.time.LocalDate/MIN)
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48359 ^long long48360] (.minusWeeks this48359 long48360)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48361 ^long long48362] (.plusWeeks this48361 long48362)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48363] (.lengthOfYear this48363)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this48364 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48365] (.range this48364 java-time-temporal-TemporalField48365)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this48366] (.getEra this48366)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"] ["int" "java.time.Month" "int"]))} (^java.time.LocalDate [G__48368 G__48369 G__48370] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48368) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48369) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48370)) (clojure.core/let [G__48368 (clojure.core/int G__48368) G__48369 (clojure.core/int G__48369) G__48370 (clojure.core/int G__48370)] (. java.time.LocalDate of G__48368 G__48369 G__48370)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48368) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__48369) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48370)) (clojure.core/let [G__48368 (clojure.core/int G__48368) G__48369 ^"java.time.Month" G__48369 G__48370 (clojure.core/int G__48370)] (. java.time.LocalDate of G__48368 G__48369 G__48370)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this48371 ^java.lang.Integer int48372] (.withMonth this48371 int48372)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this48373 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate48374] (.isEqual this48373 java-time-chrono-ChronoLocalDate48374)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48375] (.getYear this48375)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this48376] (.toEpochDay this48376)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48377] (.getDayOfYear this48377)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this48378 G__48379 G__48380] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48379) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48380)) (clojure.core/let [G__48379 (clojure.core/long G__48379) G__48380 ^"java.time.temporal.TemporalUnit" G__48380] (.plus ^java.time.LocalDate this48378 G__48379 G__48380)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48379) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48380)) (clojure.core/let [G__48379 (clojure.core/long G__48379) G__48380 ^"java.time.temporal.TemporalUnit" G__48380] (.plus ^java.time.LocalDate this48378 G__48379 G__48380)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48379) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48380)) (clojure.core/let [G__48379 (clojure.core/long G__48379) G__48380 ^"java.time.temporal.TemporalUnit" G__48380] (.plus ^java.time.LocalDate this48378 G__48379 G__48380)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this48381 G__48382] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48382)) (clojure.core/let [G__48382 ^"java.time.temporal.TemporalAmount" G__48382] (.plus ^java.time.LocalDate this48381 G__48382)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48382)) (clojure.core/let [G__48382 ^"java.time.temporal.TemporalAmount" G__48382] (.plus ^java.time.LocalDate this48381 G__48382)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48382)) (clojure.core/let [G__48382 ^"java.time.temporal.TemporalAmount" G__48382] (.plus ^java.time.LocalDate this48381 G__48382)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this48383] (.isLeapYear this48383)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this48384 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery48385] (.query this48384 java-time-temporal-TemporalQuery48385)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this48386] (.getDayOfWeek this48386)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this48387] (.toString this48387)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48388 ^long long48389] (.plusMonths this48388 long48389)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this48390 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate48391] (.isBefore this48390 java-time-chrono-ChronoLocalDate48391)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48392 ^long long48393] (.minusMonths this48392 long48393)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this48394 G__48395 G__48396] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48395) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48396)) (clojure.core/let [G__48395 (clojure.core/long G__48395) G__48396 ^"java.time.temporal.TemporalUnit" G__48396] (.minus ^java.time.LocalDate this48394 G__48395 G__48396)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48395) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48396)) (clojure.core/let [G__48395 (clojure.core/long G__48395) G__48396 ^"java.time.temporal.TemporalUnit" G__48396] (.minus ^java.time.LocalDate this48394 G__48395 G__48396)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48395) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48396)) (clojure.core/let [G__48395 (clojure.core/long G__48395) G__48396 ^"java.time.temporal.TemporalUnit" G__48396] (.minus ^java.time.LocalDate this48394 G__48395 G__48396)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this48397 G__48398] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48398)) (clojure.core/let [G__48398 ^"java.time.temporal.TemporalAmount" G__48398] (.minus ^java.time.LocalDate this48397 G__48398)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48398)) (clojure.core/let [G__48398 ^"java.time.temporal.TemporalAmount" G__48398] (.minus ^java.time.LocalDate this48397 G__48398)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48398)) (clojure.core/let [G__48398 ^"java.time.temporal.TemporalAmount" G__48398] (.minus ^java.time.LocalDate this48397 G__48398)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48399 ^long long48400] (.plusDays this48399 long48400)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this48401 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48402] (.getLong this48401 java-time-temporal-TemporalField48402)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this48403 ^java.lang.Integer int48404] (.withYear this48403 int48404)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48405] (.lengthOfMonth this48405)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^long [^java.time.LocalDate this48406 ^java.time.temporal.Temporal java-time-temporal-Temporal48407 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit48408] (.until this48406 java-time-temporal-Temporal48407 java-time-temporal-TemporalUnit48408)) (^java.lang.Object [this48409 G__48410] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__48410)) (clojure.core/let [G__48410 ^"java.time.chrono.ChronoLocalDate" G__48410] (.until ^java.time.LocalDate this48409 G__48410)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__48410)) (clojure.core/let [G__48410 ^"java.time.chrono.ChronoLocalDate" G__48410] (.until ^java.time.LocalDate this48409 G__48410)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long48411] (. java.time.LocalDate ofEpochDay long48411)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this48412 ^java.lang.Integer int48413] (.withDayOfMonth this48412 int48413)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48414] (.getDayOfMonth this48414)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor48415] (. java.time.LocalDate from java-time-temporal-TemporalAccessor48415)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this48416 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate48417] (.isAfter this48416 java-time-chrono-ChronoLocalDate48417)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"] ["java.time.LocalDate" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this48418 G__48419] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__48419)) (clojure.core/let [G__48419 ^"java.time.temporal.TemporalField" G__48419] (.isSupported ^java.time.LocalDate this48418 G__48419)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48419)) (clojure.core/let [G__48419 ^"java.time.temporal.TemporalUnit" G__48419] (.isSupported ^java.time.LocalDate this48418 G__48419)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48420 ^long long48421] (.minusYears this48420 long48421)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this48422] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.LocalDate this48422)) (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.LocalDate this48422)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence48423] (. java.time.LocalDate parse java-lang-CharSequence48423)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence48424 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter48425] (. java.time.LocalDate parse java-lang-CharSequence48424 java-time-format-DateTimeFormatter48425)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48426] (.hashCode this48426)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this48427 ^java.time.temporal.Temporal java-time-temporal-Temporal48428] (.adjustInto this48427 java-time-temporal-Temporal48428)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this48429 G__48430 G__48431] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__48430) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48431)) (clojure.core/let [G__48430 ^"java.time.temporal.TemporalField" G__48430 G__48431 (clojure.core/long G__48431)] (.with ^java.time.LocalDate this48429 G__48430 G__48431)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__48430) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48431)) (clojure.core/let [G__48430 ^"java.time.temporal.TemporalField" G__48430 G__48431 (clojure.core/long G__48431)] (.with ^java.time.LocalDate this48429 G__48430 G__48431)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__48430) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48431)) (clojure.core/let [G__48430 ^"java.time.temporal.TemporalField" G__48430 G__48431 (clojure.core/long G__48431)] (.with ^java.time.LocalDate this48429 G__48430 G__48431)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this48432 G__48433] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__48433)) (clojure.core/let [G__48433 ^"java.time.temporal.TemporalAdjuster" G__48433] (.with ^java.time.LocalDate this48432 G__48433)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__48433)) (clojure.core/let [G__48433 ^"java.time.temporal.TemporalAdjuster" G__48433] (.with ^java.time.LocalDate this48432 G__48433)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__48433)) (clojure.core/let [G__48433 ^"java.time.temporal.TemporalAdjuster" G__48433] (.with ^java.time.LocalDate this48432 G__48433)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.LocalDate [] (. java.time.LocalDate now)) (^java.time.LocalDate [G__48435] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__48435)) (clojure.core/let [G__48435 ^"java.time.ZoneId" G__48435] (. java.time.LocalDate now G__48435)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__48435)) (clojure.core/let [G__48435 ^"java.time.Clock" G__48435] (. java.time.LocalDate now G__48435)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.LocalDate this48436] (.atStartOfDay this48436)) (^java.time.ZonedDateTime [^java.time.LocalDate this48437 ^java.time.ZoneId java-time-ZoneId48438] (.atStartOfDay this48437 java-time-ZoneId48438)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this48439] (.getMonthValue this48439)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this48440 ^java.lang.Integer int48441] (.withDayOfYear this48440 int48441)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Integer [this48442 G__48443] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__48443)) (clojure.core/let [G__48443 ^"java.time.chrono.ChronoLocalDate" G__48443] (.compareTo ^java.time.LocalDate this48442 G__48443)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__48443)) (clojure.core/let [G__48443 ^"java.lang.Object" G__48443] (.compareTo ^java.time.LocalDate this48442 G__48443)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this48444] (.getMonth this48444)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int48445 ^java.lang.Integer int48446] (. java.time.LocalDate ofYearDay int48445 int48446)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this48447 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48448] (.get this48447 java-time-temporal-TemporalField48448)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this48449 ^java.lang.Object java-lang-Object48450] (.equals this48449 java-lang-Object48450)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.LocalTime"]))} (^java.lang.Object [this48451 G__48452] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__48452)) (clojure.core/let [G__48452 ^"java.time.OffsetTime" G__48452] (.atTime ^java.time.LocalDate this48451 G__48452)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__48452)) (clojure.core/let [G__48452 ^"java.time.LocalTime" G__48452] (.atTime ^java.time.LocalDate this48451 G__48452)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__48452)) (clojure.core/let [G__48452 ^"java.time.LocalTime" G__48452] (.atTime ^java.time.LocalDate this48451 G__48452)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate this48453 ^java.lang.Integer int48454 ^java.lang.Integer int48455 ^java.lang.Integer int48456 ^java.lang.Integer int48457] (.atTime this48453 int48454 int48455 int48456 int48457)) (^java.time.LocalDateTime [^java.time.LocalDate this48458 ^java.lang.Integer int48459 ^java.lang.Integer int48460 ^java.lang.Integer int48461] (.atTime this48458 int48459 int48460 int48461)) (^java.time.LocalDateTime [^java.time.LocalDate this48462 ^java.lang.Integer int48463 ^java.lang.Integer int48464] (.atTime this48462 int48463 int48464)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this48465 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter48466] (.format this48465 java-time-format-DateTimeFormatter48466)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48467 ^long long48468] (.plusYears this48467 long48468)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this48469 ^long long48470] (.minusDays this48469 long48470)))
