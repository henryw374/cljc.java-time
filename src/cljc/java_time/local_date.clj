(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalDate]))
(def max java.time.LocalDate/MAX)
(def min java.time.LocalDate/MIN)
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12663 ^long long12664] (.minusWeeks this12663 long12664)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12665 ^long long12666] (.plusWeeks this12665 long12666)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12667] (.lengthOfYear this12667)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this12668 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12669] (.range this12668 java-time-temporal-TemporalField12669)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this12670] (.getEra this12670)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int"] ["int" "int" "int"]))} (^java.time.LocalDate [G__12672 G__12673 G__12674] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__12672) (clojure.core/instance? java.time.Month G__12673) (clojure.core/instance? java.lang.Number G__12674)) (clojure.core/let [G__12672 (clojure.core/int G__12672) G__12673 ^"java.time.Month" G__12673 G__12674 (clojure.core/int G__12674)] (java.time.LocalDate/of G__12672 G__12673 G__12674)) (clojure.core/and (clojure.core/instance? java.lang.Number G__12672) (clojure.core/instance? java.lang.Number G__12673) (clojure.core/instance? java.lang.Number G__12674)) (clojure.core/let [G__12672 (clojure.core/int G__12672) G__12673 (clojure.core/int G__12673) G__12674 (clojure.core/int G__12674)] (java.time.LocalDate/of G__12672 G__12673 G__12674)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this12675 ^java.lang.Integer int12676] (.withMonth this12675 int12676)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this12677 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate12678] (.isEqual this12677 java-time-chrono-ChronoLocalDate12678)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12679] (.getYear this12679)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this12680] (.toEpochDay this12680)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12681] (.getDayOfYear this12681)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.time.LocalDate [^java.time.LocalDate this12682 ^long long12683 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit12684] (.plus this12682 long12683 java-time-temporal-TemporalUnit12684)) (^java.time.LocalDate [^java.time.LocalDate this12685 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount12686] (.plus this12685 java-time-temporal-TemporalAmount12686)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this12687] (.isLeapYear this12687)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this12688 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12689] (.query this12688 java-time-temporal-TemporalQuery12689)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this12690] (.getDayOfWeek this12690)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this12691] (.toString this12691)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12692 ^long long12693] (.plusMonths this12692 long12693)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this12694 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate12695] (.isBefore this12694 java-time-chrono-ChronoLocalDate12695)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12696 ^long long12697] (.minusMonths this12696 long12697)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDate [^java.time.LocalDate this12698 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount12699] (.minus this12698 java-time-temporal-TemporalAmount12699)) (^java.time.LocalDate [^java.time.LocalDate this12700 ^long long12701 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit12702] (.minus this12700 long12701 java-time-temporal-TemporalUnit12702)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12703 ^long long12704] (.plusDays this12703 long12704)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this12705 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12706] (.getLong this12705 java-time-temporal-TemporalField12706)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this12707 ^java.lang.Integer int12708] (.withYear this12707 int12708)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12709] (.lengthOfMonth this12709)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^long [^java.time.LocalDate this12710 ^java.time.temporal.Temporal java-time-temporal-Temporal12711 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit12712] (.until this12710 java-time-temporal-Temporal12711 java-time-temporal-TemporalUnit12712)) (^java.time.Period [^java.time.LocalDate this12713 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate12714] (.until this12713 java-time-chrono-ChronoLocalDate12714)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long12715] (java.time.LocalDate/ofEpochDay long12715)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this12716 ^java.lang.Integer int12717] (.withDayOfMonth this12716 int12717)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12718] (.getDayOfMonth this12718)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12719] (java.time.LocalDate/from java-time-temporal-TemporalAccessor12719)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this12720 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate12721] (.isAfter this12720 java-time-chrono-ChronoLocalDate12721)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"] ["java.time.LocalDate" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this12722 G__12723] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__12723)) (clojure.core/let [G__12723 ^"java.time.temporal.TemporalField" G__12723] (.isSupported ^java.time.LocalDate this12722 G__12723)) (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__12723)) (clojure.core/let [G__12723 ^"java.time.temporal.ChronoUnit" G__12723] (.isSupported ^java.time.LocalDate this12722 G__12723)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12724 ^long long12725] (.minusYears this12724 long12725)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.IsoChronology [^java.time.LocalDate this12726] (.getChronology this12726)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence12727] (java.time.LocalDate/parse java-lang-CharSequence12727)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence12728 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12729] (java.time.LocalDate/parse java-lang-CharSequence12728 java-time-format-DateTimeFormatter12729)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12730] (.hashCode this12730)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this12731 ^java.time.temporal.Temporal java-time-temporal-Temporal12732] (.adjustInto this12731 java-time-temporal-Temporal12732)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12733 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster12734] (.with this12733 java-time-temporal-TemporalAdjuster12734)) (^java.time.LocalDate [^java.time.LocalDate this12735 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12736 ^long long12737] (.with this12735 java-time-temporal-TemporalField12736 long12737)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.LocalDate [] (java.time.LocalDate/now)) (^java.time.LocalDate [G__12739] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__12739)) (clojure.core/let [G__12739 ^"java.time.ZoneId" G__12739] (java.time.LocalDate/now G__12739)) (clojure.core/and (clojure.core/instance? java.time.Clock G__12739)) (clojure.core/let [G__12739 ^"java.time.Clock" G__12739] (java.time.LocalDate/now G__12739)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.LocalDate this12740] (.atStartOfDay this12740)) (^java.time.ZonedDateTime [^java.time.LocalDate this12741 ^java.time.ZoneId java-time-ZoneId12742] (.atStartOfDay this12741 java-time-ZoneId12742)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12743] (.getMonthValue this12743)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this12744 ^java.lang.Integer int12745] (.withDayOfYear this12744 int12745)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this12746 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate12747] (.compareTo this12746 java-time-chrono-ChronoLocalDate12747)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this12748] (.getMonth this12748)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int12749 ^java.lang.Integer int12750] (java.time.LocalDate/ofYearDay int12749 int12750)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this12751 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12752] (.get this12751 java-time-temporal-TemporalField12752)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this12753 ^java.lang.Object java-lang-Object12754] (.equals this12753 java-lang-Object12754)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int"]))} (^java.lang.Object [this12755 G__12756] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.LocalTime G__12756)) (clojure.core/let [G__12756 ^"java.time.LocalTime" G__12756] (.atTime ^java.time.LocalDate this12755 G__12756)) (clojure.core/and (clojure.core/instance? java.time.OffsetTime G__12756)) (clojure.core/let [G__12756 ^"java.time.OffsetTime" G__12756] (.atTime ^java.time.LocalDate this12755 G__12756)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate this12757 ^java.lang.Integer int12758 ^java.lang.Integer int12759 ^java.lang.Integer int12760 ^java.lang.Integer int12761] (.atTime this12757 int12758 int12759 int12760 int12761)) (^java.time.LocalDateTime [^java.time.LocalDate this12762 ^java.lang.Integer int12763 ^java.lang.Integer int12764 ^java.lang.Integer int12765] (.atTime this12762 int12763 int12764 int12765)) (^java.time.LocalDateTime [^java.time.LocalDate this12766 ^java.lang.Integer int12767 ^java.lang.Integer int12768] (.atTime this12766 int12767 int12768)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this12769 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12770] (.format this12769 java-time-format-DateTimeFormatter12770)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12771 ^long long12772] (.plusYears this12771 long12772)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this12773 ^long long12774] (.minusDays this12773 long12774)))
