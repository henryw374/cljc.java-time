(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalDate]))
(def max java.time.LocalDate/MAX)
(def min java.time.LocalDate/MIN)
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10367 ^long long10368] (.minusWeeks this10367 long10368)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10369 ^long long10370] (.plusWeeks this10369 long10370)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10371] (.lengthOfYear this10371)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this10372 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10373] (.range this10372 java-time-temporal-TemporalField10373)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this10374] (.getEra this10374)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int"] ["int" "int" "int"]))} (^java.time.LocalDate [G__10376 G__10377 G__10378] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10376) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__10377) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10378)) (clojure.core/let [G__10376 (clojure.core/int G__10376) G__10377 ^"java.time.Month" G__10377 G__10378 (clojure.core/int G__10378)] (. java.time.LocalDate of G__10376 G__10377 G__10378)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10376) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10377) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10378)) (clojure.core/let [G__10376 (clojure.core/int G__10376) G__10377 (clojure.core/int G__10377) G__10378 (clojure.core/int G__10378)] (. java.time.LocalDate of G__10376 G__10377 G__10378)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this10379 ^java.lang.Integer int10380] (.withMonth this10379 int10380)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this10381 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate10382] (.isEqual this10381 java-time-chrono-ChronoLocalDate10382)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10383] (.getYear this10383)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this10384] (.toEpochDay this10384)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10385] (.getDayOfYear this10385)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this10386 G__10387 G__10388] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10387) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10388)) (clojure.core/let [G__10387 (clojure.core/long G__10387) G__10388 ^"java.time.temporal.TemporalUnit" G__10388] (.plus ^java.time.LocalDate this10386 G__10387 G__10388)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10387) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10388)) (clojure.core/let [G__10387 (clojure.core/long G__10387) G__10388 ^"java.time.temporal.TemporalUnit" G__10388] (.plus ^java.time.LocalDate this10386 G__10387 G__10388)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10387) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10388)) (clojure.core/let [G__10387 (clojure.core/long G__10387) G__10388 ^"java.time.temporal.TemporalUnit" G__10388] (.plus ^java.time.LocalDate this10386 G__10387 G__10388)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this10389 G__10390] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10390)) (clojure.core/let [G__10390 ^"java.time.temporal.TemporalAmount" G__10390] (.plus ^java.time.LocalDate this10389 G__10390)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10390)) (clojure.core/let [G__10390 ^"java.time.temporal.TemporalAmount" G__10390] (.plus ^java.time.LocalDate this10389 G__10390)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10390)) (clojure.core/let [G__10390 ^"java.time.temporal.TemporalAmount" G__10390] (.plus ^java.time.LocalDate this10389 G__10390)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this10391] (.isLeapYear this10391)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this10392 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery10393] (.query this10392 java-time-temporal-TemporalQuery10393)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this10394] (.getDayOfWeek this10394)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this10395] (.toString this10395)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10396 ^long long10397] (.plusMonths this10396 long10397)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this10398 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate10399] (.isBefore this10398 java-time-chrono-ChronoLocalDate10399)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10400 ^long long10401] (.minusMonths this10400 long10401)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this10402 G__10403] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10403)) (clojure.core/let [G__10403 ^"java.time.temporal.TemporalAmount" G__10403] (.minus ^java.time.LocalDate this10402 G__10403)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10403)) (clojure.core/let [G__10403 ^"java.time.temporal.TemporalAmount" G__10403] (.minus ^java.time.LocalDate this10402 G__10403)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10403)) (clojure.core/let [G__10403 ^"java.time.temporal.TemporalAmount" G__10403] (.minus ^java.time.LocalDate this10402 G__10403)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this10404 G__10405 G__10406] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10405) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10406)) (clojure.core/let [G__10405 (clojure.core/long G__10405) G__10406 ^"java.time.temporal.TemporalUnit" G__10406] (.minus ^java.time.LocalDate this10404 G__10405 G__10406)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10405) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10406)) (clojure.core/let [G__10405 (clojure.core/long G__10405) G__10406 ^"java.time.temporal.TemporalUnit" G__10406] (.minus ^java.time.LocalDate this10404 G__10405 G__10406)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10405) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10406)) (clojure.core/let [G__10405 (clojure.core/long G__10405) G__10406 ^"java.time.temporal.TemporalUnit" G__10406] (.minus ^java.time.LocalDate this10404 G__10405 G__10406)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10407 ^long long10408] (.plusDays this10407 long10408)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this10409 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10410] (.getLong this10409 java-time-temporal-TemporalField10410)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this10411 ^java.lang.Integer int10412] (.withYear this10411 int10412)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10413] (.lengthOfMonth this10413)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Object [this10414 G__10415] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__10415)) (clojure.core/let [G__10415 ^"java.time.chrono.ChronoLocalDate" G__10415] (.until ^java.time.LocalDate this10414 G__10415)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__10415)) (clojure.core/let [G__10415 ^"java.time.chrono.ChronoLocalDate" G__10415] (.until ^java.time.LocalDate this10414 G__10415)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^long [^java.time.LocalDate this10416 ^java.time.temporal.Temporal java-time-temporal-Temporal10417 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit10418] (.until this10416 java-time-temporal-Temporal10417 java-time-temporal-TemporalUnit10418)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long10419] (. java.time.LocalDate ofEpochDay long10419)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this10420 ^java.lang.Integer int10421] (.withDayOfMonth this10420 int10421)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10422] (.getDayOfMonth this10422)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor10423] (. java.time.LocalDate from java-time-temporal-TemporalAccessor10423)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this10424 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate10425] (.isAfter this10424 java-time-chrono-ChronoLocalDate10425)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this10426 G__10427] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10427)) (clojure.core/let [G__10427 ^"java.time.temporal.TemporalUnit" G__10427] (.isSupported ^java.time.LocalDate this10426 G__10427)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__10427)) (clojure.core/let [G__10427 ^"java.time.temporal.TemporalField" G__10427] (.isSupported ^java.time.LocalDate this10426 G__10427)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10428 ^long long10429] (.minusYears this10428 long10429)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate"]))} (^java.lang.Object [this10430] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.LocalDate this10430)) (clojure.core/and) (clojure.core/let [] (.getChronology ^java.time.LocalDate this10430)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence10431] (. java.time.LocalDate parse java-lang-CharSequence10431)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence10432 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter10433] (. java.time.LocalDate parse java-lang-CharSequence10432 java-time-format-DateTimeFormatter10433)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10434] (.hashCode this10434)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this10435 ^java.time.temporal.Temporal java-time-temporal-Temporal10436] (.adjustInto this10435 java-time-temporal-Temporal10436)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this10437 G__10438 G__10439] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__10438) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10439)) (clojure.core/let [G__10438 ^"java.time.temporal.TemporalField" G__10438 G__10439 (clojure.core/long G__10439)] (.with ^java.time.LocalDate this10437 G__10438 G__10439)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__10438) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10439)) (clojure.core/let [G__10438 ^"java.time.temporal.TemporalField" G__10438 G__10439 (clojure.core/long G__10439)] (.with ^java.time.LocalDate this10437 G__10438 G__10439)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__10438) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10439)) (clojure.core/let [G__10438 ^"java.time.temporal.TemporalField" G__10438 G__10439 (clojure.core/long G__10439)] (.with ^java.time.LocalDate this10437 G__10438 G__10439)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this10440 G__10441] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__10441)) (clojure.core/let [G__10441 ^"java.time.temporal.TemporalAdjuster" G__10441] (.with ^java.time.LocalDate this10440 G__10441)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__10441)) (clojure.core/let [G__10441 ^"java.time.temporal.TemporalAdjuster" G__10441] (.with ^java.time.LocalDate this10440 G__10441)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__10441)) (clojure.core/let [G__10441 ^"java.time.temporal.TemporalAdjuster" G__10441] (.with ^java.time.LocalDate this10440 G__10441)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDate [] (. java.time.LocalDate now)) (^java.time.LocalDate [G__10443] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__10443)) (clojure.core/let [G__10443 ^"java.time.Clock" G__10443] (. java.time.LocalDate now G__10443)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__10443)) (clojure.core/let [G__10443 ^"java.time.ZoneId" G__10443] (. java.time.LocalDate now G__10443)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.LocalDate this10444] (.atStartOfDay this10444)) (^java.time.ZonedDateTime [^java.time.LocalDate this10445 ^java.time.ZoneId java-time-ZoneId10446] (.atStartOfDay this10445 java-time-ZoneId10446)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this10447] (.getMonthValue this10447)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this10448 ^java.lang.Integer int10449] (.withDayOfYear this10448 int10449)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Integer [this10450 G__10451] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__10451)) (clojure.core/let [G__10451 ^"java.time.chrono.ChronoLocalDate" G__10451] (.compareTo ^java.time.LocalDate this10450 G__10451)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__10451)) (clojure.core/let [G__10451 ^"java.lang.Object" G__10451] (.compareTo ^java.time.LocalDate this10450 G__10451)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this10452] (.getMonth this10452)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int10453 ^java.lang.Integer int10454] (. java.time.LocalDate ofYearDay int10453 int10454)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this10455 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10456] (.get this10455 java-time-temporal-TemporalField10456)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this10457 ^java.lang.Object java-lang-Object10458] (.equals this10457 java-lang-Object10458)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "int" "int"]))} (^java.lang.Object [this10459 G__10460] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__10460)) (clojure.core/let [G__10460 ^"java.time.LocalTime" G__10460] (.atTime ^java.time.LocalDate this10459 G__10460)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__10460)) (clojure.core/let [G__10460 ^"java.time.LocalTime" G__10460] (.atTime ^java.time.LocalDate this10459 G__10460)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__10460)) (clojure.core/let [G__10460 ^"java.time.OffsetTime" G__10460] (.atTime ^java.time.LocalDate this10459 G__10460)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate this10461 ^java.lang.Integer int10462 ^java.lang.Integer int10463 ^java.lang.Integer int10464] (.atTime this10461 int10462 int10463 int10464)) (^java.time.LocalDateTime [^java.time.LocalDate this10465 ^java.lang.Integer int10466 ^java.lang.Integer int10467 ^java.lang.Integer int10468 ^java.lang.Integer int10469] (.atTime this10465 int10466 int10467 int10468 int10469)) (^java.time.LocalDateTime [^java.time.LocalDate this10470 ^java.lang.Integer int10471 ^java.lang.Integer int10472] (.atTime this10470 int10471 int10472)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this10473 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter10474] (.format this10473 java-time-format-DateTimeFormatter10474)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10475 ^long long10476] (.plusYears this10475 long10476)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this10477 ^long long10478] (.minusDays this10477 long10478)))
