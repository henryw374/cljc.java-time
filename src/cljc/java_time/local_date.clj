(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalDate]))
(def max java.time.LocalDate/MAX)
(def min java.time.LocalDate/MIN)
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3146 ^long long3147] (.minusWeeks this3146 long3147)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3148 ^long long3149] (.plusWeeks this3148 long3149)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3150] (.lengthOfYear this3150)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this3151 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3152] (.range this3151 java-time-temporal-TemporalField3152)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this3153] (.getEra this3153)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int"] ["int" "int" "int"]))} (^java.time.LocalDate [G__3155 G__3156 G__3157] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__3155) (clojure.core/instance? java.time.Month G__3156) (clojure.core/instance? java.lang.Number G__3157)) (clojure.core/let [G__3155 (clojure.core/int G__3155) G__3156 ^"java.time.Month" G__3156 G__3157 (clojure.core/int G__3157)] (java.time.LocalDate/of G__3155 G__3156 G__3157)) (clojure.core/and (clojure.core/instance? java.lang.Number G__3155) (clojure.core/instance? java.lang.Number G__3156) (clojure.core/instance? java.lang.Number G__3157)) (clojure.core/let [G__3155 (clojure.core/int G__3155) G__3156 (clojure.core/int G__3156) G__3157 (clojure.core/int G__3157)] (java.time.LocalDate/of G__3155 G__3156 G__3157)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this3158 ^java.lang.Integer int3159] (.withMonth this3158 int3159)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this3160 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3161] (.isEqual this3160 java-time-chrono-ChronoLocalDate3161)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3162] (.getYear this3162)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this3163] (.toEpochDay this3163)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3164] (.getDayOfYear this3164)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.time.LocalDate [^java.time.LocalDate this3165 ^long long3166 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3167] (.plus this3165 long3166 java-time-temporal-TemporalUnit3167)) (^java.time.LocalDate [^java.time.LocalDate this3168 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3169] (.plus this3168 java-time-temporal-TemporalAmount3169)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this3170] (.isLeapYear this3170)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this3171 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3172] (.query this3171 java-time-temporal-TemporalQuery3172)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this3173] (.getDayOfWeek this3173)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this3174] (.toString this3174)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3175 ^long long3176] (.plusMonths this3175 long3176)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this3177 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3178] (.isBefore this3177 java-time-chrono-ChronoLocalDate3178)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3179 ^long long3180] (.minusMonths this3179 long3180)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.time.LocalDate [^java.time.LocalDate this3181 ^long long3182 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3183] (.minus this3181 long3182 java-time-temporal-TemporalUnit3183)) (^java.time.LocalDate [^java.time.LocalDate this3184 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3185] (.minus this3184 java-time-temporal-TemporalAmount3185)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3186 ^long long3187] (.plusDays this3186 long3187)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this3188 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3189] (.getLong this3188 java-time-temporal-TemporalField3189)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this3190 ^java.lang.Integer int3191] (.withYear this3190 int3191)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3192] (.lengthOfMonth this3192)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"] ["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^java.time.Period [^java.time.LocalDate this3193 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3194] (.until this3193 java-time-chrono-ChronoLocalDate3194)) (^long [^java.time.LocalDate this3195 ^java.time.temporal.Temporal java-time-temporal-Temporal3196 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3197] (.until this3195 java-time-temporal-Temporal3196 java-time-temporal-TemporalUnit3197)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long3198] (java.time.LocalDate/ofEpochDay long3198)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this3199 ^java.lang.Integer int3200] (.withDayOfMonth this3199 int3200)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3201] (.getDayOfMonth this3201)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor3202] (java.time.LocalDate/from java-time-temporal-TemporalAccessor3202)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this3203 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3204] (.isAfter this3203 java-time-chrono-ChronoLocalDate3204)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this3205 G__3206] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalUnit G__3206)) (clojure.core/let [G__3206 ^"java.time.temporal.TemporalUnit" G__3206] (.isSupported ^java.time.LocalDate this3205 G__3206)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__3206)) (clojure.core/let [G__3206 ^"java.time.temporal.TemporalField" G__3206] (.isSupported ^java.time.LocalDate this3205 G__3206)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3207 ^long long3208] (.minusYears this3207 long3208)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.IsoChronology [^java.time.LocalDate this3209] (.getChronology this3209)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence3210 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3211] (java.time.LocalDate/parse java-lang-CharSequence3210 java-time-format-DateTimeFormatter3211)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence3212] (java.time.LocalDate/parse java-lang-CharSequence3212)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3213] (.hashCode this3213)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this3214 ^java.time.temporal.Temporal java-time-temporal-Temporal3215] (.adjustInto this3214 java-time-temporal-Temporal3215)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDate" "java.time.temporal.TemporalField" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3216 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster3217] (.with this3216 java-time-temporal-TemporalAdjuster3217)) (^java.time.LocalDate [^java.time.LocalDate this3218 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3219 ^long long3220] (.with this3218 java-time-temporal-TemporalField3219 long3220)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^java.time.LocalDate [G__3222] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__3222)) (clojure.core/let [G__3222 ^"java.time.ZoneId" G__3222] (java.time.LocalDate/now G__3222)) (clojure.core/and (clojure.core/instance? java.time.Clock G__3222)) (clojure.core/let [G__3222 ^"java.time.Clock" G__3222] (java.time.LocalDate/now G__3222)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDate [] (java.time.LocalDate/now)))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.LocalDate this3223] (.atStartOfDay this3223)) (^java.time.ZonedDateTime [^java.time.LocalDate this3224 ^java.time.ZoneId java-time-ZoneId3225] (.atStartOfDay this3224 java-time-ZoneId3225)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3226] (.getMonthValue this3226)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this3227 ^java.lang.Integer int3228] (.withDayOfYear this3227 int3228)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3229 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3230] (.compareTo this3229 java-time-chrono-ChronoLocalDate3230)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this3231] (.getMonth this3231)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int3232 ^java.lang.Integer int3233] (java.time.LocalDate/ofYearDay int3232 int3233)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this3234 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3235] (.get this3234 java-time-temporal-TemporalField3235)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this3236 ^java.lang.Object java-lang-Object3237] (.equals this3236 java-lang-Object3237)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["java.time.LocalDate" "int" "int"] ["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "java.time.OffsetTime"]))} (^java.time.LocalDateTime [^java.time.LocalDate this3238 ^java.lang.Integer int3239 ^java.lang.Integer int3240 ^java.lang.Integer int3241 ^java.lang.Integer int3242] (.atTime this3238 int3239 int3240 int3241 int3242)) (^java.lang.Object [this3243 G__3244] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.LocalTime G__3244)) (clojure.core/let [G__3244 ^"java.time.LocalTime" G__3244] (.atTime ^java.time.LocalDate this3243 G__3244)) (clojure.core/and (clojure.core/instance? java.time.OffsetTime G__3244)) (clojure.core/let [G__3244 ^"java.time.OffsetTime" G__3244] (.atTime ^java.time.LocalDate this3243 G__3244)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate this3245 ^java.lang.Integer int3246 ^java.lang.Integer int3247] (.atTime this3245 int3246 int3247)) (^java.time.LocalDateTime [^java.time.LocalDate this3248 ^java.lang.Integer int3249 ^java.lang.Integer int3250 ^java.lang.Integer int3251] (.atTime this3248 int3249 int3250 int3251)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this3252 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3253] (.format this3252 java-time-format-DateTimeFormatter3253)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3254 ^long long3255] (.plusYears this3254 long3255)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3256 ^long long3257] (.minusDays this3256 long3257)))
