(ns cljc.java-time.local-date (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalDate]))
(def max java.time.LocalDate/MAX)
(def min java.time.LocalDate/MIN)
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3145 ^long long3146] (.minusWeeks this3145 long3146)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3147 ^long long3148] (.plusWeeks this3147 long3148)))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3149] (.lengthOfYear this3149)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDate this3150 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3151] (.range this3150 java-time-temporal-TemporalField3151)))
(clojure.core/defn get-era {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.Era [^java.time.LocalDate this3152] (.getEra this3152)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"] ["int" "java.time.Month" "int"]))} (^java.time.LocalDate [G__3154 G__3155 G__3156] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__3154) (clojure.core/instance? java.lang.Number G__3155) (clojure.core/instance? java.lang.Number G__3156)) (clojure.core/let [G__3154 (clojure.core/int G__3154) G__3155 (clojure.core/int G__3155) G__3156 (clojure.core/int G__3156)] (java.time.LocalDate/of G__3154 G__3155 G__3156)) (clojure.core/and (clojure.core/instance? java.lang.Number G__3154) (clojure.core/instance? java.time.Month G__3155) (clojure.core/instance? java.lang.Number G__3156)) (clojure.core/let [G__3154 (clojure.core/int G__3154) G__3155 ^"java.time.Month" G__3155 G__3156 (clojure.core/int G__3156)] (java.time.LocalDate/of G__3154 G__3155 G__3156)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this3157 ^java.lang.Integer int3158] (.withMonth this3157 int3158)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this3159 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3160] (.isEqual this3159 java-time-chrono-ChronoLocalDate3160)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3161] (.getYear this3161)))
(clojure.core/defn to-epoch-day {:arglists (quote (["java.time.LocalDate"]))} (^long [^java.time.LocalDate this3162] (.toEpochDay this3162)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3163] (.getDayOfYear this3163)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalAmount"] ["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDate [^java.time.LocalDate this3164 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3165] (.plus this3164 java-time-temporal-TemporalAmount3165)) (^java.time.LocalDate [^java.time.LocalDate this3166 ^long long3167 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3168] (.plus this3166 long3167 java-time-temporal-TemporalUnit3168)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this3169] (.isLeapYear this3169)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDate this3170 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3171] (.query this3170 java-time-temporal-TemporalQuery3171)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDate"]))} (^java.time.DayOfWeek [^java.time.LocalDate this3172] (.getDayOfWeek this3172)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.String [^java.time.LocalDate this3173] (.toString this3173)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3174 ^long long3175] (.plusMonths this3174 long3175)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this3176 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3177] (.isBefore this3176 java-time-chrono-ChronoLocalDate3177)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3178 ^long long3179] (.minusMonths this3178 long3179)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDate" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.temporal.TemporalAmount"]))} (^java.time.LocalDate [^java.time.LocalDate this3180 ^long long3181 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3182] (.minus this3180 long3181 java-time-temporal-TemporalUnit3182)) (^java.time.LocalDate [^java.time.LocalDate this3183 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3184] (.minus this3183 java-time-temporal-TemporalAmount3184)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3185 ^long long3186] (.plusDays this3185 long3186)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDate this3187 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3188] (.getLong this3187 java-time-temporal-TemporalField3188)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this3189 ^java.lang.Integer int3190] (.withYear this3189 int3190)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3191] (.lengthOfMonth this3191)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^long [^java.time.LocalDate this3192 ^java.time.temporal.Temporal java-time-temporal-Temporal3193 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3194] (.until this3192 java-time-temporal-Temporal3193 java-time-temporal-TemporalUnit3194)) (^java.time.Period [^java.time.LocalDate this3195 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3196] (.until this3195 java-time-chrono-ChronoLocalDate3196)))
(clojure.core/defn of-epoch-day {:arglists (quote (["long"]))} (^java.time.LocalDate [^long long3197] (java.time.LocalDate/ofEpochDay long3197)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this3198 ^java.lang.Integer int3199] (.withDayOfMonth this3198 int3199)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3200] (.getDayOfMonth this3200)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDate [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor3201] (java.time.LocalDate/from java-time-temporal-TemporalAccessor3201)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Boolean [^java.time.LocalDate this3202 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3203] (.isAfter this3202 java-time-chrono-ChronoLocalDate3203)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"] ["java.time.LocalDate" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this3204 G__3205] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__3205)) (clojure.core/let [G__3205 ^"java.time.temporal.TemporalField" G__3205] (.isSupported ^java.time.LocalDate this3204 G__3205)) (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__3205)) (clojure.core/let [G__3205 ^"java.time.temporal.ChronoUnit" G__3205] (.isSupported ^java.time.LocalDate this3204 G__3205)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3206 ^long long3207] (.minusYears this3206 long3207)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDate"]))} (^java.time.chrono.IsoChronology [^java.time.LocalDate this3208] (.getChronology this3208)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence3209] (java.time.LocalDate/parse java-lang-CharSequence3209)) (^java.time.LocalDate [^java.lang.CharSequence java-lang-CharSequence3210 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3211] (java.time.LocalDate/parse java-lang-CharSequence3210 java-time-format-DateTimeFormatter3211)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3212] (.hashCode this3212)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDate" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDate this3213 ^java.time.temporal.Temporal java-time-temporal-Temporal3214] (.adjustInto this3213 java-time-temporal-Temporal3214)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDate" "java.time.temporal.TemporalAdjuster"]))} (^java.time.LocalDate [^java.time.LocalDate this3215 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3216 ^long long3217] (.with this3215 java-time-temporal-TemporalField3216 long3217)) (^java.time.LocalDate [^java.time.LocalDate this3218 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster3219] (.with this3218 java-time-temporal-TemporalAdjuster3219)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.LocalDate [] (java.time.LocalDate/now)) (^java.time.LocalDate [G__3221] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__3221)) (clojure.core/let [G__3221 ^"java.time.ZoneId" G__3221] (java.time.LocalDate/now G__3221)) (clojure.core/and (clojure.core/instance? java.time.Clock G__3221)) (clojure.core/let [G__3221 ^"java.time.Clock" G__3221] (java.time.LocalDate/now G__3221)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn at-start-of-day {:arglists (quote (["java.time.LocalDate"] ["java.time.LocalDate" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.LocalDate this3222] (.atStartOfDay this3222)) (^java.time.ZonedDateTime [^java.time.LocalDate this3223 ^java.time.ZoneId java-time-ZoneId3224] (.atStartOfDay this3223 java-time-ZoneId3224)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3225] (.getMonthValue this3225)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDate" "int"]))} (^java.time.LocalDate [^java.time.LocalDate this3226 ^java.lang.Integer int3227] (.withDayOfYear this3226 int3227)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDate" "java.time.chrono.ChronoLocalDate"]))} (^java.lang.Integer [^java.time.LocalDate this3228 ^java.time.chrono.ChronoLocalDate java-time-chrono-ChronoLocalDate3229] (.compareTo this3228 java-time-chrono-ChronoLocalDate3229)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDate"]))} (^java.time.Month [^java.time.LocalDate this3230] (.getMonth this3230)))
(clojure.core/defn of-year-day {:arglists (quote (["int" "int"]))} (^java.time.LocalDate [^java.lang.Integer int3231 ^java.lang.Integer int3232] (java.time.LocalDate/ofYearDay int3231 int3232)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDate" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDate this3233 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3234] (.get this3233 java-time-temporal-TemporalField3234)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDate" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDate this3235 ^java.lang.Object java-lang-Object3236] (.equals this3235 java-lang-Object3236)))
(clojure.core/defn at-time {:arglists (quote (["java.time.LocalDate" "int" "int" "int"] ["java.time.LocalDate" "int" "int"] ["java.time.LocalDate" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.OffsetTime"] ["java.time.LocalDate" "java.time.LocalTime"]))} (^java.time.LocalDateTime [^java.time.LocalDate this3237 ^java.lang.Integer int3238 ^java.lang.Integer int3239 ^java.lang.Integer int3240] (.atTime this3237 int3238 int3239 int3240)) (^java.time.LocalDateTime [^java.time.LocalDate this3241 ^java.lang.Integer int3242 ^java.lang.Integer int3243] (.atTime this3241 int3242 int3243)) (^java.time.LocalDateTime [^java.time.LocalDate this3244 ^java.lang.Integer int3245 ^java.lang.Integer int3246 ^java.lang.Integer int3247 ^java.lang.Integer int3248] (.atTime this3244 int3245 int3246 int3247 int3248)) (^java.lang.Object [this3249 G__3250] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.OffsetTime G__3250)) (clojure.core/let [G__3250 ^"java.time.OffsetTime" G__3250] (.atTime ^java.time.LocalDate this3249 G__3250)) (clojure.core/and (clojure.core/instance? java.time.LocalTime G__3250)) (clojure.core/let [G__3250 ^"java.time.LocalTime" G__3250] (.atTime ^java.time.LocalDate this3249 G__3250)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDate" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDate this3251 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3252] (.format this3251 java-time-format-DateTimeFormatter3252)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3253 ^long long3254] (.plusYears this3253 long3254)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDate" "long"]))} (^java.time.LocalDate [^java.time.LocalDate this3255 ^long long3256] (.minusDays this3255 long3256)))
