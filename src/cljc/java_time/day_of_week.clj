(ns cljc.java-time.day-of-week (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time DayOfWeek]))
(def saturday java.time.DayOfWeek/SATURDAY)
(def thursday java.time.DayOfWeek/THURSDAY)
(def friday java.time.DayOfWeek/FRIDAY)
(def wednesday java.time.DayOfWeek/WEDNESDAY)
(def sunday java.time.DayOfWeek/SUNDAY)
(def monday java.time.DayOfWeek/MONDAY)
(def tuesday java.time.DayOfWeek/TUESDAY)
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this4607 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4608] (.range this4607 java-time-temporal-TemporalField4608)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.DayOfWeek/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String4609] (java.time.DayOfWeek/valueOf java-lang-String4609)) (^java.lang.Enum [^java.lang.Class java-lang-Class4610 ^java.lang.String java-lang-String4611] (java.time.DayOfWeek/valueOf java-lang-Class4610 java-lang-String4611)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int4612] (java.time.DayOfWeek/of int4612)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this4613] (.ordinal this4613)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this4614 ^long long4615] (.plus this4614 long4615)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this4616 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4617] (.query this4616 java-time-temporal-TemporalQuery4617)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this4618] (.toString this4618)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this4619 ^long long4620] (.minus this4619 long4620)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this4621 ^java.time.format.TextStyle java-time-format-TextStyle4622 ^java.util.Locale java-util-Locale4623] (.getDisplayName this4621 java-time-format-TextStyle4622 java-util-Locale4623)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this4624] (.getValue this4624)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this4625] (.name this4625)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this4626 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4627] (.getLong this4626 java-time-temporal-TemporalField4627)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this4628] (.getDeclaringClass this4628)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4629] (java.time.DayOfWeek/from java-time-temporal-TemporalAccessor4629)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this4630 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4631] (.isSupported this4630 java-time-temporal-TemporalField4631)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this4632] (.hashCode this4632)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this4633 ^java.time.temporal.Temporal java-time-temporal-Temporal4634] (.adjustInto this4633 java-time-temporal-Temporal4634)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.DayOfWeek this4635 ^java.lang.Enum java-lang-Enum4636] (.compareTo this4635 java-lang-Enum4636)))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this4637 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4638] (.get this4637 java-time-temporal-TemporalField4638)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this4639 ^java.lang.Object java-lang-Object4640] (.equals this4639 java-lang-Object4640)))
