(ns cljc.java-time.day-of-week (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time DayOfWeek]))
(def saturday java.time.DayOfWeek/SATURDAY)
(def thursday java.time.DayOfWeek/THURSDAY)
(def friday java.time.DayOfWeek/FRIDAY)
(def wednesday java.time.DayOfWeek/WEDNESDAY)
(def sunday java.time.DayOfWeek/SUNDAY)
(def monday java.time.DayOfWeek/MONDAY)
(def tuesday java.time.DayOfWeek/TUESDAY)
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this14125 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14126] (.range this14125 java-time-temporal-TemporalField14126)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.DayOfWeek/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String14127] (java.time.DayOfWeek/valueOf java-lang-String14127)) (^java.lang.Enum [^java.lang.Class java-lang-Class14128 ^java.lang.String java-lang-String14129] (java.time.DayOfWeek/valueOf java-lang-Class14128 java-lang-String14129)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int14130] (java.time.DayOfWeek/of int14130)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this14131] (.ordinal this14131)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this14132 ^long long14133] (.plus this14132 long14133)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this14134 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery14135] (.query this14134 java-time-temporal-TemporalQuery14135)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this14136] (.toString this14136)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this14137 ^long long14138] (.minus this14137 long14138)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this14139 ^java.time.format.TextStyle java-time-format-TextStyle14140 ^java.util.Locale java-util-Locale14141] (.getDisplayName this14139 java-time-format-TextStyle14140 java-util-Locale14141)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this14142] (.getValue this14142)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this14143] (.name this14143)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this14144 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14145] (.getLong this14144 java-time-temporal-TemporalField14145)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this14146] (.getDeclaringClass this14146)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14147] (java.time.DayOfWeek/from java-time-temporal-TemporalAccessor14147)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this14148 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14149] (.isSupported this14148 java-time-temporal-TemporalField14149)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this14150] (.hashCode this14150)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this14151 ^java.time.temporal.Temporal java-time-temporal-Temporal14152] (.adjustInto this14151 java-time-temporal-Temporal14152)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.DayOfWeek this14153 ^java.lang.Enum java-lang-Enum14154] (.compareTo this14153 java-lang-Enum14154)))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this14155 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14156] (.get this14155 java-time-temporal-TemporalField14156)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this14157 ^java.lang.Object java-lang-Object14158] (.equals this14157 java-lang-Object14158)))
