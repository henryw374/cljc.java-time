(ns cljc.java-time.day-of-week (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time DayOfWeek]))
(def saturday java.time.DayOfWeek/SATURDAY)
(def thursday java.time.DayOfWeek/THURSDAY)
(def friday java.time.DayOfWeek/FRIDAY)
(def wednesday java.time.DayOfWeek/WEDNESDAY)
(def sunday java.time.DayOfWeek/SUNDAY)
(def monday java.time.DayOfWeek/MONDAY)
(def tuesday java.time.DayOfWeek/TUESDAY)
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this7620 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7621] (.range this7620 java-time-temporal-TemporalField7621)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.DayOfWeek/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String7622] (java.time.DayOfWeek/valueOf java-lang-String7622)) (^java.lang.Enum [^java.lang.Class java-lang-Class7623 ^java.lang.String java-lang-String7624] (java.time.DayOfWeek/valueOf java-lang-Class7623 java-lang-String7624)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int7625] (java.time.DayOfWeek/of int7625)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this7626] (.ordinal this7626)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this7627 ^long long7628] (.plus this7627 long7628)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this7629 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7630] (.query this7629 java-time-temporal-TemporalQuery7630)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this7631] (.toString this7631)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this7632 ^long long7633] (.minus this7632 long7633)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this7634 ^java.time.format.TextStyle java-time-format-TextStyle7635 ^java.util.Locale java-util-Locale7636] (.getDisplayName this7634 java-time-format-TextStyle7635 java-util-Locale7636)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this7637] (.getValue this7637)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this7638] (.name this7638)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this7639 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7640] (.getLong this7639 java-time-temporal-TemporalField7640)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this7641] (.getDeclaringClass this7641)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7642] (java.time.DayOfWeek/from java-time-temporal-TemporalAccessor7642)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this7643 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7644] (.isSupported this7643 java-time-temporal-TemporalField7644)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this7645] (.hashCode this7645)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this7646 ^java.time.temporal.Temporal java-time-temporal-Temporal7647] (.adjustInto this7646 java-time-temporal-Temporal7647)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [this7648 G__7649] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7649)) (clojure.core/let [G__7649 ^"java.lang.Object" G__7649] (.compareTo ^java.time.DayOfWeek this7648 G__7649)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__7649)) (clojure.core/let [G__7649 ^"java.lang.Enum" G__7649] (.compareTo ^java.time.DayOfWeek this7648 G__7649)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this7650 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7651] (.get this7650 java-time-temporal-TemporalField7651)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this7652 ^java.lang.Object java-lang-Object7653] (.equals this7652 java-lang-Object7653)))
