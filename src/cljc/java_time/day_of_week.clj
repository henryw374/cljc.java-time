(ns cljc.java-time.day-of-week (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time DayOfWeek]))
(def saturday java.time.DayOfWeek/SATURDAY)
(def thursday java.time.DayOfWeek/THURSDAY)
(def friday java.time.DayOfWeek/FRIDAY)
(def wednesday java.time.DayOfWeek/WEDNESDAY)
(def sunday java.time.DayOfWeek/SUNDAY)
(def monday java.time.DayOfWeek/MONDAY)
(def tuesday java.time.DayOfWeek/TUESDAY)
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this60312 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60313] (.range this60312 java-time-temporal-TemporalField60313)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.DayOfWeek/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String60314] (java.time.DayOfWeek/valueOf java-lang-String60314)) (^java.lang.Enum [^java.lang.Class java-lang-Class60315 ^java.lang.String java-lang-String60316] (java.time.DayOfWeek/valueOf java-lang-Class60315 java-lang-String60316)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int60317] (java.time.DayOfWeek/of int60317)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this60318] (.ordinal this60318)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this60319 ^long long60320] (.plus this60319 long60320)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this60321 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery60322] (.query this60321 java-time-temporal-TemporalQuery60322)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this60323] (.toString this60323)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this60324 ^long long60325] (.minus this60324 long60325)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this60326 ^java.time.format.TextStyle java-time-format-TextStyle60327 ^java.util.Locale java-util-Locale60328] (.getDisplayName this60326 java-time-format-TextStyle60327 java-util-Locale60328)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this60329] (.getValue this60329)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this60330] (.name this60330)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this60331 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60332] (.getLong this60331 java-time-temporal-TemporalField60332)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this60333] (.getDeclaringClass this60333)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor60334] (java.time.DayOfWeek/from java-time-temporal-TemporalAccessor60334)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this60335 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60336] (.isSupported this60335 java-time-temporal-TemporalField60336)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this60337] (.hashCode this60337)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this60338 ^java.time.temporal.Temporal java-time-temporal-Temporal60339] (.adjustInto this60338 java-time-temporal-Temporal60339)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [this60340 G__60341] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__60341)) (clojure.core/let [G__60341 ^"java.lang.Object" G__60341] (.compareTo ^java.time.DayOfWeek this60340 G__60341)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__60341)) (clojure.core/let [G__60341 ^"java.lang.Enum" G__60341] (.compareTo ^java.time.DayOfWeek this60340 G__60341)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this60342 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60343] (.get this60342 java-time-temporal-TemporalField60343)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this60344 ^java.lang.Object java-lang-Object60345] (.equals this60344 java-lang-Object60345)))
