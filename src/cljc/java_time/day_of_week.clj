(ns cljc.java-time.day-of-week (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time DayOfWeek]))
(def saturday java.time.DayOfWeek/SATURDAY)
(def thursday java.time.DayOfWeek/THURSDAY)
(def friday java.time.DayOfWeek/FRIDAY)
(def wednesday java.time.DayOfWeek/WEDNESDAY)
(def sunday java.time.DayOfWeek/SUNDAY)
(def monday java.time.DayOfWeek/MONDAY)
(def tuesday java.time.DayOfWeek/TUESDAY)
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this7596 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7597] (.range this7596 java-time-temporal-TemporalField7597)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.DayOfWeek/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String7598] (java.time.DayOfWeek/valueOf java-lang-String7598)) (^java.lang.Enum [^java.lang.Class java-lang-Class7599 ^java.lang.String java-lang-String7600] (java.time.DayOfWeek/valueOf java-lang-Class7599 java-lang-String7600)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int7601] (java.time.DayOfWeek/of int7601)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this7602] (.ordinal this7602)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this7603 ^long long7604] (.plus this7603 long7604)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this7605 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7606] (.query this7605 java-time-temporal-TemporalQuery7606)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this7607] (.toString this7607)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this7608 ^long long7609] (.minus this7608 long7609)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this7610 ^java.time.format.TextStyle java-time-format-TextStyle7611 ^java.util.Locale java-util-Locale7612] (.getDisplayName this7610 java-time-format-TextStyle7611 java-util-Locale7612)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this7613] (.getValue this7613)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this7614] (.name this7614)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this7615 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7616] (.getLong this7615 java-time-temporal-TemporalField7616)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this7617] (.getDeclaringClass this7617)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7618] (java.time.DayOfWeek/from java-time-temporal-TemporalAccessor7618)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this7619 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7620] (.isSupported this7619 java-time-temporal-TemporalField7620)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this7621] (.hashCode this7621)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this7622 ^java.time.temporal.Temporal java-time-temporal-Temporal7623] (.adjustInto this7622 java-time-temporal-Temporal7623)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [this7624 G__7625] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7625)) (clojure.core/let [G__7625 ^"java.lang.Object" G__7625] (.compareTo ^java.time.DayOfWeek this7624 G__7625)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__7625)) (clojure.core/let [G__7625 ^"java.lang.Enum" G__7625] (.compareTo ^java.time.DayOfWeek this7624 G__7625)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this7626 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7627] (.get this7626 java-time-temporal-TemporalField7627)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this7628 ^java.lang.Object java-lang-Object7629] (.equals this7628 java-lang-Object7629)))
