(ns cljc.java-time.day-of-week (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time DayOfWeek]))
(def saturday java.time.DayOfWeek/SATURDAY)
(def thursday java.time.DayOfWeek/THURSDAY)
(def friday java.time.DayOfWeek/FRIDAY)
(def wednesday java.time.DayOfWeek/WEDNESDAY)
(def sunday java.time.DayOfWeek/SUNDAY)
(def monday java.time.DayOfWeek/MONDAY)
(def tuesday java.time.DayOfWeek/TUESDAY)
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this4608 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4609] (.range this4608 java-time-temporal-TemporalField4609)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.DayOfWeek/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String4610] (java.time.DayOfWeek/valueOf java-lang-String4610)) (^java.lang.Enum [^java.lang.Class java-lang-Class4611 ^java.lang.String java-lang-String4612] (java.time.DayOfWeek/valueOf java-lang-Class4611 java-lang-String4612)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int4613] (java.time.DayOfWeek/of int4613)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this4614] (.ordinal this4614)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this4615 ^long long4616] (.plus this4615 long4616)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this4617 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4618] (.query this4617 java-time-temporal-TemporalQuery4618)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this4619] (.toString this4619)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this4620 ^long long4621] (.minus this4620 long4621)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this4622 ^java.time.format.TextStyle java-time-format-TextStyle4623 ^java.util.Locale java-util-Locale4624] (.getDisplayName this4622 java-time-format-TextStyle4623 java-util-Locale4624)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this4625] (.getValue this4625)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this4626] (.name this4626)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this4627 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4628] (.getLong this4627 java-time-temporal-TemporalField4628)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this4629] (.getDeclaringClass this4629)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4630] (java.time.DayOfWeek/from java-time-temporal-TemporalAccessor4630)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this4631 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4632] (.isSupported this4631 java-time-temporal-TemporalField4632)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this4633] (.hashCode this4633)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this4634 ^java.time.temporal.Temporal java-time-temporal-Temporal4635] (.adjustInto this4634 java-time-temporal-Temporal4635)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.DayOfWeek this4636 ^java.lang.Enum java-lang-Enum4637] (.compareTo this4636 java-lang-Enum4637)))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this4638 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4639] (.get this4638 java-time-temporal-TemporalField4639)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this4640 ^java.lang.Object java-lang-Object4641] (.equals this4640 java-lang-Object4641)))
