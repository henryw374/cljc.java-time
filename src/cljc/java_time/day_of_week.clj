(ns cljc.java-time.day-of-week (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time DayOfWeek]))
(def saturday java.time.DayOfWeek/SATURDAY)
(def thursday java.time.DayOfWeek/THURSDAY)
(def friday java.time.DayOfWeek/FRIDAY)
(def wednesday java.time.DayOfWeek/WEDNESDAY)
(def sunday java.time.DayOfWeek/SUNDAY)
(def monday java.time.DayOfWeek/MONDAY)
(def tuesday java.time.DayOfWeek/TUESDAY)
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this14504 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14505] (.range this14504 java-time-temporal-TemporalField14505)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.DayOfWeek/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String14506] (java.time.DayOfWeek/valueOf java-lang-String14506)) (^java.lang.Enum [^java.lang.Class java-lang-Class14507 ^java.lang.String java-lang-String14508] (java.time.DayOfWeek/valueOf java-lang-Class14507 java-lang-String14508)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int14509] (java.time.DayOfWeek/of int14509)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this14510] (.ordinal this14510)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this14511 ^long long14512] (.plus this14511 long14512)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this14513 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery14514] (.query this14513 java-time-temporal-TemporalQuery14514)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this14515] (.toString this14515)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this14516 ^long long14517] (.minus this14516 long14517)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this14518 ^java.time.format.TextStyle java-time-format-TextStyle14519 ^java.util.Locale java-util-Locale14520] (.getDisplayName this14518 java-time-format-TextStyle14519 java-util-Locale14520)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this14521] (.getValue this14521)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this14522] (.name this14522)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this14523 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14524] (.getLong this14523 java-time-temporal-TemporalField14524)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this14525] (.getDeclaringClass this14525)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14526] (java.time.DayOfWeek/from java-time-temporal-TemporalAccessor14526)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this14527 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14528] (.isSupported this14527 java-time-temporal-TemporalField14528)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this14529] (.hashCode this14529)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this14530 ^java.time.temporal.Temporal java-time-temporal-Temporal14531] (.adjustInto this14530 java-time-temporal-Temporal14531)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.DayOfWeek this14532 ^java.lang.Enum java-lang-Enum14533] (.compareTo this14532 java-lang-Enum14533)))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this14534 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14535] (.get this14534 java-time-temporal-TemporalField14535)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this14536 ^java.lang.Object java-lang-Object14537] (.equals this14536 java-lang-Object14537)))
