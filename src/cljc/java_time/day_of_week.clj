(ns cljc.java-time.day-of-week (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time DayOfWeek]))
(def saturday (. java.time.DayOfWeek -SATURDAY))
(def thursday (. java.time.DayOfWeek -THURSDAY))
(def friday (. java.time.DayOfWeek -FRIDAY))
(def wednesday (. java.time.DayOfWeek -WEDNESDAY))
(def sunday (. java.time.DayOfWeek -SUNDAY))
(def monday (. java.time.DayOfWeek -MONDAY))
(def tuesday (. java.time.DayOfWeek -TUESDAY))
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this6903 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6904] (.range this6903 java-time-temporal-TemporalField6904)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.DayOfWeek values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String6905] (. java.time.DayOfWeek valueOf java-lang-String6905)) (^java.lang.Enum [^java.lang.Class java-lang-Class6906 ^java.lang.String java-lang-String6907] (. java.time.DayOfWeek valueOf java-lang-Class6906 java-lang-String6907)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int6908] (. java.time.DayOfWeek of int6908)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this6909] (.ordinal this6909)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this6910 ^long long6911] (.plus this6910 long6911)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this6912 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery6913] (.query this6912 java-time-temporal-TemporalQuery6913)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this6914] (.toString this6914)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this6915 ^long long6916] (.minus this6915 long6916)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this6917 ^java.time.format.TextStyle java-time-format-TextStyle6918 ^java.util.Locale java-util-Locale6919] (.getDisplayName this6917 java-time-format-TextStyle6918 java-util-Locale6919)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this6920] (.getValue this6920)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this6921] (.name this6921)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this6922 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6923] (.getLong this6922 java-time-temporal-TemporalField6923)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this6924] (.getDeclaringClass this6924)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor6925] (. java.time.DayOfWeek from java-time-temporal-TemporalAccessor6925)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this6926 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6927] (.isSupported this6926 java-time-temporal-TemporalField6927)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this6928] (.hashCode this6928)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this6929 ^java.time.temporal.Temporal java-time-temporal-Temporal6930] (.adjustInto this6929 java-time-temporal-Temporal6930)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [this6931 G__6932] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__6932)) (clojure.core/let [G__6932 ^"java.lang.Object" G__6932] (.compareTo ^java.time.DayOfWeek this6931 G__6932)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__6932)) (clojure.core/let [G__6932 ^"java.lang.Enum" G__6932] (.compareTo ^java.time.DayOfWeek this6931 G__6932)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this6933 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6934] (.get this6933 java-time-temporal-TemporalField6934)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this6935 ^java.lang.Object java-lang-Object6936] (.equals this6935 java-lang-Object6936)))
