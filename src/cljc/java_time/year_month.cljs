(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [YearMonth]]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this5400] (.lengthOfYear this5400)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.YearMonth this5401 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5402] (.range this5401 java-time-temporal-TemporalField5402)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^boolean [^js/JSJoda.YearMonth this5403 ^int int5404] (.isValidDay this5403 int5404)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["int" "java.time.Month"]))} (^js/JSJoda.YearMonth [G__5406 G__5407] (js-invoke java.time.YearMonth "of" G__5406 G__5407)))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5408 ^int int5409] (.withMonth this5408 int5409)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.YearMonth this5410 ^int int5411] (.atDay this5410 int5411)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this5412] (.year this5412)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5413 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount5414] (.plus this5413 java-time-temporal-TemporalAmount5414)) (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5415 ^long long5416 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5417] (.plus this5415 long5416 java-time-temporal-TemporalUnit5417)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this5418] (.isLeapYear this5418)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.YearMonth this5419 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery5420] (.query this5419 java-time-temporal-TemporalQuery5420)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^js/JSJoda.YearMonth this5421] (.toString this5421)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5422 ^long long5423] (.plusMonths this5422 long5423)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this5424 ^js/JSJoda.YearMonth java-time-YearMonth5425] (.isBefore this5424 java-time-YearMonth5425)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5426 ^long long5427] (.minusMonths this5426 long5427)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5428 ^long long5429 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5430] (.minus this5428 long5429 java-time-temporal-TemporalUnit5430)) (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5431 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount5432] (.minus this5431 java-time-temporal-TemporalAmount5432)))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.YearMonth this5433 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5434] (.getLong this5433 java-time-temporal-TemporalField5434)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5435 ^int int5436] (.withYear this5435 int5436)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^js/JSJoda.LocalDate [^js/JSJoda.YearMonth this5437] (.atEndOfMonth this5437)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this5438] (.lengthOfMonth this5438)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.YearMonth this5439 ^js/JSJoda.Temporal java-time-temporal-Temporal5440 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5441] (.until this5439 java-time-temporal-Temporal5440 java-time-temporal-TemporalUnit5441)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.YearMonth [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5442] (js-invoke java.time.YearMonth "from" java-time-temporal-TemporalAccessor5442)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this5443 ^js/JSJoda.YearMonth java-time-YearMonth5444] (.isAfter this5443 java-time-YearMonth5444)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^boolean [this5445 G__5446] (.isSupported ^js/JSJoda.YearMonth this5445 G__5446)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5447 ^long long5448] (.minusYears this5447 long5448)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.YearMonth [^java.lang.CharSequence java-lang-CharSequence5449 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter5450] (js-invoke java.time.YearMonth "parse" java-lang-CharSequence5449 java-time-format-DateTimeFormatter5450)) (^js/JSJoda.YearMonth [^java.lang.CharSequence java-lang-CharSequence5451] (js-invoke java.time.YearMonth "parse" java-lang-CharSequence5451)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this5452] (.hashCode this5452)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.YearMonth this5453 ^js/JSJoda.Temporal java-time-temporal-Temporal5454] (.adjustInto this5453 java-time-temporal-Temporal5454)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5455 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster5456] (.with this5455 java-time-temporal-TemporalAdjuster5456)) (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5457 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5458 ^long long5459] (.with this5457 java-time-temporal-TemporalField5458 long5459)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.YearMonth [] (js-invoke java.time.YearMonth "now")) (^js/JSJoda.YearMonth [G__5461] (js-invoke java.time.YearMonth "now" G__5461)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this5462] (.monthValue this5462)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this5463 ^js/JSJoda.YearMonth java-time-YearMonth5464] (.compareTo this5463 java-time-YearMonth5464)))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^js/JSJoda.Month [^js/JSJoda.YearMonth this5465] (.month this5465)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.YearMonth this5466 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5467] (.get this5466 java-time-temporal-TemporalField5467)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^boolean [^js/JSJoda.YearMonth this5468 ^java.lang.Object java-lang-Object5469] (.equals this5468 java-lang-Object5469)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.YearMonth this5470 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter5471] (.format this5470 java-time-format-DateTimeFormatter5471)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5472 ^long long5473] (.plusYears this5472 long5473)))
