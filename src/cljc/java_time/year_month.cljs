(ns cljc.java-time.year-month (:require [java.time :refer [YearMonth]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this50613] (.lengthOfYear this50613)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this50614 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50615] (.range this50614 java-time-temporal-TemporalField50615)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this50616 ^java.lang.Integer int50617] (.isValidDay this50616 int50617)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^java.time.YearMonth [G__50619 G__50620] (. java.time.YearMonth of G__50619 G__50620)))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this50621 ^java.lang.Integer int50622] (.withMonth this50621 int50622)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this50623 ^java.lang.Integer int50624] (.atDay this50623 int50624)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this50625] (.year this50625)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this50626 G__50627] (.plus ^java.time.YearMonth this50626 G__50627)) (^java.lang.Object [this50628 G__50629 G__50630] (.plus ^java.time.YearMonth this50628 G__50629 G__50630)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this50631] (.isLeapYear this50631)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this50632 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery50633] (.query this50632 java-time-temporal-TemporalQuery50633)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this50634] (.toString this50634)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this50635 ^long long50636] (.plusMonths this50635 long50636)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this50637 ^java.time.YearMonth java-time-YearMonth50638] (.isBefore this50637 java-time-YearMonth50638)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this50639 ^long long50640] (.minusMonths this50639 long50640)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this50641 G__50642] (.minus ^java.time.YearMonth this50641 G__50642)) (^java.lang.Object [this50643 G__50644 G__50645] (.minus ^java.time.YearMonth this50643 G__50644 G__50645)))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this50646 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50647] (.getLong this50646 java-time-temporal-TemporalField50647)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this50648 ^java.lang.Integer int50649] (.withYear this50648 int50649)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this50650] (.atEndOfMonth this50650)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this50651] (.lengthOfMonth this50651)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this50652 ^java.time.temporal.Temporal java-time-temporal-Temporal50653 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit50654] (.until this50652 java-time-temporal-Temporal50653 java-time-temporal-TemporalUnit50654)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor50655] (. java.time.YearMonth from java-time-temporal-TemporalAccessor50655)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this50656 ^java.time.YearMonth java-time-YearMonth50657] (.isAfter this50656 java-time-YearMonth50657)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this50658 G__50659] (.isSupported ^java.time.YearMonth this50658 G__50659)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this50660 ^long long50661] (.minusYears this50660 long50661)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence50662] (. java.time.YearMonth parse java-lang-CharSequence50662)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence50663 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter50664] (. java.time.YearMonth parse java-lang-CharSequence50663 java-time-format-DateTimeFormatter50664)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this50665] (.hashCode this50665)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this50666 ^java.time.temporal.Temporal java-time-temporal-Temporal50667] (.adjustInto this50666 java-time-temporal-Temporal50667)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this50668 G__50669 G__50670] (.with ^java.time.YearMonth this50668 G__50669 G__50670)) (^java.lang.Object [this50671 G__50672] (.with ^java.time.YearMonth this50671 G__50672)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.YearMonth [] (. java.time.YearMonth now)) (^java.time.YearMonth [G__50674] (. java.time.YearMonth now G__50674)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this50675] (.monthValue this50675)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"] ["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Integer [this50676 G__50677] (.compareTo ^java.time.YearMonth this50676 G__50677)))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this50678] (.month this50678)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this50679 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50680] (.get this50679 java-time-temporal-TemporalField50680)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this50681 ^java.lang.Object java-lang-Object50682] (.equals this50681 java-lang-Object50682)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this50683 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter50684] (.format this50683 java-time-format-DateTimeFormatter50684)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this50685 ^long long50686] (.plusYears this50685 long50686)))
