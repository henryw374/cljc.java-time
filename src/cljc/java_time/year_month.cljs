(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [YearMonth]]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this5399] (.lengthOfYear this5399)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.YearMonth this5400 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5401] (.range this5400 java-time-temporal-TemporalField5401)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^boolean [^js/JSJoda.YearMonth this5402 ^int int5403] (.isValidDay this5402 int5403)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^js/JSJoda.YearMonth [G__5405 G__5406] (js-invoke java.time.YearMonth "of" G__5405 G__5406)))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5407 ^int int5408] (.withMonth this5407 int5408)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.YearMonth this5409 ^int int5410] (.atDay this5409 int5410)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this5411] (.year this5411)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5412 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount5413] (.plus this5412 java-time-temporal-TemporalAmount5413)) (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5414 ^long long5415 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5416] (.plus this5414 long5415 java-time-temporal-TemporalUnit5416)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this5417] (.isLeapYear this5417)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.YearMonth this5418 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery5419] (.query this5418 java-time-temporal-TemporalQuery5419)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^js/JSJoda.YearMonth this5420] (.toString this5420)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5421 ^long long5422] (.plusMonths this5421 long5422)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this5423 ^js/JSJoda.YearMonth java-time-YearMonth5424] (.isBefore this5423 java-time-YearMonth5424)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5425 ^long long5426] (.minusMonths this5425 long5426)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5427 ^long long5428 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5429] (.minus this5427 long5428 java-time-temporal-TemporalUnit5429)) (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5430 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount5431] (.minus this5430 java-time-temporal-TemporalAmount5431)))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.YearMonth this5432 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5433] (.getLong this5432 java-time-temporal-TemporalField5433)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5434 ^int int5435] (.withYear this5434 int5435)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^js/JSJoda.LocalDate [^js/JSJoda.YearMonth this5436] (.atEndOfMonth this5436)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this5437] (.lengthOfMonth this5437)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.YearMonth this5438 ^js/JSJoda.Temporal java-time-temporal-Temporal5439 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5440] (.until this5438 java-time-temporal-Temporal5439 java-time-temporal-TemporalUnit5440)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.YearMonth [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5441] (js-invoke java.time.YearMonth "from" java-time-temporal-TemporalAccessor5441)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this5442 ^js/JSJoda.YearMonth java-time-YearMonth5443] (.isAfter this5442 java-time-YearMonth5443)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^boolean [this5444 G__5445] (.isSupported ^js/JSJoda.YearMonth this5444 G__5445)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5446 ^long long5447] (.minusYears this5446 long5447)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.YearMonth [^java.lang.CharSequence java-lang-CharSequence5448] (js-invoke java.time.YearMonth "parse" java-lang-CharSequence5448)) (^js/JSJoda.YearMonth [^java.lang.CharSequence java-lang-CharSequence5449 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter5450] (js-invoke java.time.YearMonth "parse" java-lang-CharSequence5449 java-time-format-DateTimeFormatter5450)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this5451] (.hashCode this5451)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.YearMonth this5452 ^js/JSJoda.Temporal java-time-temporal-Temporal5453] (.adjustInto this5452 java-time-temporal-Temporal5453)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5454 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5455 ^long long5456] (.with this5454 java-time-temporal-TemporalField5455 long5456)) (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5457 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster5458] (.with this5457 java-time-temporal-TemporalAdjuster5458)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^js/JSJoda.YearMonth [G__5460] (js-invoke java.time.YearMonth "now" G__5460)) (^js/JSJoda.YearMonth [] (js-invoke java.time.YearMonth "now")))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this5461] (.monthValue this5461)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this5462 ^js/JSJoda.YearMonth java-time-YearMonth5463] (.compareTo this5462 java-time-YearMonth5463)))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^js/JSJoda.Month [^js/JSJoda.YearMonth this5464] (.month this5464)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.YearMonth this5465 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5466] (.get this5465 java-time-temporal-TemporalField5466)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^boolean [^js/JSJoda.YearMonth this5467 ^java.lang.Object java-lang-Object5468] (.equals this5467 java-lang-Object5468)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.YearMonth this5469 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter5470] (.format this5469 java-time-format-DateTimeFormatter5470)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this5471 ^long long5472] (.plusYears this5471 long5472)))
