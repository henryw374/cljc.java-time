(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [YearMonth]]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this12621] (.lengthOfYear this12621)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this12622 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12623] (.range this12622 java-time-temporal-TemporalField12623)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this12624 ^java.lang.Integer int12625] (.isValidDay this12624 int12625)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^java.time.YearMonth [G__12627 G__12628] (. java.time.YearMonth of G__12627 G__12628)))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this12629 ^java.lang.Integer int12630] (.withMonth this12629 int12630)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this12631 ^java.lang.Integer int12632] (.atDay this12631 int12632)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this12633] (.year this12633)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12634 G__12635 G__12636] (.plus ^java.time.YearMonth this12634 G__12635 G__12636)) (^java.lang.Object [this12637 G__12638] (.plus ^java.time.YearMonth this12637 G__12638)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this12639] (.isLeapYear this12639)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this12640 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12641] (.query this12640 java-time-temporal-TemporalQuery12641)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this12642] (.toString this12642)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this12643 ^long long12644] (.plusMonths this12643 long12644)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this12645 ^java.time.YearMonth java-time-YearMonth12646] (.isBefore this12645 java-time-YearMonth12646)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this12647 ^long long12648] (.minusMonths this12647 long12648)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12649 G__12650] (.minus ^java.time.YearMonth this12649 G__12650)) (^java.lang.Object [this12651 G__12652 G__12653] (.minus ^java.time.YearMonth this12651 G__12652 G__12653)))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this12654 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12655] (.getLong this12654 java-time-temporal-TemporalField12655)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this12656 ^java.lang.Integer int12657] (.withYear this12656 int12657)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this12658] (.atEndOfMonth this12658)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this12659] (.lengthOfMonth this12659)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this12660 ^java.time.temporal.Temporal java-time-temporal-Temporal12661 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12662] (.until this12660 java-time-temporal-Temporal12661 java-time-temporal-TemporalUnit12662)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12663] (. java.time.YearMonth from java-time-temporal-TemporalAccessor12663)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this12664 ^java.time.YearMonth java-time-YearMonth12665] (.isAfter this12664 java-time-YearMonth12665)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this12666 G__12667] (.isSupported ^java.time.YearMonth this12666 G__12667)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this12668 ^long long12669] (.minusYears this12668 long12669)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence12670] (. java.time.YearMonth parse java-lang-CharSequence12670)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence12671 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12672] (. java.time.YearMonth parse java-lang-CharSequence12671 java-time-format-DateTimeFormatter12672)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this12673] (.hashCode this12673)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this12674 ^java.time.temporal.Temporal java-time-temporal-Temporal12675] (.adjustInto this12674 java-time-temporal-Temporal12675)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this12676 G__12677 G__12678] (.with ^java.time.YearMonth this12676 G__12677 G__12678)) (^java.lang.Object [this12679 G__12680] (.with ^java.time.YearMonth this12679 G__12680)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.YearMonth [G__12682] (. java.time.YearMonth now G__12682)) (^java.time.YearMonth [] (. java.time.YearMonth now)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this12683] (.monthValue this12683)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"] ["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Integer [this12684 G__12685] (.compareTo ^java.time.YearMonth this12684 G__12685)))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this12686] (.month this12686)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this12687 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12688] (.get this12687 java-time-temporal-TemporalField12688)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this12689 ^java.lang.Object java-lang-Object12690] (.equals this12689 java-lang-Object12690)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this12691 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12692] (.format this12691 java-time-format-DateTimeFormatter12692)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this12693 ^long long12694] (.plusYears this12693 long12694)))
