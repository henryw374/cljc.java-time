(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [YearMonth]]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this14917] (.lengthOfYear this14917)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.YearMonth this14918 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14919] (.range this14918 java-time-temporal-TemporalField14919)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^boolean [^js/JSJoda.YearMonth this14920 ^int int14921] (.isValidDay this14920 int14921)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["int" "java.time.Month"]))} (^js/JSJoda.YearMonth [G__14923 G__14924] (js-invoke java.time.YearMonth "of" G__14923 G__14924)))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this14925 ^int int14926] (.withMonth this14925 int14926)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.YearMonth this14927 ^int int14928] (.atDay this14927 int14928)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this14929] (.year this14929)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this14930 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount14931] (.plus this14930 java-time-temporal-TemporalAmount14931)) (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this14932 ^long long14933 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14934] (.plus this14932 long14933 java-time-temporal-TemporalUnit14934)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this14935] (.isLeapYear this14935)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.YearMonth this14936 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery14937] (.query this14936 java-time-temporal-TemporalQuery14937)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^js/JSJoda.YearMonth this14938] (.toString this14938)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this14939 ^long long14940] (.plusMonths this14939 long14940)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this14941 ^js/JSJoda.YearMonth java-time-YearMonth14942] (.isBefore this14941 java-time-YearMonth14942)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this14943 ^long long14944] (.minusMonths this14943 long14944)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this14945 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount14946] (.minus this14945 java-time-temporal-TemporalAmount14946)) (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this14947 ^long long14948 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14949] (.minus this14947 long14948 java-time-temporal-TemporalUnit14949)))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.YearMonth this14950 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14951] (.getLong this14950 java-time-temporal-TemporalField14951)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this14952 ^int int14953] (.withYear this14952 int14953)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^js/JSJoda.LocalDate [^js/JSJoda.YearMonth this14954] (.atEndOfMonth this14954)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this14955] (.lengthOfMonth this14955)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.YearMonth this14956 ^js/JSJoda.Temporal java-time-temporal-Temporal14957 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14958] (.until this14956 java-time-temporal-Temporal14957 java-time-temporal-TemporalUnit14958)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.YearMonth [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor14959] (js-invoke java.time.YearMonth "from" java-time-temporal-TemporalAccessor14959)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this14960 ^js/JSJoda.YearMonth java-time-YearMonth14961] (.isAfter this14960 java-time-YearMonth14961)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^boolean [this14962 G__14963] (.isSupported ^js/JSJoda.YearMonth this14962 G__14963)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this14964 ^long long14965] (.minusYears this14964 long14965)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.YearMonth [^java.lang.CharSequence java-lang-CharSequence14966] (js-invoke java.time.YearMonth "parse" java-lang-CharSequence14966)) (^js/JSJoda.YearMonth [^java.lang.CharSequence java-lang-CharSequence14967 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter14968] (js-invoke java.time.YearMonth "parse" java-lang-CharSequence14967 java-time-format-DateTimeFormatter14968)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this14969] (.hashCode this14969)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.YearMonth this14970 ^js/JSJoda.Temporal java-time-temporal-Temporal14971] (.adjustInto this14970 java-time-temporal-Temporal14971)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this14972 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster14973] (.with this14972 java-time-temporal-TemporalAdjuster14973)) (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this14974 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14975 ^long long14976] (.with this14974 java-time-temporal-TemporalField14975 long14976)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.YearMonth [] (js-invoke java.time.YearMonth "now")) (^js/JSJoda.YearMonth [G__14978] (js-invoke java.time.YearMonth "now" G__14978)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this14979] (.monthValue this14979)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this14980 ^js/JSJoda.YearMonth java-time-YearMonth14981] (.compareTo this14980 java-time-YearMonth14981)))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^js/JSJoda.Month [^js/JSJoda.YearMonth this14982] (.month this14982)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.YearMonth this14983 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14984] (.get this14983 java-time-temporal-TemporalField14984)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^boolean [^js/JSJoda.YearMonth this14985 ^java.lang.Object java-lang-Object14986] (.equals this14985 java-lang-Object14986)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.YearMonth this14987 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter14988] (.format this14987 java-time-format-DateTimeFormatter14988)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this14989 ^long long14990] (.plusYears this14989 long14990)))
