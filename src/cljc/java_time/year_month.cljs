(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [YearMonth]]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this8388] (.lengthOfYear this8388)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.YearMonth this8389 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8390] (.range this8389 java-time-temporal-TemporalField8390)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^boolean [^js/JSJoda.YearMonth this8391 ^int int8392] (.isValidDay this8391 int8392)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^js/JSJoda.YearMonth [G__8394 G__8395] (js-invoke java.time.YearMonth "of" G__8394 G__8395)))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this8396 ^int int8397] (.withMonth this8396 int8397)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.YearMonth this8398 ^int int8399] (.atDay this8398 int8399)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this8400] (.year this8400)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this8401 G__8402] (.plus ^js/JSJoda.YearMonth this8401 G__8402)) (^java.lang.Object [this8403 G__8404 G__8405] (.plus ^js/JSJoda.YearMonth this8403 G__8404 G__8405)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this8406] (.isLeapYear this8406)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.YearMonth this8407 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery8408] (.query this8407 java-time-temporal-TemporalQuery8408)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^js/JSJoda.YearMonth this8409] (.toString this8409)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this8410 ^long long8411] (.plusMonths this8410 long8411)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this8412 ^js/JSJoda.YearMonth java-time-YearMonth8413] (.isBefore this8412 java-time-YearMonth8413)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this8414 ^long long8415] (.minusMonths this8414 long8415)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this8416 G__8417] (.minus ^js/JSJoda.YearMonth this8416 G__8417)) (^java.lang.Object [this8418 G__8419 G__8420] (.minus ^js/JSJoda.YearMonth this8418 G__8419 G__8420)))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.YearMonth this8421 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8422] (.getLong this8421 java-time-temporal-TemporalField8422)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this8423 ^int int8424] (.withYear this8423 int8424)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^js/JSJoda.LocalDate [^js/JSJoda.YearMonth this8425] (.atEndOfMonth this8425)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this8426] (.lengthOfMonth this8426)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.YearMonth this8427 ^js/JSJoda.Temporal java-time-temporal-Temporal8428 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit8429] (.until this8427 java-time-temporal-Temporal8428 java-time-temporal-TemporalUnit8429)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.YearMonth [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8430] (js-invoke java.time.YearMonth "from" java-time-temporal-TemporalAccessor8430)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this8431 ^js/JSJoda.YearMonth java-time-YearMonth8432] (.isAfter this8431 java-time-YearMonth8432)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^boolean [this8433 G__8434] (.isSupported ^js/JSJoda.YearMonth this8433 G__8434)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this8435 ^long long8436] (.minusYears this8435 long8436)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.YearMonth [^java.lang.CharSequence java-lang-CharSequence8437] (js-invoke java.time.YearMonth "parse" java-lang-CharSequence8437)) (^js/JSJoda.YearMonth [^java.lang.CharSequence java-lang-CharSequence8438 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter8439] (js-invoke java.time.YearMonth "parse" java-lang-CharSequence8438 java-time-format-DateTimeFormatter8439)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this8440] (.hashCode this8440)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.YearMonth this8441 ^js/JSJoda.Temporal java-time-temporal-Temporal8442] (.adjustInto this8441 java-time-temporal-Temporal8442)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this8443 G__8444 G__8445] (.with ^js/JSJoda.YearMonth this8443 G__8444 G__8445)) (^java.lang.Object [this8446 G__8447] (.with ^js/JSJoda.YearMonth this8446 G__8447)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.YearMonth [] (js-invoke java.time.YearMonth "now")) (^js/JSJoda.YearMonth [G__8449] (js-invoke java.time.YearMonth "now" G__8449)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this8450] (.monthValue this8450)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"] ["java.time.YearMonth" "java.lang.Object"]))} (^int [this8451 G__8452] (.compareTo ^js/JSJoda.YearMonth this8451 G__8452)))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^js/JSJoda.Month [^js/JSJoda.YearMonth this8453] (.month this8453)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.YearMonth this8454 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8455] (.get this8454 java-time-temporal-TemporalField8455)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^boolean [^js/JSJoda.YearMonth this8456 ^java.lang.Object java-lang-Object8457] (.equals this8456 java-lang-Object8457)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.YearMonth this8458 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter8459] (.format this8458 java-time-format-DateTimeFormatter8459)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this8460 ^long long8461] (.plusYears this8460 long8461)))
