(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [YearMonth]]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this61104] (.lengthOfYear this61104)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.YearMonth this61105 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61106] (.range this61105 java-time-temporal-TemporalField61106)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^boolean [^js/JSJoda.YearMonth this61107 ^int int61108] (.isValidDay this61107 int61108)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^js/JSJoda.YearMonth [G__61110 G__61111] (js-invoke java.time.YearMonth "of" G__61110 G__61111)))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this61112 ^int int61113] (.withMonth this61112 int61113)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.YearMonth this61114 ^int int61115] (.atDay this61114 int61115)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this61116] (.year this61116)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this61117 G__61118 G__61119] (.plus ^js/JSJoda.YearMonth this61117 G__61118 G__61119)) (^java.lang.Object [this61120 G__61121] (.plus ^js/JSJoda.YearMonth this61120 G__61121)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this61122] (.isLeapYear this61122)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.YearMonth this61123 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery61124] (.query this61123 java-time-temporal-TemporalQuery61124)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^js/JSJoda.YearMonth this61125] (.toString this61125)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this61126 ^long long61127] (.plusMonths this61126 long61127)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this61128 ^js/JSJoda.YearMonth java-time-YearMonth61129] (.isBefore this61128 java-time-YearMonth61129)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this61130 ^long long61131] (.minusMonths this61130 long61131)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this61132 G__61133] (.minus ^js/JSJoda.YearMonth this61132 G__61133)) (^java.lang.Object [this61134 G__61135 G__61136] (.minus ^js/JSJoda.YearMonth this61134 G__61135 G__61136)))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.YearMonth this61137 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61138] (.getLong this61137 java-time-temporal-TemporalField61138)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this61139 ^int int61140] (.withYear this61139 int61140)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^js/JSJoda.LocalDate [^js/JSJoda.YearMonth this61141] (.atEndOfMonth this61141)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this61142] (.lengthOfMonth this61142)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.YearMonth this61143 ^js/JSJoda.Temporal java-time-temporal-Temporal61144 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit61145] (.until this61143 java-time-temporal-Temporal61144 java-time-temporal-TemporalUnit61145)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.YearMonth [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor61146] (js-invoke java.time.YearMonth "from" java-time-temporal-TemporalAccessor61146)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this61147 ^js/JSJoda.YearMonth java-time-YearMonth61148] (.isAfter this61147 java-time-YearMonth61148)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^boolean [this61149 G__61150] (.isSupported ^js/JSJoda.YearMonth this61149 G__61150)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this61151 ^long long61152] (.minusYears this61151 long61152)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.YearMonth [^java.lang.CharSequence java-lang-CharSequence61153] (js-invoke java.time.YearMonth "parse" java-lang-CharSequence61153)) (^js/JSJoda.YearMonth [^java.lang.CharSequence java-lang-CharSequence61154 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter61155] (js-invoke java.time.YearMonth "parse" java-lang-CharSequence61154 java-time-format-DateTimeFormatter61155)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this61156] (.hashCode this61156)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.YearMonth this61157 ^js/JSJoda.Temporal java-time-temporal-Temporal61158] (.adjustInto this61157 java-time-temporal-Temporal61158)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this61159 G__61160 G__61161] (.with ^js/JSJoda.YearMonth this61159 G__61160 G__61161)) (^java.lang.Object [this61162 G__61163] (.with ^js/JSJoda.YearMonth this61162 G__61163)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^js/JSJoda.YearMonth [G__61165] (js-invoke java.time.YearMonth "now" G__61165)) (^js/JSJoda.YearMonth [] (js-invoke java.time.YearMonth "now")))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this61166] (.monthValue this61166)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"] ["java.time.YearMonth" "java.lang.Object"]))} (^int [this61167 G__61168] (.compareTo ^js/JSJoda.YearMonth this61167 G__61168)))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^js/JSJoda.Month [^js/JSJoda.YearMonth this61169] (.month this61169)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.YearMonth this61170 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61171] (.get this61170 java-time-temporal-TemporalField61171)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^boolean [^js/JSJoda.YearMonth this61172 ^java.lang.Object java-lang-Object61173] (.equals this61172 java-lang-Object61173)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.YearMonth this61174 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter61175] (.format this61174 java-time-format-DateTimeFormatter61175)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this61176 ^long long61177] (.plusYears this61176 long61177)))
