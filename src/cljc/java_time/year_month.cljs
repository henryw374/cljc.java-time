(ns cljc.java-time.year-month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [YearMonth]]))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this8440] (.lengthOfYear this8440)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.YearMonth this8441 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8442] (.range this8441 java-time-temporal-TemporalField8442)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^boolean [^js/JSJoda.YearMonth this8443 ^int int8444] (.isValidDay this8443 int8444)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^js/JSJoda.YearMonth [G__8446 G__8447] (js-invoke java.time.YearMonth "of" G__8446 G__8447)))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this8448 ^int int8449] (.withMonth this8448 int8449)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.YearMonth this8450 ^int int8451] (.atDay this8450 int8451)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this8452] (.year this8452)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this8453 G__8454 G__8455] (.plus ^js/JSJoda.YearMonth this8453 G__8454 G__8455)) (^java.lang.Object [this8456 G__8457] (.plus ^js/JSJoda.YearMonth this8456 G__8457)))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this8458] (.isLeapYear this8458)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.YearMonth this8459 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery8460] (.query this8459 java-time-temporal-TemporalQuery8460)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^js/JSJoda.YearMonth this8461] (.toString this8461)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this8462 ^long long8463] (.plusMonths this8462 long8463)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this8464 ^js/JSJoda.YearMonth java-time-YearMonth8465] (.isBefore this8464 java-time-YearMonth8465)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this8466 ^long long8467] (.minusMonths this8466 long8467)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this8468 G__8469] (.minus ^js/JSJoda.YearMonth this8468 G__8469)) (^java.lang.Object [this8470 G__8471 G__8472] (.minus ^js/JSJoda.YearMonth this8470 G__8471 G__8472)))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.YearMonth this8473 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8474] (.getLong this8473 java-time-temporal-TemporalField8474)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this8475 ^int int8476] (.withYear this8475 int8476)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^js/JSJoda.LocalDate [^js/JSJoda.YearMonth this8477] (.atEndOfMonth this8477)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this8478] (.lengthOfMonth this8478)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.YearMonth this8479 ^js/JSJoda.Temporal java-time-temporal-Temporal8480 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit8481] (.until this8479 java-time-temporal-Temporal8480 java-time-temporal-TemporalUnit8481)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.YearMonth [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8482] (js-invoke java.time.YearMonth "from" java-time-temporal-TemporalAccessor8482)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^boolean [^js/JSJoda.YearMonth this8483 ^js/JSJoda.YearMonth java-time-YearMonth8484] (.isAfter this8483 java-time-YearMonth8484)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^boolean [this8485 G__8486] (.isSupported ^js/JSJoda.YearMonth this8485 G__8486)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this8487 ^long long8488] (.minusYears this8487 long8488)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.YearMonth [^java.lang.CharSequence java-lang-CharSequence8489 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter8490] (js-invoke java.time.YearMonth "parse" java-lang-CharSequence8489 java-time-format-DateTimeFormatter8490)) (^js/JSJoda.YearMonth [^java.lang.CharSequence java-lang-CharSequence8491] (js-invoke java.time.YearMonth "parse" java-lang-CharSequence8491)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this8492] (.hashCode this8492)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.YearMonth this8493 ^js/JSJoda.Temporal java-time-temporal-Temporal8494] (.adjustInto this8493 java-time-temporal-Temporal8494)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this8495 G__8496 G__8497] (.with ^js/JSJoda.YearMonth this8495 G__8496 G__8497)) (^java.lang.Object [this8498 G__8499] (.with ^js/JSJoda.YearMonth this8498 G__8499)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^js/JSJoda.YearMonth [G__8501] (js-invoke java.time.YearMonth "now" G__8501)) (^js/JSJoda.YearMonth [] (js-invoke java.time.YearMonth "now")))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^int [^js/JSJoda.YearMonth this8502] (.monthValue this8502)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"] ["java.time.YearMonth" "java.lang.Object"]))} (^int [this8503 G__8504] (.compareTo ^js/JSJoda.YearMonth this8503 G__8504)))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^js/JSJoda.Month [^js/JSJoda.YearMonth this8505] (.month this8505)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.YearMonth this8506 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8507] (.get this8506 java-time-temporal-TemporalField8507)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^boolean [^js/JSJoda.YearMonth this8508 ^java.lang.Object java-lang-Object8509] (.equals this8508 java-lang-Object8509)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.YearMonth this8510 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter8511] (.format this8510 java-time-format-DateTimeFormatter8511)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^js/JSJoda.YearMonth [^js/JSJoda.YearMonth this8512 ^long long8513] (.plusYears this8512 long8513)))
