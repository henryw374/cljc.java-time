(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalTime]))
(def max java.time.LocalTime/MAX)
(def noon java.time.LocalTime/NOON)
(def midnight java.time.LocalTime/MIDNIGHT)
(def min java.time.LocalTime/MIN)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this7688 ^long long7689] (.minusMinutes this7688 long7689)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalTime [^java.time.LocalTime this7690 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7691] (.truncatedTo this7690 java-time-temporal-TemporalUnit7691)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalTime this7692 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7693] (.range this7692 java-time-temporal-TemporalField7693)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this7694] (.getHour this7694)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime this7695 ^java.time.ZoneOffset java-time-ZoneOffset7696] (.atOffset this7695 java-time-ZoneOffset7696)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this7697 ^long long7698] (.minusHours this7697 long7698)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["int" "int" "int" "int"] ["int" "int" "int"]))} (^java.time.LocalTime [^java.lang.Integer int7699 ^java.lang.Integer int7700] (java.time.LocalTime/of int7699 int7700)) (^java.time.LocalTime [^java.lang.Integer int7701 ^java.lang.Integer int7702 ^java.lang.Integer int7703 ^java.lang.Integer int7704] (java.time.LocalTime/of int7701 int7702 int7703 int7704)) (^java.time.LocalTime [^java.lang.Integer int7705 ^java.lang.Integer int7706 ^java.lang.Integer int7707] (java.time.LocalTime/of int7705 int7706 int7707)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this7708] (.getNano this7708)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this7709 ^long long7710] (.minusSeconds this7709 long7710)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this7711] (.getSecond this7711)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this7712 ^long long7713] (.plusNanos this7712 long7713)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7714 G__7715] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7715)) (clojure.core/let [G__7715 ^"java.time.temporal.TemporalAmount" G__7715] (.plus ^java.time.LocalTime this7714 G__7715)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7715)) (clojure.core/let [G__7715 ^"java.time.temporal.TemporalAmount" G__7715] (.plus ^java.time.LocalTime this7714 G__7715)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this7716 G__7717 G__7718] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7717) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7718)) (clojure.core/let [G__7717 (clojure.core/long G__7717) G__7718 ^"java.time.temporal.TemporalUnit" G__7718] (.plus ^java.time.LocalTime this7716 G__7717 G__7718)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7717) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7718)) (clojure.core/let [G__7717 (clojure.core/long G__7717) G__7718 ^"java.time.temporal.TemporalUnit" G__7718] (.plus ^java.time.LocalTime this7716 G__7717 G__7718)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this7719 ^java.lang.Integer int7720] (.withHour this7719 int7720)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this7721 ^java.lang.Integer int7722] (.withMinute this7721 int7722)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this7723 ^long long7724] (.plusMinutes this7723 long7724)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalTime this7725 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7726] (.query this7725 java-time-temporal-TemporalQuery7726)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^java.time.LocalDateTime [^java.time.LocalTime this7727 ^java.time.LocalDate java-time-LocalDate7728] (.atDate this7727 java-time-LocalDate7728)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^java.time.LocalTime this7729] (.toString this7729)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this7730 ^java.time.LocalTime java-time-LocalTime7731] (.isBefore this7730 java-time-LocalTime7731)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this7732 G__7733 G__7734] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7733) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7734)) (clojure.core/let [G__7733 (clojure.core/long G__7733) G__7734 ^"java.time.temporal.TemporalUnit" G__7734] (.minus ^java.time.LocalTime this7732 G__7733 G__7734)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7733) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7734)) (clojure.core/let [G__7733 (clojure.core/long G__7733) G__7734 ^"java.time.temporal.TemporalUnit" G__7734] (.minus ^java.time.LocalTime this7732 G__7733 G__7734)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this7735 G__7736] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7736)) (clojure.core/let [G__7736 ^"java.time.temporal.TemporalAmount" G__7736] (.minus ^java.time.LocalTime this7735 G__7736)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7736)) (clojure.core/let [G__7736 ^"java.time.temporal.TemporalAmount" G__7736] (.minus ^java.time.LocalTime this7735 G__7736)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this7737 ^long long7738] (.plusHours this7737 long7738)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this7739] (.toSecondOfDay this7739)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalTime this7740 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7741] (.getLong this7740 java-time-temporal-TemporalField7741)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this7742 ^java.lang.Integer int7743] (.withNano this7742 int7743)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate" "java.time.ZoneOffset"]))} (^long [^java.time.LocalTime this7744 ^java.time.LocalDate java-time-LocalDate7745 ^java.time.ZoneOffset java-time-ZoneOffset7746] (.toEpochSecond this7744 java-time-LocalDate7745 java-time-ZoneOffset7746)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalTime this7747 ^java.time.temporal.Temporal java-time-temporal-Temporal7748 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7749] (.until this7747 java-time-temporal-Temporal7748 java-time-temporal-TemporalUnit7749)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long7750] (java.time.LocalTime/ofNanoOfDay long7750)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7751] (java.time.LocalTime/from java-time-temporal-TemporalAccessor7751)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this7752 ^java.time.LocalTime java-time-LocalTime7753] (.isAfter this7752 java-time-LocalTime7753)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this7754 ^long long7755] (.minusNanos this7754 long7755)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this7756 G__7757] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7757)) (clojure.core/let [G__7757 ^"java.time.temporal.TemporalUnit" G__7757] (.isSupported ^java.time.LocalTime this7756 G__7757)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7757)) (clojure.core/let [G__7757 ^"java.time.temporal.TemporalField" G__7757] (.isSupported ^java.time.LocalTime this7756 G__7757)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence7758 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter7759] (java.time.LocalTime/parse java-lang-CharSequence7758 java-time-format-DateTimeFormatter7759)) (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence7760] (java.time.LocalTime/parse java-lang-CharSequence7760)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this7761 ^java.lang.Integer int7762] (.withSecond this7761 int7762)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this7763] (.getMinute this7763)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this7764] (.hashCode this7764)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalTime this7765 ^java.time.temporal.Temporal java-time-temporal-Temporal7766] (.adjustInto this7765 java-time-temporal-Temporal7766)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this7767 G__7768 G__7769] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7768) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7769)) (clojure.core/let [G__7768 ^"java.time.temporal.TemporalField" G__7768 G__7769 (clojure.core/long G__7769)] (.with ^java.time.LocalTime this7767 G__7768 G__7769)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7768) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7769)) (clojure.core/let [G__7768 ^"java.time.temporal.TemporalField" G__7768 G__7769 (clojure.core/long G__7769)] (.with ^java.time.LocalTime this7767 G__7768 G__7769)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this7770 G__7771] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__7771)) (clojure.core/let [G__7771 ^"java.time.temporal.TemporalAdjuster" G__7771] (.with ^java.time.LocalTime this7770 G__7771)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__7771)) (clojure.core/let [G__7771 ^"java.time.temporal.TemporalAdjuster" G__7771] (.with ^java.time.LocalTime this7770 G__7771)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^java.time.LocalTime [G__7773] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__7773)) (clojure.core/let [G__7773 ^"java.time.ZoneId" G__7773] (java.time.LocalTime/now G__7773)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__7773)) (clojure.core/let [G__7773 ^"java.time.Clock" G__7773] (java.time.LocalTime/now G__7773)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalTime [] (java.time.LocalTime/now)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.lang.Object"] ["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Integer [this7774 G__7775] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7775)) (clojure.core/let [G__7775 ^"java.lang.Object" G__7775] (.compareTo ^java.time.LocalTime this7774 G__7775)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__7775)) (clojure.core/let [G__7775 ^"java.time.LocalTime" G__7775] (.compareTo ^java.time.LocalTime this7774 G__7775)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalTime [^java.time.Instant java-time-Instant7776 ^java.time.ZoneId java-time-ZoneId7777] (java.time.LocalTime/ofInstant java-time-Instant7776 java-time-ZoneId7777)))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^java.time.LocalTime this7778] (.toNanoOfDay this7778)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this7779 ^long long7780] (.plusSeconds this7779 long7780)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalTime this7781 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7782] (.get this7781 java-time-temporal-TemporalField7782)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long7783] (java.time.LocalTime/ofSecondOfDay long7783)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalTime this7784 ^java.lang.Object java-lang-Object7785] (.equals this7784 java-lang-Object7785)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalTime this7786 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter7787] (.format this7786 java-time-format-DateTimeFormatter7787)))
