(ns cljc.java-time.local-time (:import [java.time LocalTime]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def max java.time.LocalTime/MAX)
(def noon java.time.LocalTime/NOON)
(def midnight java.time.LocalTime/MIDNIGHT)
(def min java.time.LocalTime/MIN)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this49889 ^long long49890] (.minusMinutes this49889 long49890)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalTime [^java.time.LocalTime this49891 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49892] (.truncatedTo this49891 java-time-temporal-TemporalUnit49892)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalTime this49893 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49894] (.range this49893 java-time-temporal-TemporalField49894)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this49895] (.getHour this49895)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime this49896 ^java.time.ZoneOffset java-time-ZoneOffset49897] (.atOffset this49896 java-time-ZoneOffset49897)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this49898 ^long long49899] (.minusHours this49898 long49899)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["int" "int" "int"] ["int" "int" "int" "int"]))} (^java.time.LocalTime [^java.lang.Integer int49900 ^java.lang.Integer int49901] (. java.time.LocalTime of int49900 int49901)) (^java.time.LocalTime [^java.lang.Integer int49902 ^java.lang.Integer int49903 ^java.lang.Integer int49904] (. java.time.LocalTime of int49902 int49903 int49904)) (^java.time.LocalTime [^java.lang.Integer int49905 ^java.lang.Integer int49906 ^java.lang.Integer int49907 ^java.lang.Integer int49908] (. java.time.LocalTime of int49905 int49906 int49907 int49908)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this49909] (.getNano this49909)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this49910 ^long long49911] (.minusSeconds this49910 long49911)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this49912] (.getSecond this49912)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this49913 ^long long49914] (.plusNanos this49913 long49914)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this49915 G__49916 G__49917] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49916) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49917)) (clojure.core/let [G__49916 (clojure.core/long G__49916) G__49917 ^"java.time.temporal.TemporalUnit" G__49917] (.plus ^java.time.LocalTime this49915 G__49916 G__49917)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49916) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49917)) (clojure.core/let [G__49916 (clojure.core/long G__49916) G__49917 ^"java.time.temporal.TemporalUnit" G__49917] (.plus ^java.time.LocalTime this49915 G__49916 G__49917)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this49918 G__49919] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__49919)) (clojure.core/let [G__49919 ^"java.time.temporal.TemporalAmount" G__49919] (.plus ^java.time.LocalTime this49918 G__49919)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__49919)) (clojure.core/let [G__49919 ^"java.time.temporal.TemporalAmount" G__49919] (.plus ^java.time.LocalTime this49918 G__49919)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this49920 ^java.lang.Integer int49921] (.withHour this49920 int49921)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this49922 ^java.lang.Integer int49923] (.withMinute this49922 int49923)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this49924 ^long long49925] (.plusMinutes this49924 long49925)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalTime this49926 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery49927] (.query this49926 java-time-temporal-TemporalQuery49927)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^java.time.LocalDateTime [^java.time.LocalTime this49928 ^java.time.LocalDate java-time-LocalDate49929] (.atDate this49928 java-time-LocalDate49929)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^java.time.LocalTime this49930] (.toString this49930)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this49931 ^java.time.LocalTime java-time-LocalTime49932] (.isBefore this49931 java-time-LocalTime49932)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this49933 G__49934 G__49935] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49934) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49935)) (clojure.core/let [G__49934 (clojure.core/long G__49934) G__49935 ^"java.time.temporal.TemporalUnit" G__49935] (.minus ^java.time.LocalTime this49933 G__49934 G__49935)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49934) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49935)) (clojure.core/let [G__49934 (clojure.core/long G__49934) G__49935 ^"java.time.temporal.TemporalUnit" G__49935] (.minus ^java.time.LocalTime this49933 G__49934 G__49935)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this49936 G__49937] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__49937)) (clojure.core/let [G__49937 ^"java.time.temporal.TemporalAmount" G__49937] (.minus ^java.time.LocalTime this49936 G__49937)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__49937)) (clojure.core/let [G__49937 ^"java.time.temporal.TemporalAmount" G__49937] (.minus ^java.time.LocalTime this49936 G__49937)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this49938 ^long long49939] (.plusHours this49938 long49939)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this49940] (.toSecondOfDay this49940)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalTime this49941 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49942] (.getLong this49941 java-time-temporal-TemporalField49942)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this49943 ^java.lang.Integer int49944] (.withNano this49943 int49944)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalTime this49945 ^java.time.temporal.Temporal java-time-temporal-Temporal49946 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49947] (.until this49945 java-time-temporal-Temporal49946 java-time-temporal-TemporalUnit49947)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long49948] (. java.time.LocalTime ofNanoOfDay long49948)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor49949] (. java.time.LocalTime from java-time-temporal-TemporalAccessor49949)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this49950 ^java.time.LocalTime java-time-LocalTime49951] (.isAfter this49950 java-time-LocalTime49951)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this49952 ^long long49953] (.minusNanos this49952 long49953)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"] ["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this49954 G__49955] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__49955)) (clojure.core/let [G__49955 ^"java.time.temporal.TemporalField" G__49955] (.isSupported ^java.time.LocalTime this49954 G__49955)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49955)) (clojure.core/let [G__49955 ^"java.time.temporal.TemporalUnit" G__49955] (.isSupported ^java.time.LocalTime this49954 G__49955)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence49956] (. java.time.LocalTime parse java-lang-CharSequence49956)) (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence49957 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49958] (. java.time.LocalTime parse java-lang-CharSequence49957 java-time-format-DateTimeFormatter49958)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this49959 ^java.lang.Integer int49960] (.withSecond this49959 int49960)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this49961] (.getMinute this49961)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this49962] (.hashCode this49962)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalTime this49963 ^java.time.temporal.Temporal java-time-temporal-Temporal49964] (.adjustInto this49963 java-time-temporal-Temporal49964)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this49965 G__49966 G__49967] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__49966) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49967)) (clojure.core/let [G__49966 ^"java.time.temporal.TemporalField" G__49966 G__49967 (clojure.core/long G__49967)] (.with ^java.time.LocalTime this49965 G__49966 G__49967)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__49966) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49967)) (clojure.core/let [G__49966 ^"java.time.temporal.TemporalField" G__49966 G__49967 (clojure.core/long G__49967)] (.with ^java.time.LocalTime this49965 G__49966 G__49967)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this49968 G__49969] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__49969)) (clojure.core/let [G__49969 ^"java.time.temporal.TemporalAdjuster" G__49969] (.with ^java.time.LocalTime this49968 G__49969)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__49969)) (clojure.core/let [G__49969 ^"java.time.temporal.TemporalAdjuster" G__49969] (.with ^java.time.LocalTime this49968 G__49969)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.LocalTime [] (. java.time.LocalTime now)) (^java.time.LocalTime [G__49971] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__49971)) (clojure.core/let [G__49971 ^"java.time.ZoneId" G__49971] (. java.time.LocalTime now G__49971)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__49971)) (clojure.core/let [G__49971 ^"java.time.Clock" G__49971] (. java.time.LocalTime now G__49971)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"] ["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Integer [this49972 G__49973] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__49973)) (clojure.core/let [G__49973 ^"java.time.LocalTime" G__49973] (.compareTo ^java.time.LocalTime this49972 G__49973)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__49973)) (clojure.core/let [G__49973 ^"java.lang.Object" G__49973] (.compareTo ^java.time.LocalTime this49972 G__49973)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^java.time.LocalTime this49974] (.toNanoOfDay this49974)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this49975 ^long long49976] (.plusSeconds this49975 long49976)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalTime this49977 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49978] (.get this49977 java-time-temporal-TemporalField49978)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long49979] (. java.time.LocalTime ofSecondOfDay long49979)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalTime this49980 ^java.lang.Object java-lang-Object49981] (.equals this49980 java-lang-Object49981)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalTime this49982 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49983] (.format this49982 java-time-format-DateTimeFormatter49983)))
