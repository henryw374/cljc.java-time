(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalTime]))
(def max java.time.LocalTime/MAX)
(def noon java.time.LocalTime/NOON)
(def midnight java.time.LocalTime/MIDNIGHT)
(def min java.time.LocalTime/MIN)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this4675 ^long long4676] (.minusMinutes this4675 long4676)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalTime [^java.time.LocalTime this4677 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4678] (.truncatedTo this4677 java-time-temporal-TemporalUnit4678)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalTime this4679 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4680] (.range this4679 java-time-temporal-TemporalField4680)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this4681] (.getHour this4681)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime this4682 ^java.time.ZoneOffset java-time-ZoneOffset4683] (.atOffset this4682 java-time-ZoneOffset4683)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this4684 ^long long4685] (.minusHours this4684 long4685)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int"] ["int" "int"] ["int" "int" "int"]))} (^java.time.LocalTime [^java.lang.Integer int4686 ^java.lang.Integer int4687 ^java.lang.Integer int4688 ^java.lang.Integer int4689] (java.time.LocalTime/of int4686 int4687 int4688 int4689)) (^java.time.LocalTime [^java.lang.Integer int4690 ^java.lang.Integer int4691] (java.time.LocalTime/of int4690 int4691)) (^java.time.LocalTime [^java.lang.Integer int4692 ^java.lang.Integer int4693 ^java.lang.Integer int4694] (java.time.LocalTime/of int4692 int4693 int4694)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this4695] (.getNano this4695)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this4696 ^long long4697] (.minusSeconds this4696 long4697)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this4698] (.getSecond this4698)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this4699 ^long long4700] (.plusNanos this4699 long4700)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.time.LocalTime [^java.time.LocalTime this4701 ^long long4702 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4703] (.plus this4701 long4702 java-time-temporal-TemporalUnit4703)) (^java.time.LocalTime [^java.time.LocalTime this4704 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4705] (.plus this4704 java-time-temporal-TemporalAmount4705)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this4706 ^java.lang.Integer int4707] (.withHour this4706 int4707)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this4708 ^java.lang.Integer int4709] (.withMinute this4708 int4709)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this4710 ^long long4711] (.plusMinutes this4710 long4711)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalTime this4712 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4713] (.query this4712 java-time-temporal-TemporalQuery4713)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^java.time.LocalDateTime [^java.time.LocalTime this4714 ^java.time.LocalDate java-time-LocalDate4715] (.atDate this4714 java-time-LocalDate4715)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^java.time.LocalTime this4716] (.toString this4716)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this4717 ^java.time.LocalTime java-time-LocalTime4718] (.isBefore this4717 java-time-LocalTime4718)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.time.LocalTime [^java.time.LocalTime this4719 ^long long4720 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4721] (.minus this4719 long4720 java-time-temporal-TemporalUnit4721)) (^java.time.LocalTime [^java.time.LocalTime this4722 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4723] (.minus this4722 java-time-temporal-TemporalAmount4723)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this4724 ^long long4725] (.plusHours this4724 long4725)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this4726] (.toSecondOfDay this4726)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalTime this4727 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4728] (.getLong this4727 java-time-temporal-TemporalField4728)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this4729 ^java.lang.Integer int4730] (.withNano this4729 int4730)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalTime this4731 ^java.time.temporal.Temporal java-time-temporal-Temporal4732 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4733] (.until this4731 java-time-temporal-Temporal4732 java-time-temporal-TemporalUnit4733)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long4734] (java.time.LocalTime/ofNanoOfDay long4734)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4735] (java.time.LocalTime/from java-time-temporal-TemporalAccessor4735)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this4736 ^java.time.LocalTime java-time-LocalTime4737] (.isAfter this4736 java-time-LocalTime4737)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this4738 ^long long4739] (.minusNanos this4738 long4739)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this4740 G__4741] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__4741)) (clojure.core/let [G__4741 ^"java.time.temporal.ChronoUnit" G__4741] (.isSupported ^java.time.LocalTime this4740 G__4741)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__4741)) (clojure.core/let [G__4741 ^"java.time.temporal.TemporalField" G__4741] (.isSupported ^java.time.LocalTime this4740 G__4741)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence4742 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4743] (java.time.LocalTime/parse java-lang-CharSequence4742 java-time-format-DateTimeFormatter4743)) (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence4744] (java.time.LocalTime/parse java-lang-CharSequence4744)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this4745 ^java.lang.Integer int4746] (.withSecond this4745 int4746)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this4747] (.getMinute this4747)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this4748] (.hashCode this4748)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalTime this4749 ^java.time.temporal.Temporal java-time-temporal-Temporal4750] (.adjustInto this4749 java-time-temporal-Temporal4750)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"]))} (^java.time.LocalTime [^java.time.LocalTime this4751 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4752 ^long long4753] (.with this4751 java-time-temporal-TemporalField4752 long4753)) (^java.time.LocalTime [^java.time.LocalTime this4754 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster4755] (.with this4754 java-time-temporal-TemporalAdjuster4755)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalTime [] (java.time.LocalTime/now)) (^java.time.LocalTime [G__4757] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__4757)) (clojure.core/let [G__4757 ^"java.time.Clock" G__4757] (java.time.LocalTime/now G__4757)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__4757)) (clojure.core/let [G__4757 ^"java.time.ZoneId" G__4757] (java.time.LocalTime/now G__4757)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this4758 ^java.time.LocalTime java-time-LocalTime4759] (.compareTo this4758 java-time-LocalTime4759)))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^java.time.LocalTime this4760] (.toNanoOfDay this4760)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this4761 ^long long4762] (.plusSeconds this4761 long4762)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalTime this4763 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4764] (.get this4763 java-time-temporal-TemporalField4764)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long4765] (java.time.LocalTime/ofSecondOfDay long4765)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalTime this4766 ^java.lang.Object java-lang-Object4767] (.equals this4766 java-lang-Object4767)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalTime this4768 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4769] (.format this4768 java-time-format-DateTimeFormatter4769)))
