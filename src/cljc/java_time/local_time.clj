(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalTime]))
(def max java.time.LocalTime/MAX)
(def noon java.time.LocalTime/NOON)
(def midnight java.time.LocalTime/MIDNIGHT)
(def min java.time.LocalTime/MIN)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this11897 ^long long11898] (.minusMinutes this11897 long11898)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalTime [^java.time.LocalTime this11899 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11900] (.truncatedTo this11899 java-time-temporal-TemporalUnit11900)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalTime this11901 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11902] (.range this11901 java-time-temporal-TemporalField11902)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this11903] (.getHour this11903)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime this11904 ^java.time.ZoneOffset java-time-ZoneOffset11905] (.atOffset this11904 java-time-ZoneOffset11905)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this11906 ^long long11907] (.minusHours this11906 long11907)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int"] ["int" "int"] ["int" "int" "int"]))} (^java.time.LocalTime [^java.lang.Integer int11908 ^java.lang.Integer int11909 ^java.lang.Integer int11910 ^java.lang.Integer int11911] (. java.time.LocalTime of int11908 int11909 int11910 int11911)) (^java.time.LocalTime [^java.lang.Integer int11912 ^java.lang.Integer int11913] (. java.time.LocalTime of int11912 int11913)) (^java.time.LocalTime [^java.lang.Integer int11914 ^java.lang.Integer int11915 ^java.lang.Integer int11916] (. java.time.LocalTime of int11914 int11915 int11916)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this11917] (.getNano this11917)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this11918 ^long long11919] (.minusSeconds this11918 long11919)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this11920] (.getSecond this11920)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this11921 ^long long11922] (.plusNanos this11921 long11922)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11923 G__11924 G__11925] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11924) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11925)) (clojure.core/let [G__11924 (clojure.core/long G__11924) G__11925 ^"java.time.temporal.TemporalUnit" G__11925] (.plus ^java.time.LocalTime this11923 G__11924 G__11925)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11924) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11925)) (clojure.core/let [G__11924 (clojure.core/long G__11924) G__11925 ^"java.time.temporal.TemporalUnit" G__11925] (.plus ^java.time.LocalTime this11923 G__11924 G__11925)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this11926 G__11927] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11927)) (clojure.core/let [G__11927 ^"java.time.temporal.TemporalAmount" G__11927] (.plus ^java.time.LocalTime this11926 G__11927)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11927)) (clojure.core/let [G__11927 ^"java.time.temporal.TemporalAmount" G__11927] (.plus ^java.time.LocalTime this11926 G__11927)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this11928 ^java.lang.Integer int11929] (.withHour this11928 int11929)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this11930 ^java.lang.Integer int11931] (.withMinute this11930 int11931)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this11932 ^long long11933] (.plusMinutes this11932 long11933)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalTime this11934 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery11935] (.query this11934 java-time-temporal-TemporalQuery11935)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^java.time.LocalDateTime [^java.time.LocalTime this11936 ^java.time.LocalDate java-time-LocalDate11937] (.atDate this11936 java-time-LocalDate11937)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^java.time.LocalTime this11938] (.toString this11938)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this11939 ^java.time.LocalTime java-time-LocalTime11940] (.isBefore this11939 java-time-LocalTime11940)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this11941 G__11942] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11942)) (clojure.core/let [G__11942 ^"java.time.temporal.TemporalAmount" G__11942] (.minus ^java.time.LocalTime this11941 G__11942)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11942)) (clojure.core/let [G__11942 ^"java.time.temporal.TemporalAmount" G__11942] (.minus ^java.time.LocalTime this11941 G__11942)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this11943 G__11944 G__11945] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11944) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11945)) (clojure.core/let [G__11944 (clojure.core/long G__11944) G__11945 ^"java.time.temporal.TemporalUnit" G__11945] (.minus ^java.time.LocalTime this11943 G__11944 G__11945)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11944) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11945)) (clojure.core/let [G__11944 (clojure.core/long G__11944) G__11945 ^"java.time.temporal.TemporalUnit" G__11945] (.minus ^java.time.LocalTime this11943 G__11944 G__11945)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this11946 ^long long11947] (.plusHours this11946 long11947)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this11948] (.toSecondOfDay this11948)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalTime this11949 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11950] (.getLong this11949 java-time-temporal-TemporalField11950)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this11951 ^java.lang.Integer int11952] (.withNano this11951 int11952)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalTime this11953 ^java.time.temporal.Temporal java-time-temporal-Temporal11954 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11955] (.until this11953 java-time-temporal-Temporal11954 java-time-temporal-TemporalUnit11955)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long11956] (. java.time.LocalTime ofNanoOfDay long11956)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor11957] (. java.time.LocalTime from java-time-temporal-TemporalAccessor11957)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this11958 ^java.time.LocalTime java-time-LocalTime11959] (.isAfter this11958 java-time-LocalTime11959)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this11960 ^long long11961] (.minusNanos this11960 long11961)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this11962 G__11963] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11963)) (clojure.core/let [G__11963 ^"java.time.temporal.TemporalUnit" G__11963] (.isSupported ^java.time.LocalTime this11962 G__11963)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11963)) (clojure.core/let [G__11963 ^"java.time.temporal.TemporalField" G__11963] (.isSupported ^java.time.LocalTime this11962 G__11963)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence11964] (. java.time.LocalTime parse java-lang-CharSequence11964)) (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence11965 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11966] (. java.time.LocalTime parse java-lang-CharSequence11965 java-time-format-DateTimeFormatter11966)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this11967 ^java.lang.Integer int11968] (.withSecond this11967 int11968)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this11969] (.getMinute this11969)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this11970] (.hashCode this11970)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalTime this11971 ^java.time.temporal.Temporal java-time-temporal-Temporal11972] (.adjustInto this11971 java-time-temporal-Temporal11972)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this11973 G__11974] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__11974)) (clojure.core/let [G__11974 ^"java.time.temporal.TemporalAdjuster" G__11974] (.with ^java.time.LocalTime this11973 G__11974)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__11974)) (clojure.core/let [G__11974 ^"java.time.temporal.TemporalAdjuster" G__11974] (.with ^java.time.LocalTime this11973 G__11974)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this11975 G__11976 G__11977] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11976) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11977)) (clojure.core/let [G__11976 ^"java.time.temporal.TemporalField" G__11976 G__11977 (clojure.core/long G__11977)] (.with ^java.time.LocalTime this11975 G__11976 G__11977)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11976) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11977)) (clojure.core/let [G__11976 ^"java.time.temporal.TemporalField" G__11976 G__11977 (clojure.core/long G__11977)] (.with ^java.time.LocalTime this11975 G__11976 G__11977)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^java.time.LocalTime [G__11979] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__11979)) (clojure.core/let [G__11979 ^"java.time.ZoneId" G__11979] (. java.time.LocalTime now G__11979)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__11979)) (clojure.core/let [G__11979 ^"java.time.Clock" G__11979] (. java.time.LocalTime now G__11979)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalTime [] (. java.time.LocalTime now)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"] ["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Integer [this11980 G__11981] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__11981)) (clojure.core/let [G__11981 ^"java.time.LocalTime" G__11981] (.compareTo ^java.time.LocalTime this11980 G__11981)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__11981)) (clojure.core/let [G__11981 ^"java.lang.Object" G__11981] (.compareTo ^java.time.LocalTime this11980 G__11981)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^java.time.LocalTime this11982] (.toNanoOfDay this11982)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this11983 ^long long11984] (.plusSeconds this11983 long11984)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalTime this11985 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11986] (.get this11985 java-time-temporal-TemporalField11986)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long11987] (. java.time.LocalTime ofSecondOfDay long11987)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalTime this11988 ^java.lang.Object java-lang-Object11989] (.equals this11988 java-lang-Object11989)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalTime this11990 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11991] (.format this11990 java-time-format-DateTimeFormatter11991)))
