(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalTime]))
(def max java.time.LocalTime/MAX)
(def noon java.time.LocalTime/NOON)
(def midnight java.time.LocalTime/MIDNIGHT)
(def min java.time.LocalTime/MIN)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this14193 ^long long14194] (.minusMinutes this14193 long14194)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalTime [^java.time.LocalTime this14195 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14196] (.truncatedTo this14195 java-time-temporal-TemporalUnit14196)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalTime this14197 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14198] (.range this14197 java-time-temporal-TemporalField14198)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this14199] (.getHour this14199)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime this14200 ^java.time.ZoneOffset java-time-ZoneOffset14201] (.atOffset this14200 java-time-ZoneOffset14201)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this14202 ^long long14203] (.minusHours this14202 long14203)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"] ["int" "int" "int" "int"] ["int" "int"]))} (^java.time.LocalTime [^java.lang.Integer int14204 ^java.lang.Integer int14205 ^java.lang.Integer int14206] (java.time.LocalTime/of int14204 int14205 int14206)) (^java.time.LocalTime [^java.lang.Integer int14207 ^java.lang.Integer int14208 ^java.lang.Integer int14209 ^java.lang.Integer int14210] (java.time.LocalTime/of int14207 int14208 int14209 int14210)) (^java.time.LocalTime [^java.lang.Integer int14211 ^java.lang.Integer int14212] (java.time.LocalTime/of int14211 int14212)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this14213] (.getNano this14213)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this14214 ^long long14215] (.minusSeconds this14214 long14215)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this14216] (.getSecond this14216)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this14217 ^long long14218] (.plusNanos this14217 long14218)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalTime [^java.time.LocalTime this14219 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount14220] (.plus this14219 java-time-temporal-TemporalAmount14220)) (^java.time.LocalTime [^java.time.LocalTime this14221 ^long long14222 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14223] (.plus this14221 long14222 java-time-temporal-TemporalUnit14223)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this14224 ^java.lang.Integer int14225] (.withHour this14224 int14225)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this14226 ^java.lang.Integer int14227] (.withMinute this14226 int14227)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this14228 ^long long14229] (.plusMinutes this14228 long14229)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalTime this14230 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery14231] (.query this14230 java-time-temporal-TemporalQuery14231)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^java.time.LocalDateTime [^java.time.LocalTime this14232 ^java.time.LocalDate java-time-LocalDate14233] (.atDate this14232 java-time-LocalDate14233)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^java.time.LocalTime this14234] (.toString this14234)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this14235 ^java.time.LocalTime java-time-LocalTime14236] (.isBefore this14235 java-time-LocalTime14236)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.time.LocalTime [^java.time.LocalTime this14237 ^long long14238 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14239] (.minus this14237 long14238 java-time-temporal-TemporalUnit14239)) (^java.time.LocalTime [^java.time.LocalTime this14240 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount14241] (.minus this14240 java-time-temporal-TemporalAmount14241)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this14242 ^long long14243] (.plusHours this14242 long14243)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this14244] (.toSecondOfDay this14244)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalTime this14245 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14246] (.getLong this14245 java-time-temporal-TemporalField14246)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this14247 ^java.lang.Integer int14248] (.withNano this14247 int14248)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalTime this14249 ^java.time.temporal.Temporal java-time-temporal-Temporal14250 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14251] (.until this14249 java-time-temporal-Temporal14250 java-time-temporal-TemporalUnit14251)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long14252] (java.time.LocalTime/ofNanoOfDay long14252)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14253] (java.time.LocalTime/from java-time-temporal-TemporalAccessor14253)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this14254 ^java.time.LocalTime java-time-LocalTime14255] (.isAfter this14254 java-time-LocalTime14255)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this14256 ^long long14257] (.minusNanos this14256 long14257)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this14258 G__14259] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__14259)) (clojure.core/let [G__14259 ^"java.time.temporal.ChronoUnit" G__14259] (.isSupported ^java.time.LocalTime this14258 G__14259)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__14259)) (clojure.core/let [G__14259 ^"java.time.temporal.TemporalField" G__14259] (.isSupported ^java.time.LocalTime this14258 G__14259)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence14260] (java.time.LocalTime/parse java-lang-CharSequence14260)) (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence14261 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter14262] (java.time.LocalTime/parse java-lang-CharSequence14261 java-time-format-DateTimeFormatter14262)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this14263 ^java.lang.Integer int14264] (.withSecond this14263 int14264)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this14265] (.getMinute this14265)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this14266] (.hashCode this14266)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalTime this14267 ^java.time.temporal.Temporal java-time-temporal-Temporal14268] (.adjustInto this14267 java-time-temporal-Temporal14268)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this14269 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster14270] (.with this14269 java-time-temporal-TemporalAdjuster14270)) (^java.time.LocalTime [^java.time.LocalTime this14271 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14272 ^long long14273] (.with this14271 java-time-temporal-TemporalField14272 long14273)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.LocalTime [] (java.time.LocalTime/now)) (^java.time.LocalTime [G__14275] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__14275)) (clojure.core/let [G__14275 ^"java.time.ZoneId" G__14275] (java.time.LocalTime/now G__14275)) (clojure.core/and (clojure.core/instance? java.time.Clock G__14275)) (clojure.core/let [G__14275 ^"java.time.Clock" G__14275] (java.time.LocalTime/now G__14275)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this14276 ^java.time.LocalTime java-time-LocalTime14277] (.compareTo this14276 java-time-LocalTime14277)))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^java.time.LocalTime this14278] (.toNanoOfDay this14278)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this14279 ^long long14280] (.plusSeconds this14279 long14280)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalTime this14281 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14282] (.get this14281 java-time-temporal-TemporalField14282)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long14283] (java.time.LocalTime/ofSecondOfDay long14283)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalTime this14284 ^java.lang.Object java-lang-Object14285] (.equals this14284 java-lang-Object14285)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalTime this14286 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter14287] (.format this14286 java-time-format-DateTimeFormatter14287)))
