(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalTime]))
(def max java.time.LocalTime/MAX)
(def noon java.time.LocalTime/NOON)
(def midnight java.time.LocalTime/MIDNIGHT)
(def min java.time.LocalTime/MIN)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this60380 ^long long60381] (.minusMinutes this60380 long60381)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalTime [^java.time.LocalTime this60382 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit60383] (.truncatedTo this60382 java-time-temporal-TemporalUnit60383)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalTime this60384 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60385] (.range this60384 java-time-temporal-TemporalField60385)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this60386] (.getHour this60386)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime this60387 ^java.time.ZoneOffset java-time-ZoneOffset60388] (.atOffset this60387 java-time-ZoneOffset60388)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this60389 ^long long60390] (.minusHours this60389 long60390)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int"] ["int" "int"] ["int" "int" "int"]))} (^java.time.LocalTime [^java.lang.Integer int60391 ^java.lang.Integer int60392 ^java.lang.Integer int60393 ^java.lang.Integer int60394] (java.time.LocalTime/of int60391 int60392 int60393 int60394)) (^java.time.LocalTime [^java.lang.Integer int60395 ^java.lang.Integer int60396] (java.time.LocalTime/of int60395 int60396)) (^java.time.LocalTime [^java.lang.Integer int60397 ^java.lang.Integer int60398 ^java.lang.Integer int60399] (java.time.LocalTime/of int60397 int60398 int60399)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this60400] (.getNano this60400)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this60401 ^long long60402] (.minusSeconds this60401 long60402)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this60403] (.getSecond this60403)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this60404 ^long long60405] (.plusNanos this60404 long60405)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this60406 G__60407 G__60408] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60407) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60408)) (clojure.core/let [G__60407 (clojure.core/long G__60407) G__60408 ^"java.time.temporal.TemporalUnit" G__60408] (.plus ^java.time.LocalTime this60406 G__60407 G__60408)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60407) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60408)) (clojure.core/let [G__60407 (clojure.core/long G__60407) G__60408 ^"java.time.temporal.TemporalUnit" G__60408] (.plus ^java.time.LocalTime this60406 G__60407 G__60408)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this60409 G__60410] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__60410)) (clojure.core/let [G__60410 ^"java.time.temporal.TemporalAmount" G__60410] (.plus ^java.time.LocalTime this60409 G__60410)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__60410)) (clojure.core/let [G__60410 ^"java.time.temporal.TemporalAmount" G__60410] (.plus ^java.time.LocalTime this60409 G__60410)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this60411 ^java.lang.Integer int60412] (.withHour this60411 int60412)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this60413 ^java.lang.Integer int60414] (.withMinute this60413 int60414)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this60415 ^long long60416] (.plusMinutes this60415 long60416)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalTime this60417 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery60418] (.query this60417 java-time-temporal-TemporalQuery60418)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^java.time.LocalDateTime [^java.time.LocalTime this60419 ^java.time.LocalDate java-time-LocalDate60420] (.atDate this60419 java-time-LocalDate60420)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^java.time.LocalTime this60421] (.toString this60421)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this60422 ^java.time.LocalTime java-time-LocalTime60423] (.isBefore this60422 java-time-LocalTime60423)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this60424 G__60425] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__60425)) (clojure.core/let [G__60425 ^"java.time.temporal.TemporalAmount" G__60425] (.minus ^java.time.LocalTime this60424 G__60425)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__60425)) (clojure.core/let [G__60425 ^"java.time.temporal.TemporalAmount" G__60425] (.minus ^java.time.LocalTime this60424 G__60425)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this60426 G__60427 G__60428] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60427) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60428)) (clojure.core/let [G__60427 (clojure.core/long G__60427) G__60428 ^"java.time.temporal.TemporalUnit" G__60428] (.minus ^java.time.LocalTime this60426 G__60427 G__60428)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60427) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60428)) (clojure.core/let [G__60427 (clojure.core/long G__60427) G__60428 ^"java.time.temporal.TemporalUnit" G__60428] (.minus ^java.time.LocalTime this60426 G__60427 G__60428)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this60429 ^long long60430] (.plusHours this60429 long60430)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this60431] (.toSecondOfDay this60431)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalTime this60432 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60433] (.getLong this60432 java-time-temporal-TemporalField60433)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this60434 ^java.lang.Integer int60435] (.withNano this60434 int60435)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalTime this60436 ^java.time.temporal.Temporal java-time-temporal-Temporal60437 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit60438] (.until this60436 java-time-temporal-Temporal60437 java-time-temporal-TemporalUnit60438)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long60439] (java.time.LocalTime/ofNanoOfDay long60439)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor60440] (java.time.LocalTime/from java-time-temporal-TemporalAccessor60440)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this60441 ^java.time.LocalTime java-time-LocalTime60442] (.isAfter this60441 java-time-LocalTime60442)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this60443 ^long long60444] (.minusNanos this60443 long60444)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this60445 G__60446] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60446)) (clojure.core/let [G__60446 ^"java.time.temporal.TemporalUnit" G__60446] (.isSupported ^java.time.LocalTime this60445 G__60446)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__60446)) (clojure.core/let [G__60446 ^"java.time.temporal.TemporalField" G__60446] (.isSupported ^java.time.LocalTime this60445 G__60446)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence60447] (java.time.LocalTime/parse java-lang-CharSequence60447)) (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence60448 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter60449] (java.time.LocalTime/parse java-lang-CharSequence60448 java-time-format-DateTimeFormatter60449)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this60450 ^java.lang.Integer int60451] (.withSecond this60450 int60451)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this60452] (.getMinute this60452)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this60453] (.hashCode this60453)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalTime this60454 ^java.time.temporal.Temporal java-time-temporal-Temporal60455] (.adjustInto this60454 java-time-temporal-Temporal60455)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this60456 G__60457] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__60457)) (clojure.core/let [G__60457 ^"java.time.temporal.TemporalAdjuster" G__60457] (.with ^java.time.LocalTime this60456 G__60457)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__60457)) (clojure.core/let [G__60457 ^"java.time.temporal.TemporalAdjuster" G__60457] (.with ^java.time.LocalTime this60456 G__60457)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this60458 G__60459 G__60460] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__60459) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60460)) (clojure.core/let [G__60459 ^"java.time.temporal.TemporalField" G__60459 G__60460 (clojure.core/long G__60460)] (.with ^java.time.LocalTime this60458 G__60459 G__60460)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__60459) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60460)) (clojure.core/let [G__60459 ^"java.time.temporal.TemporalField" G__60459 G__60460 (clojure.core/long G__60460)] (.with ^java.time.LocalTime this60458 G__60459 G__60460)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^java.time.LocalTime [G__60462] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__60462)) (clojure.core/let [G__60462 ^"java.time.ZoneId" G__60462] (java.time.LocalTime/now G__60462)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__60462)) (clojure.core/let [G__60462 ^"java.time.Clock" G__60462] (java.time.LocalTime/now G__60462)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalTime [] (java.time.LocalTime/now)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"] ["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Integer [this60463 G__60464] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__60464)) (clojure.core/let [G__60464 ^"java.time.LocalTime" G__60464] (.compareTo ^java.time.LocalTime this60463 G__60464)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__60464)) (clojure.core/let [G__60464 ^"java.lang.Object" G__60464] (.compareTo ^java.time.LocalTime this60463 G__60464)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^java.time.LocalTime this60465] (.toNanoOfDay this60465)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this60466 ^long long60467] (.plusSeconds this60466 long60467)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalTime this60468 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60469] (.get this60468 java-time-temporal-TemporalField60469)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long60470] (java.time.LocalTime/ofSecondOfDay long60470)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalTime this60471 ^java.lang.Object java-lang-Object60472] (.equals this60471 java-lang-Object60472)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalTime this60473 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter60474] (.format this60473 java-time-format-DateTimeFormatter60474)))
