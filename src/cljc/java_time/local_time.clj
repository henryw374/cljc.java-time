(ns cljc.java-time.local-time (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time LocalTime]))
(def max (. java.time.LocalTime -MAX))
(def noon (. java.time.LocalTime -NOON))
(def midnight (. java.time.LocalTime -MIDNIGHT))
(def min (. java.time.LocalTime -MIN))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this6937 ^long long6938] (.minusMinutes this6937 long6938)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalTime [^java.time.LocalTime this6939 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6940] (.truncatedTo this6939 java-time-temporal-TemporalUnit6940)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalTime this6941 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6942] (.range this6941 java-time-temporal-TemporalField6942)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this6943] (.getHour this6943)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime this6944 ^java.time.ZoneOffset java-time-ZoneOffset6945] (.atOffset this6944 java-time-ZoneOffset6945)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this6946 ^long long6947] (.minusHours this6946 long6947)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["int" "int" "int"] ["int" "int" "int" "int"]))} (^java.time.LocalTime [^java.lang.Integer int6948 ^java.lang.Integer int6949] (. java.time.LocalTime of int6948 int6949)) (^java.time.LocalTime [^java.lang.Integer int6950 ^java.lang.Integer int6951 ^java.lang.Integer int6952] (. java.time.LocalTime of int6950 int6951 int6952)) (^java.time.LocalTime [^java.lang.Integer int6953 ^java.lang.Integer int6954 ^java.lang.Integer int6955 ^java.lang.Integer int6956] (. java.time.LocalTime of int6953 int6954 int6955 int6956)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this6957] (.getNano this6957)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this6958 ^long long6959] (.minusSeconds this6958 long6959)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this6960] (.getSecond this6960)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this6961 ^long long6962] (.plusNanos this6961 long6962)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6963 G__6964 G__6965] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6964) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6965)) (clojure.core/let [G__6964 (clojure.core/long G__6964) G__6965 ^"java.time.temporal.TemporalUnit" G__6965] (.plus ^java.time.LocalTime this6963 G__6964 G__6965)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6964) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6965)) (clojure.core/let [G__6964 (clojure.core/long G__6964) G__6965 ^"java.time.temporal.TemporalUnit" G__6965] (.plus ^java.time.LocalTime this6963 G__6964 G__6965)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6966 G__6967] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6967)) (clojure.core/let [G__6967 ^"java.time.temporal.TemporalAmount" G__6967] (.plus ^java.time.LocalTime this6966 G__6967)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6967)) (clojure.core/let [G__6967 ^"java.time.temporal.TemporalAmount" G__6967] (.plus ^java.time.LocalTime this6966 G__6967)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this6968 ^java.lang.Integer int6969] (.withHour this6968 int6969)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this6970 ^java.lang.Integer int6971] (.withMinute this6970 int6971)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this6972 ^long long6973] (.plusMinutes this6972 long6973)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalTime this6974 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery6975] (.query this6974 java-time-temporal-TemporalQuery6975)))
(clojure.core/defn at-date {:arglists (quote (["java.time.LocalTime" "java.time.LocalDate"]))} (^java.time.LocalDateTime [^java.time.LocalTime this6976 ^java.time.LocalDate java-time-LocalDate6977] (.atDate this6976 java-time-LocalDate6977)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.String [^java.time.LocalTime this6978] (.toString this6978)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this6979 ^java.time.LocalTime java-time-LocalTime6980] (.isBefore this6979 java-time-LocalTime6980)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6981 G__6982] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6982)) (clojure.core/let [G__6982 ^"java.time.temporal.TemporalAmount" G__6982] (.minus ^java.time.LocalTime this6981 G__6982)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6982)) (clojure.core/let [G__6982 ^"java.time.temporal.TemporalAmount" G__6982] (.minus ^java.time.LocalTime this6981 G__6982)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6983 G__6984 G__6985] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6984) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6985)) (clojure.core/let [G__6984 (clojure.core/long G__6984) G__6985 ^"java.time.temporal.TemporalUnit" G__6985] (.minus ^java.time.LocalTime this6983 G__6984 G__6985)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6984) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6985)) (clojure.core/let [G__6984 (clojure.core/long G__6984) G__6985 ^"java.time.temporal.TemporalUnit" G__6985] (.minus ^java.time.LocalTime this6983 G__6984 G__6985)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this6986 ^long long6987] (.plusHours this6986 long6987)))
(clojure.core/defn to-second-of-day {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this6988] (.toSecondOfDay this6988)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalTime this6989 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6990] (.getLong this6989 java-time-temporal-TemporalField6990)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this6991 ^java.lang.Integer int6992] (.withNano this6991 int6992)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalTime this6993 ^java.time.temporal.Temporal java-time-temporal-Temporal6994 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6995] (.until this6993 java-time-temporal-Temporal6994 java-time-temporal-TemporalUnit6995)))
(clojure.core/defn of-nano-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long6996] (. java.time.LocalTime ofNanoOfDay long6996)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor6997] (. java.time.LocalTime from java-time-temporal-TemporalAccessor6997)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"]))} (^java.lang.Boolean [^java.time.LocalTime this6998 ^java.time.LocalTime java-time-LocalTime6999] (.isAfter this6998 java-time-LocalTime6999)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this7000 ^long long7001] (.minusNanos this7000 long7001)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this7002 G__7003] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7003)) (clojure.core/let [G__7003 ^"java.time.temporal.TemporalUnit" G__7003] (.isSupported ^java.time.LocalTime this7002 G__7003)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7003)) (clojure.core/let [G__7003 ^"java.time.temporal.TemporalField" G__7003] (.isSupported ^java.time.LocalTime this7002 G__7003)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence7004 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter7005] (. java.time.LocalTime parse java-lang-CharSequence7004 java-time-format-DateTimeFormatter7005)) (^java.time.LocalTime [^java.lang.CharSequence java-lang-CharSequence7006] (. java.time.LocalTime parse java-lang-CharSequence7006)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalTime" "int"]))} (^java.time.LocalTime [^java.time.LocalTime this7007 ^java.lang.Integer int7008] (.withSecond this7007 int7008)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this7009] (.getMinute this7009)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalTime"]))} (^java.lang.Integer [^java.time.LocalTime this7010] (.hashCode this7010)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalTime this7011 ^java.time.temporal.Temporal java-time-temporal-Temporal7012] (.adjustInto this7011 java-time-temporal-Temporal7012)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this7013 G__7014] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__7014)) (clojure.core/let [G__7014 ^"java.time.temporal.TemporalAdjuster" G__7014] (.with ^java.time.LocalTime this7013 G__7014)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__7014)) (clojure.core/let [G__7014 ^"java.time.temporal.TemporalAdjuster" G__7014] (.with ^java.time.LocalTime this7013 G__7014)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this7015 G__7016 G__7017] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7016) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7017)) (clojure.core/let [G__7016 ^"java.time.temporal.TemporalField" G__7016 G__7017 (clojure.core/long G__7017)] (.with ^java.time.LocalTime this7015 G__7016 G__7017)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7016) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7017)) (clojure.core/let [G__7016 ^"java.time.temporal.TemporalField" G__7016 G__7017 (clojure.core/long G__7017)] (.with ^java.time.LocalTime this7015 G__7016 G__7017)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.LocalTime [] (. java.time.LocalTime now)) (^java.time.LocalTime [G__7019] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__7019)) (clojure.core/let [G__7019 ^"java.time.ZoneId" G__7019] (. java.time.LocalTime now G__7019)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__7019)) (clojure.core/let [G__7019 ^"java.time.Clock" G__7019] (. java.time.LocalTime now G__7019)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalTime" "java.time.LocalTime"] ["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Integer [this7020 G__7021] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.LocalTime") G__7021)) (clojure.core/let [G__7021 ^"java.time.LocalTime" G__7021] (.compareTo ^java.time.LocalTime this7020 G__7021)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7021)) (clojure.core/let [G__7021 ^"java.lang.Object" G__7021] (.compareTo ^java.time.LocalTime this7020 G__7021)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn to-nano-of-day {:arglists (quote (["java.time.LocalTime"]))} (^long [^java.time.LocalTime this7022] (.toNanoOfDay this7022)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalTime" "long"]))} (^java.time.LocalTime [^java.time.LocalTime this7023 ^long long7024] (.plusSeconds this7023 long7024)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalTime this7025 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7026] (.get this7025 java-time-temporal-TemporalField7026)))
(clojure.core/defn of-second-of-day {:arglists (quote (["long"]))} (^java.time.LocalTime [^long long7027] (. java.time.LocalTime ofSecondOfDay long7027)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalTime this7028 ^java.lang.Object java-lang-Object7029] (.equals this7028 java-lang-Object7029)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalTime this7030 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter7031] (.format this7030 java-time-format-DateTimeFormatter7031)))
