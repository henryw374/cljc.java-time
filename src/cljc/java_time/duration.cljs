(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Duration]]))
(def zero (goog.object/get java.time.Duration "ZERO"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60824 ^long long60825] (.minusMinutes this60824 long60825)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this60826] (.toNanos this60826)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60827 ^long long60828] (.minusMillis this60827 long60828)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60829 ^long long60830] (.minusHours this60829 long60830)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long60831] (js-invoke java.time.Duration "ofDays" long60831)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^boolean [^js/JSJoda.Duration this60832] (.isNegative this60832)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^long long60833 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit60834] (js-invoke java.time.Duration "of" long60833 java-time-temporal-TemporalUnit60834)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^boolean [^js/JSJoda.Duration this60835] (.isZero this60835)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60836 ^long long60837] (.multipliedBy this60836 long60837)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60838 ^int int60839] (.withNanos this60838 int60839)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^js/JSJoda.Duration this60840] (.units this60840)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this60841] (.nano this60841)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60842 ^long long60843] (.plusMillis this60842 long60843)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this60844] (.toMinutes this60844)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60845 ^long long60846] (.minusSeconds this60845 long60846)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60847 ^long long60848] (.plusNanos this60847 long60848)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60849 ^long long60850 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit60851] (.plus this60849 long60850 java-time-temporal-TemporalUnit60851)) (^js/JSJoda.Duration [^js/JSJoda.Duration this60852 ^js/JSJoda.Duration java-time-Duration60853] (.plus this60852 java-time-Duration60853)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60854 ^long long60855] (.dividedBy this60854 long60855)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60856 ^long long60857] (.plusMinutes this60856 long60857)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^js/JSJoda.Duration this60858] (.toString this60858)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60859 ^js/JSJoda.Duration java-time-Duration60860] (.minus this60859 java-time-Duration60860)) (^js/JSJoda.Duration [^js/JSJoda.Duration this60861 ^long long60862 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit60863] (.minus this60861 long60862 java-time-temporal-TemporalUnit60863)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Duration this60864 ^js/JSJoda.Temporal java-time-temporal-Temporal60865] (.addTo this60864 java-time-temporal-Temporal60865)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60866 ^long long60867] (.plusHours this60866 long60867)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60868 ^long long60869] (.plusDays this60868 long60869)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long60870] (js-invoke java.time.Duration "ofHours" long60870)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this60871] (.toMillis this60871)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this60872] (.toHours this60872)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long60873] (js-invoke java.time.Duration "ofNanos" long60873)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long60874] (js-invoke java.time.Duration "ofMillis" long60874)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60875] (.negated this60875)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60876] (.abs this60876)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^js/JSJoda.Duration [^js/JSJoda.Temporal java-time-temporal-Temporal60877 ^js/JSJoda.Temporal java-time-temporal-Temporal60878] (js-invoke java.time.Duration "between" java-time-temporal-Temporal60877 java-time-temporal-Temporal60878)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this60879] (.seconds this60879)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Duration [^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount60880] (js-invoke java.time.Duration "from" java-time-temporal-TemporalAmount60880)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60881 ^long long60882] (.minusNanos this60881 long60882)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^js/JSJoda.Duration [^java.lang.CharSequence java-lang-CharSequence60883] (js-invoke java.time.Duration "parse" java-lang-CharSequence60883)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this60884] (.hashCode this60884)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60885 ^long long60886] (.withSeconds this60885 long60886)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long60887] (js-invoke java.time.Duration "ofMinutes" long60887)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Duration this60888 ^js/JSJoda.Temporal java-time-temporal-Temporal60889] (.subtractFrom this60888 java-time-temporal-Temporal60889)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.lang.Object"] ["java.time.Duration" "java.time.Duration"]))} (^int [this60890 G__60891] (.compareTo ^js/JSJoda.Duration this60890 G__60891)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60892 ^long long60893] (.plusSeconds this60892 long60893)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Duration this60894 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit60895] (.get this60894 java-time-temporal-TemporalUnit60895)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^boolean [^js/JSJoda.Duration this60896 ^java.lang.Object java-lang-Object60897] (.equals this60896 java-lang-Object60897)))
(clojure.core/defn of-seconds {:arglists (quote (["long" "long"] ["long"]))} (^js/JSJoda.Duration [^long long60898 ^long long60899] (js-invoke java.time.Duration "ofSeconds" long60898 long60899)) (^js/JSJoda.Duration [^long long60900] (js-invoke java.time.Duration "ofSeconds" long60900)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this60901 ^long long60902] (.minusDays this60901 long60902)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this60903] (.toDays this60903)))
