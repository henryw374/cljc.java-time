(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Duration]]))
(def zero (goog.object/get java.time.Duration "ZERO"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5120 ^long long5121] (.minusMinutes this5120 long5121)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this5122] (.toNanos this5122)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5123 ^long long5124] (.minusMillis this5123 long5124)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5125 ^long long5126] (.minusHours this5125 long5126)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long5127] (js-invoke java.time.Duration "ofDays" long5127)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^boolean [^js/JSJoda.Duration this5128] (.isNegative this5128)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^long long5129 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5130] (js-invoke java.time.Duration "of" long5129 java-time-temporal-TemporalUnit5130)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^boolean [^js/JSJoda.Duration this5131] (.isZero this5131)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5132 ^long long5133] (.multipliedBy this5132 long5133)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5134 ^int int5135] (.withNanos this5134 int5135)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^js/JSJoda.Duration this5136] (.units this5136)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this5137] (.nano this5137)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5138 ^long long5139] (.plusMillis this5138 long5139)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this5140] (.toMinutes this5140)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5141 ^long long5142] (.minusSeconds this5141 long5142)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5143 ^long long5144] (.plusNanos this5143 long5144)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5145 ^js/JSJoda.Duration java-time-Duration5146] (.plus this5145 java-time-Duration5146)) (^js/JSJoda.Duration [^js/JSJoda.Duration this5147 ^long long5148 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5149] (.plus this5147 long5148 java-time-temporal-TemporalUnit5149)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5150 ^long long5151] (.dividedBy this5150 long5151)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5152 ^long long5153] (.plusMinutes this5152 long5153)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^js/JSJoda.Duration this5154] (.toString this5154)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5155 ^js/JSJoda.Duration java-time-Duration5156] (.minus this5155 java-time-Duration5156)) (^js/JSJoda.Duration [^js/JSJoda.Duration this5157 ^long long5158 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5159] (.minus this5157 long5158 java-time-temporal-TemporalUnit5159)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Duration this5160 ^js/JSJoda.Temporal java-time-temporal-Temporal5161] (.addTo this5160 java-time-temporal-Temporal5161)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5162 ^long long5163] (.plusHours this5162 long5163)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5164 ^long long5165] (.plusDays this5164 long5165)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long5166] (js-invoke java.time.Duration "ofHours" long5166)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this5167] (.toMillis this5167)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this5168] (.toHours this5168)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long5169] (js-invoke java.time.Duration "ofNanos" long5169)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long5170] (js-invoke java.time.Duration "ofMillis" long5170)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5171] (.negated this5171)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5172] (.abs this5172)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^js/JSJoda.Duration [^js/JSJoda.Temporal java-time-temporal-Temporal5173 ^js/JSJoda.Temporal java-time-temporal-Temporal5174] (js-invoke java.time.Duration "between" java-time-temporal-Temporal5173 java-time-temporal-Temporal5174)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this5175] (.seconds this5175)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Duration [^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount5176] (js-invoke java.time.Duration "from" java-time-temporal-TemporalAmount5176)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5177 ^long long5178] (.minusNanos this5177 long5178)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^js/JSJoda.Duration [^java.lang.CharSequence java-lang-CharSequence5179] (js-invoke java.time.Duration "parse" java-lang-CharSequence5179)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this5180] (.hashCode this5180)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5181 ^long long5182] (.withSeconds this5181 long5182)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long5183] (js-invoke java.time.Duration "ofMinutes" long5183)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Duration this5184 ^js/JSJoda.Temporal java-time-temporal-Temporal5185] (.subtractFrom this5184 java-time-temporal-Temporal5185)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.time.Duration"]))} (^int [^js/JSJoda.Duration this5186 ^js/JSJoda.Duration java-time-Duration5187] (.compareTo this5186 java-time-Duration5187)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5188 ^long long5189] (.plusSeconds this5188 long5189)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Duration this5190 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5191] (.get this5190 java-time-temporal-TemporalUnit5191)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^boolean [^js/JSJoda.Duration this5192 ^java.lang.Object java-lang-Object5193] (.equals this5192 java-lang-Object5193)))
(clojure.core/defn of-seconds {:arglists (quote (["long"] ["long" "long"]))} (^js/JSJoda.Duration [^long long5194] (js-invoke java.time.Duration "ofSeconds" long5194)) (^js/JSJoda.Duration [^long long5195 ^long long5196] (js-invoke java.time.Duration "ofSeconds" long5195 long5196)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5197 ^long long5198] (.minusDays this5197 long5198)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this5199] (.toDays this5199)))
