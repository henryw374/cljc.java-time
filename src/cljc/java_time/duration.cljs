(ns cljc.java-time.duration (:require [java.time :refer [Duration]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def zero (. java.time.Duration -ZERO))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50333 ^long long50334] (.minusMinutes this50333 long50334)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this50335] (.toNanos this50335)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50336 ^long long50337] (.minusMillis this50336 long50337)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50338 ^long long50339] (.minusHours this50338 long50339)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long50340] (. java.time.Duration ofDays long50340)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this50341] (.isNegative this50341)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long50342 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit50343] (. java.time.Duration of long50342 java-time-temporal-TemporalUnit50343)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this50344] (.isZero this50344)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50345 ^long long50346] (.multipliedBy this50345 long50346)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this50347 ^java.lang.Integer int50348] (.withNanos this50347 int50348)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this50349] (.units this50349)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this50350] (.nano this50350)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50351 ^long long50352] (.plusMillis this50351 long50352)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this50353] (.toMinutes this50353)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50354 ^long long50355] (.minusSeconds this50354 long50355)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50356 ^long long50357] (.plusNanos this50356 long50357)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this50358 ^java.time.Duration java-time-Duration50359] (.plus this50358 java-time-Duration50359)) (^java.time.Duration [^java.time.Duration this50360 ^long long50361 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit50362] (.plus this50360 long50361 java-time-temporal-TemporalUnit50362)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50363 ^long long50364] (.dividedBy this50363 long50364)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50365 ^long long50366] (.plusMinutes this50365 long50366)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this50367] (.toString this50367)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this50368 ^java.time.Duration java-time-Duration50369] (.minus this50368 java-time-Duration50369)) (^java.time.Duration [^java.time.Duration this50370 ^long long50371 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit50372] (.minus this50370 long50371 java-time-temporal-TemporalUnit50372)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this50373 ^java.time.temporal.Temporal java-time-temporal-Temporal50374] (.addTo this50373 java-time-temporal-Temporal50374)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50375 ^long long50376] (.plusHours this50375 long50376)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50377 ^long long50378] (.plusDays this50377 long50378)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long50379] (. java.time.Duration ofHours long50379)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this50380] (.toMillis this50380)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this50381] (.toHours this50381)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long50382] (. java.time.Duration ofNanos long50382)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long50383] (. java.time.Duration ofMillis long50383)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this50384] (.negated this50384)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this50385] (.abs this50385)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal50386 ^java.time.temporal.Temporal java-time-temporal-Temporal50387] (. java.time.Duration between java-time-temporal-Temporal50386 java-time-temporal-Temporal50387)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this50388] (.seconds this50388)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount50389] (. java.time.Duration from java-time-temporal-TemporalAmount50389)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50390 ^long long50391] (.minusNanos this50390 long50391)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence50392] (. java.time.Duration parse java-lang-CharSequence50392)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this50393] (.hashCode this50393)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50394 ^long long50395] (.withSeconds this50394 long50395)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long50396] (. java.time.Duration ofMinutes long50396)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this50397 ^java.time.temporal.Temporal java-time-temporal-Temporal50398] (.subtractFrom this50397 java-time-temporal-Temporal50398)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "java.lang.Object"]))} (^java.lang.Integer [this50399 G__50400] (.compareTo ^java.time.Duration this50399 G__50400)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50401 ^long long50402] (.plusSeconds this50401 long50402)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this50403 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit50404] (.get this50403 java-time-temporal-TemporalUnit50404)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this50405 ^java.lang.Object java-lang-Object50406] (.equals this50405 java-lang-Object50406)))
(clojure.core/defn of-seconds {:arglists (quote (["long"] ["long" "long"]))} (^java.time.Duration [^long long50407] (. java.time.Duration ofSeconds long50407)) (^java.time.Duration [^long long50408 ^long long50409] (. java.time.Duration ofSeconds long50408 long50409)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50410 ^long long50411] (.minusDays this50410 long50411)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this50412] (.toDays this50412)))
