(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Duration]]))
(def zero (goog.object/get java.time.Duration "ZERO"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8151 ^long long8152] (.minusMinutes this8151 long8152)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8153 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit8154] (.truncatedTo this8153 java-time-temporal-TemporalUnit8154)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this8155] (.toNanos this8155)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8156 ^long long8157] (.minusMillis this8156 long8157)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8158 ^long long8159] (.minusHours this8158 long8159)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long8160] (js-invoke java.time.Duration "ofDays" long8160)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^boolean [^js/JSJoda.Duration this8161] (.isNegative this8161)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^long long8162 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit8163] (js-invoke java.time.Duration "of" long8162 java-time-temporal-TemporalUnit8163)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^boolean [^js/JSJoda.Duration this8164] (.isZero this8164)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8165 ^long long8166] (.multipliedBy this8165 long8166)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8167 ^int int8168] (.withNanos this8167 int8168)))
(clojure.core/defn to-nanos-part {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this8169] (.toNanosPart this8169)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^js/JSJoda.Duration this8170] (.units this8170)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this8171] (.nano this8171)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8172 ^long long8173] (.plusMillis this8172 long8173)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this8174] (.toMinutes this8174)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8175 ^long long8176] (.minusSeconds this8175 long8176)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8177 ^long long8178] (.plusNanos this8177 long8178)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8179 ^long long8180 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit8181] (.plus this8179 long8180 java-time-temporal-TemporalUnit8181)) (^js/JSJoda.Duration [^js/JSJoda.Duration this8182 ^js/JSJoda.Duration java-time-Duration8183] (.plus this8182 java-time-Duration8183)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long"]))} (^java.lang.Object [this8184 G__8185] (.dividedBy ^js/JSJoda.Duration this8184 G__8185)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8186 ^long long8187] (.plusMinutes this8186 long8187)))
(clojure.core/defn to-days-part {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this8188] (.toDaysPart this8188)))
(clojure.core/defn to-millis-part {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this8189] (.toMillisPart this8189)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^js/JSJoda.Duration this8190] (.toString this8190)))
(clojure.core/defn to-seconds-part {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this8191] (.toSecondsPart this8191)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8192 ^long long8193 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit8194] (.minus this8192 long8193 java-time-temporal-TemporalUnit8194)) (^js/JSJoda.Duration [^js/JSJoda.Duration this8195 ^js/JSJoda.Duration java-time-Duration8196] (.minus this8195 java-time-Duration8196)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Duration this8197 ^js/JSJoda.Temporal java-time-temporal-Temporal8198] (.addTo this8197 java-time-temporal-Temporal8198)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8199 ^long long8200] (.plusHours this8199 long8200)))
(clojure.core/defn to-minutes-part {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this8201] (.toMinutesPart this8201)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8202 ^long long8203] (.plusDays this8202 long8203)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long8204] (js-invoke java.time.Duration "ofHours" long8204)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this8205] (.toMillis this8205)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this8206] (.toHours this8206)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long8207] (js-invoke java.time.Duration "ofNanos" long8207)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long8208] (js-invoke java.time.Duration "ofMillis" long8208)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8209] (.negated this8209)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8210] (.abs this8210)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^js/JSJoda.Duration [^js/JSJoda.Temporal java-time-temporal-Temporal8211 ^js/JSJoda.Temporal java-time-temporal-Temporal8212] (js-invoke java.time.Duration "between" java-time-temporal-Temporal8211 java-time-temporal-Temporal8212)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this8213] (.seconds this8213)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Duration [^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount8214] (js-invoke java.time.Duration "from" java-time-temporal-TemporalAmount8214)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8215 ^long long8216] (.minusNanos this8215 long8216)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^js/JSJoda.Duration [^java.lang.CharSequence java-lang-CharSequence8217] (js-invoke java.time.Duration "parse" java-lang-CharSequence8217)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this8218] (.hashCode this8218)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8219 ^long long8220] (.withSeconds this8219 long8220)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long8221] (js-invoke java.time.Duration "ofMinutes" long8221)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Duration this8222 ^js/JSJoda.Temporal java-time-temporal-Temporal8223] (.subtractFrom this8222 java-time-temporal-Temporal8223)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "java.lang.Object"]))} (^int [this8224 G__8225] (.compareTo ^js/JSJoda.Duration this8224 G__8225)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8226 ^long long8227] (.plusSeconds this8226 long8227)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Duration this8228 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit8229] (.get this8228 java-time-temporal-TemporalUnit8229)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^boolean [^js/JSJoda.Duration this8230 ^java.lang.Object java-lang-Object8231] (.equals this8230 java-lang-Object8231)))
(clojure.core/defn to-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this8232] (.toSeconds this8232)))
(clojure.core/defn to-hours-part {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this8233] (.toHoursPart this8233)))
(clojure.core/defn of-seconds {:arglists (quote (["long" "long"] ["long"]))} (^js/JSJoda.Duration [^long long8234 ^long long8235] (js-invoke java.time.Duration "ofSeconds" long8234 long8235)) (^js/JSJoda.Duration [^long long8236] (js-invoke java.time.Duration "ofSeconds" long8236)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this8237 ^long long8238] (.minusDays this8237 long8238)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this8239] (.toDays this8239)))
