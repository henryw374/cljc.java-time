(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Duration]]))
(def zero (goog.object/get java.time.Duration "ZERO"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5119 ^long long5120] (.minusMinutes this5119 long5120)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this5121] (.toNanos this5121)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5122 ^long long5123] (.minusMillis this5122 long5123)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5124 ^long long5125] (.minusHours this5124 long5125)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long5126] (js-invoke java.time.Duration "ofDays" long5126)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^boolean [^js/JSJoda.Duration this5127] (.isNegative this5127)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^long long5128 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5129] (js-invoke java.time.Duration "of" long5128 java-time-temporal-TemporalUnit5129)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^boolean [^js/JSJoda.Duration this5130] (.isZero this5130)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5131 ^long long5132] (.multipliedBy this5131 long5132)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5133 ^int int5134] (.withNanos this5133 int5134)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^js/JSJoda.Duration this5135] (.units this5135)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this5136] (.nano this5136)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5137 ^long long5138] (.plusMillis this5137 long5138)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this5139] (.toMinutes this5139)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5140 ^long long5141] (.minusSeconds this5140 long5141)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5142 ^long long5143] (.plusNanos this5142 long5143)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5144 ^long long5145 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5146] (.plus this5144 long5145 java-time-temporal-TemporalUnit5146)) (^js/JSJoda.Duration [^js/JSJoda.Duration this5147 ^js/JSJoda.Duration java-time-Duration5148] (.plus this5147 java-time-Duration5148)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5149 ^long long5150] (.dividedBy this5149 long5150)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5151 ^long long5152] (.plusMinutes this5151 long5152)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^js/JSJoda.Duration this5153] (.toString this5153)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5154 ^js/JSJoda.Duration java-time-Duration5155] (.minus this5154 java-time-Duration5155)) (^js/JSJoda.Duration [^js/JSJoda.Duration this5156 ^long long5157 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5158] (.minus this5156 long5157 java-time-temporal-TemporalUnit5158)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Duration this5159 ^js/JSJoda.Temporal java-time-temporal-Temporal5160] (.addTo this5159 java-time-temporal-Temporal5160)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5161 ^long long5162] (.plusHours this5161 long5162)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5163 ^long long5164] (.plusDays this5163 long5164)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long5165] (js-invoke java.time.Duration "ofHours" long5165)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this5166] (.toMillis this5166)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this5167] (.toHours this5167)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long5168] (js-invoke java.time.Duration "ofNanos" long5168)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long5169] (js-invoke java.time.Duration "ofMillis" long5169)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5170] (.negated this5170)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5171] (.abs this5171)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^js/JSJoda.Duration [^js/JSJoda.Temporal java-time-temporal-Temporal5172 ^js/JSJoda.Temporal java-time-temporal-Temporal5173] (js-invoke java.time.Duration "between" java-time-temporal-Temporal5172 java-time-temporal-Temporal5173)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this5174] (.seconds this5174)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Duration [^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount5175] (js-invoke java.time.Duration "from" java-time-temporal-TemporalAmount5175)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5176 ^long long5177] (.minusNanos this5176 long5177)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^js/JSJoda.Duration [^java.lang.CharSequence java-lang-CharSequence5178] (js-invoke java.time.Duration "parse" java-lang-CharSequence5178)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this5179] (.hashCode this5179)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5180 ^long long5181] (.withSeconds this5180 long5181)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long5182] (js-invoke java.time.Duration "ofMinutes" long5182)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Duration this5183 ^js/JSJoda.Temporal java-time-temporal-Temporal5184] (.subtractFrom this5183 java-time-temporal-Temporal5184)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.time.Duration"]))} (^int [^js/JSJoda.Duration this5185 ^js/JSJoda.Duration java-time-Duration5186] (.compareTo this5185 java-time-Duration5186)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5187 ^long long5188] (.plusSeconds this5187 long5188)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Duration this5189 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5190] (.get this5189 java-time-temporal-TemporalUnit5190)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^boolean [^js/JSJoda.Duration this5191 ^java.lang.Object java-lang-Object5192] (.equals this5191 java-lang-Object5192)))
(clojure.core/defn of-seconds {:arglists (quote (["long"] ["long" "long"]))} (^js/JSJoda.Duration [^long long5193] (js-invoke java.time.Duration "ofSeconds" long5193)) (^js/JSJoda.Duration [^long long5194 ^long long5195] (js-invoke java.time.Duration "ofSeconds" long5194 long5195)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this5196 ^long long5197] (.minusDays this5196 long5197)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this5198] (.toDays this5198)))
