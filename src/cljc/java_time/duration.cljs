(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Duration]]))
(def zero (. java.time.Duration -ZERO))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12341 ^long long12342] (.minusMinutes this12341 long12342)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this12343] (.toNanos this12343)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12344 ^long long12345] (.minusMillis this12344 long12345)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12346 ^long long12347] (.minusHours this12346 long12347)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long12348] (. java.time.Duration ofDays long12348)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this12349] (.isNegative this12349)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long12350 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12351] (. java.time.Duration of long12350 java-time-temporal-TemporalUnit12351)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this12352] (.isZero this12352)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12353 ^long long12354] (.multipliedBy this12353 long12354)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this12355 ^java.lang.Integer int12356] (.withNanos this12355 int12356)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this12357] (.units this12357)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this12358] (.nano this12358)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12359 ^long long12360] (.plusMillis this12359 long12360)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this12361] (.toMinutes this12361)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12362 ^long long12363] (.minusSeconds this12362 long12363)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12364 ^long long12365] (.plusNanos this12364 long12365)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this12366 ^long long12367 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12368] (.plus this12366 long12367 java-time-temporal-TemporalUnit12368)) (^java.time.Duration [^java.time.Duration this12369 ^java.time.Duration java-time-Duration12370] (.plus this12369 java-time-Duration12370)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12371 ^long long12372] (.dividedBy this12371 long12372)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12373 ^long long12374] (.plusMinutes this12373 long12374)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this12375] (.toString this12375)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this12376 ^java.time.Duration java-time-Duration12377] (.minus this12376 java-time-Duration12377)) (^java.time.Duration [^java.time.Duration this12378 ^long long12379 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12380] (.minus this12378 long12379 java-time-temporal-TemporalUnit12380)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this12381 ^java.time.temporal.Temporal java-time-temporal-Temporal12382] (.addTo this12381 java-time-temporal-Temporal12382)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12383 ^long long12384] (.plusHours this12383 long12384)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12385 ^long long12386] (.plusDays this12385 long12386)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long12387] (. java.time.Duration ofHours long12387)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this12388] (.toMillis this12388)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this12389] (.toHours this12389)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long12390] (. java.time.Duration ofNanos long12390)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long12391] (. java.time.Duration ofMillis long12391)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this12392] (.negated this12392)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this12393] (.abs this12393)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal12394 ^java.time.temporal.Temporal java-time-temporal-Temporal12395] (. java.time.Duration between java-time-temporal-Temporal12394 java-time-temporal-Temporal12395)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this12396] (.seconds this12396)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount12397] (. java.time.Duration from java-time-temporal-TemporalAmount12397)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12398 ^long long12399] (.minusNanos this12398 long12399)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence12400] (. java.time.Duration parse java-lang-CharSequence12400)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this12401] (.hashCode this12401)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12402 ^long long12403] (.withSeconds this12402 long12403)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long12404] (. java.time.Duration ofMinutes long12404)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this12405 ^java.time.temporal.Temporal java-time-temporal-Temporal12406] (.subtractFrom this12405 java-time-temporal-Temporal12406)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.lang.Object"] ["java.time.Duration" "java.time.Duration"]))} (^java.lang.Integer [this12407 G__12408] (.compareTo ^java.time.Duration this12407 G__12408)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12409 ^long long12410] (.plusSeconds this12409 long12410)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this12411 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12412] (.get this12411 java-time-temporal-TemporalUnit12412)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this12413 ^java.lang.Object java-lang-Object12414] (.equals this12413 java-lang-Object12414)))
(clojure.core/defn of-seconds {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Duration [^long long12415 ^long long12416] (. java.time.Duration ofSeconds long12415 long12416)) (^java.time.Duration [^long long12417] (. java.time.Duration ofSeconds long12417)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12418 ^long long12419] (.minusDays this12418 long12419)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this12420] (.toDays this12420)))
