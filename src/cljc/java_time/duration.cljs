(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [Duration]]))
(def zero (goog.object/get java.time.Duration "ZERO"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14637 ^long long14638] (.minusMinutes this14637 long14638)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this14639] (.toNanos this14639)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14640 ^long long14641] (.minusMillis this14640 long14641)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14642 ^long long14643] (.minusHours this14642 long14643)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long14644] (js-invoke java.time.Duration "ofDays" long14644)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^boolean [^js/JSJoda.Duration this14645] (.isNegative this14645)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Duration [^long long14646 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14647] (js-invoke java.time.Duration "of" long14646 java-time-temporal-TemporalUnit14647)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^boolean [^js/JSJoda.Duration this14648] (.isZero this14648)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14649 ^long long14650] (.multipliedBy this14649 long14650)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14651 ^int int14652] (.withNanos this14651 int14652)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^js/JSJoda.Duration this14653] (.units this14653)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this14654] (.nano this14654)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14655 ^long long14656] (.plusMillis this14655 long14656)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this14657] (.toMinutes this14657)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14658 ^long long14659] (.minusSeconds this14658 long14659)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14660 ^long long14661] (.plusNanos this14660 long14661)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14662 ^long long14663 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14664] (.plus this14662 long14663 java-time-temporal-TemporalUnit14664)) (^js/JSJoda.Duration [^js/JSJoda.Duration this14665 ^js/JSJoda.Duration java-time-Duration14666] (.plus this14665 java-time-Duration14666)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14667 ^long long14668] (.dividedBy this14667 long14668)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14669 ^long long14670] (.plusMinutes this14669 long14670)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^js/JSJoda.Duration this14671] (.toString this14671)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14672 ^long long14673 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14674] (.minus this14672 long14673 java-time-temporal-TemporalUnit14674)) (^js/JSJoda.Duration [^js/JSJoda.Duration this14675 ^js/JSJoda.Duration java-time-Duration14676] (.minus this14675 java-time-Duration14676)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Duration this14677 ^js/JSJoda.Temporal java-time-temporal-Temporal14678] (.addTo this14677 java-time-temporal-Temporal14678)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14679 ^long long14680] (.plusHours this14679 long14680)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14681 ^long long14682] (.plusDays this14681 long14682)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long14683] (js-invoke java.time.Duration "ofHours" long14683)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this14684] (.toMillis this14684)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this14685] (.toHours this14685)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long14686] (js-invoke java.time.Duration "ofNanos" long14686)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long14687] (js-invoke java.time.Duration "ofMillis" long14687)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14688] (.negated this14688)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14689] (.abs this14689)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^js/JSJoda.Duration [^js/JSJoda.Temporal java-time-temporal-Temporal14690 ^js/JSJoda.Temporal java-time-temporal-Temporal14691] (js-invoke java.time.Duration "between" java-time-temporal-Temporal14690 java-time-temporal-Temporal14691)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this14692] (.seconds this14692)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Duration [^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount14693] (js-invoke java.time.Duration "from" java-time-temporal-TemporalAmount14693)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14694 ^long long14695] (.minusNanos this14694 long14695)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^js/JSJoda.Duration [^java.lang.CharSequence java-lang-CharSequence14696] (js-invoke java.time.Duration "parse" java-lang-CharSequence14696)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^int [^js/JSJoda.Duration this14697] (.hashCode this14697)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14698 ^long long14699] (.withSeconds this14698 long14699)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^js/JSJoda.Duration [^long long14700] (js-invoke java.time.Duration "ofMinutes" long14700)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Duration this14701 ^js/JSJoda.Temporal java-time-temporal-Temporal14702] (.subtractFrom this14701 java-time-temporal-Temporal14702)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.time.Duration"]))} (^int [^js/JSJoda.Duration this14703 ^js/JSJoda.Duration java-time-Duration14704] (.compareTo this14703 java-time-Duration14704)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14705 ^long long14706] (.plusSeconds this14705 long14706)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Duration this14707 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14708] (.get this14707 java-time-temporal-TemporalUnit14708)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^boolean [^js/JSJoda.Duration this14709 ^java.lang.Object java-lang-Object14710] (.equals this14709 java-lang-Object14710)))
(clojure.core/defn of-seconds {:arglists (quote (["long" "long"] ["long"]))} (^js/JSJoda.Duration [^long long14711 ^long long14712] (js-invoke java.time.Duration "ofSeconds" long14711 long14712)) (^js/JSJoda.Duration [^long long14713] (js-invoke java.time.Duration "ofSeconds" long14713)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^js/JSJoda.Duration [^js/JSJoda.Duration this14714 ^long long14715] (.minusDays this14714 long14715)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^js/JSJoda.Duration this14716] (.toDays this14716)))
