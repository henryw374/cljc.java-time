(ns cljc.java-time.offset-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [OffsetDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time OffsetDateTime])))
(def min (. java.time.OffsetDateTime -MIN))
(def max (. java.time.OffsetDateTime -MAX))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4049 ^long long4050] (.minusMinutes this4049 long4050)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4051 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4052] (.truncatedTo this4051 java-time-temporal-TemporalUnit4052)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4053 ^long long4054] (.minusWeeks this4053 long4054)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this4055] (.toInstant this4055)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4056 ^long long4057] (.plusWeeks this4056 long4057)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this4058 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4059] (.range this4058 java-time-temporal-TemporalField4059)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4060] (jti/getter hour this4060)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this4061 ^java.time.ZoneId java-time-ZoneId4062] (.atZoneSameInstant this4061 java-time-ZoneId4062)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4063 ^long long4064] (.minusHours this4063 long4064)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime4065 ^java.time.ZoneOffset java-time-ZoneOffset4066] (. java.time.OffsetDateTime of java-time-LocalDateTime4065 java-time-ZoneOffset4066)) (^java.time.OffsetDateTime [^java.lang.Integer int4067 ^java.lang.Integer int4068 ^java.lang.Integer int4069 ^java.lang.Integer int4070 ^java.lang.Integer int4071 ^java.lang.Integer int4072 ^java.lang.Integer int4073 ^java.time.ZoneOffset java-time-ZoneOffset4074] (. java.time.OffsetDateTime of int4067 int4068 int4069 int4070 int4071 int4072 int4073 java-time-ZoneOffset4074)) (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate4075 ^java.time.LocalTime java-time-LocalTime4076 ^java.time.ZoneOffset java-time-ZoneOffset4077] (. java.time.OffsetDateTime of java-time-LocalDate4075 java-time-LocalTime4076 java-time-ZoneOffset4077)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4078 ^java.lang.Integer int4079] (.withMonth this4078 int4079)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this4080 ^java.time.OffsetDateTime java-time-OffsetDateTime4081] (.isEqual this4080 java-time-OffsetDateTime4081)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4082] (jti/getter nano this4082)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this4083] (.toOffsetTime this4083)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this4084 ^java.time.ZoneId java-time-ZoneId4085] (.atZoneSimilarLocal this4084 java-time-ZoneId4085)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4086] (jti/getter year this4086)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4087 ^long long4088] (.minusSeconds this4087 long4088)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4089] (jti/getter second this4089)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4090 ^long long4091] (.plusNanos this4090 long4091)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4092] (jti/getter dayOfYear this4092)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this4093 G__4094] #? (:cljs (.plus ^java.time.OffsetDateTime this4093 G__4094) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__4094)) (clojure.core/let [G__4094 ^"java.time.temporal.TemporalAmount" G__4094] (.plus ^java.time.OffsetDateTime this4093 G__4094)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__4094)) (clojure.core/let [G__4094 ^"java.time.temporal.TemporalAmount" G__4094] (.plus ^java.time.OffsetDateTime this4093 G__4094)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this4095 G__4096 G__4097] #? (:cljs (.plus ^java.time.OffsetDateTime this4095 G__4096 G__4097) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__4096) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__4097)) (clojure.core/let [G__4096 (clojure.core/long G__4096) G__4097 ^"java.time.temporal.TemporalUnit" G__4097] (.plus ^java.time.OffsetDateTime this4095 G__4096 G__4097)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__4096) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__4097)) (clojure.core/let [G__4096 (clojure.core/long G__4096) G__4097 ^"java.time.temporal.TemporalUnit" G__4097] (.plus ^java.time.OffsetDateTime this4095 G__4096 G__4097)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (. java.time.OffsetDateTime timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4098 ^java.lang.Integer int4099] (.withHour this4098 int4099)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4100 ^java.lang.Integer int4101] (.withMinute this4100 int4101)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4102 ^long long4103] (.plusMinutes this4102 long4103)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this4104 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4105] (.query this4104 java-time-temporal-TemporalQuery4105)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4106 ^java.time.ZoneOffset java-time-ZoneOffset4107] (.withOffsetSameInstant this4106 java-time-ZoneOffset4107)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this4108] (jti/getter dayOfWeek this4108)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this4109] (.toString this4109)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4110 ^long long4111] (.plusMonths this4110 long4111)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this4112 ^java.time.OffsetDateTime java-time-OffsetDateTime4113] (.isBefore this4112 java-time-OffsetDateTime4113)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4114 ^long long4115] (.minusMonths this4114 long4115)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this4116 G__4117] #? (:cljs (.minus ^java.time.OffsetDateTime this4116 G__4117) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__4117)) (clojure.core/let [G__4117 ^"java.time.temporal.TemporalAmount" G__4117] (.minus ^java.time.OffsetDateTime this4116 G__4117)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__4117)) (clojure.core/let [G__4117 ^"java.time.temporal.TemporalAmount" G__4117] (.minus ^java.time.OffsetDateTime this4116 G__4117)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this4118 G__4119 G__4120] #? (:cljs (.minus ^java.time.OffsetDateTime this4118 G__4119 G__4120) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__4119) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__4120)) (clojure.core/let [G__4119 (clojure.core/long G__4119) G__4120 ^"java.time.temporal.TemporalUnit" G__4120] (.minus ^java.time.OffsetDateTime this4118 G__4119 G__4120)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__4119) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__4120)) (clojure.core/let [G__4119 (clojure.core/long G__4119) G__4120 ^"java.time.temporal.TemporalUnit" G__4120] (.minus ^java.time.OffsetDateTime this4118 G__4119 G__4120)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4121 ^long long4122] (.plusHours this4121 long4122)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4123 ^long long4124] (.plusDays this4123 long4124)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this4125] (.toLocalTime this4125)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this4126 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4127] (.getLong this4126 java-time-temporal-TemporalField4127)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this4128] (jti/getter offset this4128)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this4129] (.toZonedDateTime this4129)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4130 ^java.lang.Integer int4131] (.withYear this4130 int4131)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4132 ^java.lang.Integer int4133] (.withNano this4132 int4133)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this4134] (.toEpochSecond this4134)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this4135 ^java.time.temporal.Temporal java-time-temporal-Temporal4136 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4137] (.until this4135 java-time-temporal-Temporal4136 java-time-temporal-TemporalUnit4137)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4138 ^java.time.ZoneOffset java-time-ZoneOffset4139] (.withOffsetSameLocal this4138 java-time-ZoneOffset4139)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4140 ^java.lang.Integer int4141] (.withDayOfMonth this4140 int4141)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4142] (jti/getter dayOfMonth this4142)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4143] (. java.time.OffsetDateTime from java-time-temporal-TemporalAccessor4143)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this4144 ^java.time.OffsetDateTime java-time-OffsetDateTime4145] (.isAfter this4144 java-time-OffsetDateTime4145)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4146 ^long long4147] (.minusNanos this4146 long4147)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this4148 G__4149] #? (:cljs (.isSupported ^java.time.OffsetDateTime this4148 G__4149) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__4149)) (clojure.core/let [G__4149 ^"java.time.temporal.TemporalField" G__4149] (.isSupported ^java.time.OffsetDateTime this4148 G__4149)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__4149)) (clojure.core/let [G__4149 ^"java.time.temporal.TemporalUnit" G__4149] (.isSupported ^java.time.OffsetDateTime this4148 G__4149)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4150 ^long long4151] (.minusYears this4150 long4151)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence4152] (. java.time.OffsetDateTime parse java-lang-CharSequence4152)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence4153 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4154] (. java.time.OffsetDateTime parse java-lang-CharSequence4153 java-time-format-DateTimeFormatter4154)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4155 ^java.lang.Integer int4156] (.withSecond this4155 int4156)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this4157] (.toLocalDate this4157)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4158] (jti/getter minute this4158)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4159] (.hashCode this4159)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this4160 ^java.time.temporal.Temporal java-time-temporal-Temporal4161] (.adjustInto this4160 java-time-temporal-Temporal4161)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this4162 G__4163] #? (:cljs (.with ^java.time.OffsetDateTime this4162 G__4163) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__4163)) (clojure.core/let [G__4163 ^"java.time.temporal.TemporalAdjuster" G__4163] (.with ^java.time.OffsetDateTime this4162 G__4163)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__4163)) (clojure.core/let [G__4163 ^"java.time.temporal.TemporalAdjuster" G__4163] (.with ^java.time.OffsetDateTime this4162 G__4163)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this4164 G__4165 G__4166] #? (:cljs (.with ^java.time.OffsetDateTime this4164 G__4165 G__4166) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__4165) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__4166)) (clojure.core/let [G__4165 ^"java.time.temporal.TemporalField" G__4165 G__4166 (clojure.core/long G__4166)] (.with ^java.time.OffsetDateTime this4164 G__4165 G__4166)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__4165) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__4166)) (clojure.core/let [G__4165 ^"java.time.temporal.TemporalField" G__4165 G__4166 (clojure.core/long G__4166)] (.with ^java.time.OffsetDateTime this4164 G__4165 G__4166)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.OffsetDateTime [] (. java.time.OffsetDateTime now)) (^java.time.OffsetDateTime [G__4168] #? (:cljs (. java.time.OffsetDateTime now G__4168) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__4168)) (clojure.core/let [G__4168 ^"java.time.ZoneId" G__4168] (. java.time.OffsetDateTime now G__4168)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__4168)) (clojure.core/let [G__4168 ^"java.time.Clock" G__4168] (. java.time.OffsetDateTime now G__4168)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this4169] (.toLocalDateTime this4169)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4170] (jti/getter monthValue this4170)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4171 ^java.lang.Integer int4172] (.withDayOfYear this4171 int4172)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"] ["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [this4173 G__4174] #? (:cljs (.compareTo ^java.time.OffsetDateTime this4173 G__4174) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__4174)) (clojure.core/let [G__4174 ^"java.lang.Object" G__4174] (.compareTo ^java.time.OffsetDateTime this4173 G__4174)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetDateTime") G__4174)) (clojure.core/let [G__4174 ^"java.time.OffsetDateTime" G__4174] (.compareTo ^java.time.OffsetDateTime this4173 G__4174)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this4175] (jti/getter month this4175)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant4176 ^java.time.ZoneId java-time-ZoneId4177] (. java.time.OffsetDateTime ofInstant java-time-Instant4176 java-time-ZoneId4177)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4178 ^long long4179] (.plusSeconds this4178 long4179)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4180 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4181] (.get this4180 java-time-temporal-TemporalField4181)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this4182 ^java.lang.Object java-lang-Object4183] (.equals this4182 java-lang-Object4183)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this4184 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4185] (.format this4184 java-time-format-DateTimeFormatter4185)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4186 ^long long4187] (.plusYears this4186 long4187)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4188 ^long long4189] (.minusDays this4188 long4189)))
