(ns cljc.java-time.local-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [LocalDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time LocalDateTime])))
(def max #? (:clj java.time.LocalDateTime/MAX :cljs (. java.time.LocalDateTime -MAX)))
(def min #? (:clj java.time.LocalDateTime/MIN :cljs (. java.time.LocalDateTime -MIN)))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12368 ^long long12369] (.minusMinutes this12368 long12369)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12370 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12371] (.truncatedTo this12370 java-time-temporal-TemporalUnit12371)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12372 ^long long12373] (.minusWeeks this12372 long12373)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.Instant [^java.time.LocalDateTime this12374 ^java.time.ZoneOffset java-time-ZoneOffset12375] (.toInstant this12374 java-time-ZoneOffset12375)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12376 ^long long12377] (.plusWeeks this12376 long12377)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDateTime this12378 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12379] (.range this12378 java-time-temporal-TemporalField12379)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^java.time.LocalDateTime [^long long12380 ^java.lang.Integer int12381 ^java.time.ZoneOffset java-time-ZoneOffset12382] (. java.time.LocalDateTime ofEpochSecond long12380 int12381 java-time-ZoneOffset12382)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12383] (jti/getter hour this12383)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime this12384 ^java.time.ZoneOffset java-time-ZoneOffset12385] (.atOffset this12384 java-time-ZoneOffset12385)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12386 ^long long12387] (.minusHours this12386 long12387)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"]))} (^java.time.LocalDateTime [G__12389 G__12390 G__12391 G__12392 G__12393] #? (:cljs (. java.time.LocalDateTime of G__12389 G__12390 G__12391 G__12392 G__12393) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12389) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__12390) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12391) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12392) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12393)) (clojure.core/let [G__12389 (clojure.core/int G__12389) G__12390 ^"java.time.Month" G__12390 G__12391 (clojure.core/int G__12391) G__12392 (clojure.core/int G__12392) G__12393 (clojure.core/int G__12393)] (. java.time.LocalDateTime of G__12389 G__12390 G__12391 G__12392 G__12393)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12389) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12390) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12391) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12392) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12393)) (clojure.core/let [G__12389 (clojure.core/int G__12389) G__12390 (clojure.core/int G__12390) G__12391 (clojure.core/int G__12391) G__12392 (clojure.core/int G__12392) G__12393 (clojure.core/int G__12393)] (. java.time.LocalDateTime of G__12389 G__12390 G__12391 G__12392 G__12393)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [G__12395 G__12396 G__12397 G__12398 G__12399 G__12400 G__12401] #? (:cljs (. java.time.LocalDateTime of G__12395 G__12396 G__12397 G__12398 G__12399 G__12400 G__12401) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12395) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__12396) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12397) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12398) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12399) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12400) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12401)) (clojure.core/let [G__12395 (clojure.core/int G__12395) G__12396 ^"java.time.Month" G__12396 G__12397 (clojure.core/int G__12397) G__12398 (clojure.core/int G__12398) G__12399 (clojure.core/int G__12399) G__12400 (clojure.core/int G__12400) G__12401 (clojure.core/int G__12401)] (. java.time.LocalDateTime of G__12395 G__12396 G__12397 G__12398 G__12399 G__12400 G__12401)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12395) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12396) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12397) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12398) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12399) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12400) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12401)) (clojure.core/let [G__12395 (clojure.core/int G__12395) G__12396 (clojure.core/int G__12396) G__12397 (clojure.core/int G__12397) G__12398 (clojure.core/int G__12398) G__12399 (clojure.core/int G__12399) G__12400 (clojure.core/int G__12400) G__12401 (clojure.core/int G__12401)] (. java.time.LocalDateTime of G__12395 G__12396 G__12397 G__12398 G__12399 G__12400 G__12401)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [^java.time.LocalDate java-time-LocalDate12402 ^java.time.LocalTime java-time-LocalTime12403] (. java.time.LocalDateTime of java-time-LocalDate12402 java-time-LocalTime12403)) (^java.time.LocalDateTime [G__12405 G__12406 G__12407 G__12408 G__12409 G__12410] #? (:cljs (. java.time.LocalDateTime of G__12405 G__12406 G__12407 G__12408 G__12409 G__12410) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12405) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12406) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12407) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12408) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12409) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12410)) (clojure.core/let [G__12405 (clojure.core/int G__12405) G__12406 (clojure.core/int G__12406) G__12407 (clojure.core/int G__12407) G__12408 (clojure.core/int G__12408) G__12409 (clojure.core/int G__12409) G__12410 (clojure.core/int G__12410)] (. java.time.LocalDateTime of G__12405 G__12406 G__12407 G__12408 G__12409 G__12410)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12405) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__12406) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12407) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12408) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12409) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12410)) (clojure.core/let [G__12405 (clojure.core/int G__12405) G__12406 ^"java.time.Month" G__12406 G__12407 (clojure.core/int G__12407) G__12408 (clojure.core/int G__12408) G__12409 (clojure.core/int G__12409) G__12410 (clojure.core/int G__12410)] (. java.time.LocalDateTime of G__12405 G__12406 G__12407 G__12408 G__12409 G__12410)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12411 ^java.lang.Integer int12412] (.withMonth this12411 int12412)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this12413 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime12414] (.isEqual this12413 java-time-chrono-ChronoLocalDateTime12414)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12415] (jti/getter nano this12415)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12416] (jti/getter year this12416)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12417 ^long long12418] (.minusSeconds this12417 long12418)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12419] (jti/getter second this12419)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12420 ^long long12421] (.plusNanos this12420 long12421)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12422] (jti/getter dayOfYear this12422)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this12423 G__12424 G__12425] #? (:cljs (.plus ^java.time.LocalDateTime this12423 G__12424 G__12425) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12424) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12425)) (clojure.core/let [G__12424 (clojure.core/long G__12424) G__12425 ^"java.time.temporal.TemporalUnit" G__12425] (.plus ^java.time.LocalDateTime this12423 G__12424 G__12425)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12424) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12425)) (clojure.core/let [G__12424 (clojure.core/long G__12424) G__12425 ^"java.time.temporal.TemporalUnit" G__12425] (.plus ^java.time.LocalDateTime this12423 G__12424 G__12425)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12424) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12425)) (clojure.core/let [G__12424 (clojure.core/long G__12424) G__12425 ^"java.time.temporal.TemporalUnit" G__12425] (.plus ^java.time.LocalDateTime this12423 G__12424 G__12425)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12426 G__12427] #? (:cljs (.plus ^java.time.LocalDateTime this12426 G__12427) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12427)) (clojure.core/let [G__12427 ^"java.time.temporal.TemporalAmount" G__12427] (.plus ^java.time.LocalDateTime this12426 G__12427)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12427)) (clojure.core/let [G__12427 ^"java.time.temporal.TemporalAmount" G__12427] (.plus ^java.time.LocalDateTime this12426 G__12427)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12427)) (clojure.core/let [G__12427 ^"java.time.temporal.TemporalAmount" G__12427] (.plus ^java.time.LocalDateTime this12426 G__12427)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12428 ^java.lang.Integer int12429] (.withHour this12428 int12429)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12430 ^java.lang.Integer int12431] (.withMinute this12430 int12431)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12432 ^long long12433] (.plusMinutes this12432 long12433)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDateTime this12434 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12435] (.query this12434 java-time-temporal-TemporalQuery12435)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.DayOfWeek [^java.time.LocalDateTime this12436] (jti/getter dayOfWeek this12436)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^java.time.LocalDateTime this12437] (.toString this12437)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12438 ^long long12439] (.plusMonths this12438 long12439)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this12440 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime12441] (.isBefore this12440 java-time-chrono-ChronoLocalDateTime12441)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12442 ^long long12443] (.minusMonths this12442 long12443)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12444 G__12445] #? (:cljs (.minus ^java.time.LocalDateTime this12444 G__12445) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12445)) (clojure.core/let [G__12445 ^"java.time.temporal.TemporalAmount" G__12445] (.minus ^java.time.LocalDateTime this12444 G__12445)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12445)) (clojure.core/let [G__12445 ^"java.time.temporal.TemporalAmount" G__12445] (.minus ^java.time.LocalDateTime this12444 G__12445)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12445)) (clojure.core/let [G__12445 ^"java.time.temporal.TemporalAmount" G__12445] (.minus ^java.time.LocalDateTime this12444 G__12445)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12446 G__12447 G__12448] #? (:cljs (.minus ^java.time.LocalDateTime this12446 G__12447 G__12448) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12447) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12448)) (clojure.core/let [G__12447 (clojure.core/long G__12447) G__12448 ^"java.time.temporal.TemporalUnit" G__12448] (.minus ^java.time.LocalDateTime this12446 G__12447 G__12448)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12447) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12448)) (clojure.core/let [G__12447 (clojure.core/long G__12447) G__12448 ^"java.time.temporal.TemporalUnit" G__12448] (.minus ^java.time.LocalDateTime this12446 G__12447 G__12448)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12447) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12448)) (clojure.core/let [G__12447 (clojure.core/long G__12447) G__12448 ^"java.time.temporal.TemporalUnit" G__12448] (.minus ^java.time.LocalDateTime this12446 G__12447 G__12448)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this12449 G__12450] #? (:cljs (.atZone ^java.time.LocalDateTime this12449 G__12450) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12450)) (clojure.core/let [G__12450 ^"java.time.ZoneId" G__12450] (.atZone ^java.time.LocalDateTime this12449 G__12450)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12450)) (clojure.core/let [G__12450 ^"java.time.ZoneId" G__12450] (.atZone ^java.time.LocalDateTime this12449 G__12450)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12451 ^long long12452] (.plusHours this12451 long12452)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12453 ^long long12454] (.plusDays this12453 long12454)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalTime [^java.time.LocalDateTime this12455] (.toLocalTime this12455)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDateTime this12456 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12457] (.getLong this12456 java-time-temporal-TemporalField12457)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12458 ^java.lang.Integer int12459] (.withYear this12458 int12459)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12460 ^java.lang.Integer int12461] (.withNano this12460 int12461)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDateTime this12462 ^java.time.ZoneOffset java-time-ZoneOffset12463] (.toEpochSecond this12462 java-time-ZoneOffset12463)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalDateTime this12464 ^java.time.temporal.Temporal java-time-temporal-Temporal12465 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12466] (.until this12464 java-time-temporal-Temporal12465 java-time-temporal-TemporalUnit12466)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12467 ^java.lang.Integer int12468] (.withDayOfMonth this12467 int12468)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12469] (jti/getter dayOfMonth this12469)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12470] (. java.time.LocalDateTime from java-time-temporal-TemporalAccessor12470)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this12471 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime12472] (.isAfter this12471 java-time-chrono-ChronoLocalDateTime12472)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12473 ^long long12474] (.minusNanos this12473 long12474)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this12475 G__12476] #? (:cljs (.isSupported ^java.time.LocalDateTime this12475 G__12476) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12476)) (clojure.core/let [G__12476 ^"java.time.temporal.TemporalUnit" G__12476] (.isSupported ^java.time.LocalDateTime this12475 G__12476)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12476)) (clojure.core/let [G__12476 ^"java.time.temporal.TemporalField" G__12476] (.isSupported ^java.time.LocalDateTime this12475 G__12476)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12477 ^long long12478] (.minusYears this12477 long12478)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.chrono.Chronology [^java.time.LocalDateTime this12479] (jti/getter chronology this12479)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence12480 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12481] (. java.time.LocalDateTime parse java-lang-CharSequence12480 java-time-format-DateTimeFormatter12481)) (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence12482] (. java.time.LocalDateTime parse java-lang-CharSequence12482)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12483 ^java.lang.Integer int12484] (.withSecond this12483 int12484)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"] ["java.time.LocalDateTime"]))} (^java.lang.Object [this12485] #? (:cljs (.toLocalDate ^java.time.LocalDateTime this12485) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this12485)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this12485)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12486] (jti/getter minute this12486)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12487] (.hashCode this12487)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDateTime this12488 ^java.time.temporal.Temporal java-time-temporal-Temporal12489] (.adjustInto this12488 java-time-temporal-Temporal12489)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this12490 G__12491 G__12492] #? (:cljs (.with ^java.time.LocalDateTime this12490 G__12491 G__12492) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12491) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12492)) (clojure.core/let [G__12491 ^"java.time.temporal.TemporalField" G__12491 G__12492 (clojure.core/long G__12492)] (.with ^java.time.LocalDateTime this12490 G__12491 G__12492)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12491) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12492)) (clojure.core/let [G__12491 ^"java.time.temporal.TemporalField" G__12491 G__12492 (clojure.core/long G__12492)] (.with ^java.time.LocalDateTime this12490 G__12491 G__12492)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12491) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12492)) (clojure.core/let [G__12491 ^"java.time.temporal.TemporalField" G__12491 G__12492 (clojure.core/long G__12492)] (.with ^java.time.LocalDateTime this12490 G__12491 G__12492)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12493 G__12494] #? (:cljs (.with ^java.time.LocalDateTime this12493 G__12494) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12494)) (clojure.core/let [G__12494 ^"java.time.temporal.TemporalAdjuster" G__12494] (.with ^java.time.LocalDateTime this12493 G__12494)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12494)) (clojure.core/let [G__12494 ^"java.time.temporal.TemporalAdjuster" G__12494] (.with ^java.time.LocalDateTime this12493 G__12494)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12494)) (clojure.core/let [G__12494 ^"java.time.temporal.TemporalAdjuster" G__12494] (.with ^java.time.LocalDateTime this12493 G__12494)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.LocalDateTime [G__12496] #? (:cljs (. java.time.LocalDateTime now G__12496) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__12496)) (clojure.core/let [G__12496 ^"java.time.Clock" G__12496] (. java.time.LocalDateTime now G__12496)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12496)) (clojure.core/let [G__12496 ^"java.time.ZoneId" G__12496] (. java.time.LocalDateTime now G__12496)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [] (. java.time.LocalDateTime now)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12497] (jti/getter monthValue this12497)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12498 ^java.lang.Integer int12499] (.withDayOfYear this12498 int12499)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"] ["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Integer [this12500 G__12501] #? (:cljs (.compareTo ^java.time.LocalDateTime this12500 G__12501) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__12501)) (clojure.core/let [G__12501 ^"java.lang.Object" G__12501] (.compareTo ^java.time.LocalDateTime this12500 G__12501)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDateTime") G__12501)) (clojure.core/let [G__12501 ^"java.time.chrono.ChronoLocalDateTime" G__12501] (.compareTo ^java.time.LocalDateTime this12500 G__12501)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.Month [^java.time.LocalDateTime this12502] (jti/getter month this12502)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.Instant java-time-Instant12503 ^java.time.ZoneId java-time-ZoneId12504] (. java.time.LocalDateTime ofInstant java-time-Instant12503 java-time-ZoneId12504)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12505 ^long long12506] (.plusSeconds this12505 long12506)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDateTime this12507 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12508] (.get this12507 java-time-temporal-TemporalField12508)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDateTime this12509 ^java.lang.Object java-lang-Object12510] (.equals this12509 java-lang-Object12510)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDateTime this12511 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12512] (.format this12511 java-time-format-DateTimeFormatter12512)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12513 ^long long12514] (.plusYears this12513 long12514)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12515 ^long long12516] (.minusDays this12515 long12516)))
