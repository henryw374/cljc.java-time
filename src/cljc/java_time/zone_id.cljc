(ns cljc.java-time.zone-id (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZoneId]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZoneId])))
(def short-ids #? (:clj java.time.ZoneId/SHORT_IDS :cljs (. java.time.ZoneId -SHORT_IDS)))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneId getAvailableZoneIds)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.time.ZoneId [^java.lang.String java-lang-String12971] (. java.time.ZoneId of java-lang-String12971)) (^java.time.ZoneId [^java.lang.String java-lang-String12972 ^java.util.Map java-util-Map12973] (. java.time.ZoneId of java-lang-String12972 java-util-Map12973)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String12974 ^java.time.ZoneOffset java-time-ZoneOffset12975] (. java.time.ZoneId ofOffset java-lang-String12974 java-time-ZoneOffset12975)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this12976] (.toString this12976)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneId" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneId this12977 ^java.time.format.TextStyle java-time-format-TextStyle12978 ^java.util.Locale java-util-Locale12979] (jti/getter displayName this12977 java-time-format-TextStyle12978 java-util-Locale12979)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneId"]))} (^java.time.zone.ZoneRules [^java.time.ZoneId this12980] (jti/getter rules this12980)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this12981] (jti/getter id this12981)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneId"]))} (^java.time.ZoneId [^java.time.ZoneId this12982] (.normalized this12982)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneId systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZoneId [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12983] (. java.time.ZoneId from java-time-temporal-TemporalAccessor12983)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.Integer [^java.time.ZoneId this12984] (.hashCode this12984)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneId" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneId this12985 ^java.lang.Object java-lang-Object12986] (.equals this12985 java-lang-Object12986)))
