(ns cljc.java-time.zone-id (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZoneId]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZoneId])))
(def short-ids (. java.time.ZoneId -SHORT_IDS))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneId getAvailableZoneIds)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.time.ZoneId [^java.lang.String java-lang-String4190] (. java.time.ZoneId of java-lang-String4190)) (^java.time.ZoneId [^java.lang.String java-lang-String4191 ^java.util.Map java-util-Map4192] (. java.time.ZoneId of java-lang-String4191 java-util-Map4192)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String4193 ^java.time.ZoneOffset java-time-ZoneOffset4194] (. java.time.ZoneId ofOffset java-lang-String4193 java-time-ZoneOffset4194)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this4195] (.toString this4195)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneId" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneId this4196 ^java.time.format.TextStyle java-time-format-TextStyle4197 ^java.util.Locale java-util-Locale4198] (jti/getter displayName this4196 java-time-format-TextStyle4197 java-util-Locale4198)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneId"]))} (^java.time.zone.ZoneRules [^java.time.ZoneId this4199] (jti/getter rules this4199)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this4200] (jti/getter id this4200)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneId"]))} (^java.time.ZoneId [^java.time.ZoneId this4201] (.normalized this4201)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneId systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZoneId [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4202] (. java.time.ZoneId from java-time-temporal-TemporalAccessor4202)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.Integer [^java.time.ZoneId this4203] (.hashCode this4203)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneId" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneId this4204 ^java.lang.Object java-lang-Object4205] (.equals this4204 java-lang-Object4205)))
