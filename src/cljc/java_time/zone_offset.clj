(ns cljc.java-time.zone-offset (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZoneOffset]))
(def max java.time.ZoneOffset/MAX)
(def min java.time.ZoneOffset/MIN)
(def utc java.time.ZoneOffset/UTC)
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (java.time.ZoneOffset/getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this15025 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15026] (.range this15025 java-time-temporal-TemporalField15026)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int15027] (java.time.ZoneOffset/ofTotalSeconds int15027)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"] ["java.lang.String"]))} (^java.lang.Object [G__15029] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.String G__15029)) (clojure.core/let [G__15029 ^"java.lang.String" G__15029] (java.time.ZoneOffset/of G__15029)) (clojure.core/and (clojure.core/instance? java.lang.String G__15029)) (clojure.core/let [G__15029 ^"java.lang.String" G__15029] (java.time.ZoneOffset/of G__15029)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZoneId [^java.lang.String java-lang-String15030 ^java.util.Map java-util-Map15031] (java.time.ZoneOffset/of java-lang-String15030 java-util-Map15031)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String15032 ^java.time.ZoneOffset java-time-ZoneOffset15033] (java.time.ZoneOffset/ofOffset java-lang-String15032 java-time-ZoneOffset15033)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this15034 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery15035] (.query this15034 java-time-temporal-TemporalQuery15035)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this15036] (.toString this15036)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this15037 ^java.time.format.TextStyle java-time-format-TextStyle15038 ^java.util.Locale java-util-Locale15039] (.getDisplayName this15037 java-time-format-TextStyle15038 java-util-Locale15039)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this15040 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15041] (.getLong this15040 java-time-temporal-TemporalField15041)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this15042] (.getRules this15042)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int15043] (java.time.ZoneOffset/ofHours int15043)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this15044] (.getId this15044)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this15045] (.normalized this15045)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (java.time.ZoneOffset/systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__15047] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalAccessor G__15047)) (clojure.core/let [G__15047 ^"java.time.temporal.TemporalAccessor" G__15047] (java.time.ZoneOffset/from G__15047)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalAccessor G__15047)) (clojure.core/let [G__15047 ^"java.time.temporal.TemporalAccessor" G__15047] (java.time.ZoneOffset/from G__15047)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int15048 ^java.lang.Integer int15049 ^java.lang.Integer int15050] (java.time.ZoneOffset/ofHoursMinutesSeconds int15048 int15049 int15050)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this15051 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15052] (.isSupported this15051 java-time-temporal-TemporalField15052)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this15053] (.hashCode this15053)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this15054] (.getTotalSeconds this15054)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this15055 ^java.time.temporal.Temporal java-time-temporal-Temporal15056] (.adjustInto this15055 java-time-temporal-Temporal15056)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int15057 ^java.lang.Integer int15058] (java.time.ZoneOffset/ofHoursMinutes int15057 int15058)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this15059 ^java.time.ZoneOffset java-time-ZoneOffset15060] (.compareTo this15059 java-time-ZoneOffset15060)))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this15061 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15062] (.get this15061 java-time-temporal-TemporalField15062)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this15063 ^java.lang.Object java-lang-Object15064] (.equals this15063 java-lang-Object15064)))
