(ns cljc.java-time.zone-offset (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZoneOffset]))
(def max java.time.ZoneOffset/MAX)
(def min java.time.ZoneOffset/MIN)
(def utc java.time.ZoneOffset/UTC)
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (java.time.ZoneOffset/getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this8496 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8497] (.range this8496 java-time-temporal-TemporalField8497)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int8498] (java.time.ZoneOffset/ofTotalSeconds int8498)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"] ["java.lang.String"]))} (^java.lang.Object [G__8500] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__8500)) (clojure.core/let [G__8500 ^"java.lang.String" G__8500] (java.time.ZoneOffset/of G__8500)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__8500)) (clojure.core/let [G__8500 ^"java.lang.String" G__8500] (java.time.ZoneOffset/of G__8500)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZoneId [^java.lang.String java-lang-String8501 ^java.util.Map java-util-Map8502] (java.time.ZoneOffset/of java-lang-String8501 java-util-Map8502)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String8503 ^java.time.ZoneOffset java-time-ZoneOffset8504] (java.time.ZoneOffset/ofOffset java-lang-String8503 java-time-ZoneOffset8504)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this8505 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery8506] (.query this8505 java-time-temporal-TemporalQuery8506)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this8507] (.toString this8507)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this8508 ^java.time.format.TextStyle java-time-format-TextStyle8509 ^java.util.Locale java-util-Locale8510] (.getDisplayName this8508 java-time-format-TextStyle8509 java-util-Locale8510)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this8511 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8512] (.getLong this8511 java-time-temporal-TemporalField8512)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this8513] (.getRules this8513)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int8514] (java.time.ZoneOffset/ofHours int8514)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this8515] (.getId this8515)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this8516] (.normalized this8516)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (java.time.ZoneOffset/systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__8518] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__8518)) (clojure.core/let [G__8518 ^"java.time.temporal.TemporalAccessor" G__8518] (java.time.ZoneOffset/from G__8518)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__8518)) (clojure.core/let [G__8518 ^"java.time.temporal.TemporalAccessor" G__8518] (java.time.ZoneOffset/from G__8518)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int8519 ^java.lang.Integer int8520 ^java.lang.Integer int8521] (java.time.ZoneOffset/ofHoursMinutesSeconds int8519 int8520 int8521)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this8522 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8523] (.isSupported this8522 java-time-temporal-TemporalField8523)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this8524] (.hashCode this8524)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this8525] (.getTotalSeconds this8525)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this8526 ^java.time.temporal.Temporal java-time-temporal-Temporal8527] (.adjustInto this8526 java-time-temporal-Temporal8527)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int8528 ^java.lang.Integer int8529] (java.time.ZoneOffset/ofHoursMinutes int8528 int8529)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Integer [this8530 G__8531] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneOffset") G__8531)) (clojure.core/let [G__8531 ^"java.time.ZoneOffset" G__8531] (.compareTo ^java.time.ZoneOffset this8530 G__8531)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__8531)) (clojure.core/let [G__8531 ^"java.lang.Object" G__8531] (.compareTo ^java.time.ZoneOffset this8530 G__8531)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this8532 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8533] (.get this8532 java-time-temporal-TemporalField8533)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this8534 ^java.lang.Object java-lang-Object8535] (.equals this8534 java-lang-Object8535)))
