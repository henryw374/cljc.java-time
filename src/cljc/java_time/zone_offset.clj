(ns cljc.java-time.zone-offset (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZoneOffset]))
(def max java.time.ZoneOffset/MAX)
(def min java.time.ZoneOffset/MIN)
(def utc java.time.ZoneOffset/UTC)
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (java.time.ZoneOffset/getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this5508 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5509] (.range this5508 java-time-temporal-TemporalField5509)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int5510] (java.time.ZoneOffset/ofTotalSeconds int5510)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__5512] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.String G__5512)) (clojure.core/let [G__5512 ^"java.lang.String" G__5512] (java.time.ZoneOffset/of G__5512)) (clojure.core/and (clojure.core/instance? java.lang.String G__5512)) (clojure.core/let [G__5512 ^"java.lang.String" G__5512] (java.time.ZoneOffset/of G__5512)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZoneId [^java.lang.String java-lang-String5513 ^java.util.Map java-util-Map5514] (java.time.ZoneOffset/of java-lang-String5513 java-util-Map5514)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String5515 ^java.time.ZoneOffset java-time-ZoneOffset5516] (java.time.ZoneOffset/ofOffset java-lang-String5515 java-time-ZoneOffset5516)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this5517 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery5518] (.query this5517 java-time-temporal-TemporalQuery5518)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this5519] (.toString this5519)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this5520 ^java.time.format.TextStyle java-time-format-TextStyle5521 ^java.util.Locale java-util-Locale5522] (.getDisplayName this5520 java-time-format-TextStyle5521 java-util-Locale5522)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this5523 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5524] (.getLong this5523 java-time-temporal-TemporalField5524)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this5525] (.getRules this5525)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int5526] (java.time.ZoneOffset/ofHours int5526)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this5527] (.getId this5527)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this5528] (.normalized this5528)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (java.time.ZoneOffset/systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__5530] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalAccessor G__5530)) (clojure.core/let [G__5530 ^"java.time.temporal.TemporalAccessor" G__5530] (java.time.ZoneOffset/from G__5530)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalAccessor G__5530)) (clojure.core/let [G__5530 ^"java.time.temporal.TemporalAccessor" G__5530] (java.time.ZoneOffset/from G__5530)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int5531 ^java.lang.Integer int5532 ^java.lang.Integer int5533] (java.time.ZoneOffset/ofHoursMinutesSeconds int5531 int5532 int5533)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this5534 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5535] (.isSupported this5534 java-time-temporal-TemporalField5535)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this5536] (.hashCode this5536)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this5537] (.getTotalSeconds this5537)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this5538 ^java.time.temporal.Temporal java-time-temporal-Temporal5539] (.adjustInto this5538 java-time-temporal-Temporal5539)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int5540 ^java.lang.Integer int5541] (java.time.ZoneOffset/ofHoursMinutes int5540 int5541)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this5542 ^java.time.ZoneOffset java-time-ZoneOffset5543] (.compareTo this5542 java-time-ZoneOffset5543)))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this5544 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5545] (.get this5544 java-time-temporal-TemporalField5545)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this5546 ^java.lang.Object java-lang-Object5547] (.equals this5546 java-lang-Object5547)))
