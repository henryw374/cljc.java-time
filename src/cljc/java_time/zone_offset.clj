(ns cljc.java-time.zone-offset (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZoneOffset]))
(def max java.time.ZoneOffset/MAX)
(def min java.time.ZoneOffset/MIN)
(def utc java.time.ZoneOffset/UTC)
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (java.time.ZoneOffset/getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this15404 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15405] (.range this15404 java-time-temporal-TemporalField15405)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int15406] (java.time.ZoneOffset/ofTotalSeconds int15406)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"] ["java.lang.String"]))} (^java.lang.Object [G__15408] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.String G__15408)) (clojure.core/let [G__15408 ^"java.lang.String" G__15408] (java.time.ZoneOffset/of G__15408)) (clojure.core/and (clojure.core/instance? java.lang.String G__15408)) (clojure.core/let [G__15408 ^"java.lang.String" G__15408] (java.time.ZoneOffset/of G__15408)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZoneId [^java.lang.String java-lang-String15409 ^java.util.Map java-util-Map15410] (java.time.ZoneOffset/of java-lang-String15409 java-util-Map15410)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String15411 ^java.time.ZoneOffset java-time-ZoneOffset15412] (java.time.ZoneOffset/ofOffset java-lang-String15411 java-time-ZoneOffset15412)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this15413 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery15414] (.query this15413 java-time-temporal-TemporalQuery15414)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this15415] (.toString this15415)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this15416 ^java.time.format.TextStyle java-time-format-TextStyle15417 ^java.util.Locale java-util-Locale15418] (.getDisplayName this15416 java-time-format-TextStyle15417 java-util-Locale15418)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this15419 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15420] (.getLong this15419 java-time-temporal-TemporalField15420)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this15421] (.getRules this15421)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int15422] (java.time.ZoneOffset/ofHours int15422)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this15423] (.getId this15423)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this15424] (.normalized this15424)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (java.time.ZoneOffset/systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__15426] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalAccessor G__15426)) (clojure.core/let [G__15426 ^"java.time.temporal.TemporalAccessor" G__15426] (java.time.ZoneOffset/from G__15426)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalAccessor G__15426)) (clojure.core/let [G__15426 ^"java.time.temporal.TemporalAccessor" G__15426] (java.time.ZoneOffset/from G__15426)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int15427 ^java.lang.Integer int15428 ^java.lang.Integer int15429] (java.time.ZoneOffset/ofHoursMinutesSeconds int15427 int15428 int15429)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this15430 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15431] (.isSupported this15430 java-time-temporal-TemporalField15431)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this15432] (.hashCode this15432)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this15433] (.getTotalSeconds this15433)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this15434 ^java.time.temporal.Temporal java-time-temporal-Temporal15435] (.adjustInto this15434 java-time-temporal-Temporal15435)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int15436 ^java.lang.Integer int15437] (java.time.ZoneOffset/ofHoursMinutes int15436 int15437)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this15438 ^java.time.ZoneOffset java-time-ZoneOffset15439] (.compareTo this15438 java-time-ZoneOffset15439)))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this15440 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15441] (.get this15440 java-time-temporal-TemporalField15441)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this15442 ^java.lang.Object java-lang-Object15443] (.equals this15442 java-lang-Object15443)))
