(ns cljc.java-time.zone-offset (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZoneOffset]))
(def max java.time.ZoneOffset/MAX)
(def min java.time.ZoneOffset/MIN)
(def utc java.time.ZoneOffset/UTC)
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneOffset getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this12729 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12730] (.range this12729 java-time-temporal-TemporalField12730)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int12731] (. java.time.ZoneOffset ofTotalSeconds int12731)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__12733] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__12733)) (clojure.core/let [G__12733 ^"java.lang.String" G__12733] (. java.time.ZoneOffset of G__12733)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__12733)) (clojure.core/let [G__12733 ^"java.lang.String" G__12733] (. java.time.ZoneOffset of G__12733)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZoneId [^java.lang.String java-lang-String12734 ^java.util.Map java-util-Map12735] (. java.time.ZoneOffset of java-lang-String12734 java-util-Map12735)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String12736 ^java.time.ZoneOffset java-time-ZoneOffset12737] (. java.time.ZoneOffset ofOffset java-lang-String12736 java-time-ZoneOffset12737)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this12738 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12739] (.query this12738 java-time-temporal-TemporalQuery12739)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this12740] (.toString this12740)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this12741 ^java.time.format.TextStyle java-time-format-TextStyle12742 ^java.util.Locale java-util-Locale12743] (.getDisplayName this12741 java-time-format-TextStyle12742 java-util-Locale12743)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this12744 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12745] (.getLong this12744 java-time-temporal-TemporalField12745)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this12746] (.getRules this12746)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int12747] (. java.time.ZoneOffset ofHours int12747)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this12748] (.getId this12748)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this12749] (.normalized this12749)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneOffset systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__12751] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__12751)) (clojure.core/let [G__12751 ^"java.time.temporal.TemporalAccessor" G__12751] (. java.time.ZoneOffset from G__12751)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__12751)) (clojure.core/let [G__12751 ^"java.time.temporal.TemporalAccessor" G__12751] (. java.time.ZoneOffset from G__12751)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int12752 ^java.lang.Integer int12753 ^java.lang.Integer int12754] (. java.time.ZoneOffset ofHoursMinutesSeconds int12752 int12753 int12754)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this12755 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12756] (.isSupported this12755 java-time-temporal-TemporalField12756)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this12757] (.hashCode this12757)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this12758] (.getTotalSeconds this12758)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this12759 ^java.time.temporal.Temporal java-time-temporal-Temporal12760] (.adjustInto this12759 java-time-temporal-Temporal12760)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int12761 ^java.lang.Integer int12762] (. java.time.ZoneOffset ofHoursMinutes int12761 int12762)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Integer [this12763 G__12764] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneOffset") G__12764)) (clojure.core/let [G__12764 ^"java.time.ZoneOffset" G__12764] (.compareTo ^java.time.ZoneOffset this12763 G__12764)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__12764)) (clojure.core/let [G__12764 ^"java.lang.Object" G__12764] (.compareTo ^java.time.ZoneOffset this12763 G__12764)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this12765 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12766] (.get this12765 java-time-temporal-TemporalField12766)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this12767 ^java.lang.Object java-lang-Object12768] (.equals this12767 java-lang-Object12768)))
