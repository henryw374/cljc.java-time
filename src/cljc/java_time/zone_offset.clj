(ns cljc.java-time.zone-offset (:import [java.time ZoneOffset]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def max java.time.ZoneOffset/MAX)
(def min java.time.ZoneOffset/MIN)
(def utc java.time.ZoneOffset/UTC)
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneOffset getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this50721 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50722] (.range this50721 java-time-temporal-TemporalField50722)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int50723] (. java.time.ZoneOffset ofTotalSeconds int50723)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__50725] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__50725)) (clojure.core/let [G__50725 ^"java.lang.String" G__50725] (. java.time.ZoneOffset of G__50725)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__50725)) (clojure.core/let [G__50725 ^"java.lang.String" G__50725] (. java.time.ZoneOffset of G__50725)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZoneId [^java.lang.String java-lang-String50726 ^java.util.Map java-util-Map50727] (. java.time.ZoneOffset of java-lang-String50726 java-util-Map50727)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String50728 ^java.time.ZoneOffset java-time-ZoneOffset50729] (. java.time.ZoneOffset ofOffset java-lang-String50728 java-time-ZoneOffset50729)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this50730 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery50731] (.query this50730 java-time-temporal-TemporalQuery50731)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this50732] (.toString this50732)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this50733 ^java.time.format.TextStyle java-time-format-TextStyle50734 ^java.util.Locale java-util-Locale50735] (.getDisplayName this50733 java-time-format-TextStyle50734 java-util-Locale50735)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this50736 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50737] (.getLong this50736 java-time-temporal-TemporalField50737)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this50738] (.getRules this50738)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int50739] (. java.time.ZoneOffset ofHours int50739)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this50740] (.getId this50740)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this50741] (.normalized this50741)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneOffset systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__50743] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__50743)) (clojure.core/let [G__50743 ^"java.time.temporal.TemporalAccessor" G__50743] (. java.time.ZoneOffset from G__50743)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__50743)) (clojure.core/let [G__50743 ^"java.time.temporal.TemporalAccessor" G__50743] (. java.time.ZoneOffset from G__50743)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int50744 ^java.lang.Integer int50745 ^java.lang.Integer int50746] (. java.time.ZoneOffset ofHoursMinutesSeconds int50744 int50745 int50746)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this50747 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50748] (.isSupported this50747 java-time-temporal-TemporalField50748)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this50749] (.hashCode this50749)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this50750] (.getTotalSeconds this50750)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this50751 ^java.time.temporal.Temporal java-time-temporal-Temporal50752] (.adjustInto this50751 java-time-temporal-Temporal50752)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int50753 ^java.lang.Integer int50754] (. java.time.ZoneOffset ofHoursMinutes int50753 int50754)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Integer [this50755 G__50756] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneOffset") G__50756)) (clojure.core/let [G__50756 ^"java.time.ZoneOffset" G__50756] (.compareTo ^java.time.ZoneOffset this50755 G__50756)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__50756)) (clojure.core/let [G__50756 ^"java.lang.Object" G__50756] (.compareTo ^java.time.ZoneOffset this50755 G__50756)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this50757 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50758] (.get this50757 java-time-temporal-TemporalField50758)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this50759 ^java.lang.Object java-lang-Object50760] (.equals this50759 java-lang-Object50760)))
