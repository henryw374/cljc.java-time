(ns cljc.java-time.zone-offset (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time ZoneOffset]))
(def max (. java.time.ZoneOffset -MAX))
(def min (. java.time.ZoneOffset -MIN))
(def utc (. java.time.ZoneOffset -UTC))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneOffset getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this7353 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7354] (.range this7353 java-time-temporal-TemporalField7354)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int7355] (. java.time.ZoneOffset ofTotalSeconds int7355)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__7357] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__7357)) (clojure.core/let [G__7357 ^"java.lang.String" G__7357] (. java.time.ZoneOffset of G__7357)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__7357)) (clojure.core/let [G__7357 ^"java.lang.String" G__7357] (. java.time.ZoneOffset of G__7357)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZoneId [^java.lang.String java-lang-String7358 ^java.util.Map java-util-Map7359] (. java.time.ZoneOffset of java-lang-String7358 java-util-Map7359)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String7360 ^java.time.ZoneOffset java-time-ZoneOffset7361] (. java.time.ZoneOffset ofOffset java-lang-String7360 java-time-ZoneOffset7361)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this7362 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7363] (.query this7362 java-time-temporal-TemporalQuery7363)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this7364] (.toString this7364)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this7365 ^java.time.format.TextStyle java-time-format-TextStyle7366 ^java.util.Locale java-util-Locale7367] (.getDisplayName this7365 java-time-format-TextStyle7366 java-util-Locale7367)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this7368 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7369] (.getLong this7368 java-time-temporal-TemporalField7369)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this7370] (.getRules this7370)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int7371] (. java.time.ZoneOffset ofHours int7371)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this7372] (.getId this7372)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this7373] (.normalized this7373)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneOffset systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__7375] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__7375)) (clojure.core/let [G__7375 ^"java.time.temporal.TemporalAccessor" G__7375] (. java.time.ZoneOffset from G__7375)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__7375)) (clojure.core/let [G__7375 ^"java.time.temporal.TemporalAccessor" G__7375] (. java.time.ZoneOffset from G__7375)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int7376 ^java.lang.Integer int7377 ^java.lang.Integer int7378] (. java.time.ZoneOffset ofHoursMinutesSeconds int7376 int7377 int7378)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this7379 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7380] (.isSupported this7379 java-time-temporal-TemporalField7380)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this7381] (.hashCode this7381)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this7382] (.getTotalSeconds this7382)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this7383 ^java.time.temporal.Temporal java-time-temporal-Temporal7384] (.adjustInto this7383 java-time-temporal-Temporal7384)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int7385 ^java.lang.Integer int7386] (. java.time.ZoneOffset ofHoursMinutes int7385 int7386)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Integer [this7387 G__7388] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneOffset") G__7388)) (clojure.core/let [G__7388 ^"java.time.ZoneOffset" G__7388] (.compareTo ^java.time.ZoneOffset this7387 G__7388)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7388)) (clojure.core/let [G__7388 ^"java.lang.Object" G__7388] (.compareTo ^java.time.ZoneOffset this7387 G__7388)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this7389 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7390] (.get this7389 java-time-temporal-TemporalField7390)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this7391 ^java.lang.Object java-lang-Object7392] (.equals this7391 java-lang-Object7392)))
