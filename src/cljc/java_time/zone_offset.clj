(ns cljc.java-time.zone-offset (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZoneOffset]))
(def max java.time.ZoneOffset/MAX)
(def min java.time.ZoneOffset/MIN)
(def utc java.time.ZoneOffset/UTC)
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (java.time.ZoneOffset/getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this8550 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8551] (.range this8550 java-time-temporal-TemporalField8551)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int8552] (java.time.ZoneOffset/ofTotalSeconds int8552)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__8554] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__8554)) (clojure.core/let [G__8554 ^"java.lang.String" G__8554] (java.time.ZoneOffset/of G__8554)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__8554)) (clojure.core/let [G__8554 ^"java.lang.String" G__8554] (java.time.ZoneOffset/of G__8554)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZoneId [^java.lang.String java-lang-String8555 ^java.util.Map java-util-Map8556] (java.time.ZoneOffset/of java-lang-String8555 java-util-Map8556)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String8557 ^java.time.ZoneOffset java-time-ZoneOffset8558] (java.time.ZoneOffset/ofOffset java-lang-String8557 java-time-ZoneOffset8558)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this8559 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery8560] (.query this8559 java-time-temporal-TemporalQuery8560)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this8561] (.toString this8561)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this8562 ^java.time.format.TextStyle java-time-format-TextStyle8563 ^java.util.Locale java-util-Locale8564] (.getDisplayName this8562 java-time-format-TextStyle8563 java-util-Locale8564)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this8565 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8566] (.getLong this8565 java-time-temporal-TemporalField8566)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this8567] (.getRules this8567)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int8568] (java.time.ZoneOffset/ofHours int8568)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this8569] (.getId this8569)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this8570] (.normalized this8570)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (java.time.ZoneOffset/systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__8572] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__8572)) (clojure.core/let [G__8572 ^"java.time.temporal.TemporalAccessor" G__8572] (java.time.ZoneOffset/from G__8572)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__8572)) (clojure.core/let [G__8572 ^"java.time.temporal.TemporalAccessor" G__8572] (java.time.ZoneOffset/from G__8572)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int8573 ^java.lang.Integer int8574 ^java.lang.Integer int8575] (java.time.ZoneOffset/ofHoursMinutesSeconds int8573 int8574 int8575)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this8576 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8577] (.isSupported this8576 java-time-temporal-TemporalField8577)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this8578] (.hashCode this8578)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this8579] (.getTotalSeconds this8579)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this8580 ^java.time.temporal.Temporal java-time-temporal-Temporal8581] (.adjustInto this8580 java-time-temporal-Temporal8581)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int8582 ^java.lang.Integer int8583] (java.time.ZoneOffset/ofHoursMinutes int8582 int8583)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Integer [this8584 G__8585] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneOffset") G__8585)) (clojure.core/let [G__8585 ^"java.time.ZoneOffset" G__8585] (.compareTo ^java.time.ZoneOffset this8584 G__8585)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__8585)) (clojure.core/let [G__8585 ^"java.lang.Object" G__8585] (.compareTo ^java.time.ZoneOffset this8584 G__8585)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this8586 ^java.time.temporal.TemporalField java-time-temporal-TemporalField8587] (.get this8586 java-time-temporal-TemporalField8587)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this8588 ^java.lang.Object java-lang-Object8589] (.equals this8588 java-lang-Object8589)))
