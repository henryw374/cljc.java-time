(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time MonthDay]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.LocalDate [^java.time.MonthDay this12169 ^java.lang.Integer int12170] (.atYear this12169 int12170)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.MonthDay this12171 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12172] (.range this12171 java-time-temporal-TemporalField12172)))
(clojure.core/defn of {:arglists (quote (["java.time.Month" "int"] ["int" "int"]))} (^java.time.MonthDay [G__12174 G__12175] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__12174) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12175)) (clojure.core/let [G__12174 ^"java.time.Month" G__12174 G__12175 (clojure.core/int G__12175)] (. java.time.MonthDay of G__12174 G__12175)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12174) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12175)) (clojure.core/let [G__12174 (clojure.core/int G__12174) G__12175 (clojure.core/int G__12175)] (. java.time.MonthDay of G__12174 G__12175)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this12176 ^java.lang.Integer int12177] (.withMonth this12176 int12177)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.MonthDay this12178 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12179] (.query this12178 java-time-temporal-TemporalQuery12179)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^java.time.MonthDay this12180] (.toString this12180)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this12181 ^java.time.MonthDay java-time-MonthDay12182] (.isBefore this12181 java-time-MonthDay12182)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^java.time.MonthDay this12183 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12184] (.getLong this12183 java-time-temporal-TemporalField12184)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this12185 ^java.lang.Integer int12186] (.withDayOfMonth this12185 int12186)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this12187] (.getDayOfMonth this12187)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.MonthDay [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12188] (. java.time.MonthDay from java-time-temporal-TemporalAccessor12188)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this12189 ^java.time.MonthDay java-time-MonthDay12190] (.isAfter this12189 java-time-MonthDay12190)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.MonthDay this12191 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12192] (.isSupported this12191 java-time-temporal-TemporalField12192)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence12193 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12194] (. java.time.MonthDay parse java-lang-CharSequence12193 java-time-format-DateTimeFormatter12194)) (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence12195] (. java.time.MonthDay parse java-lang-CharSequence12195)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.lang.Boolean [^java.time.MonthDay this12196 ^java.lang.Integer int12197] (.isValidYear this12196 int12197)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this12198] (.hashCode this12198)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.MonthDay this12199 ^java.time.temporal.Temporal java-time-temporal-Temporal12200] (.adjustInto this12199 java-time-temporal-Temporal12200)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^java.time.MonthDay [^java.time.MonthDay this12201 ^java.time.Month java-time-Month12202] (.with this12201 java-time-Month12202)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.MonthDay [] (. java.time.MonthDay now)) (^java.time.MonthDay [G__12204] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__12204)) (clojure.core/let [G__12204 ^"java.time.Clock" G__12204] (. java.time.MonthDay now G__12204)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12204)) (clojure.core/let [G__12204 ^"java.time.ZoneId" G__12204] (. java.time.MonthDay now G__12204)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this12205] (.getMonthValue this12205)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.lang.Object"] ["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Integer [this12206 G__12207] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__12207)) (clojure.core/let [G__12207 ^"java.lang.Object" G__12207] (.compareTo ^java.time.MonthDay this12206 G__12207)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.MonthDay") G__12207)) (clojure.core/let [G__12207 ^"java.time.MonthDay" G__12207] (.compareTo ^java.time.MonthDay this12206 G__12207)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^java.time.Month [^java.time.MonthDay this12208] (.getMonth this12208)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.MonthDay this12209 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12210] (.get this12209 java-time-temporal-TemporalField12210)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.MonthDay this12211 ^java.lang.Object java-lang-Object12212] (.equals this12211 java-lang-Object12212)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.MonthDay this12213 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12214] (.format this12213 java-time-format-DateTimeFormatter12214)))
