(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time MonthDay]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.LocalDate [^java.time.MonthDay this7936 ^java.lang.Integer int7937] (.atYear this7936 int7937)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.MonthDay this7938 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7939] (.range this7938 java-time-temporal-TemporalField7939)))
(clojure.core/defn of {:arglists (quote (["java.time.Month" "int"] ["int" "int"]))} (^java.time.MonthDay [G__7941 G__7942] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__7941) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__7942)) (clojure.core/let [G__7941 ^"java.time.Month" G__7941 G__7942 (clojure.core/int G__7942)] (java.time.MonthDay/of G__7941 G__7942)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__7941) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__7942)) (clojure.core/let [G__7941 (clojure.core/int G__7941) G__7942 (clojure.core/int G__7942)] (java.time.MonthDay/of G__7941 G__7942)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this7943 ^java.lang.Integer int7944] (.withMonth this7943 int7944)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.MonthDay this7945 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7946] (.query this7945 java-time-temporal-TemporalQuery7946)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^java.time.MonthDay this7947] (.toString this7947)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this7948 ^java.time.MonthDay java-time-MonthDay7949] (.isBefore this7948 java-time-MonthDay7949)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^java.time.MonthDay this7950 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7951] (.getLong this7950 java-time-temporal-TemporalField7951)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this7952 ^java.lang.Integer int7953] (.withDayOfMonth this7952 int7953)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this7954] (.getDayOfMonth this7954)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.MonthDay [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7955] (java.time.MonthDay/from java-time-temporal-TemporalAccessor7955)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this7956 ^java.time.MonthDay java-time-MonthDay7957] (.isAfter this7956 java-time-MonthDay7957)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.MonthDay this7958 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7959] (.isSupported this7958 java-time-temporal-TemporalField7959)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence7960 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter7961] (java.time.MonthDay/parse java-lang-CharSequence7960 java-time-format-DateTimeFormatter7961)) (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence7962] (java.time.MonthDay/parse java-lang-CharSequence7962)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.lang.Boolean [^java.time.MonthDay this7963 ^java.lang.Integer int7964] (.isValidYear this7963 int7964)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this7965] (.hashCode this7965)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.MonthDay this7966 ^java.time.temporal.Temporal java-time-temporal-Temporal7967] (.adjustInto this7966 java-time-temporal-Temporal7967)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^java.time.MonthDay [^java.time.MonthDay this7968 ^java.time.Month java-time-Month7969] (.with this7968 java-time-Month7969)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.MonthDay [] (java.time.MonthDay/now)) (^java.time.MonthDay [G__7971] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__7971)) (clojure.core/let [G__7971 ^"java.time.ZoneId" G__7971] (java.time.MonthDay/now G__7971)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__7971)) (clojure.core/let [G__7971 ^"java.time.Clock" G__7971] (java.time.MonthDay/now G__7971)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this7972] (.getMonthValue this7972)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"] ["java.time.MonthDay" "java.lang.Object"]))} (^java.lang.Integer [this7973 G__7974] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.MonthDay") G__7974)) (clojure.core/let [G__7974 ^"java.time.MonthDay" G__7974] (.compareTo ^java.time.MonthDay this7973 G__7974)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7974)) (clojure.core/let [G__7974 ^"java.lang.Object" G__7974] (.compareTo ^java.time.MonthDay this7973 G__7974)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^java.time.Month [^java.time.MonthDay this7975] (.getMonth this7975)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.MonthDay this7976 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7977] (.get this7976 java-time-temporal-TemporalField7977)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.MonthDay this7978 ^java.lang.Object java-lang-Object7979] (.equals this7978 java-lang-Object7979)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.MonthDay this7980 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter7981] (.format this7980 java-time-format-DateTimeFormatter7981)))
