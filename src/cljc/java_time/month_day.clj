(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time MonthDay]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.LocalDate [^java.time.MonthDay this4948 ^java.lang.Integer int4949] (.atYear this4948 int4949)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.MonthDay this4950 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4951] (.range this4950 java-time-temporal-TemporalField4951)))
(clojure.core/defn of {:arglists (quote (["java.time.Month" "int"] ["int" "int"]))} (^java.time.MonthDay [G__4953 G__4954] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Month G__4953) (clojure.core/instance? java.lang.Number G__4954)) (clojure.core/let [G__4953 ^"java.time.Month" G__4953 G__4954 (clojure.core/int G__4954)] (java.time.MonthDay/of G__4953 G__4954)) (clojure.core/and (clojure.core/instance? java.lang.Number G__4953) (clojure.core/instance? java.lang.Number G__4954)) (clojure.core/let [G__4953 (clojure.core/int G__4953) G__4954 (clojure.core/int G__4954)] (java.time.MonthDay/of G__4953 G__4954)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this4955 ^java.lang.Integer int4956] (.withMonth this4955 int4956)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.MonthDay this4957 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4958] (.query this4957 java-time-temporal-TemporalQuery4958)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^java.time.MonthDay this4959] (.toString this4959)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this4960 ^java.time.MonthDay java-time-MonthDay4961] (.isBefore this4960 java-time-MonthDay4961)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^java.time.MonthDay this4962 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4963] (.getLong this4962 java-time-temporal-TemporalField4963)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this4964 ^java.lang.Integer int4965] (.withDayOfMonth this4964 int4965)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this4966] (.getDayOfMonth this4966)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.MonthDay [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4967] (java.time.MonthDay/from java-time-temporal-TemporalAccessor4967)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this4968 ^java.time.MonthDay java-time-MonthDay4969] (.isAfter this4968 java-time-MonthDay4969)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.MonthDay this4970 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4971] (.isSupported this4970 java-time-temporal-TemporalField4971)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence4972] (java.time.MonthDay/parse java-lang-CharSequence4972)) (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence4973 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4974] (java.time.MonthDay/parse java-lang-CharSequence4973 java-time-format-DateTimeFormatter4974)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.lang.Boolean [^java.time.MonthDay this4975 ^java.lang.Integer int4976] (.isValidYear this4975 int4976)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this4977] (.hashCode this4977)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.MonthDay this4978 ^java.time.temporal.Temporal java-time-temporal-Temporal4979] (.adjustInto this4978 java-time-temporal-Temporal4979)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^java.time.MonthDay [^java.time.MonthDay this4980 ^java.time.Month java-time-Month4981] (.with this4980 java-time-Month4981)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.MonthDay [] (java.time.MonthDay/now)) (^java.time.MonthDay [G__4983] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__4983)) (clojure.core/let [G__4983 ^"java.time.Clock" G__4983] (java.time.MonthDay/now G__4983)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__4983)) (clojure.core/let [G__4983 ^"java.time.ZoneId" G__4983] (java.time.MonthDay/now G__4983)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this4984] (.getMonthValue this4984)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this4985 ^java.time.MonthDay java-time-MonthDay4986] (.compareTo this4985 java-time-MonthDay4986)))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^java.time.Month [^java.time.MonthDay this4987] (.getMonth this4987)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.MonthDay this4988 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4989] (.get this4988 java-time-temporal-TemporalField4989)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.MonthDay this4990 ^java.lang.Object java-lang-Object4991] (.equals this4990 java-lang-Object4991)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.MonthDay this4992 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4993] (.format this4992 java-time-format-DateTimeFormatter4993)))
