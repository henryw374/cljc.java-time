(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time MonthDay]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.LocalDate [^java.time.MonthDay this14465 ^java.lang.Integer int14466] (.atYear this14465 int14466)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.MonthDay this14467 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14468] (.range this14467 java-time-temporal-TemporalField14468)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["java.time.Month" "int"]))} (^java.time.MonthDay [G__14470 G__14471] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__14470) (clojure.core/instance? java.lang.Number G__14471)) (clojure.core/let [G__14470 (clojure.core/int G__14470) G__14471 (clojure.core/int G__14471)] (java.time.MonthDay/of G__14470 G__14471)) (clojure.core/and (clojure.core/instance? java.time.Month G__14470) (clojure.core/instance? java.lang.Number G__14471)) (clojure.core/let [G__14470 ^"java.time.Month" G__14470 G__14471 (clojure.core/int G__14471)] (java.time.MonthDay/of G__14470 G__14471)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this14472 ^java.lang.Integer int14473] (.withMonth this14472 int14473)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.MonthDay this14474 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery14475] (.query this14474 java-time-temporal-TemporalQuery14475)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^java.time.MonthDay this14476] (.toString this14476)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this14477 ^java.time.MonthDay java-time-MonthDay14478] (.isBefore this14477 java-time-MonthDay14478)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^java.time.MonthDay this14479 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14480] (.getLong this14479 java-time-temporal-TemporalField14480)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this14481 ^java.lang.Integer int14482] (.withDayOfMonth this14481 int14482)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this14483] (.getDayOfMonth this14483)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.MonthDay [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14484] (java.time.MonthDay/from java-time-temporal-TemporalAccessor14484)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this14485 ^java.time.MonthDay java-time-MonthDay14486] (.isAfter this14485 java-time-MonthDay14486)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.MonthDay this14487 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14488] (.isSupported this14487 java-time-temporal-TemporalField14488)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence14489 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter14490] (java.time.MonthDay/parse java-lang-CharSequence14489 java-time-format-DateTimeFormatter14490)) (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence14491] (java.time.MonthDay/parse java-lang-CharSequence14491)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.lang.Boolean [^java.time.MonthDay this14492 ^java.lang.Integer int14493] (.isValidYear this14492 int14493)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this14494] (.hashCode this14494)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.MonthDay this14495 ^java.time.temporal.Temporal java-time-temporal-Temporal14496] (.adjustInto this14495 java-time-temporal-Temporal14496)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^java.time.MonthDay [^java.time.MonthDay this14497 ^java.time.Month java-time-Month14498] (.with this14497 java-time-Month14498)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.MonthDay [G__14500] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__14500)) (clojure.core/let [G__14500 ^"java.time.Clock" G__14500] (java.time.MonthDay/now G__14500)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__14500)) (clojure.core/let [G__14500 ^"java.time.ZoneId" G__14500] (java.time.MonthDay/now G__14500)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.MonthDay [] (java.time.MonthDay/now)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this14501] (.getMonthValue this14501)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this14502 ^java.time.MonthDay java-time-MonthDay14503] (.compareTo this14502 java-time-MonthDay14503)))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^java.time.Month [^java.time.MonthDay this14504] (.getMonth this14504)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.MonthDay this14505 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14506] (.get this14505 java-time-temporal-TemporalField14506)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.MonthDay this14507 ^java.lang.Object java-lang-Object14508] (.equals this14507 java-lang-Object14508)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.MonthDay this14509 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter14510] (.format this14509 java-time-format-DateTimeFormatter14510)))
