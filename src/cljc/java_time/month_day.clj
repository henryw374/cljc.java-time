(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time MonthDay]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.LocalDate [^java.time.MonthDay this4947 ^java.lang.Integer int4948] (.atYear this4947 int4948)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.MonthDay this4949 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4950] (.range this4949 java-time-temporal-TemporalField4950)))
(clojure.core/defn of {:arglists (quote (["java.time.Month" "int"] ["int" "int"]))} (^java.time.MonthDay [G__4952 G__4953] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Month G__4952) (clojure.core/instance? java.lang.Number G__4953)) (clojure.core/let [G__4952 ^"java.time.Month" G__4952 G__4953 (clojure.core/int G__4953)] (java.time.MonthDay/of G__4952 G__4953)) (clojure.core/and (clojure.core/instance? java.lang.Number G__4952) (clojure.core/instance? java.lang.Number G__4953)) (clojure.core/let [G__4952 (clojure.core/int G__4952) G__4953 (clojure.core/int G__4953)] (java.time.MonthDay/of G__4952 G__4953)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this4954 ^java.lang.Integer int4955] (.withMonth this4954 int4955)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.MonthDay this4956 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4957] (.query this4956 java-time-temporal-TemporalQuery4957)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^java.time.MonthDay this4958] (.toString this4958)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this4959 ^java.time.MonthDay java-time-MonthDay4960] (.isBefore this4959 java-time-MonthDay4960)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^java.time.MonthDay this4961 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4962] (.getLong this4961 java-time-temporal-TemporalField4962)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this4963 ^java.lang.Integer int4964] (.withDayOfMonth this4963 int4964)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this4965] (.getDayOfMonth this4965)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.MonthDay [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4966] (java.time.MonthDay/from java-time-temporal-TemporalAccessor4966)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this4967 ^java.time.MonthDay java-time-MonthDay4968] (.isAfter this4967 java-time-MonthDay4968)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.MonthDay this4969 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4970] (.isSupported this4969 java-time-temporal-TemporalField4970)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence4971] (java.time.MonthDay/parse java-lang-CharSequence4971)) (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence4972 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4973] (java.time.MonthDay/parse java-lang-CharSequence4972 java-time-format-DateTimeFormatter4973)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.lang.Boolean [^java.time.MonthDay this4974 ^java.lang.Integer int4975] (.isValidYear this4974 int4975)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this4976] (.hashCode this4976)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.MonthDay this4977 ^java.time.temporal.Temporal java-time-temporal-Temporal4978] (.adjustInto this4977 java-time-temporal-Temporal4978)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^java.time.MonthDay [^java.time.MonthDay this4979 ^java.time.Month java-time-Month4980] (.with this4979 java-time-Month4980)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.MonthDay [G__4982] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__4982)) (clojure.core/let [G__4982 ^"java.time.Clock" G__4982] (java.time.MonthDay/now G__4982)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__4982)) (clojure.core/let [G__4982 ^"java.time.ZoneId" G__4982] (java.time.MonthDay/now G__4982)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.MonthDay [] (java.time.MonthDay/now)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this4983] (.getMonthValue this4983)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this4984 ^java.time.MonthDay java-time-MonthDay4985] (.compareTo this4984 java-time-MonthDay4985)))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^java.time.Month [^java.time.MonthDay this4986] (.getMonth this4986)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.MonthDay this4987 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4988] (.get this4987 java-time-temporal-TemporalField4988)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.MonthDay this4989 ^java.lang.Object java-lang-Object4990] (.equals this4989 java-lang-Object4990)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.MonthDay this4991 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4992] (.format this4991 java-time-format-DateTimeFormatter4992)))
