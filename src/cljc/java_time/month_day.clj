(ns cljc.java-time.month-day (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time MonthDay]))
(clojure.core/defn at-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.LocalDate [^java.time.MonthDay this7073 ^java.lang.Integer int7074] (.atYear this7073 int7074)))
(clojure.core/defn range {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.MonthDay this7075 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7076] (.range this7075 java-time-temporal-TemporalField7076)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["java.time.Month" "int"]))} (^java.time.MonthDay [G__7078 G__7079] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__7078) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__7079)) (clojure.core/let [G__7078 (clojure.core/int G__7078) G__7079 (clojure.core/int G__7079)] (. java.time.MonthDay of G__7078 G__7079)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__7078) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__7079)) (clojure.core/let [G__7078 ^"java.time.Month" G__7078 G__7079 (clojure.core/int G__7079)] (. java.time.MonthDay of G__7078 G__7079)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this7080 ^java.lang.Integer int7081] (.withMonth this7080 int7081)))
(clojure.core/defn query {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.MonthDay this7082 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7083] (.query this7082 java-time-temporal-TemporalQuery7083)))
(clojure.core/defn to-string {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.String [^java.time.MonthDay this7084] (.toString this7084)))
(clojure.core/defn is-before {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this7085 ^java.time.MonthDay java-time-MonthDay7086] (.isBefore this7085 java-time-MonthDay7086)))
(clojure.core/defn get-long {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^long [^java.time.MonthDay this7087 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7088] (.getLong this7087 java-time-temporal-TemporalField7088)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.time.MonthDay [^java.time.MonthDay this7089 ^java.lang.Integer int7090] (.withDayOfMonth this7089 int7090)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this7091] (.getDayOfMonth this7091)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.MonthDay [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7092] (. java.time.MonthDay from java-time-temporal-TemporalAccessor7092)))
(clojure.core/defn is-after {:arglists (quote (["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.MonthDay this7093 ^java.time.MonthDay java-time-MonthDay7094] (.isAfter this7093 java-time-MonthDay7094)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.MonthDay this7095 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7096] (.isSupported this7095 java-time-temporal-TemporalField7096)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence7097 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter7098] (. java.time.MonthDay parse java-lang-CharSequence7097 java-time-format-DateTimeFormatter7098)) (^java.time.MonthDay [^java.lang.CharSequence java-lang-CharSequence7099] (. java.time.MonthDay parse java-lang-CharSequence7099)))
(clojure.core/defn is-valid-year {:arglists (quote (["java.time.MonthDay" "int"]))} (^java.lang.Boolean [^java.time.MonthDay this7100 ^java.lang.Integer int7101] (.isValidYear this7100 int7101)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this7102] (.hashCode this7102)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.MonthDay" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.MonthDay this7103 ^java.time.temporal.Temporal java-time-temporal-Temporal7104] (.adjustInto this7103 java-time-temporal-Temporal7104)))
(clojure.core/defn with {:arglists (quote (["java.time.MonthDay" "java.time.Month"]))} (^java.time.MonthDay [^java.time.MonthDay this7105 ^java.time.Month java-time-Month7106] (.with this7105 java-time-Month7106)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.MonthDay [] (. java.time.MonthDay now)) (^java.time.MonthDay [G__7108] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__7108)) (clojure.core/let [G__7108 ^"java.time.ZoneId" G__7108] (. java.time.MonthDay now G__7108)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__7108)) (clojure.core/let [G__7108 ^"java.time.Clock" G__7108] (. java.time.MonthDay now G__7108)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.MonthDay"]))} (^java.lang.Integer [^java.time.MonthDay this7109] (.getMonthValue this7109)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.MonthDay" "java.lang.Object"] ["java.time.MonthDay" "java.time.MonthDay"]))} (^java.lang.Integer [this7110 G__7111] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7111)) (clojure.core/let [G__7111 ^"java.lang.Object" G__7111] (.compareTo ^java.time.MonthDay this7110 G__7111)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.MonthDay") G__7111)) (clojure.core/let [G__7111 ^"java.time.MonthDay" G__7111] (.compareTo ^java.time.MonthDay this7110 G__7111)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.MonthDay"]))} (^java.time.Month [^java.time.MonthDay this7112] (.getMonth this7112)))
(clojure.core/defn get {:arglists (quote (["java.time.MonthDay" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.MonthDay this7113 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7114] (.get this7113 java-time-temporal-TemporalField7114)))
(clojure.core/defn equals {:arglists (quote (["java.time.MonthDay" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.MonthDay this7115 ^java.lang.Object java-lang-Object7116] (.equals this7115 java-lang-Object7116)))
(clojure.core/defn format {:arglists (quote (["java.time.MonthDay" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.MonthDay this7117 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter7118] (.format this7117 java-time-format-DateTimeFormatter7118)))
