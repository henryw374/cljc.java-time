(ns cljc.java-time.month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Month]))
(def may java.time.Month/MAY)
(def december java.time.Month/DECEMBER)
(def june java.time.Month/JUNE)
(def september java.time.Month/SEPTEMBER)
(def february java.time.Month/FEBRUARY)
(def january java.time.Month/JANUARY)
(def november java.time.Month/NOVEMBER)
(def august java.time.Month/AUGUST)
(def july java.time.Month/JULY)
(def march java.time.Month/MARCH)
(def october java.time.Month/OCTOBER)
(def april java.time.Month/APRIL)
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Month this7888 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7889] (.range this7888 java-time-temporal-TemporalField7889)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.Month/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.Month [^java.lang.String java-lang-String7890] (java.time.Month/valueOf java-lang-String7890)) (^java.lang.Enum [^java.lang.Class java-lang-Class7891 ^java.lang.String java-lang-String7892] (java.time.Month/valueOf java-lang-Class7891 java-lang-String7892)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Month [^java.lang.Integer int7893] (java.time.Month/of int7893)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this7894] (.ordinal this7894)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^java.time.Month [^java.time.Month this7895] (.firstMonthOfQuarter this7895)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this7896] (.minLength this7896)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this7897 ^long long7898] (.plus this7897 long7898)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Month this7899 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7900] (.query this7899 java-time-temporal-TemporalQuery7900)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this7901] (.toString this7901)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this7902 ^java.lang.Boolean boolean7903] (.firstDayOfYear this7902 boolean7903)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this7904 ^long long7905] (.minus this7904 long7905)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.Month this7906 ^java.time.format.TextStyle java-time-format-TextStyle7907 ^java.util.Locale java-util-Locale7908] (.getDisplayName this7906 java-time-format-TextStyle7907 java-util-Locale7908)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this7909] (.getValue this7909)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this7910] (.maxLength this7910)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this7911] (.name this7911)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^java.time.Month this7912 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7913] (.getLong this7912 java-time-temporal-TemporalField7913)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this7914 ^java.lang.Boolean boolean7915] (.length this7914 boolean7915)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^java.time.Month this7916] (.getDeclaringClass this7916)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Month [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7917] (java.time.Month/from java-time-temporal-TemporalAccessor7917)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.Month this7918 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7919] (.isSupported this7918 java-time-temporal-TemporalField7919)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this7920] (.hashCode this7920)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Month this7921 ^java.time.temporal.Temporal java-time-temporal-Temporal7922] (.adjustInto this7921 java-time-temporal-Temporal7922)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Object"] ["java.time.Month" "java.lang.Enum"]))} (^java.lang.Integer [this7923 G__7924] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7924)) (clojure.core/let [G__7924 ^"java.lang.Object" G__7924] (.compareTo ^java.time.Month this7923 G__7924)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__7924)) (clojure.core/let [G__7924 ^"java.lang.Enum" G__7924] (.compareTo ^java.time.Month this7923 G__7924)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Month this7925 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7926] (.get this7925 java-time-temporal-TemporalField7926)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Month this7927 ^java.lang.Object java-lang-Object7928] (.equals this7927 java-lang-Object7928)))
