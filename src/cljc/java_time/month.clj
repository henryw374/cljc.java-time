(ns cljc.java-time.month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Month]))
(def may java.time.Month/MAY)
(def december java.time.Month/DECEMBER)
(def june java.time.Month/JUNE)
(def september java.time.Month/SEPTEMBER)
(def february java.time.Month/FEBRUARY)
(def january java.time.Month/JANUARY)
(def november java.time.Month/NOVEMBER)
(def august java.time.Month/AUGUST)
(def july java.time.Month/JULY)
(def march java.time.Month/MARCH)
(def october java.time.Month/OCTOBER)
(def april java.time.Month/APRIL)
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Month this7854 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7855] (.range this7854 java-time-temporal-TemporalField7855)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.Month/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.Month [^java.lang.String java-lang-String7856] (java.time.Month/valueOf java-lang-String7856)) (^java.lang.Enum [^java.lang.Class java-lang-Class7857 ^java.lang.String java-lang-String7858] (java.time.Month/valueOf java-lang-Class7857 java-lang-String7858)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Month [^java.lang.Integer int7859] (java.time.Month/of int7859)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this7860] (.ordinal this7860)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^java.time.Month [^java.time.Month this7861] (.firstMonthOfQuarter this7861)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this7862] (.minLength this7862)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this7863 ^long long7864] (.plus this7863 long7864)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Month this7865 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7866] (.query this7865 java-time-temporal-TemporalQuery7866)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this7867] (.toString this7867)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this7868 ^java.lang.Boolean boolean7869] (.firstDayOfYear this7868 boolean7869)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this7870 ^long long7871] (.minus this7870 long7871)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.Month this7872 ^java.time.format.TextStyle java-time-format-TextStyle7873 ^java.util.Locale java-util-Locale7874] (.getDisplayName this7872 java-time-format-TextStyle7873 java-util-Locale7874)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this7875] (.getValue this7875)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this7876] (.maxLength this7876)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this7877] (.name this7877)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^java.time.Month this7878 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7879] (.getLong this7878 java-time-temporal-TemporalField7879)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this7880 ^java.lang.Boolean boolean7881] (.length this7880 boolean7881)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^java.time.Month this7882] (.getDeclaringClass this7882)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Month [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7883] (java.time.Month/from java-time-temporal-TemporalAccessor7883)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.Month this7884 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7885] (.isSupported this7884 java-time-temporal-TemporalField7885)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this7886] (.hashCode this7886)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Month this7887 ^java.time.temporal.Temporal java-time-temporal-Temporal7888] (.adjustInto this7887 java-time-temporal-Temporal7888)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Object"] ["java.time.Month" "java.lang.Enum"]))} (^java.lang.Integer [this7889 G__7890] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7890)) (clojure.core/let [G__7890 ^"java.lang.Object" G__7890] (.compareTo ^java.time.Month this7889 G__7890)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__7890)) (clojure.core/let [G__7890 ^"java.lang.Enum" G__7890] (.compareTo ^java.time.Month this7889 G__7890)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Month this7891 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7892] (.get this7891 java-time-temporal-TemporalField7892)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Month this7893 ^java.lang.Object java-lang-Object7894] (.equals this7893 java-lang-Object7894)))
