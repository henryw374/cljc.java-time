(ns cljc.java-time.month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Month]))
(def may java.time.Month/MAY)
(def december java.time.Month/DECEMBER)
(def june java.time.Month/JUNE)
(def september java.time.Month/SEPTEMBER)
(def february java.time.Month/FEBRUARY)
(def january java.time.Month/JANUARY)
(def november java.time.Month/NOVEMBER)
(def august java.time.Month/AUGUST)
(def july java.time.Month/JULY)
(def march java.time.Month/MARCH)
(def october java.time.Month/OCTOBER)
(def april java.time.Month/APRIL)
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Month this60570 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60571] (.range this60570 java-time-temporal-TemporalField60571)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.Month/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.Month [^java.lang.String java-lang-String60572] (java.time.Month/valueOf java-lang-String60572)) (^java.lang.Enum [^java.lang.Class java-lang-Class60573 ^java.lang.String java-lang-String60574] (java.time.Month/valueOf java-lang-Class60573 java-lang-String60574)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Month [^java.lang.Integer int60575] (java.time.Month/of int60575)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this60576] (.ordinal this60576)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^java.time.Month [^java.time.Month this60577] (.firstMonthOfQuarter this60577)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this60578] (.minLength this60578)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this60579 ^long long60580] (.plus this60579 long60580)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Month this60581 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery60582] (.query this60581 java-time-temporal-TemporalQuery60582)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this60583] (.toString this60583)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this60584 ^java.lang.Boolean boolean60585] (.firstDayOfYear this60584 boolean60585)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this60586 ^long long60587] (.minus this60586 long60587)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.Month this60588 ^java.time.format.TextStyle java-time-format-TextStyle60589 ^java.util.Locale java-util-Locale60590] (.getDisplayName this60588 java-time-format-TextStyle60589 java-util-Locale60590)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this60591] (.getValue this60591)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this60592] (.maxLength this60592)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this60593] (.name this60593)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^java.time.Month this60594 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60595] (.getLong this60594 java-time-temporal-TemporalField60595)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this60596 ^java.lang.Boolean boolean60597] (.length this60596 boolean60597)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^java.time.Month this60598] (.getDeclaringClass this60598)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Month [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor60599] (java.time.Month/from java-time-temporal-TemporalAccessor60599)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.Month this60600 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60601] (.isSupported this60600 java-time-temporal-TemporalField60601)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this60602] (.hashCode this60602)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Month this60603 ^java.time.temporal.Temporal java-time-temporal-Temporal60604] (.adjustInto this60603 java-time-temporal-Temporal60604)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Object"] ["java.time.Month" "java.lang.Enum"]))} (^java.lang.Integer [this60605 G__60606] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__60606)) (clojure.core/let [G__60606 ^"java.lang.Object" G__60606] (.compareTo ^java.time.Month this60605 G__60606)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__60606)) (clojure.core/let [G__60606 ^"java.lang.Enum" G__60606] (.compareTo ^java.time.Month this60605 G__60606)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Month this60607 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60608] (.get this60607 java-time-temporal-TemporalField60608)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Month this60609 ^java.lang.Object java-lang-Object60610] (.equals this60609 java-lang-Object60610)))
