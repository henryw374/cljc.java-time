(ns cljc.java-time.month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Month]))
(def may java.time.Month/MAY)
(def december java.time.Month/DECEMBER)
(def june java.time.Month/JUNE)
(def september java.time.Month/SEPTEMBER)
(def february java.time.Month/FEBRUARY)
(def january java.time.Month/JANUARY)
(def november java.time.Month/NOVEMBER)
(def august java.time.Month/AUGUST)
(def july java.time.Month/JULY)
(def march java.time.Month/MARCH)
(def october java.time.Month/OCTOBER)
(def april java.time.Month/APRIL)
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Month this14383 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14384] (.range this14383 java-time-temporal-TemporalField14384)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.Month/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.Month [^java.lang.String java-lang-String14385] (java.time.Month/valueOf java-lang-String14385)) (^java.lang.Enum [^java.lang.Class java-lang-Class14386 ^java.lang.String java-lang-String14387] (java.time.Month/valueOf java-lang-Class14386 java-lang-String14387)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Month [^java.lang.Integer int14388] (java.time.Month/of int14388)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this14389] (.ordinal this14389)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^java.time.Month [^java.time.Month this14390] (.firstMonthOfQuarter this14390)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this14391] (.minLength this14391)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this14392 ^long long14393] (.plus this14392 long14393)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Month this14394 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery14395] (.query this14394 java-time-temporal-TemporalQuery14395)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this14396] (.toString this14396)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this14397 ^java.lang.Boolean boolean14398] (.firstDayOfYear this14397 boolean14398)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this14399 ^long long14400] (.minus this14399 long14400)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.Month this14401 ^java.time.format.TextStyle java-time-format-TextStyle14402 ^java.util.Locale java-util-Locale14403] (.getDisplayName this14401 java-time-format-TextStyle14402 java-util-Locale14403)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this14404] (.getValue this14404)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this14405] (.maxLength this14405)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this14406] (.name this14406)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^java.time.Month this14407 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14408] (.getLong this14407 java-time-temporal-TemporalField14408)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this14409 ^java.lang.Boolean boolean14410] (.length this14409 boolean14410)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^java.time.Month this14411] (.getDeclaringClass this14411)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Month [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14412] (java.time.Month/from java-time-temporal-TemporalAccessor14412)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.Month this14413 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14414] (.isSupported this14413 java-time-temporal-TemporalField14414)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this14415] (.hashCode this14415)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Month this14416 ^java.time.temporal.Temporal java-time-temporal-Temporal14417] (.adjustInto this14416 java-time-temporal-Temporal14417)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.Month this14418 ^java.lang.Enum java-lang-Enum14419] (.compareTo this14418 java-lang-Enum14419)))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Month this14420 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14421] (.get this14420 java-time-temporal-TemporalField14421)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Month this14422 ^java.lang.Object java-lang-Object14423] (.equals this14422 java-lang-Object14423)))
