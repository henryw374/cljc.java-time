(ns cljc.java-time.month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Month]))
(def may java.time.Month/MAY)
(def december java.time.Month/DECEMBER)
(def june java.time.Month/JUNE)
(def september java.time.Month/SEPTEMBER)
(def february java.time.Month/FEBRUARY)
(def january java.time.Month/JANUARY)
(def november java.time.Month/NOVEMBER)
(def august java.time.Month/AUGUST)
(def july java.time.Month/JULY)
(def march java.time.Month/MARCH)
(def october java.time.Month/OCTOBER)
(def april java.time.Month/APRIL)
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Month this12087 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12088] (.range this12087 java-time-temporal-TemporalField12088)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.Month values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.Month [^java.lang.String java-lang-String12089] (. java.time.Month valueOf java-lang-String12089)) (^java.lang.Enum [^java.lang.Class java-lang-Class12090 ^java.lang.String java-lang-String12091] (. java.time.Month valueOf java-lang-Class12090 java-lang-String12091)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Month [^java.lang.Integer int12092] (. java.time.Month of int12092)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this12093] (.ordinal this12093)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^java.time.Month [^java.time.Month this12094] (.firstMonthOfQuarter this12094)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this12095] (.minLength this12095)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this12096 ^long long12097] (.plus this12096 long12097)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Month this12098 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12099] (.query this12098 java-time-temporal-TemporalQuery12099)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this12100] (.toString this12100)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this12101 ^java.lang.Boolean boolean12102] (.firstDayOfYear this12101 boolean12102)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this12103 ^long long12104] (.minus this12103 long12104)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.Month this12105 ^java.time.format.TextStyle java-time-format-TextStyle12106 ^java.util.Locale java-util-Locale12107] (.getDisplayName this12105 java-time-format-TextStyle12106 java-util-Locale12107)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this12108] (.getValue this12108)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this12109] (.maxLength this12109)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this12110] (.name this12110)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^java.time.Month this12111 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12112] (.getLong this12111 java-time-temporal-TemporalField12112)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this12113 ^java.lang.Boolean boolean12114] (.length this12113 boolean12114)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^java.time.Month this12115] (.getDeclaringClass this12115)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Month [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12116] (. java.time.Month from java-time-temporal-TemporalAccessor12116)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.Month this12117 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12118] (.isSupported this12117 java-time-temporal-TemporalField12118)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this12119] (.hashCode this12119)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Month this12120 ^java.time.temporal.Temporal java-time-temporal-Temporal12121] (.adjustInto this12120 java-time-temporal-Temporal12121)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Object"] ["java.time.Month" "java.lang.Enum"]))} (^java.lang.Integer [this12122 G__12123] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__12123)) (clojure.core/let [G__12123 ^"java.lang.Object" G__12123] (.compareTo ^java.time.Month this12122 G__12123)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__12123)) (clojure.core/let [G__12123 ^"java.lang.Enum" G__12123] (.compareTo ^java.time.Month this12122 G__12123)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Month this12124 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12125] (.get this12124 java-time-temporal-TemporalField12125)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Month this12126 ^java.lang.Object java-lang-Object12127] (.equals this12126 java-lang-Object12127)))
