(ns cljc.java-time.month (:import [java.time Month]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def may java.time.Month/MAY)
(def december java.time.Month/DECEMBER)
(def june java.time.Month/JUNE)
(def september java.time.Month/SEPTEMBER)
(def february java.time.Month/FEBRUARY)
(def january java.time.Month/JANUARY)
(def november java.time.Month/NOVEMBER)
(def august java.time.Month/AUGUST)
(def july java.time.Month/JULY)
(def march java.time.Month/MARCH)
(def october java.time.Month/OCTOBER)
(def april java.time.Month/APRIL)
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Month this50079 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50080] (.range this50079 java-time-temporal-TemporalField50080)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.Month values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.Month [^java.lang.String java-lang-String50081] (. java.time.Month valueOf java-lang-String50081)) (^java.lang.Enum [^java.lang.Class java-lang-Class50082 ^java.lang.String java-lang-String50083] (. java.time.Month valueOf java-lang-Class50082 java-lang-String50083)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Month [^java.lang.Integer int50084] (. java.time.Month of int50084)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this50085] (.ordinal this50085)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^java.time.Month [^java.time.Month this50086] (.firstMonthOfQuarter this50086)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this50087] (.minLength this50087)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this50088 ^long long50089] (.plus this50088 long50089)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Month this50090 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery50091] (.query this50090 java-time-temporal-TemporalQuery50091)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this50092] (.toString this50092)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this50093 ^java.lang.Boolean boolean50094] (.firstDayOfYear this50093 boolean50094)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this50095 ^long long50096] (.minus this50095 long50096)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.Month this50097 ^java.time.format.TextStyle java-time-format-TextStyle50098 ^java.util.Locale java-util-Locale50099] (.getDisplayName this50097 java-time-format-TextStyle50098 java-util-Locale50099)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this50100] (.getValue this50100)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this50101] (.maxLength this50101)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this50102] (.name this50102)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^java.time.Month this50103 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50104] (.getLong this50103 java-time-temporal-TemporalField50104)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this50105 ^java.lang.Boolean boolean50106] (.length this50105 boolean50106)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^java.time.Month this50107] (.getDeclaringClass this50107)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Month [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor50108] (. java.time.Month from java-time-temporal-TemporalAccessor50108)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.Month this50109 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50110] (.isSupported this50109 java-time-temporal-TemporalField50110)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this50111] (.hashCode this50111)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Month this50112 ^java.time.temporal.Temporal java-time-temporal-Temporal50113] (.adjustInto this50112 java-time-temporal-Temporal50113)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Object"] ["java.time.Month" "java.lang.Enum"]))} (^java.lang.Integer [this50114 G__50115] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__50115)) (clojure.core/let [G__50115 ^"java.lang.Object" G__50115] (.compareTo ^java.time.Month this50114 G__50115)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__50115)) (clojure.core/let [G__50115 ^"java.lang.Enum" G__50115] (.compareTo ^java.time.Month this50114 G__50115)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Month this50116 ^java.time.temporal.TemporalField java-time-temporal-TemporalField50117] (.get this50116 java-time-temporal-TemporalField50117)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Month this50118 ^java.lang.Object java-lang-Object50119] (.equals this50118 java-lang-Object50119)))
