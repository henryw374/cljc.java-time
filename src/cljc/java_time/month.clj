(ns cljc.java-time.month (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Month]))
(def may java.time.Month/MAY)
(def december java.time.Month/DECEMBER)
(def june java.time.Month/JUNE)
(def september java.time.Month/SEPTEMBER)
(def february java.time.Month/FEBRUARY)
(def january java.time.Month/JANUARY)
(def november java.time.Month/NOVEMBER)
(def august java.time.Month/AUGUST)
(def july java.time.Month/JULY)
(def march java.time.Month/MARCH)
(def october java.time.Month/OCTOBER)
(def april java.time.Month/APRIL)
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Month this14762 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14763] (.range this14762 java-time-temporal-TemporalField14763)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.Month/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.Month [^java.lang.String java-lang-String14764] (java.time.Month/valueOf java-lang-String14764)) (^java.lang.Enum [^java.lang.Class java-lang-Class14765 ^java.lang.String java-lang-String14766] (java.time.Month/valueOf java-lang-Class14765 java-lang-String14766)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Month [^java.lang.Integer int14767] (java.time.Month/of int14767)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this14768] (.ordinal this14768)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^java.time.Month [^java.time.Month this14769] (.firstMonthOfQuarter this14769)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this14770] (.minLength this14770)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this14771 ^long long14772] (.plus this14771 long14772)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Month this14773 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery14774] (.query this14773 java-time-temporal-TemporalQuery14774)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this14775] (.toString this14775)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this14776 ^java.lang.Boolean boolean14777] (.firstDayOfYear this14776 boolean14777)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this14778 ^long long14779] (.minus this14778 long14779)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.Month this14780 ^java.time.format.TextStyle java-time-format-TextStyle14781 ^java.util.Locale java-util-Locale14782] (.getDisplayName this14780 java-time-format-TextStyle14781 java-util-Locale14782)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this14783] (.getValue this14783)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this14784] (.maxLength this14784)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this14785] (.name this14785)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^java.time.Month this14786 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14787] (.getLong this14786 java-time-temporal-TemporalField14787)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this14788 ^java.lang.Boolean boolean14789] (.length this14788 boolean14789)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^java.time.Month this14790] (.getDeclaringClass this14790)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Month [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14791] (java.time.Month/from java-time-temporal-TemporalAccessor14791)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.Month this14792 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14793] (.isSupported this14792 java-time-temporal-TemporalField14793)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this14794] (.hashCode this14794)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Month this14795 ^java.time.temporal.Temporal java-time-temporal-Temporal14796] (.adjustInto this14795 java-time-temporal-Temporal14796)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.Month this14797 ^java.lang.Enum java-lang-Enum14798] (.compareTo this14797 java-lang-Enum14798)))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Month this14799 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14800] (.get this14799 java-time-temporal-TemporalField14800)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Month this14801 ^java.lang.Object java-lang-Object14802] (.equals this14801 java-lang-Object14802)))
