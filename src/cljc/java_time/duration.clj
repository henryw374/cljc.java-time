(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time Duration]))
(def zero (. java.time.Duration -ZERO))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7119 ^long long7120] (.minusMinutes this7119 long7120)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this7121] (.toNanos this7121)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7122 ^long long7123] (.minusMillis this7122 long7123)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7124 ^long long7125] (.minusHours this7124 long7125)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long7126] (. java.time.Duration ofDays long7126)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this7127] (.isNegative this7127)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long7128 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7129] (. java.time.Duration of long7128 java-time-temporal-TemporalUnit7129)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this7130] (.isZero this7130)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7131 ^long long7132] (.multipliedBy this7131 long7132)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this7133 ^java.lang.Integer int7134] (.withNanos this7133 int7134)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this7135] (.getUnits this7135)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this7136] (.getNano this7136)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7137 ^long long7138] (.plusMillis this7137 long7138)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this7139] (.toMinutes this7139)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7140 ^long long7141] (.minusSeconds this7140 long7141)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7142 ^long long7143] (.plusNanos this7142 long7143)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this7144 ^java.time.Duration java-time-Duration7145] (.plus this7144 java-time-Duration7145)) (^java.time.Duration [^java.time.Duration this7146 ^long long7147 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7148] (.plus this7146 long7147 java-time-temporal-TemporalUnit7148)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7149 ^long long7150] (.dividedBy this7149 long7150)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7151 ^long long7152] (.plusMinutes this7151 long7152)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this7153] (.toString this7153)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this7154 ^long long7155 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7156] (.minus this7154 long7155 java-time-temporal-TemporalUnit7156)) (^java.time.Duration [^java.time.Duration this7157 ^java.time.Duration java-time-Duration7158] (.minus this7157 java-time-Duration7158)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this7159 ^java.time.temporal.Temporal java-time-temporal-Temporal7160] (.addTo this7159 java-time-temporal-Temporal7160)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7161 ^long long7162] (.plusHours this7161 long7162)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7163 ^long long7164] (.plusDays this7163 long7164)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long7165] (. java.time.Duration ofHours long7165)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this7166] (.toMillis this7166)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this7167] (.toHours this7167)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long7168] (. java.time.Duration ofNanos long7168)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long7169] (. java.time.Duration ofMillis long7169)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this7170] (.negated this7170)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this7171] (.abs this7171)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal7172 ^java.time.temporal.Temporal java-time-temporal-Temporal7173] (. java.time.Duration between java-time-temporal-Temporal7172 java-time-temporal-Temporal7173)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this7174] (.getSeconds this7174)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount7175] (. java.time.Duration from java-time-temporal-TemporalAmount7175)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7176 ^long long7177] (.minusNanos this7176 long7177)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence7178] (. java.time.Duration parse java-lang-CharSequence7178)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this7179] (.hashCode this7179)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7180 ^long long7181] (.withSeconds this7180 long7181)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long7182] (. java.time.Duration ofMinutes long7182)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this7183 ^java.time.temporal.Temporal java-time-temporal-Temporal7184] (.subtractFrom this7183 java-time-temporal-Temporal7184)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.lang.Object"] ["java.time.Duration" "java.time.Duration"]))} (^java.lang.Integer [this7185 G__7186] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7186)) (clojure.core/let [G__7186 ^"java.lang.Object" G__7186] (.compareTo ^java.time.Duration this7185 G__7186)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Duration") G__7186)) (clojure.core/let [G__7186 ^"java.time.Duration" G__7186] (.compareTo ^java.time.Duration this7185 G__7186)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7187 ^long long7188] (.plusSeconds this7187 long7188)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this7189 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7190] (.get this7189 java-time-temporal-TemporalUnit7190)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this7191 ^java.lang.Object java-lang-Object7192] (.equals this7191 java-lang-Object7192)))
(clojure.core/defn of-seconds {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Duration [^long long7193 ^long long7194] (. java.time.Duration ofSeconds long7193 long7194)) (^java.time.Duration [^long long7195] (. java.time.Duration ofSeconds long7195)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this7196 ^long long7197] (.minusDays this7196 long7197)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this7198] (.toDays this7198)))
