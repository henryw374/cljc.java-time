(ns cljc.java-time.duration (:import [java.time Duration]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def zero java.time.Duration/ZERO)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50253 ^long long50254] (.minusMinutes this50253 long50254)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this50255] (.toNanos this50255)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50256 ^long long50257] (.minusMillis this50256 long50257)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50258 ^long long50259] (.minusHours this50258 long50259)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long50260] (. java.time.Duration ofDays long50260)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this50261] (.isNegative this50261)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long50262 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit50263] (. java.time.Duration of long50262 java-time-temporal-TemporalUnit50263)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this50264] (.isZero this50264)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50265 ^long long50266] (.multipliedBy this50265 long50266)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this50267 ^java.lang.Integer int50268] (.withNanos this50267 int50268)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this50269] (.getUnits this50269)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this50270] (.getNano this50270)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50271 ^long long50272] (.plusMillis this50271 long50272)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this50273] (.toMinutes this50273)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50274 ^long long50275] (.minusSeconds this50274 long50275)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50276 ^long long50277] (.plusNanos this50276 long50277)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this50278 ^java.time.Duration java-time-Duration50279] (.plus this50278 java-time-Duration50279)) (^java.time.Duration [^java.time.Duration this50280 ^long long50281 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit50282] (.plus this50280 long50281 java-time-temporal-TemporalUnit50282)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50283 ^long long50284] (.dividedBy this50283 long50284)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50285 ^long long50286] (.plusMinutes this50285 long50286)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this50287] (.toString this50287)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this50288 ^java.time.Duration java-time-Duration50289] (.minus this50288 java-time-Duration50289)) (^java.time.Duration [^java.time.Duration this50290 ^long long50291 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit50292] (.minus this50290 long50291 java-time-temporal-TemporalUnit50292)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this50293 ^java.time.temporal.Temporal java-time-temporal-Temporal50294] (.addTo this50293 java-time-temporal-Temporal50294)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50295 ^long long50296] (.plusHours this50295 long50296)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50297 ^long long50298] (.plusDays this50297 long50298)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long50299] (. java.time.Duration ofHours long50299)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this50300] (.toMillis this50300)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this50301] (.toHours this50301)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long50302] (. java.time.Duration ofNanos long50302)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long50303] (. java.time.Duration ofMillis long50303)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this50304] (.negated this50304)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this50305] (.abs this50305)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal50306 ^java.time.temporal.Temporal java-time-temporal-Temporal50307] (. java.time.Duration between java-time-temporal-Temporal50306 java-time-temporal-Temporal50307)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this50308] (.getSeconds this50308)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount50309] (. java.time.Duration from java-time-temporal-TemporalAmount50309)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50310 ^long long50311] (.minusNanos this50310 long50311)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence50312] (. java.time.Duration parse java-lang-CharSequence50312)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this50313] (.hashCode this50313)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50314 ^long long50315] (.withSeconds this50314 long50315)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long50316] (. java.time.Duration ofMinutes long50316)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this50317 ^java.time.temporal.Temporal java-time-temporal-Temporal50318] (.subtractFrom this50317 java-time-temporal-Temporal50318)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "java.lang.Object"]))} (^java.lang.Integer [this50319 G__50320] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Duration") G__50320)) (clojure.core/let [G__50320 ^"java.time.Duration" G__50320] (.compareTo ^java.time.Duration this50319 G__50320)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__50320)) (clojure.core/let [G__50320 ^"java.lang.Object" G__50320] (.compareTo ^java.time.Duration this50319 G__50320)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50321 ^long long50322] (.plusSeconds this50321 long50322)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this50323 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit50324] (.get this50323 java-time-temporal-TemporalUnit50324)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this50325 ^java.lang.Object java-lang-Object50326] (.equals this50325 java-lang-Object50326)))
(clojure.core/defn of-seconds {:arglists (quote (["long"] ["long" "long"]))} (^java.time.Duration [^long long50327] (. java.time.Duration ofSeconds long50327)) (^java.time.Duration [^long long50328 ^long long50329] (. java.time.Duration ofSeconds long50328 long50329)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this50330 ^long long50331] (.minusDays this50330 long50331)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this50332] (.toDays this50332)))
