(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Duration]))
(def zero java.time.Duration/ZERO)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8028 ^long long8029] (.minusMinutes this8028 long8029)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8030] (.toNanos this8030)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8031 ^long long8032] (.minusMillis this8031 long8032)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8033 ^long long8034] (.minusHours this8033 long8034)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long8035] (java.time.Duration/ofDays long8035)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this8036] (.isNegative this8036)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long8037 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8038] (java.time.Duration/of long8037 java-time-temporal-TemporalUnit8038)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this8039] (.isZero this8039)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8040 ^long long8041] (.multipliedBy this8040 long8041)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this8042 ^java.lang.Integer int8043] (.withNanos this8042 int8043)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this8044] (.getUnits this8044)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this8045] (.getNano this8045)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8046 ^long long8047] (.plusMillis this8046 long8047)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8048] (.toMinutes this8048)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8049 ^long long8050] (.minusSeconds this8049 long8050)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8051 ^long long8052] (.plusNanos this8051 long8052)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this8053 ^java.time.Duration java-time-Duration8054] (.plus this8053 java-time-Duration8054)) (^java.time.Duration [^java.time.Duration this8055 ^long long8056 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8057] (.plus this8055 long8056 java-time-temporal-TemporalUnit8057)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8058 ^long long8059] (.dividedBy this8058 long8059)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8060 ^long long8061] (.plusMinutes this8060 long8061)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this8062] (.toString this8062)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this8063 ^java.time.Duration java-time-Duration8064] (.minus this8063 java-time-Duration8064)) (^java.time.Duration [^java.time.Duration this8065 ^long long8066 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8067] (.minus this8065 long8066 java-time-temporal-TemporalUnit8067)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this8068 ^java.time.temporal.Temporal java-time-temporal-Temporal8069] (.addTo this8068 java-time-temporal-Temporal8069)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8070 ^long long8071] (.plusHours this8070 long8071)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8072 ^long long8073] (.plusDays this8072 long8073)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long8074] (java.time.Duration/ofHours long8074)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8075] (.toMillis this8075)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8076] (.toHours this8076)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long8077] (java.time.Duration/ofNanos long8077)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long8078] (java.time.Duration/ofMillis long8078)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this8079] (.negated this8079)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this8080] (.abs this8080)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal8081 ^java.time.temporal.Temporal java-time-temporal-Temporal8082] (java.time.Duration/between java-time-temporal-Temporal8081 java-time-temporal-Temporal8082)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8083] (.getSeconds this8083)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount8084] (java.time.Duration/from java-time-temporal-TemporalAmount8084)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8085 ^long long8086] (.minusNanos this8085 long8086)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence8087] (java.time.Duration/parse java-lang-CharSequence8087)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this8088] (.hashCode this8088)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8089 ^long long8090] (.withSeconds this8089 long8090)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long8091] (java.time.Duration/ofMinutes long8091)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this8092 ^java.time.temporal.Temporal java-time-temporal-Temporal8093] (.subtractFrom this8092 java-time-temporal-Temporal8093)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "java.lang.Object"]))} (^java.lang.Integer [this8094 G__8095] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Duration") G__8095)) (clojure.core/let [G__8095 ^"java.time.Duration" G__8095] (.compareTo ^java.time.Duration this8094 G__8095)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__8095)) (clojure.core/let [G__8095 ^"java.lang.Object" G__8095] (.compareTo ^java.time.Duration this8094 G__8095)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8096 ^long long8097] (.plusSeconds this8096 long8097)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this8098 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8099] (.get this8098 java-time-temporal-TemporalUnit8099)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this8100 ^java.lang.Object java-lang-Object8101] (.equals this8100 java-lang-Object8101)))
(clojure.core/defn of-seconds {:arglists (quote (["long"] ["long" "long"]))} (^java.time.Duration [^long long8102] (java.time.Duration/ofSeconds long8102)) (^java.time.Duration [^long long8103 ^long long8104] (java.time.Duration/ofSeconds long8103 long8104)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8105 ^long long8106] (.minusDays this8105 long8106)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8107] (.toDays this8107)))
