(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Duration]))
(def zero java.time.Duration/ZERO)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12261 ^long long12262] (.minusMinutes this12261 long12262)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this12263] (.toNanos this12263)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12264 ^long long12265] (.minusMillis this12264 long12265)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12266 ^long long12267] (.minusHours this12266 long12267)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long12268] (. java.time.Duration ofDays long12268)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this12269] (.isNegative this12269)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long12270 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12271] (. java.time.Duration of long12270 java-time-temporal-TemporalUnit12271)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this12272] (.isZero this12272)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12273 ^long long12274] (.multipliedBy this12273 long12274)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this12275 ^java.lang.Integer int12276] (.withNanos this12275 int12276)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this12277] (.getUnits this12277)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this12278] (.getNano this12278)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12279 ^long long12280] (.plusMillis this12279 long12280)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this12281] (.toMinutes this12281)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12282 ^long long12283] (.minusSeconds this12282 long12283)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12284 ^long long12285] (.plusNanos this12284 long12285)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this12286 ^long long12287 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12288] (.plus this12286 long12287 java-time-temporal-TemporalUnit12288)) (^java.time.Duration [^java.time.Duration this12289 ^java.time.Duration java-time-Duration12290] (.plus this12289 java-time-Duration12290)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12291 ^long long12292] (.dividedBy this12291 long12292)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12293 ^long long12294] (.plusMinutes this12293 long12294)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this12295] (.toString this12295)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this12296 ^java.time.Duration java-time-Duration12297] (.minus this12296 java-time-Duration12297)) (^java.time.Duration [^java.time.Duration this12298 ^long long12299 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12300] (.minus this12298 long12299 java-time-temporal-TemporalUnit12300)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this12301 ^java.time.temporal.Temporal java-time-temporal-Temporal12302] (.addTo this12301 java-time-temporal-Temporal12302)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12303 ^long long12304] (.plusHours this12303 long12304)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12305 ^long long12306] (.plusDays this12305 long12306)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long12307] (. java.time.Duration ofHours long12307)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this12308] (.toMillis this12308)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this12309] (.toHours this12309)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long12310] (. java.time.Duration ofNanos long12310)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long12311] (. java.time.Duration ofMillis long12311)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this12312] (.negated this12312)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this12313] (.abs this12313)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal12314 ^java.time.temporal.Temporal java-time-temporal-Temporal12315] (. java.time.Duration between java-time-temporal-Temporal12314 java-time-temporal-Temporal12315)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this12316] (.getSeconds this12316)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount12317] (. java.time.Duration from java-time-temporal-TemporalAmount12317)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12318 ^long long12319] (.minusNanos this12318 long12319)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence12320] (. java.time.Duration parse java-lang-CharSequence12320)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this12321] (.hashCode this12321)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12322 ^long long12323] (.withSeconds this12322 long12323)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long12324] (. java.time.Duration ofMinutes long12324)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this12325 ^java.time.temporal.Temporal java-time-temporal-Temporal12326] (.subtractFrom this12325 java-time-temporal-Temporal12326)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.lang.Object"] ["java.time.Duration" "java.time.Duration"]))} (^java.lang.Integer [this12327 G__12328] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__12328)) (clojure.core/let [G__12328 ^"java.lang.Object" G__12328] (.compareTo ^java.time.Duration this12327 G__12328)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Duration") G__12328)) (clojure.core/let [G__12328 ^"java.time.Duration" G__12328] (.compareTo ^java.time.Duration this12327 G__12328)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12329 ^long long12330] (.plusSeconds this12329 long12330)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this12331 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12332] (.get this12331 java-time-temporal-TemporalUnit12332)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this12333 ^java.lang.Object java-lang-Object12334] (.equals this12333 java-lang-Object12334)))
(clojure.core/defn of-seconds {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Duration [^long long12335 ^long long12336] (. java.time.Duration ofSeconds long12335 long12336)) (^java.time.Duration [^long long12337] (. java.time.Duration ofSeconds long12337)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this12338 ^long long12339] (.minusDays this12338 long12339)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this12340] (.toDays this12340)))
