(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Duration]))
(def zero java.time.Duration/ZERO)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60744 ^long long60745] (.minusMinutes this60744 long60745)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this60746] (.toNanos this60746)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60747 ^long long60748] (.minusMillis this60747 long60748)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60749 ^long long60750] (.minusHours this60749 long60750)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long60751] (java.time.Duration/ofDays long60751)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this60752] (.isNegative this60752)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long60753 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit60754] (java.time.Duration/of long60753 java-time-temporal-TemporalUnit60754)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this60755] (.isZero this60755)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60756 ^long long60757] (.multipliedBy this60756 long60757)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this60758 ^java.lang.Integer int60759] (.withNanos this60758 int60759)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this60760] (.getUnits this60760)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this60761] (.getNano this60761)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60762 ^long long60763] (.plusMillis this60762 long60763)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this60764] (.toMinutes this60764)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60765 ^long long60766] (.minusSeconds this60765 long60766)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60767 ^long long60768] (.plusNanos this60767 long60768)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this60769 ^long long60770 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit60771] (.plus this60769 long60770 java-time-temporal-TemporalUnit60771)) (^java.time.Duration [^java.time.Duration this60772 ^java.time.Duration java-time-Duration60773] (.plus this60772 java-time-Duration60773)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60774 ^long long60775] (.dividedBy this60774 long60775)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60776 ^long long60777] (.plusMinutes this60776 long60777)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this60778] (.toString this60778)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this60779 ^java.time.Duration java-time-Duration60780] (.minus this60779 java-time-Duration60780)) (^java.time.Duration [^java.time.Duration this60781 ^long long60782 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit60783] (.minus this60781 long60782 java-time-temporal-TemporalUnit60783)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this60784 ^java.time.temporal.Temporal java-time-temporal-Temporal60785] (.addTo this60784 java-time-temporal-Temporal60785)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60786 ^long long60787] (.plusHours this60786 long60787)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60788 ^long long60789] (.plusDays this60788 long60789)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long60790] (java.time.Duration/ofHours long60790)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this60791] (.toMillis this60791)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this60792] (.toHours this60792)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long60793] (java.time.Duration/ofNanos long60793)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long60794] (java.time.Duration/ofMillis long60794)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this60795] (.negated this60795)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this60796] (.abs this60796)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal60797 ^java.time.temporal.Temporal java-time-temporal-Temporal60798] (java.time.Duration/between java-time-temporal-Temporal60797 java-time-temporal-Temporal60798)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this60799] (.getSeconds this60799)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount60800] (java.time.Duration/from java-time-temporal-TemporalAmount60800)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60801 ^long long60802] (.minusNanos this60801 long60802)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence60803] (java.time.Duration/parse java-lang-CharSequence60803)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this60804] (.hashCode this60804)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60805 ^long long60806] (.withSeconds this60805 long60806)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long60807] (java.time.Duration/ofMinutes long60807)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this60808 ^java.time.temporal.Temporal java-time-temporal-Temporal60809] (.subtractFrom this60808 java-time-temporal-Temporal60809)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.lang.Object"] ["java.time.Duration" "java.time.Duration"]))} (^java.lang.Integer [this60810 G__60811] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__60811)) (clojure.core/let [G__60811 ^"java.lang.Object" G__60811] (.compareTo ^java.time.Duration this60810 G__60811)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Duration") G__60811)) (clojure.core/let [G__60811 ^"java.time.Duration" G__60811] (.compareTo ^java.time.Duration this60810 G__60811)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60812 ^long long60813] (.plusSeconds this60812 long60813)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this60814 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit60815] (.get this60814 java-time-temporal-TemporalUnit60815)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this60816 ^java.lang.Object java-lang-Object60817] (.equals this60816 java-lang-Object60817)))
(clojure.core/defn of-seconds {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Duration [^long long60818 ^long long60819] (java.time.Duration/ofSeconds long60818 long60819)) (^java.time.Duration [^long long60820] (java.time.Duration/ofSeconds long60820)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this60821 ^long long60822] (.minusDays this60821 long60822)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this60823] (.toDays this60823)))
