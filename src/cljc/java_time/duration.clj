(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Duration]))
(def zero java.time.Duration/ZERO)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8062 ^long long8063] (.minusMinutes this8062 long8063)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this8064 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8065] (.truncatedTo this8064 java-time-temporal-TemporalUnit8065)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8066] (.toNanos this8066)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8067 ^long long8068] (.minusMillis this8067 long8068)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8069 ^long long8070] (.minusHours this8069 long8070)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long8071] (java.time.Duration/ofDays long8071)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this8072] (.isNegative this8072)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long8073 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8074] (java.time.Duration/of long8073 java-time-temporal-TemporalUnit8074)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this8075] (.isZero this8075)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8076 ^long long8077] (.multipliedBy this8076 long8077)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this8078 ^java.lang.Integer int8079] (.withNanos this8078 int8079)))
(clojure.core/defn to-nanos-part {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this8080] (.toNanosPart this8080)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this8081] (.getUnits this8081)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this8082] (.getNano this8082)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8083 ^long long8084] (.plusMillis this8083 long8084)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8085] (.toMinutes this8085)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8086 ^long long8087] (.minusSeconds this8086 long8087)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8088 ^long long8089] (.plusNanos this8088 long8089)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this8090 ^long long8091 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8092] (.plus this8090 long8091 java-time-temporal-TemporalUnit8092)) (^java.time.Duration [^java.time.Duration this8093 ^java.time.Duration java-time-Duration8094] (.plus this8093 java-time-Duration8094)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long"]))} (^java.lang.Object [this8095 G__8096] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Duration") G__8096)) (clojure.core/let [G__8096 ^"java.time.Duration" G__8096] (.dividedBy ^java.time.Duration this8095 G__8096)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__8096)) (clojure.core/let [G__8096 (clojure.core/long G__8096)] (.dividedBy ^java.time.Duration this8095 G__8096)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8097 ^long long8098] (.plusMinutes this8097 long8098)))
(clojure.core/defn to-days-part {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8099] (.toDaysPart this8099)))
(clojure.core/defn to-millis-part {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this8100] (.toMillisPart this8100)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this8101] (.toString this8101)))
(clojure.core/defn to-seconds-part {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this8102] (.toSecondsPart this8102)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this8103 ^long long8104 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8105] (.minus this8103 long8104 java-time-temporal-TemporalUnit8105)) (^java.time.Duration [^java.time.Duration this8106 ^java.time.Duration java-time-Duration8107] (.minus this8106 java-time-Duration8107)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this8108 ^java.time.temporal.Temporal java-time-temporal-Temporal8109] (.addTo this8108 java-time-temporal-Temporal8109)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8110 ^long long8111] (.plusHours this8110 long8111)))
(clojure.core/defn to-minutes-part {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this8112] (.toMinutesPart this8112)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8113 ^long long8114] (.plusDays this8113 long8114)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long8115] (java.time.Duration/ofHours long8115)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8116] (.toMillis this8116)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8117] (.toHours this8117)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long8118] (java.time.Duration/ofNanos long8118)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long8119] (java.time.Duration/ofMillis long8119)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this8120] (.negated this8120)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this8121] (.abs this8121)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal8122 ^java.time.temporal.Temporal java-time-temporal-Temporal8123] (java.time.Duration/between java-time-temporal-Temporal8122 java-time-temporal-Temporal8123)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8124] (.getSeconds this8124)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount8125] (java.time.Duration/from java-time-temporal-TemporalAmount8125)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8126 ^long long8127] (.minusNanos this8126 long8127)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence8128] (java.time.Duration/parse java-lang-CharSequence8128)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this8129] (.hashCode this8129)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8130 ^long long8131] (.withSeconds this8130 long8131)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long8132] (java.time.Duration/ofMinutes long8132)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this8133 ^java.time.temporal.Temporal java-time-temporal-Temporal8134] (.subtractFrom this8133 java-time-temporal-Temporal8134)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "java.lang.Object"]))} (^java.lang.Integer [this8135 G__8136] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Duration") G__8136)) (clojure.core/let [G__8136 ^"java.time.Duration" G__8136] (.compareTo ^java.time.Duration this8135 G__8136)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__8136)) (clojure.core/let [G__8136 ^"java.lang.Object" G__8136] (.compareTo ^java.time.Duration this8135 G__8136)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8137 ^long long8138] (.plusSeconds this8137 long8138)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this8139 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit8140] (.get this8139 java-time-temporal-TemporalUnit8140)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this8141 ^java.lang.Object java-lang-Object8142] (.equals this8141 java-lang-Object8142)))
(clojure.core/defn to-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8143] (.toSeconds this8143)))
(clojure.core/defn to-hours-part {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this8144] (.toHoursPart this8144)))
(clojure.core/defn of-seconds {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Duration [^long long8145 ^long long8146] (java.time.Duration/ofSeconds long8145 long8146)) (^java.time.Duration [^long long8147] (java.time.Duration/ofSeconds long8147)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this8148 ^long long8149] (.minusDays this8148 long8149)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this8150] (.toDays this8150)))
