(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Duration]))
(def zero java.time.Duration/ZERO)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14557 ^long long14558] (.minusMinutes this14557 long14558)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this14559] (.toNanos this14559)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14560 ^long long14561] (.minusMillis this14560 long14561)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14562 ^long long14563] (.minusHours this14562 long14563)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long14564] (java.time.Duration/ofDays long14564)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this14565] (.isNegative this14565)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long14566 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14567] (java.time.Duration/of long14566 java-time-temporal-TemporalUnit14567)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this14568] (.isZero this14568)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14569 ^long long14570] (.multipliedBy this14569 long14570)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this14571 ^java.lang.Integer int14572] (.withNanos this14571 int14572)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this14573] (.getUnits this14573)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this14574] (.getNano this14574)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14575 ^long long14576] (.plusMillis this14575 long14576)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this14577] (.toMinutes this14577)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14578 ^long long14579] (.minusSeconds this14578 long14579)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14580 ^long long14581] (.plusNanos this14580 long14581)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this14582 ^long long14583 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14584] (.plus this14582 long14583 java-time-temporal-TemporalUnit14584)) (^java.time.Duration [^java.time.Duration this14585 ^java.time.Duration java-time-Duration14586] (.plus this14585 java-time-Duration14586)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14587 ^long long14588] (.dividedBy this14587 long14588)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14589 ^long long14590] (.plusMinutes this14589 long14590)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this14591] (.toString this14591)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this14592 ^long long14593 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14594] (.minus this14592 long14593 java-time-temporal-TemporalUnit14594)) (^java.time.Duration [^java.time.Duration this14595 ^java.time.Duration java-time-Duration14596] (.minus this14595 java-time-Duration14596)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this14597 ^java.time.temporal.Temporal java-time-temporal-Temporal14598] (.addTo this14597 java-time-temporal-Temporal14598)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14599 ^long long14600] (.plusHours this14599 long14600)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14601 ^long long14602] (.plusDays this14601 long14602)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long14603] (java.time.Duration/ofHours long14603)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this14604] (.toMillis this14604)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this14605] (.toHours this14605)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long14606] (java.time.Duration/ofNanos long14606)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long14607] (java.time.Duration/ofMillis long14607)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this14608] (.negated this14608)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this14609] (.abs this14609)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal14610 ^java.time.temporal.Temporal java-time-temporal-Temporal14611] (java.time.Duration/between java-time-temporal-Temporal14610 java-time-temporal-Temporal14611)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this14612] (.getSeconds this14612)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount14613] (java.time.Duration/from java-time-temporal-TemporalAmount14613)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14614 ^long long14615] (.minusNanos this14614 long14615)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence14616] (java.time.Duration/parse java-lang-CharSequence14616)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this14617] (.hashCode this14617)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14618 ^long long14619] (.withSeconds this14618 long14619)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long14620] (java.time.Duration/ofMinutes long14620)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this14621 ^java.time.temporal.Temporal java-time-temporal-Temporal14622] (.subtractFrom this14621 java-time-temporal-Temporal14622)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this14623 ^java.time.Duration java-time-Duration14624] (.compareTo this14623 java-time-Duration14624)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14625 ^long long14626] (.plusSeconds this14625 long14626)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this14627 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14628] (.get this14627 java-time-temporal-TemporalUnit14628)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this14629 ^java.lang.Object java-lang-Object14630] (.equals this14629 java-lang-Object14630)))
(clojure.core/defn of-seconds {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Duration [^long long14631 ^long long14632] (java.time.Duration/ofSeconds long14631 long14632)) (^java.time.Duration [^long long14633] (java.time.Duration/ofSeconds long14633)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this14634 ^long long14635] (.minusDays this14634 long14635)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this14636] (.toDays this14636)))
