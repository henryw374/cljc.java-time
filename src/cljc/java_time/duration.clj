(ns cljc.java-time.duration (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Duration]))
(def zero java.time.Duration/ZERO)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5039 ^long long5040] (.minusMinutes this5039 long5040)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this5041] (.toNanos this5041)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5042 ^long long5043] (.minusMillis this5042 long5043)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5044 ^long long5045] (.minusHours this5044 long5045)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long5046] (java.time.Duration/ofDays long5046)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this5047] (.isNegative this5047)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long5048 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit5049] (java.time.Duration/of long5048 java-time-temporal-TemporalUnit5049)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this5050] (.isZero this5050)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5051 ^long long5052] (.multipliedBy this5051 long5052)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this5053 ^java.lang.Integer int5054] (.withNanos this5053 int5054)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this5055] (.getUnits this5055)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this5056] (.getNano this5056)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5057 ^long long5058] (.plusMillis this5057 long5058)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this5059] (.toMinutes this5059)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5060 ^long long5061] (.minusSeconds this5060 long5061)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5062 ^long long5063] (.plusNanos this5062 long5063)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this5064 ^long long5065 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit5066] (.plus this5064 long5065 java-time-temporal-TemporalUnit5066)) (^java.time.Duration [^java.time.Duration this5067 ^java.time.Duration java-time-Duration5068] (.plus this5067 java-time-Duration5068)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5069 ^long long5070] (.dividedBy this5069 long5070)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5071 ^long long5072] (.plusMinutes this5071 long5072)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this5073] (.toString this5073)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this5074 ^java.time.Duration java-time-Duration5075] (.minus this5074 java-time-Duration5075)) (^java.time.Duration [^java.time.Duration this5076 ^long long5077 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit5078] (.minus this5076 long5077 java-time-temporal-TemporalUnit5078)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this5079 ^java.time.temporal.Temporal java-time-temporal-Temporal5080] (.addTo this5079 java-time-temporal-Temporal5080)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5081 ^long long5082] (.plusHours this5081 long5082)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5083 ^long long5084] (.plusDays this5083 long5084)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long5085] (java.time.Duration/ofHours long5085)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this5086] (.toMillis this5086)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this5087] (.toHours this5087)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long5088] (java.time.Duration/ofNanos long5088)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long5089] (java.time.Duration/ofMillis long5089)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this5090] (.negated this5090)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this5091] (.abs this5091)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal5092 ^java.time.temporal.Temporal java-time-temporal-Temporal5093] (java.time.Duration/between java-time-temporal-Temporal5092 java-time-temporal-Temporal5093)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this5094] (.getSeconds this5094)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount5095] (java.time.Duration/from java-time-temporal-TemporalAmount5095)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5096 ^long long5097] (.minusNanos this5096 long5097)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence5098] (java.time.Duration/parse java-lang-CharSequence5098)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this5099] (.hashCode this5099)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5100 ^long long5101] (.withSeconds this5100 long5101)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long5102] (java.time.Duration/ofMinutes long5102)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this5103 ^java.time.temporal.Temporal java-time-temporal-Temporal5104] (.subtractFrom this5103 java-time-temporal-Temporal5104)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this5105 ^java.time.Duration java-time-Duration5106] (.compareTo this5105 java-time-Duration5106)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5107 ^long long5108] (.plusSeconds this5107 long5108)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this5109 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit5110] (.get this5109 java-time-temporal-TemporalUnit5110)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this5111 ^java.lang.Object java-lang-Object5112] (.equals this5111 java-lang-Object5112)))
(clojure.core/defn of-seconds {:arglists (quote (["long"] ["long" "long"]))} (^java.time.Duration [^long long5113] (java.time.Duration/ofSeconds long5113)) (^java.time.Duration [^long long5114 ^long long5115] (java.time.Duration/ofSeconds long5114 long5115)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this5116 ^long long5117] (.minusDays this5116 long5117)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this5118] (.toDays this5118)))
