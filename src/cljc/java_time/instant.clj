(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Instant]))
(def min java.time.Instant/MIN)
(def epoch java.time.Instant/EPOCH)
(def max java.time.Instant/MAX)
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this13675 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13676] (.truncatedTo this13675 java-time-temporal-TemporalUnit13676)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Instant this13677 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13678] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.range this13677 java-time-temporal-TemporalField13678))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long"] ["long" "long"]))} (^java.time.Instant [^long long13679] (java.time.Instant/ofEpochSecond long13679)) (^java.time.Instant [^long long13680 ^long long13681] (java.time.Instant/ofEpochSecond long13680 long13681)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.Instant this13682 ^java.time.ZoneOffset java-time-ZoneOffset13683] (.atOffset this13682 java-time-ZoneOffset13683)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this13684 ^long long13685] (.minusMillis this13684 long13685)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this13686] (.getNano this13686)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this13687 ^long long13688] (.plusMillis this13687 long13688)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this13689 ^long long13690] (.minusSeconds this13689 long13690)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this13691 ^long long13692] (.plusNanos this13691 long13692)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this13693 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount13694] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.plus this13693 java-time-temporal-TemporalAmount13694))) (^java.time.Instant [^java.time.Instant this13695 ^long long13696 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13697] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.plus this13695 long13696 java-time-temporal-TemporalUnit13697))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Instant this13698 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13699] (.query this13698 java-time-temporal-TemporalQuery13699)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^java.time.Instant this13700] (.toString this13700)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this13701 ^java.time.Instant java-time-Instant13702] (.isBefore this13701 java-time-Instant13702)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this13703 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount13704] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.minus this13703 java-time-temporal-TemporalAmount13704))) (^java.time.Instant [^java.time.Instant this13705 ^long long13706 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13707] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.minus this13705 long13706 java-time-temporal-TemporalUnit13707))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant this13708 ^java.time.ZoneId java-time-ZoneId13709] (.atZone this13708 java-time-ZoneId13709)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^java.time.Instant [^long long13710] (java.time.Instant/ofEpochMilli long13710)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^java.time.Instant this13711 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13712] (.getLong this13711 java-time-temporal-TemporalField13712)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Instant this13713 ^java.time.temporal.Temporal java-time-temporal-Temporal13714 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13715] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.until this13713 java-time-temporal-Temporal13714 java-time-temporal-TemporalUnit13715))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Instant [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13716] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (java.time.Instant/from java-time-temporal-TemporalAccessor13716))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this13717 ^java.time.Instant java-time-Instant13718] (.isAfter this13717 java-time-Instant13718)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this13719 ^long long13720] (.minusNanos this13719 long13720)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"] ["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this13721 G__13722] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__13722)) (clojure.core/let [G__13722 ^"java.time.temporal.TemporalField" G__13722] (.isSupported ^java.time.Instant this13721 G__13722)) (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__13722)) (clojure.core/let [G__13722 ^"java.time.temporal.ChronoUnit" G__13722] (.isSupported ^java.time.Instant this13721 G__13722)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Instant [^java.lang.CharSequence java-lang-CharSequence13723] (java.time.Instant/parse java-lang-CharSequence13723)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this13724] (.hashCode this13724)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Instant this13725 ^java.time.temporal.Temporal java-time-temporal-Temporal13726] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.adjustInto this13725 java-time-temporal-Temporal13726))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"]))} (^java.time.Instant [^java.time.Instant this13727 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster13728] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.with this13727 java-time-temporal-TemporalAdjuster13728))) (^java.time.Instant [^java.time.Instant this13729 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13730 ^long long13731] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.with this13729 java-time-temporal-TemporalField13730 long13731))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"]))} (^java.time.Instant [] (java.time.Instant/now)) (^java.time.Instant [^java.time.Clock java-time-Clock13732] (java.time.Instant/now java-time-Clock13732)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this13733] (.toEpochMilli this13733)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this13734] (.getEpochSecond this13734)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this13735 ^java.time.Instant java-time-Instant13736] (.compareTo this13735 java-time-Instant13736)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this13737 ^long long13738] (.plusSeconds this13737 long13738)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Instant this13739 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13740] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.get this13739 java-time-temporal-TemporalField13740))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Instant this13741 ^java.lang.Object java-lang-Object13742] (.equals this13741 java-lang-Object13742)))
