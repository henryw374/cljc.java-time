(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Instant]))
(def min java.time.Instant/MIN)
(def epoch java.time.Instant/EPOCH)
(def max java.time.Instant/MAX)
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this4158 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4159] (.truncatedTo this4158 java-time-temporal-TemporalUnit4159)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Instant this4160 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4161] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.range this4160 java-time-temporal-TemporalField4161))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long"] ["long" "long"]))} (^java.time.Instant [^long long4162] (java.time.Instant/ofEpochSecond long4162)) (^java.time.Instant [^long long4163 ^long long4164] (java.time.Instant/ofEpochSecond long4163 long4164)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.Instant this4165 ^java.time.ZoneOffset java-time-ZoneOffset4166] (.atOffset this4165 java-time-ZoneOffset4166)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this4167 ^long long4168] (.minusMillis this4167 long4168)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this4169] (.getNano this4169)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this4170 ^long long4171] (.plusMillis this4170 long4171)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this4172 ^long long4173] (.minusSeconds this4172 long4173)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this4174 ^long long4175] (.plusNanos this4174 long4175)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"]))} (^java.time.Instant [^java.time.Instant this4176 ^long long4177 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4178] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.plus this4176 long4177 java-time-temporal-TemporalUnit4178))) (^java.time.Instant [^java.time.Instant this4179 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4180] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.plus this4179 java-time-temporal-TemporalAmount4180))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Instant this4181 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4182] (.query this4181 java-time-temporal-TemporalQuery4182)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^java.time.Instant this4183] (.toString this4183)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this4184 ^java.time.Instant java-time-Instant4185] (.isBefore this4184 java-time-Instant4185)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"]))} (^java.time.Instant [^java.time.Instant this4186 ^long long4187 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4188] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.minus this4186 long4187 java-time-temporal-TemporalUnit4188))) (^java.time.Instant [^java.time.Instant this4189 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4190] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.minus this4189 java-time-temporal-TemporalAmount4190))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant this4191 ^java.time.ZoneId java-time-ZoneId4192] (.atZone this4191 java-time-ZoneId4192)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^java.time.Instant [^long long4193] (java.time.Instant/ofEpochMilli long4193)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^java.time.Instant this4194 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4195] (.getLong this4194 java-time-temporal-TemporalField4195)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Instant this4196 ^java.time.temporal.Temporal java-time-temporal-Temporal4197 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4198] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.until this4196 java-time-temporal-Temporal4197 java-time-temporal-TemporalUnit4198))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Instant [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4199] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (java.time.Instant/from java-time-temporal-TemporalAccessor4199))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this4200 ^java.time.Instant java-time-Instant4201] (.isAfter this4200 java-time-Instant4201)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this4202 ^long long4203] (.minusNanos this4202 long4203)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"] ["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this4204 G__4205] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__4205)) (clojure.core/let [G__4205 ^"java.time.temporal.TemporalField" G__4205] (.isSupported ^java.time.Instant this4204 G__4205)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalUnit G__4205)) (clojure.core/let [G__4205 ^"java.time.temporal.TemporalUnit" G__4205] (.isSupported ^java.time.Instant this4204 G__4205)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Instant [^java.lang.CharSequence java-lang-CharSequence4206] (java.time.Instant/parse java-lang-CharSequence4206)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this4207] (.hashCode this4207)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Instant this4208 ^java.time.temporal.Temporal java-time-temporal-Temporal4209] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.adjustInto this4208 java-time-temporal-Temporal4209))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"]))} (^java.time.Instant [^java.time.Instant this4210 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4211 ^long long4212] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.with this4210 java-time-temporal-TemporalField4211 long4212))) (^java.time.Instant [^java.time.Instant this4213 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster4214] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.with this4213 java-time-temporal-TemporalAdjuster4214))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] []))} (^java.time.Instant [^java.time.Clock java-time-Clock4215] (java.time.Instant/now java-time-Clock4215)) (^java.time.Instant [] (java.time.Instant/now)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this4216] (.toEpochMilli this4216)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this4217] (.getEpochSecond this4217)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this4218 ^java.time.Instant java-time-Instant4219] (.compareTo this4218 java-time-Instant4219)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this4220 ^long long4221] (.plusSeconds this4220 long4221)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Instant this4222 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4223] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.get this4222 java-time-temporal-TemporalField4223))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Instant this4224 ^java.lang.Object java-lang-Object4225] (.equals this4224 java-lang-Object4225)))
