(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Instant]))
(def min java.time.Instant/MIN)
(def epoch java.time.Instant/EPOCH)
(def max java.time.Instant/MAX)
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this59862 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit59863] (.truncatedTo this59862 java-time-temporal-TemporalUnit59863)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Instant this59864 ^java.time.temporal.TemporalField java-time-temporal-TemporalField59865] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.range this59864 java-time-temporal-TemporalField59865))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Instant [^long long59866 ^long long59867] (java.time.Instant/ofEpochSecond long59866 long59867)) (^java.time.Instant [^long long59868] (java.time.Instant/ofEpochSecond long59868)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.Instant this59869 ^java.time.ZoneOffset java-time-ZoneOffset59870] (.atOffset this59869 java-time-ZoneOffset59870)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this59871 ^long long59872] (.minusMillis this59871 long59872)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this59873] (.getNano this59873)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this59874 ^long long59875] (.plusMillis this59874 long59875)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this59876 ^long long59877] (.minusSeconds this59876 long59877)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this59878 ^long long59879] (.plusNanos this59878 long59879)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this59880 G__59881] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59881)) (clojure.core/let [G__59881 ^"java.time.temporal.TemporalAmount" G__59881] (.plus ^java.time.Instant this59880 G__59881)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59881)) (clojure.core/let [G__59881 ^"java.time.temporal.TemporalAmount" G__59881] (.plus ^java.time.Instant this59880 G__59881)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this59882 G__59883 G__59884] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59883) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59884)) (clojure.core/let [G__59883 (clojure.core/long G__59883) G__59884 ^"java.time.temporal.TemporalUnit" G__59884] (.plus ^java.time.Instant this59882 G__59883 G__59884)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59883) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59884)) (clojure.core/let [G__59883 (clojure.core/long G__59883) G__59884 ^"java.time.temporal.TemporalUnit" G__59884] (.plus ^java.time.Instant this59882 G__59883 G__59884)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Instant this59885 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery59886] (.query this59885 java-time-temporal-TemporalQuery59886)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^java.time.Instant this59887] (.toString this59887)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this59888 ^java.time.Instant java-time-Instant59889] (.isBefore this59888 java-time-Instant59889)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this59890 G__59891] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59891)) (clojure.core/let [G__59891 ^"java.time.temporal.TemporalAmount" G__59891] (.minus ^java.time.Instant this59890 G__59891)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59891)) (clojure.core/let [G__59891 ^"java.time.temporal.TemporalAmount" G__59891] (.minus ^java.time.Instant this59890 G__59891)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this59892 G__59893 G__59894] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59893) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59894)) (clojure.core/let [G__59893 (clojure.core/long G__59893) G__59894 ^"java.time.temporal.TemporalUnit" G__59894] (.minus ^java.time.Instant this59892 G__59893 G__59894)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59893) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59894)) (clojure.core/let [G__59893 (clojure.core/long G__59893) G__59894 ^"java.time.temporal.TemporalUnit" G__59894] (.minus ^java.time.Instant this59892 G__59893 G__59894)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant this59895 ^java.time.ZoneId java-time-ZoneId59896] (.atZone this59895 java-time-ZoneId59896)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^java.time.Instant [^long long59897] (java.time.Instant/ofEpochMilli long59897)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^java.time.Instant this59898 ^java.time.temporal.TemporalField java-time-temporal-TemporalField59899] (.getLong this59898 java-time-temporal-TemporalField59899)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Instant this59900 ^java.time.temporal.Temporal java-time-temporal-Temporal59901 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit59902] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.until this59900 java-time-temporal-Temporal59901 java-time-temporal-TemporalUnit59902))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Instant [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor59903] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (java.time.Instant/from java-time-temporal-TemporalAccessor59903))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this59904 ^java.time.Instant java-time-Instant59905] (.isAfter this59904 java-time-Instant59905)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this59906 ^long long59907] (.minusNanos this59906 long59907)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this59908 G__59909] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59909)) (clojure.core/let [G__59909 ^"java.time.temporal.TemporalUnit" G__59909] (.isSupported ^java.time.Instant this59908 G__59909)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__59909)) (clojure.core/let [G__59909 ^"java.time.temporal.TemporalField" G__59909] (.isSupported ^java.time.Instant this59908 G__59909)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Instant [^java.lang.CharSequence java-lang-CharSequence59910] (java.time.Instant/parse java-lang-CharSequence59910)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this59911] (.hashCode this59911)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Instant this59912 ^java.time.temporal.Temporal java-time-temporal-Temporal59913] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.adjustInto this59912 java-time-temporal-Temporal59913))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this59914 G__59915] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__59915)) (clojure.core/let [G__59915 ^"java.time.temporal.TemporalAdjuster" G__59915] (.with ^java.time.Instant this59914 G__59915)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__59915)) (clojure.core/let [G__59915 ^"java.time.temporal.TemporalAdjuster" G__59915] (.with ^java.time.Instant this59914 G__59915)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this59916 G__59917 G__59918] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__59917) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59918)) (clojure.core/let [G__59917 ^"java.time.temporal.TemporalField" G__59917 G__59918 (clojure.core/long G__59918)] (.with ^java.time.Instant this59916 G__59917 G__59918)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__59917) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59918)) (clojure.core/let [G__59917 ^"java.time.temporal.TemporalField" G__59917 G__59918 (clojure.core/long G__59918)] (.with ^java.time.Instant this59916 G__59917 G__59918)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"]))} (^java.time.Instant [] (java.time.Instant/now)) (^java.time.Instant [^java.time.Clock java-time-Clock59919] (java.time.Instant/now java-time-Clock59919)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this59920] (.toEpochMilli this59920)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this59921] (.getEpochSecond this59921)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.lang.Object"] ["java.time.Instant" "java.time.Instant"]))} (^java.lang.Integer [this59922 G__59923] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__59923)) (clojure.core/let [G__59923 ^"java.lang.Object" G__59923] (.compareTo ^java.time.Instant this59922 G__59923)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Instant") G__59923)) (clojure.core/let [G__59923 ^"java.time.Instant" G__59923] (.compareTo ^java.time.Instant this59922 G__59923)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this59924 ^long long59925] (.plusSeconds this59924 long59925)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Instant this59926 ^java.time.temporal.TemporalField java-time-temporal-TemporalField59927] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.get this59926 java-time-temporal-TemporalField59927))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Instant this59928 ^java.lang.Object java-lang-Object59929] (.equals this59928 java-lang-Object59929)))
