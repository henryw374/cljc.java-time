(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Instant]))
(def min java.time.Instant/MIN)
(def epoch java.time.Instant/EPOCH)
(def max java.time.Instant/MAX)
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this7146 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7147] (.truncatedTo this7146 java-time-temporal-TemporalUnit7147)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Instant this7148 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7149] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.range this7148 java-time-temporal-TemporalField7149))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long"] ["long" "long"]))} (^java.time.Instant [^long long7150] (java.time.Instant/ofEpochSecond long7150)) (^java.time.Instant [^long long7151 ^long long7152] (java.time.Instant/ofEpochSecond long7151 long7152)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.Instant this7153 ^java.time.ZoneOffset java-time-ZoneOffset7154] (.atOffset this7153 java-time-ZoneOffset7154)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this7155 ^long long7156] (.minusMillis this7155 long7156)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this7157] (.getNano this7157)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this7158 ^long long7159] (.plusMillis this7158 long7159)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this7160 ^long long7161] (.minusSeconds this7160 long7161)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this7162 ^long long7163] (.plusNanos this7162 long7163)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7164 G__7165] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7165)) (clojure.core/let [G__7165 ^"java.time.temporal.TemporalAmount" G__7165] (.plus ^java.time.Instant this7164 G__7165)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7165)) (clojure.core/let [G__7165 ^"java.time.temporal.TemporalAmount" G__7165] (.plus ^java.time.Instant this7164 G__7165)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this7166 G__7167 G__7168] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7167) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7168)) (clojure.core/let [G__7167 (clojure.core/long G__7167) G__7168 ^"java.time.temporal.TemporalUnit" G__7168] (.plus ^java.time.Instant this7166 G__7167 G__7168)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7167) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7168)) (clojure.core/let [G__7167 (clojure.core/long G__7167) G__7168 ^"java.time.temporal.TemporalUnit" G__7168] (.plus ^java.time.Instant this7166 G__7167 G__7168)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Instant this7169 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7170] (.query this7169 java-time-temporal-TemporalQuery7170)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^java.time.Instant this7171] (.toString this7171)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this7172 ^java.time.Instant java-time-Instant7173] (.isBefore this7172 java-time-Instant7173)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this7174 G__7175 G__7176] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7175) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7176)) (clojure.core/let [G__7175 (clojure.core/long G__7175) G__7176 ^"java.time.temporal.TemporalUnit" G__7176] (.minus ^java.time.Instant this7174 G__7175 G__7176)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7175) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7176)) (clojure.core/let [G__7175 (clojure.core/long G__7175) G__7176 ^"java.time.temporal.TemporalUnit" G__7176] (.minus ^java.time.Instant this7174 G__7175 G__7176)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this7177 G__7178] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7178)) (clojure.core/let [G__7178 ^"java.time.temporal.TemporalAmount" G__7178] (.minus ^java.time.Instant this7177 G__7178)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7178)) (clojure.core/let [G__7178 ^"java.time.temporal.TemporalAmount" G__7178] (.minus ^java.time.Instant this7177 G__7178)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant this7179 ^java.time.ZoneId java-time-ZoneId7180] (.atZone this7179 java-time-ZoneId7180)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^java.time.Instant [^long long7181] (java.time.Instant/ofEpochMilli long7181)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^java.time.Instant this7182 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7183] (.getLong this7182 java-time-temporal-TemporalField7183)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Instant this7184 ^java.time.temporal.Temporal java-time-temporal-Temporal7185 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7186] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.until this7184 java-time-temporal-Temporal7185 java-time-temporal-TemporalUnit7186))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Instant [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7187] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (java.time.Instant/from java-time-temporal-TemporalAccessor7187))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this7188 ^java.time.Instant java-time-Instant7189] (.isAfter this7188 java-time-Instant7189)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this7190 ^long long7191] (.minusNanos this7190 long7191)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"] ["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this7192 G__7193] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7193)) (clojure.core/let [G__7193 ^"java.time.temporal.TemporalField" G__7193] (.isSupported ^java.time.Instant this7192 G__7193)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7193)) (clojure.core/let [G__7193 ^"java.time.temporal.TemporalUnit" G__7193] (.isSupported ^java.time.Instant this7192 G__7193)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Instant [^java.lang.CharSequence java-lang-CharSequence7194] (java.time.Instant/parse java-lang-CharSequence7194)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this7195] (.hashCode this7195)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Instant this7196 ^java.time.temporal.Temporal java-time-temporal-Temporal7197] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.adjustInto this7196 java-time-temporal-Temporal7197))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this7198 G__7199 G__7200] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7199) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7200)) (clojure.core/let [G__7199 ^"java.time.temporal.TemporalField" G__7199 G__7200 (clojure.core/long G__7200)] (.with ^java.time.Instant this7198 G__7199 G__7200)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7199) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7200)) (clojure.core/let [G__7199 ^"java.time.temporal.TemporalField" G__7199 G__7200 (clojure.core/long G__7200)] (.with ^java.time.Instant this7198 G__7199 G__7200)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this7201 G__7202] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__7202)) (clojure.core/let [G__7202 ^"java.time.temporal.TemporalAdjuster" G__7202] (.with ^java.time.Instant this7201 G__7202)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__7202)) (clojure.core/let [G__7202 ^"java.time.temporal.TemporalAdjuster" G__7202] (.with ^java.time.Instant this7201 G__7202)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"]))} (^java.time.Instant [] (java.time.Instant/now)) (^java.time.Instant [^java.time.Clock java-time-Clock7203] (java.time.Instant/now java-time-Clock7203)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this7204] (.toEpochMilli this7204)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this7205] (.getEpochSecond this7205)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.lang.Object"] ["java.time.Instant" "java.time.Instant"]))} (^java.lang.Integer [this7206 G__7207] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7207)) (clojure.core/let [G__7207 ^"java.lang.Object" G__7207] (.compareTo ^java.time.Instant this7206 G__7207)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Instant") G__7207)) (clojure.core/let [G__7207 ^"java.time.Instant" G__7207] (.compareTo ^java.time.Instant this7206 G__7207)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this7208 ^long long7209] (.plusSeconds this7208 long7209)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Instant this7210 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7211] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.get this7210 java-time-temporal-TemporalField7211))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Instant this7212 ^java.lang.Object java-lang-Object7213] (.equals this7212 java-lang-Object7213)))
