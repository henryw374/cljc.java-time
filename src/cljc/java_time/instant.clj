(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Instant]))
(def min java.time.Instant/MIN)
(def epoch java.time.Instant/EPOCH)
(def max java.time.Instant/MAX)
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this7170 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7171] (.truncatedTo this7170 java-time-temporal-TemporalUnit7171)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Instant this7172 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7173] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.range this7172 java-time-temporal-TemporalField7173))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Instant [^long long7174 ^long long7175] (java.time.Instant/ofEpochSecond long7174 long7175)) (^java.time.Instant [^long long7176] (java.time.Instant/ofEpochSecond long7176)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.Instant this7177 ^java.time.ZoneOffset java-time-ZoneOffset7178] (.atOffset this7177 java-time-ZoneOffset7178)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this7179 ^long long7180] (.minusMillis this7179 long7180)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this7181] (.getNano this7181)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this7182 ^long long7183] (.plusMillis this7182 long7183)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this7184 ^long long7185] (.minusSeconds this7184 long7185)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this7186 ^long long7187] (.plusNanos this7186 long7187)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this7188 G__7189 G__7190] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7189) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7190)) (clojure.core/let [G__7189 (clojure.core/long G__7189) G__7190 ^"java.time.temporal.TemporalUnit" G__7190] (.plus ^java.time.Instant this7188 G__7189 G__7190)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7189) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7190)) (clojure.core/let [G__7189 (clojure.core/long G__7189) G__7190 ^"java.time.temporal.TemporalUnit" G__7190] (.plus ^java.time.Instant this7188 G__7189 G__7190)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this7191 G__7192] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7192)) (clojure.core/let [G__7192 ^"java.time.temporal.TemporalAmount" G__7192] (.plus ^java.time.Instant this7191 G__7192)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7192)) (clojure.core/let [G__7192 ^"java.time.temporal.TemporalAmount" G__7192] (.plus ^java.time.Instant this7191 G__7192)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Instant this7193 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7194] (.query this7193 java-time-temporal-TemporalQuery7194)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^java.time.Instant this7195] (.toString this7195)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this7196 ^java.time.Instant java-time-Instant7197] (.isBefore this7196 java-time-Instant7197)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7198 G__7199] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7199)) (clojure.core/let [G__7199 ^"java.time.temporal.TemporalAmount" G__7199] (.minus ^java.time.Instant this7198 G__7199)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7199)) (clojure.core/let [G__7199 ^"java.time.temporal.TemporalAmount" G__7199] (.minus ^java.time.Instant this7198 G__7199)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this7200 G__7201 G__7202] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7201) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7202)) (clojure.core/let [G__7201 (clojure.core/long G__7201) G__7202 ^"java.time.temporal.TemporalUnit" G__7202] (.minus ^java.time.Instant this7200 G__7201 G__7202)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7201) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7202)) (clojure.core/let [G__7201 (clojure.core/long G__7201) G__7202 ^"java.time.temporal.TemporalUnit" G__7202] (.minus ^java.time.Instant this7200 G__7201 G__7202)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant this7203 ^java.time.ZoneId java-time-ZoneId7204] (.atZone this7203 java-time-ZoneId7204)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^java.time.Instant [^long long7205] (java.time.Instant/ofEpochMilli long7205)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^java.time.Instant this7206 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7207] (.getLong this7206 java-time-temporal-TemporalField7207)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Instant this7208 ^java.time.temporal.Temporal java-time-temporal-Temporal7209 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7210] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.until this7208 java-time-temporal-Temporal7209 java-time-temporal-TemporalUnit7210))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Instant [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7211] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (java.time.Instant/from java-time-temporal-TemporalAccessor7211))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this7212 ^java.time.Instant java-time-Instant7213] (.isAfter this7212 java-time-Instant7213)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this7214 ^long long7215] (.minusNanos this7214 long7215)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this7216 G__7217] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7217)) (clojure.core/let [G__7217 ^"java.time.temporal.TemporalUnit" G__7217] (.isSupported ^java.time.Instant this7216 G__7217)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7217)) (clojure.core/let [G__7217 ^"java.time.temporal.TemporalField" G__7217] (.isSupported ^java.time.Instant this7216 G__7217)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Instant [^java.lang.CharSequence java-lang-CharSequence7218] (java.time.Instant/parse java-lang-CharSequence7218)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this7219] (.hashCode this7219)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Instant this7220 ^java.time.temporal.Temporal java-time-temporal-Temporal7221] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.adjustInto this7220 java-time-temporal-Temporal7221))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this7222 G__7223 G__7224] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7223) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7224)) (clojure.core/let [G__7223 ^"java.time.temporal.TemporalField" G__7223 G__7224 (clojure.core/long G__7224)] (.with ^java.time.Instant this7222 G__7223 G__7224)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7223) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7224)) (clojure.core/let [G__7223 ^"java.time.temporal.TemporalField" G__7223 G__7224 (clojure.core/long G__7224)] (.with ^java.time.Instant this7222 G__7223 G__7224)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this7225 G__7226] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__7226)) (clojure.core/let [G__7226 ^"java.time.temporal.TemporalAdjuster" G__7226] (.with ^java.time.Instant this7225 G__7226)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__7226)) (clojure.core/let [G__7226 ^"java.time.temporal.TemporalAdjuster" G__7226] (.with ^java.time.Instant this7225 G__7226)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"]))} (^java.time.Instant [] (java.time.Instant/now)) (^java.time.Instant [^java.time.Clock java-time-Clock7227] (java.time.Instant/now java-time-Clock7227)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this7228] (.toEpochMilli this7228)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this7229] (.getEpochSecond this7229)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.time.Instant"] ["java.time.Instant" "java.lang.Object"]))} (^java.lang.Integer [this7230 G__7231] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Instant") G__7231)) (clojure.core/let [G__7231 ^"java.time.Instant" G__7231] (.compareTo ^java.time.Instant this7230 G__7231)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7231)) (clojure.core/let [G__7231 ^"java.lang.Object" G__7231] (.compareTo ^java.time.Instant this7230 G__7231)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this7232 ^long long7233] (.plusSeconds this7232 long7233)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Instant this7234 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7235] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.get this7234 java-time-temporal-TemporalField7235))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Instant this7236 ^java.lang.Object java-lang-Object7237] (.equals this7236 java-lang-Object7237)))
