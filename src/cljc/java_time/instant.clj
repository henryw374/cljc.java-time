(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Instant]))
(def min java.time.Instant/MIN)
(def epoch java.time.Instant/EPOCH)
(def max java.time.Instant/MAX)
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this4157 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4158] (.truncatedTo this4157 java-time-temporal-TemporalUnit4158)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Instant this4159 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4160] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.range this4159 java-time-temporal-TemporalField4160))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Instant [^long long4161 ^long long4162] (java.time.Instant/ofEpochSecond long4161 long4162)) (^java.time.Instant [^long long4163] (java.time.Instant/ofEpochSecond long4163)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.Instant this4164 ^java.time.ZoneOffset java-time-ZoneOffset4165] (.atOffset this4164 java-time-ZoneOffset4165)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this4166 ^long long4167] (.minusMillis this4166 long4167)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this4168] (.getNano this4168)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this4169 ^long long4170] (.plusMillis this4169 long4170)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this4171 ^long long4172] (.minusSeconds this4171 long4172)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this4173 ^long long4174] (.plusNanos this4173 long4174)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this4175 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4176] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.plus this4175 java-time-temporal-TemporalAmount4176))) (^java.time.Instant [^java.time.Instant this4177 ^long long4178 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4179] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.plus this4177 long4178 java-time-temporal-TemporalUnit4179))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Instant this4180 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4181] (.query this4180 java-time-temporal-TemporalQuery4181)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^java.time.Instant this4182] (.toString this4182)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this4183 ^java.time.Instant java-time-Instant4184] (.isBefore this4183 java-time-Instant4184)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this4185 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4186] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.minus this4185 java-time-temporal-TemporalAmount4186))) (^java.time.Instant [^java.time.Instant this4187 ^long long4188 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4189] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.minus this4187 long4188 java-time-temporal-TemporalUnit4189))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant this4190 ^java.time.ZoneId java-time-ZoneId4191] (.atZone this4190 java-time-ZoneId4191)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^java.time.Instant [^long long4192] (java.time.Instant/ofEpochMilli long4192)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^java.time.Instant this4193 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4194] (.getLong this4193 java-time-temporal-TemporalField4194)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Instant this4195 ^java.time.temporal.Temporal java-time-temporal-Temporal4196 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4197] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.until this4195 java-time-temporal-Temporal4196 java-time-temporal-TemporalUnit4197))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Instant [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4198] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (java.time.Instant/from java-time-temporal-TemporalAccessor4198))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this4199 ^java.time.Instant java-time-Instant4200] (.isAfter this4199 java-time-Instant4200)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this4201 ^long long4202] (.minusNanos this4201 long4202)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this4203 G__4204] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__4204)) (clojure.core/let [G__4204 ^"java.time.temporal.ChronoUnit" G__4204] (.isSupported ^java.time.Instant this4203 G__4204)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__4204)) (clojure.core/let [G__4204 ^"java.time.temporal.TemporalField" G__4204] (.isSupported ^java.time.Instant this4203 G__4204)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Instant [^java.lang.CharSequence java-lang-CharSequence4205] (java.time.Instant/parse java-lang-CharSequence4205)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this4206] (.hashCode this4206)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Instant this4207 ^java.time.temporal.Temporal java-time-temporal-Temporal4208] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.adjustInto this4207 java-time-temporal-Temporal4208))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"]))} (^java.time.Instant [^java.time.Instant this4209 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster4210] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.with this4209 java-time-temporal-TemporalAdjuster4210))) (^java.time.Instant [^java.time.Instant this4211 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4212 ^long long4213] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.with this4211 java-time-temporal-TemporalField4212 long4213))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"]))} (^java.time.Instant [] (java.time.Instant/now)) (^java.time.Instant [^java.time.Clock java-time-Clock4214] (java.time.Instant/now java-time-Clock4214)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this4215] (.toEpochMilli this4215)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this4216] (.getEpochSecond this4216)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this4217 ^java.time.Instant java-time-Instant4218] (.compareTo this4217 java-time-Instant4218)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this4219 ^long long4220] (.plusSeconds this4219 long4220)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Instant this4221 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4222] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.get this4221 java-time-temporal-TemporalField4222))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Instant this4223 ^java.lang.Object java-lang-Object4224] (.equals this4223 java-lang-Object4224)))
