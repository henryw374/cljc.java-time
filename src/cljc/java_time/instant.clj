(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Instant]))
(def min java.time.Instant/MIN)
(def epoch java.time.Instant/EPOCH)
(def max java.time.Instant/MAX)
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this11379 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11380] (.truncatedTo this11379 java-time-temporal-TemporalUnit11380)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Instant this11381 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11382] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.range this11381 java-time-temporal-TemporalField11382))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Instant [^long long11383 ^long long11384] (. java.time.Instant ofEpochSecond long11383 long11384)) (^java.time.Instant [^long long11385] (. java.time.Instant ofEpochSecond long11385)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.Instant this11386 ^java.time.ZoneOffset java-time-ZoneOffset11387] (.atOffset this11386 java-time-ZoneOffset11387)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this11388 ^long long11389] (.minusMillis this11388 long11389)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this11390] (.getNano this11390)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this11391 ^long long11392] (.plusMillis this11391 long11392)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this11393 ^long long11394] (.minusSeconds this11393 long11394)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this11395 ^long long11396] (.plusNanos this11395 long11396)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11397 G__11398] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11398)) (clojure.core/let [G__11398 ^"java.time.temporal.TemporalAmount" G__11398] (.plus ^java.time.Instant this11397 G__11398)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11398)) (clojure.core/let [G__11398 ^"java.time.temporal.TemporalAmount" G__11398] (.plus ^java.time.Instant this11397 G__11398)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this11399 G__11400 G__11401] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11400) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11401)) (clojure.core/let [G__11400 (clojure.core/long G__11400) G__11401 ^"java.time.temporal.TemporalUnit" G__11401] (.plus ^java.time.Instant this11399 G__11400 G__11401)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11400) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11401)) (clojure.core/let [G__11400 (clojure.core/long G__11400) G__11401 ^"java.time.temporal.TemporalUnit" G__11401] (.plus ^java.time.Instant this11399 G__11400 G__11401)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Instant this11402 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery11403] (.query this11402 java-time-temporal-TemporalQuery11403)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^java.time.Instant this11404] (.toString this11404)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this11405 ^java.time.Instant java-time-Instant11406] (.isBefore this11405 java-time-Instant11406)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11407 G__11408] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11408)) (clojure.core/let [G__11408 ^"java.time.temporal.TemporalAmount" G__11408] (.minus ^java.time.Instant this11407 G__11408)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11408)) (clojure.core/let [G__11408 ^"java.time.temporal.TemporalAmount" G__11408] (.minus ^java.time.Instant this11407 G__11408)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this11409 G__11410 G__11411] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11410) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11411)) (clojure.core/let [G__11410 (clojure.core/long G__11410) G__11411 ^"java.time.temporal.TemporalUnit" G__11411] (.minus ^java.time.Instant this11409 G__11410 G__11411)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11410) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11411)) (clojure.core/let [G__11410 (clojure.core/long G__11410) G__11411 ^"java.time.temporal.TemporalUnit" G__11411] (.minus ^java.time.Instant this11409 G__11410 G__11411)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant this11412 ^java.time.ZoneId java-time-ZoneId11413] (.atZone this11412 java-time-ZoneId11413)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^java.time.Instant [^long long11414] (. java.time.Instant ofEpochMilli long11414)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^java.time.Instant this11415 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11416] (.getLong this11415 java-time-temporal-TemporalField11416)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Instant this11417 ^java.time.temporal.Temporal java-time-temporal-Temporal11418 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11419] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.until this11417 java-time-temporal-Temporal11418 java-time-temporal-TemporalUnit11419))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Instant [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor11420] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (. java.time.Instant from java-time-temporal-TemporalAccessor11420))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this11421 ^java.time.Instant java-time-Instant11422] (.isAfter this11421 java-time-Instant11422)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this11423 ^long long11424] (.minusNanos this11423 long11424)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this11425 G__11426] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11426)) (clojure.core/let [G__11426 ^"java.time.temporal.TemporalUnit" G__11426] (.isSupported ^java.time.Instant this11425 G__11426)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11426)) (clojure.core/let [G__11426 ^"java.time.temporal.TemporalField" G__11426] (.isSupported ^java.time.Instant this11425 G__11426)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Instant [^java.lang.CharSequence java-lang-CharSequence11427] (. java.time.Instant parse java-lang-CharSequence11427)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this11428] (.hashCode this11428)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Instant this11429 ^java.time.temporal.Temporal java-time-temporal-Temporal11430] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.adjustInto this11429 java-time-temporal-Temporal11430))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this11431 G__11432] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__11432)) (clojure.core/let [G__11432 ^"java.time.temporal.TemporalAdjuster" G__11432] (.with ^java.time.Instant this11431 G__11432)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__11432)) (clojure.core/let [G__11432 ^"java.time.temporal.TemporalAdjuster" G__11432] (.with ^java.time.Instant this11431 G__11432)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this11433 G__11434 G__11435] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11434) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11435)) (clojure.core/let [G__11434 ^"java.time.temporal.TemporalField" G__11434 G__11435 (clojure.core/long G__11435)] (.with ^java.time.Instant this11433 G__11434 G__11435)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11434) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11435)) (clojure.core/let [G__11434 ^"java.time.temporal.TemporalField" G__11434 G__11435 (clojure.core/long G__11435)] (.with ^java.time.Instant this11433 G__11434 G__11435)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"]))} (^java.time.Instant [] (. java.time.Instant now)) (^java.time.Instant [^java.time.Clock java-time-Clock11436] (. java.time.Instant now java-time-Clock11436)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this11437] (.toEpochMilli this11437)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this11438] (.getEpochSecond this11438)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.lang.Object"] ["java.time.Instant" "java.time.Instant"]))} (^java.lang.Integer [this11439 G__11440] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__11440)) (clojure.core/let [G__11440 ^"java.lang.Object" G__11440] (.compareTo ^java.time.Instant this11439 G__11440)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Instant") G__11440)) (clojure.core/let [G__11440 ^"java.time.Instant" G__11440] (.compareTo ^java.time.Instant this11439 G__11440)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this11441 ^long long11442] (.plusSeconds this11441 long11442)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Instant this11443 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11444] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.get this11443 java-time-temporal-TemporalField11444))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Instant this11445 ^java.lang.Object java-lang-Object11446] (.equals this11445 java-lang-Object11446)))
