(ns cljc.java-time.offset-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [OffsetTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time OffsetTime])))
(def min (. java.time.OffsetTime -MIN))
(def max (. java.time.OffsetTime -MAX))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3884 ^long long3885] (.minusMinutes this3884 long3885)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3886 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3887] (.truncatedTo this3886 java-time-temporal-TemporalUnit3887)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetTime this3888 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3889] (.range this3888 java-time-temporal-TemporalField3889)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this3890] (jti/getter hour this3890)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3891 ^long long3892] (.minusHours this3891 long3892)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime java-time-LocalTime3893 ^java.time.ZoneOffset java-time-ZoneOffset3894] (. java.time.OffsetTime of java-time-LocalTime3893 java-time-ZoneOffset3894)) (^java.time.OffsetTime [^java.lang.Integer int3895 ^java.lang.Integer int3896 ^java.lang.Integer int3897 ^java.lang.Integer int3898 ^java.time.ZoneOffset java-time-ZoneOffset3899] (. java.time.OffsetTime of int3895 int3896 int3897 int3898 java-time-ZoneOffset3899)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this3900 ^java.time.OffsetTime java-time-OffsetTime3901] (.isEqual this3900 java-time-OffsetTime3901)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this3902] (jti/getter nano this3902)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3903 ^long long3904] (.minusSeconds this3903 long3904)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this3905] (jti/getter second this3905)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3906 ^long long3907] (.plusNanos this3906 long3907)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this3908 G__3909] #? (:cljs (.plus ^java.time.OffsetTime this3908 G__3909) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3909)) (clojure.core/let [G__3909 ^"java.time.temporal.TemporalAmount" G__3909] (.plus ^java.time.OffsetTime this3908 G__3909)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3909)) (clojure.core/let [G__3909 ^"java.time.temporal.TemporalAmount" G__3909] (.plus ^java.time.OffsetTime this3908 G__3909)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this3910 G__3911 G__3912] #? (:cljs (.plus ^java.time.OffsetTime this3910 G__3911 G__3912) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3911) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3912)) (clojure.core/let [G__3911 (clojure.core/long G__3911) G__3912 ^"java.time.temporal.TemporalUnit" G__3912] (.plus ^java.time.OffsetTime this3910 G__3911 G__3912)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3911) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3912)) (clojure.core/let [G__3911 (clojure.core/long G__3911) G__3912 ^"java.time.temporal.TemporalUnit" G__3912] (.plus ^java.time.OffsetTime this3910 G__3911 G__3912)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3913 ^java.lang.Integer int3914] (.withHour this3913 int3914)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3915 ^java.lang.Integer int3916] (.withMinute this3915 int3916)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3917 ^long long3918] (.plusMinutes this3917 long3918)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetTime this3919 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3920] (.query this3919 java-time-temporal-TemporalQuery3920)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^java.time.OffsetDateTime [^java.time.OffsetTime this3921 ^java.time.LocalDate java-time-LocalDate3922] (.atDate this3921 java-time-LocalDate3922)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3923 ^java.time.ZoneOffset java-time-ZoneOffset3924] (.withOffsetSameInstant this3923 java-time-ZoneOffset3924)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^java.time.OffsetTime this3925] (.toString this3925)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this3926 ^java.time.OffsetTime java-time-OffsetTime3927] (.isBefore this3926 java-time-OffsetTime3927)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this3928 G__3929 G__3930] #? (:cljs (.minus ^java.time.OffsetTime this3928 G__3929 G__3930) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3929) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3930)) (clojure.core/let [G__3929 (clojure.core/long G__3929) G__3930 ^"java.time.temporal.TemporalUnit" G__3930] (.minus ^java.time.OffsetTime this3928 G__3929 G__3930)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3929) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3930)) (clojure.core/let [G__3929 (clojure.core/long G__3929) G__3930 ^"java.time.temporal.TemporalUnit" G__3930] (.minus ^java.time.OffsetTime this3928 G__3929 G__3930)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this3931 G__3932] #? (:cljs (.minus ^java.time.OffsetTime this3931 G__3932) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3932)) (clojure.core/let [G__3932 ^"java.time.temporal.TemporalAmount" G__3932] (.minus ^java.time.OffsetTime this3931 G__3932)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3932)) (clojure.core/let [G__3932 ^"java.time.temporal.TemporalAmount" G__3932] (.minus ^java.time.OffsetTime this3931 G__3932)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3933 ^long long3934] (.plusHours this3933 long3934)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.LocalTime [^java.time.OffsetTime this3935] (.toLocalTime this3935)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetTime this3936 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3937] (.getLong this3936 java-time-temporal-TemporalField3937)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.ZoneOffset [^java.time.OffsetTime this3938] (jti/getter offset this3938)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3939 ^java.lang.Integer int3940] (.withNano this3939 int3940)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetTime this3941 ^java.time.temporal.Temporal java-time-temporal-Temporal3942 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3943] (.until this3941 java-time-temporal-Temporal3942 java-time-temporal-TemporalUnit3943)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3944 ^java.time.ZoneOffset java-time-ZoneOffset3945] (.withOffsetSameLocal this3944 java-time-ZoneOffset3945)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor3946] (. java.time.OffsetTime from java-time-temporal-TemporalAccessor3946)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this3947 ^java.time.OffsetTime java-time-OffsetTime3948] (.isAfter this3947 java-time-OffsetTime3948)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3949 ^long long3950] (.minusNanos this3949 long3950)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"] ["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this3951 G__3952] #? (:cljs (.isSupported ^java.time.OffsetTime this3951 G__3952) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3952)) (clojure.core/let [G__3952 ^"java.time.temporal.TemporalField" G__3952] (.isSupported ^java.time.OffsetTime this3951 G__3952)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3952)) (clojure.core/let [G__3952 ^"java.time.temporal.TemporalUnit" G__3952] (.isSupported ^java.time.OffsetTime this3951 G__3952)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence3953 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3954] (. java.time.OffsetTime parse java-lang-CharSequence3953 java-time-format-DateTimeFormatter3954)) (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence3955] (. java.time.OffsetTime parse java-lang-CharSequence3955)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3956 ^java.lang.Integer int3957] (.withSecond this3956 int3957)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this3958] (jti/getter minute this3958)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this3959] (.hashCode this3959)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetTime this3960 ^java.time.temporal.Temporal java-time-temporal-Temporal3961] (.adjustInto this3960 java-time-temporal-Temporal3961)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this3962 G__3963] #? (:cljs (.with ^java.time.OffsetTime this3962 G__3963) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__3963)) (clojure.core/let [G__3963 ^"java.time.temporal.TemporalAdjuster" G__3963] (.with ^java.time.OffsetTime this3962 G__3963)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__3963)) (clojure.core/let [G__3963 ^"java.time.temporal.TemporalAdjuster" G__3963] (.with ^java.time.OffsetTime this3962 G__3963)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this3964 G__3965 G__3966] #? (:cljs (.with ^java.time.OffsetTime this3964 G__3965 G__3966) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3965) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3966)) (clojure.core/let [G__3965 ^"java.time.temporal.TemporalField" G__3965 G__3966 (clojure.core/long G__3966)] (.with ^java.time.OffsetTime this3964 G__3965 G__3966)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3965) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3966)) (clojure.core/let [G__3965 ^"java.time.temporal.TemporalField" G__3965 G__3966 (clojure.core/long G__3966)] (.with ^java.time.OffsetTime this3964 G__3965 G__3966)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] [] ["java.time.ZoneId"]))} (^java.time.OffsetTime [G__3968] #? (:cljs (. java.time.OffsetTime now G__3968) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__3968)) (clojure.core/let [G__3968 ^"java.time.Clock" G__3968] (. java.time.OffsetTime now G__3968)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__3968)) (clojure.core/let [G__3968 ^"java.time.ZoneId" G__3968] (. java.time.OffsetTime now G__3968)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.OffsetTime [] (. java.time.OffsetTime now)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"] ["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Integer [this3969 G__3970] #? (:cljs (.compareTo ^java.time.OffsetTime this3969 G__3970) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__3970)) (clojure.core/let [G__3970 ^"java.time.OffsetTime" G__3970] (.compareTo ^java.time.OffsetTime this3969 G__3970)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__3970)) (clojure.core/let [G__3970 ^"java.lang.Object" G__3970] (.compareTo ^java.time.OffsetTime this3969 G__3970)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetTime [^java.time.Instant java-time-Instant3971 ^java.time.ZoneId java-time-ZoneId3972] (. java.time.OffsetTime ofInstant java-time-Instant3971 java-time-ZoneId3972)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3973 ^long long3974] (.plusSeconds this3973 long3974)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetTime this3975 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3976] (.get this3975 java-time-temporal-TemporalField3976)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetTime this3977 ^java.lang.Object java-lang-Object3978] (.equals this3977 java-lang-Object3978)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetTime this3979 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3980] (.format this3979 java-time-format-DateTimeFormatter3980)))
