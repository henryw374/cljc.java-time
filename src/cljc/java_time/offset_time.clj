(ns cljc.java-time.offset-time (:import [java.time OffsetTime]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def min java.time.OffsetTime/MIN)
(def max java.time.OffsetTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49177 ^long long49178] (.minusMinutes this49177 long49178)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49179 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49180] (.truncatedTo this49179 java-time-temporal-TemporalUnit49180)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetTime this49181 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49182] (.range this49181 java-time-temporal-TemporalField49182)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this49183] (.getHour this49183)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49184 ^long long49185] (.minusHours this49184 long49185)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.lang.Integer int49186 ^java.lang.Integer int49187 ^java.lang.Integer int49188 ^java.lang.Integer int49189 ^java.time.ZoneOffset java-time-ZoneOffset49190] (. java.time.OffsetTime of int49186 int49187 int49188 int49189 java-time-ZoneOffset49190)) (^java.time.OffsetTime [^java.time.LocalTime java-time-LocalTime49191 ^java.time.ZoneOffset java-time-ZoneOffset49192] (. java.time.OffsetTime of java-time-LocalTime49191 java-time-ZoneOffset49192)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this49193 ^java.time.OffsetTime java-time-OffsetTime49194] (.isEqual this49193 java-time-OffsetTime49194)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this49195] (.getNano this49195)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49196 ^long long49197] (.minusSeconds this49196 long49197)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this49198] (.getSecond this49198)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49199 ^long long49200] (.plusNanos this49199 long49200)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this49201 G__49202 G__49203] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49202) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49203)) (clojure.core/let [G__49202 (clojure.core/long G__49202) G__49203 ^"java.time.temporal.TemporalUnit" G__49203] (.plus ^java.time.OffsetTime this49201 G__49202 G__49203)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49202) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49203)) (clojure.core/let [G__49202 (clojure.core/long G__49202) G__49203 ^"java.time.temporal.TemporalUnit" G__49203] (.plus ^java.time.OffsetTime this49201 G__49202 G__49203)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this49204 G__49205] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__49205)) (clojure.core/let [G__49205 ^"java.time.temporal.TemporalAmount" G__49205] (.plus ^java.time.OffsetTime this49204 G__49205)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__49205)) (clojure.core/let [G__49205 ^"java.time.temporal.TemporalAmount" G__49205] (.plus ^java.time.OffsetTime this49204 G__49205)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49206 ^java.lang.Integer int49207] (.withHour this49206 int49207)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49208 ^java.lang.Integer int49209] (.withMinute this49208 int49209)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49210 ^long long49211] (.plusMinutes this49210 long49211)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetTime this49212 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery49213] (.query this49212 java-time-temporal-TemporalQuery49213)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^java.time.OffsetDateTime [^java.time.OffsetTime this49214 ^java.time.LocalDate java-time-LocalDate49215] (.atDate this49214 java-time-LocalDate49215)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49216 ^java.time.ZoneOffset java-time-ZoneOffset49217] (.withOffsetSameInstant this49216 java-time-ZoneOffset49217)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^java.time.OffsetTime this49218] (.toString this49218)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this49219 ^java.time.OffsetTime java-time-OffsetTime49220] (.isBefore this49219 java-time-OffsetTime49220)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this49221 G__49222] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__49222)) (clojure.core/let [G__49222 ^"java.time.temporal.TemporalAmount" G__49222] (.minus ^java.time.OffsetTime this49221 G__49222)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__49222)) (clojure.core/let [G__49222 ^"java.time.temporal.TemporalAmount" G__49222] (.minus ^java.time.OffsetTime this49221 G__49222)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this49223 G__49224 G__49225] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49224) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49225)) (clojure.core/let [G__49224 (clojure.core/long G__49224) G__49225 ^"java.time.temporal.TemporalUnit" G__49225] (.minus ^java.time.OffsetTime this49223 G__49224 G__49225)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49224) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49225)) (clojure.core/let [G__49224 (clojure.core/long G__49224) G__49225 ^"java.time.temporal.TemporalUnit" G__49225] (.minus ^java.time.OffsetTime this49223 G__49224 G__49225)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49226 ^long long49227] (.plusHours this49226 long49227)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.LocalTime [^java.time.OffsetTime this49228] (.toLocalTime this49228)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetTime this49229 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49230] (.getLong this49229 java-time-temporal-TemporalField49230)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.ZoneOffset [^java.time.OffsetTime this49231] (.getOffset this49231)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49232 ^java.lang.Integer int49233] (.withNano this49232 int49233)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetTime this49234 ^java.time.temporal.Temporal java-time-temporal-Temporal49235 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49236] (.until this49234 java-time-temporal-Temporal49235 java-time-temporal-TemporalUnit49236)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49237 ^java.time.ZoneOffset java-time-ZoneOffset49238] (.withOffsetSameLocal this49237 java-time-ZoneOffset49238)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor49239] (. java.time.OffsetTime from java-time-temporal-TemporalAccessor49239)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this49240 ^java.time.OffsetTime java-time-OffsetTime49241] (.isAfter this49240 java-time-OffsetTime49241)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49242 ^long long49243] (.minusNanos this49242 long49243)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"] ["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this49244 G__49245] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__49245)) (clojure.core/let [G__49245 ^"java.time.temporal.TemporalField" G__49245] (.isSupported ^java.time.OffsetTime this49244 G__49245)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49245)) (clojure.core/let [G__49245 ^"java.time.temporal.TemporalUnit" G__49245] (.isSupported ^java.time.OffsetTime this49244 G__49245)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence49246] (. java.time.OffsetTime parse java-lang-CharSequence49246)) (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence49247 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49248] (. java.time.OffsetTime parse java-lang-CharSequence49247 java-time-format-DateTimeFormatter49248)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49249 ^java.lang.Integer int49250] (.withSecond this49249 int49250)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this49251] (.getMinute this49251)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this49252] (.hashCode this49252)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetTime this49253 ^java.time.temporal.Temporal java-time-temporal-Temporal49254] (.adjustInto this49253 java-time-temporal-Temporal49254)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this49255 G__49256 G__49257] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__49256) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49257)) (clojure.core/let [G__49256 ^"java.time.temporal.TemporalField" G__49256 G__49257 (clojure.core/long G__49257)] (.with ^java.time.OffsetTime this49255 G__49256 G__49257)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__49256) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49257)) (clojure.core/let [G__49256 ^"java.time.temporal.TemporalField" G__49256 G__49257 (clojure.core/long G__49257)] (.with ^java.time.OffsetTime this49255 G__49256 G__49257)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this49258 G__49259] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__49259)) (clojure.core/let [G__49259 ^"java.time.temporal.TemporalAdjuster" G__49259] (.with ^java.time.OffsetTime this49258 G__49259)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__49259)) (clojure.core/let [G__49259 ^"java.time.temporal.TemporalAdjuster" G__49259] (.with ^java.time.OffsetTime this49258 G__49259)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.OffsetTime [] (. java.time.OffsetTime now)) (^java.time.OffsetTime [G__49261] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__49261)) (clojure.core/let [G__49261 ^"java.time.Clock" G__49261] (. java.time.OffsetTime now G__49261)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__49261)) (clojure.core/let [G__49261 ^"java.time.ZoneId" G__49261] (. java.time.OffsetTime now G__49261)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"] ["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Integer [this49262 G__49263] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__49263)) (clojure.core/let [G__49263 ^"java.time.OffsetTime" G__49263] (.compareTo ^java.time.OffsetTime this49262 G__49263)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__49263)) (clojure.core/let [G__49263 ^"java.lang.Object" G__49263] (.compareTo ^java.time.OffsetTime this49262 G__49263)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetTime [^java.time.Instant java-time-Instant49264 ^java.time.ZoneId java-time-ZoneId49265] (. java.time.OffsetTime ofInstant java-time-Instant49264 java-time-ZoneId49265)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49266 ^long long49267] (.plusSeconds this49266 long49267)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetTime this49268 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49269] (.get this49268 java-time-temporal-TemporalField49269)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetTime this49270 ^java.lang.Object java-lang-Object49271] (.equals this49270 java-lang-Object49271)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetTime this49272 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49273] (.format this49272 java-time-format-DateTimeFormatter49273)))
