(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time OffsetTime]))
(def min java.time.OffsetTime/MIN)
(def max java.time.OffsetTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3963 ^long long3964] (.minusMinutes this3963 long3964)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3965 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3966] (.truncatedTo this3965 java-time-temporal-TemporalUnit3966)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetTime this3967 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3968] (.range this3967 java-time-temporal-TemporalField3968)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this3969] (.getHour this3969)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3970 ^long long3971] (.minusHours this3970 long3971)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.lang.Integer int3972 ^java.lang.Integer int3973 ^java.lang.Integer int3974 ^java.lang.Integer int3975 ^java.time.ZoneOffset java-time-ZoneOffset3976] (java.time.OffsetTime/of int3972 int3973 int3974 int3975 java-time-ZoneOffset3976)) (^java.time.OffsetTime [^java.time.LocalTime java-time-LocalTime3977 ^java.time.ZoneOffset java-time-ZoneOffset3978] (java.time.OffsetTime/of java-time-LocalTime3977 java-time-ZoneOffset3978)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this3979 ^java.time.OffsetTime java-time-OffsetTime3980] (.isEqual this3979 java-time-OffsetTime3980)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this3981] (.getNano this3981)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3982 ^long long3983] (.minusSeconds this3982 long3983)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this3984] (.getSecond this3984)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3985 ^long long3986] (.plusNanos this3985 long3986)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3987 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3988] (.plus this3987 java-time-temporal-TemporalAmount3988)) (^java.time.OffsetTime [^java.time.OffsetTime this3989 ^long long3990 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3991] (.plus this3989 long3990 java-time-temporal-TemporalUnit3991)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3992 ^java.lang.Integer int3993] (.withHour this3992 int3993)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3994 ^java.lang.Integer int3995] (.withMinute this3994 int3995)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3996 ^long long3997] (.plusMinutes this3996 long3997)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetTime this3998 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3999] (.query this3998 java-time-temporal-TemporalQuery3999)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^java.time.OffsetDateTime [^java.time.OffsetTime this4000 ^java.time.LocalDate java-time-LocalDate4001] (.atDate this4000 java-time-LocalDate4001)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4002 ^java.time.ZoneOffset java-time-ZoneOffset4003] (.withOffsetSameInstant this4002 java-time-ZoneOffset4003)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^java.time.OffsetTime this4004] (.toString this4004)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this4005 ^java.time.OffsetTime java-time-OffsetTime4006] (.isBefore this4005 java-time-OffsetTime4006)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4007 ^long long4008 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4009] (.minus this4007 long4008 java-time-temporal-TemporalUnit4009)) (^java.time.OffsetTime [^java.time.OffsetTime this4010 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4011] (.minus this4010 java-time-temporal-TemporalAmount4011)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4012 ^long long4013] (.plusHours this4012 long4013)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.LocalTime [^java.time.OffsetTime this4014] (.toLocalTime this4014)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetTime this4015 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4016] (.getLong this4015 java-time-temporal-TemporalField4016)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.ZoneOffset [^java.time.OffsetTime this4017] (.getOffset this4017)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4018 ^java.lang.Integer int4019] (.withNano this4018 int4019)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetTime this4020 ^java.time.temporal.Temporal java-time-temporal-Temporal4021 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4022] (.until this4020 java-time-temporal-Temporal4021 java-time-temporal-TemporalUnit4022)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4023 ^java.time.ZoneOffset java-time-ZoneOffset4024] (.withOffsetSameLocal this4023 java-time-ZoneOffset4024)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4025] (java.time.OffsetTime/from java-time-temporal-TemporalAccessor4025)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this4026 ^java.time.OffsetTime java-time-OffsetTime4027] (.isAfter this4026 java-time-OffsetTime4027)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4028 ^long long4029] (.minusNanos this4028 long4029)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"] ["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this4030 G__4031] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__4031)) (clojure.core/let [G__4031 ^"java.time.temporal.TemporalField" G__4031] (.isSupported ^java.time.OffsetTime this4030 G__4031)) (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__4031)) (clojure.core/let [G__4031 ^"java.time.temporal.ChronoUnit" G__4031] (.isSupported ^java.time.OffsetTime this4030 G__4031)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence4032] (java.time.OffsetTime/parse java-lang-CharSequence4032)) (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence4033 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4034] (java.time.OffsetTime/parse java-lang-CharSequence4033 java-time-format-DateTimeFormatter4034)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4035 ^java.lang.Integer int4036] (.withSecond this4035 int4036)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this4037] (.getMinute this4037)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this4038] (.hashCode this4038)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetTime this4039 ^java.time.temporal.Temporal java-time-temporal-Temporal4040] (.adjustInto this4039 java-time-temporal-Temporal4040)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4041 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster4042] (.with this4041 java-time-temporal-TemporalAdjuster4042)) (^java.time.OffsetTime [^java.time.OffsetTime this4043 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4044 ^long long4045] (.with this4043 java-time-temporal-TemporalField4044 long4045)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.OffsetTime [] (java.time.OffsetTime/now)) (^java.time.OffsetTime [G__4047] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__4047)) (clojure.core/let [G__4047 ^"java.time.ZoneId" G__4047] (java.time.OffsetTime/now G__4047)) (clojure.core/and (clojure.core/instance? java.time.Clock G__4047)) (clojure.core/let [G__4047 ^"java.time.Clock" G__4047] (java.time.OffsetTime/now G__4047)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this4048 ^java.time.OffsetTime java-time-OffsetTime4049] (.compareTo this4048 java-time-OffsetTime4049)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetTime [^java.time.Instant java-time-Instant4050 ^java.time.ZoneId java-time-ZoneId4051] (java.time.OffsetTime/ofInstant java-time-Instant4050 java-time-ZoneId4051)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4052 ^long long4053] (.plusSeconds this4052 long4053)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetTime this4054 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4055] (.get this4054 java-time-temporal-TemporalField4055)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetTime this4056 ^java.lang.Object java-lang-Object4057] (.equals this4056 java-lang-Object4057)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetTime this4058 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4059] (.format this4058 java-time-format-DateTimeFormatter4059)))
