(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time OffsetTime]))
(def min java.time.OffsetTime/MIN)
(def max java.time.OffsetTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11185 ^long long11186] (.minusMinutes this11185 long11186)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11187 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11188] (.truncatedTo this11187 java-time-temporal-TemporalUnit11188)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetTime this11189 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11190] (.range this11189 java-time-temporal-TemporalField11190)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this11191] (.getHour this11191)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11192 ^long long11193] (.minusHours this11192 long11193)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime java-time-LocalTime11194 ^java.time.ZoneOffset java-time-ZoneOffset11195] (. java.time.OffsetTime of java-time-LocalTime11194 java-time-ZoneOffset11195)) (^java.time.OffsetTime [^java.lang.Integer int11196 ^java.lang.Integer int11197 ^java.lang.Integer int11198 ^java.lang.Integer int11199 ^java.time.ZoneOffset java-time-ZoneOffset11200] (. java.time.OffsetTime of int11196 int11197 int11198 int11199 java-time-ZoneOffset11200)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this11201 ^java.time.OffsetTime java-time-OffsetTime11202] (.isEqual this11201 java-time-OffsetTime11202)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this11203] (.getNano this11203)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11204 ^long long11205] (.minusSeconds this11204 long11205)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this11206] (.getSecond this11206)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11207 ^long long11208] (.plusNanos this11207 long11208)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this11209 G__11210 G__11211] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11210) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11211)) (clojure.core/let [G__11210 (clojure.core/long G__11210) G__11211 ^"java.time.temporal.TemporalUnit" G__11211] (.plus ^java.time.OffsetTime this11209 G__11210 G__11211)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11210) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11211)) (clojure.core/let [G__11210 (clojure.core/long G__11210) G__11211 ^"java.time.temporal.TemporalUnit" G__11211] (.plus ^java.time.OffsetTime this11209 G__11210 G__11211)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this11212 G__11213] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11213)) (clojure.core/let [G__11213 ^"java.time.temporal.TemporalAmount" G__11213] (.plus ^java.time.OffsetTime this11212 G__11213)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11213)) (clojure.core/let [G__11213 ^"java.time.temporal.TemporalAmount" G__11213] (.plus ^java.time.OffsetTime this11212 G__11213)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11214 ^java.lang.Integer int11215] (.withHour this11214 int11215)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11216 ^java.lang.Integer int11217] (.withMinute this11216 int11217)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11218 ^long long11219] (.plusMinutes this11218 long11219)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetTime this11220 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery11221] (.query this11220 java-time-temporal-TemporalQuery11221)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^java.time.OffsetDateTime [^java.time.OffsetTime this11222 ^java.time.LocalDate java-time-LocalDate11223] (.atDate this11222 java-time-LocalDate11223)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11224 ^java.time.ZoneOffset java-time-ZoneOffset11225] (.withOffsetSameInstant this11224 java-time-ZoneOffset11225)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^java.time.OffsetTime this11226] (.toString this11226)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this11227 ^java.time.OffsetTime java-time-OffsetTime11228] (.isBefore this11227 java-time-OffsetTime11228)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11229 G__11230] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11230)) (clojure.core/let [G__11230 ^"java.time.temporal.TemporalAmount" G__11230] (.minus ^java.time.OffsetTime this11229 G__11230)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11230)) (clojure.core/let [G__11230 ^"java.time.temporal.TemporalAmount" G__11230] (.minus ^java.time.OffsetTime this11229 G__11230)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this11231 G__11232 G__11233] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11232) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11233)) (clojure.core/let [G__11232 (clojure.core/long G__11232) G__11233 ^"java.time.temporal.TemporalUnit" G__11233] (.minus ^java.time.OffsetTime this11231 G__11232 G__11233)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11232) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11233)) (clojure.core/let [G__11232 (clojure.core/long G__11232) G__11233 ^"java.time.temporal.TemporalUnit" G__11233] (.minus ^java.time.OffsetTime this11231 G__11232 G__11233)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11234 ^long long11235] (.plusHours this11234 long11235)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.LocalTime [^java.time.OffsetTime this11236] (.toLocalTime this11236)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetTime this11237 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11238] (.getLong this11237 java-time-temporal-TemporalField11238)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.ZoneOffset [^java.time.OffsetTime this11239] (.getOffset this11239)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11240 ^java.lang.Integer int11241] (.withNano this11240 int11241)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetTime this11242 ^java.time.temporal.Temporal java-time-temporal-Temporal11243 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11244] (.until this11242 java-time-temporal-Temporal11243 java-time-temporal-TemporalUnit11244)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11245 ^java.time.ZoneOffset java-time-ZoneOffset11246] (.withOffsetSameLocal this11245 java-time-ZoneOffset11246)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor11247] (. java.time.OffsetTime from java-time-temporal-TemporalAccessor11247)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this11248 ^java.time.OffsetTime java-time-OffsetTime11249] (.isAfter this11248 java-time-OffsetTime11249)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11250 ^long long11251] (.minusNanos this11250 long11251)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this11252 G__11253] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11253)) (clojure.core/let [G__11253 ^"java.time.temporal.TemporalUnit" G__11253] (.isSupported ^java.time.OffsetTime this11252 G__11253)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11253)) (clojure.core/let [G__11253 ^"java.time.temporal.TemporalField" G__11253] (.isSupported ^java.time.OffsetTime this11252 G__11253)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence11254 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11255] (. java.time.OffsetTime parse java-lang-CharSequence11254 java-time-format-DateTimeFormatter11255)) (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence11256] (. java.time.OffsetTime parse java-lang-CharSequence11256)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11257 ^java.lang.Integer int11258] (.withSecond this11257 int11258)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this11259] (.getMinute this11259)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this11260] (.hashCode this11260)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetTime this11261 ^java.time.temporal.Temporal java-time-temporal-Temporal11262] (.adjustInto this11261 java-time-temporal-Temporal11262)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this11263 G__11264 G__11265] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11264) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11265)) (clojure.core/let [G__11264 ^"java.time.temporal.TemporalField" G__11264 G__11265 (clojure.core/long G__11265)] (.with ^java.time.OffsetTime this11263 G__11264 G__11265)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11264) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11265)) (clojure.core/let [G__11264 ^"java.time.temporal.TemporalField" G__11264 G__11265 (clojure.core/long G__11265)] (.with ^java.time.OffsetTime this11263 G__11264 G__11265)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this11266 G__11267] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__11267)) (clojure.core/let [G__11267 ^"java.time.temporal.TemporalAdjuster" G__11267] (.with ^java.time.OffsetTime this11266 G__11267)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__11267)) (clojure.core/let [G__11267 ^"java.time.temporal.TemporalAdjuster" G__11267] (.with ^java.time.OffsetTime this11266 G__11267)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.OffsetTime [] (. java.time.OffsetTime now)) (^java.time.OffsetTime [G__11269] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__11269)) (clojure.core/let [G__11269 ^"java.time.ZoneId" G__11269] (. java.time.OffsetTime now G__11269)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__11269)) (clojure.core/let [G__11269 ^"java.time.Clock" G__11269] (. java.time.OffsetTime now G__11269)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"] ["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Integer [this11270 G__11271] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__11271)) (clojure.core/let [G__11271 ^"java.time.OffsetTime" G__11271] (.compareTo ^java.time.OffsetTime this11270 G__11271)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__11271)) (clojure.core/let [G__11271 ^"java.lang.Object" G__11271] (.compareTo ^java.time.OffsetTime this11270 G__11271)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetTime [^java.time.Instant java-time-Instant11272 ^java.time.ZoneId java-time-ZoneId11273] (. java.time.OffsetTime ofInstant java-time-Instant11272 java-time-ZoneId11273)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11274 ^long long11275] (.plusSeconds this11274 long11275)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetTime this11276 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11277] (.get this11276 java-time-temporal-TemporalField11277)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetTime this11278 ^java.lang.Object java-lang-Object11279] (.equals this11278 java-lang-Object11279)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetTime this11280 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11281] (.format this11280 java-time-format-DateTimeFormatter11281)))
