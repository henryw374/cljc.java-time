(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time OffsetTime]))
(def min java.time.OffsetTime/MIN)
(def max java.time.OffsetTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13481 ^long long13482] (.minusMinutes this13481 long13482)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13483 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13484] (.truncatedTo this13483 java-time-temporal-TemporalUnit13484)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetTime this13485 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13486] (.range this13485 java-time-temporal-TemporalField13486)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this13487] (.getHour this13487)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13488 ^long long13489] (.minusHours this13488 long13489)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime java-time-LocalTime13490 ^java.time.ZoneOffset java-time-ZoneOffset13491] (java.time.OffsetTime/of java-time-LocalTime13490 java-time-ZoneOffset13491)) (^java.time.OffsetTime [^java.lang.Integer int13492 ^java.lang.Integer int13493 ^java.lang.Integer int13494 ^java.lang.Integer int13495 ^java.time.ZoneOffset java-time-ZoneOffset13496] (java.time.OffsetTime/of int13492 int13493 int13494 int13495 java-time-ZoneOffset13496)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this13497 ^java.time.OffsetTime java-time-OffsetTime13498] (.isEqual this13497 java-time-OffsetTime13498)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this13499] (.getNano this13499)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13500 ^long long13501] (.minusSeconds this13500 long13501)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this13502] (.getSecond this13502)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13503 ^long long13504] (.plusNanos this13503 long13504)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13505 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount13506] (.plus this13505 java-time-temporal-TemporalAmount13506)) (^java.time.OffsetTime [^java.time.OffsetTime this13507 ^long long13508 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13509] (.plus this13507 long13508 java-time-temporal-TemporalUnit13509)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13510 ^java.lang.Integer int13511] (.withHour this13510 int13511)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13512 ^java.lang.Integer int13513] (.withMinute this13512 int13513)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13514 ^long long13515] (.plusMinutes this13514 long13515)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetTime this13516 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13517] (.query this13516 java-time-temporal-TemporalQuery13517)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^java.time.OffsetDateTime [^java.time.OffsetTime this13518 ^java.time.LocalDate java-time-LocalDate13519] (.atDate this13518 java-time-LocalDate13519)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13520 ^java.time.ZoneOffset java-time-ZoneOffset13521] (.withOffsetSameInstant this13520 java-time-ZoneOffset13521)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^java.time.OffsetTime this13522] (.toString this13522)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this13523 ^java.time.OffsetTime java-time-OffsetTime13524] (.isBefore this13523 java-time-OffsetTime13524)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13525 ^long long13526 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13527] (.minus this13525 long13526 java-time-temporal-TemporalUnit13527)) (^java.time.OffsetTime [^java.time.OffsetTime this13528 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount13529] (.minus this13528 java-time-temporal-TemporalAmount13529)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13530 ^long long13531] (.plusHours this13530 long13531)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.LocalTime [^java.time.OffsetTime this13532] (.toLocalTime this13532)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetTime this13533 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13534] (.getLong this13533 java-time-temporal-TemporalField13534)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.ZoneOffset [^java.time.OffsetTime this13535] (.getOffset this13535)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13536 ^java.lang.Integer int13537] (.withNano this13536 int13537)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetTime this13538 ^java.time.temporal.Temporal java-time-temporal-Temporal13539 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13540] (.until this13538 java-time-temporal-Temporal13539 java-time-temporal-TemporalUnit13540)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13541 ^java.time.ZoneOffset java-time-ZoneOffset13542] (.withOffsetSameLocal this13541 java-time-ZoneOffset13542)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13543] (java.time.OffsetTime/from java-time-temporal-TemporalAccessor13543)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this13544 ^java.time.OffsetTime java-time-OffsetTime13545] (.isAfter this13544 java-time-OffsetTime13545)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13546 ^long long13547] (.minusNanos this13546 long13547)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"] ["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this13548 G__13549] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__13549)) (clojure.core/let [G__13549 ^"java.time.temporal.TemporalField" G__13549] (.isSupported ^java.time.OffsetTime this13548 G__13549)) (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__13549)) (clojure.core/let [G__13549 ^"java.time.temporal.ChronoUnit" G__13549] (.isSupported ^java.time.OffsetTime this13548 G__13549)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence13550] (java.time.OffsetTime/parse java-lang-CharSequence13550)) (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence13551 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13552] (java.time.OffsetTime/parse java-lang-CharSequence13551 java-time-format-DateTimeFormatter13552)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13553 ^java.lang.Integer int13554] (.withSecond this13553 int13554)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this13555] (.getMinute this13555)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this13556] (.hashCode this13556)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetTime this13557 ^java.time.temporal.Temporal java-time-temporal-Temporal13558] (.adjustInto this13557 java-time-temporal-Temporal13558)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13559 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13560 ^long long13561] (.with this13559 java-time-temporal-TemporalField13560 long13561)) (^java.time.OffsetTime [^java.time.OffsetTime this13562 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster13563] (.with this13562 java-time-temporal-TemporalAdjuster13563)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.OffsetTime [] (java.time.OffsetTime/now)) (^java.time.OffsetTime [G__13565] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__13565)) (clojure.core/let [G__13565 ^"java.time.ZoneId" G__13565] (java.time.OffsetTime/now G__13565)) (clojure.core/and (clojure.core/instance? java.time.Clock G__13565)) (clojure.core/let [G__13565 ^"java.time.Clock" G__13565] (java.time.OffsetTime/now G__13565)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this13566 ^java.time.OffsetTime java-time-OffsetTime13567] (.compareTo this13566 java-time-OffsetTime13567)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetTime [^java.time.Instant java-time-Instant13568 ^java.time.ZoneId java-time-ZoneId13569] (java.time.OffsetTime/ofInstant java-time-Instant13568 java-time-ZoneId13569)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this13570 ^long long13571] (.plusSeconds this13570 long13571)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetTime this13572 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13573] (.get this13572 java-time-temporal-TemporalField13573)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetTime this13574 ^java.lang.Object java-lang-Object13575] (.equals this13574 java-lang-Object13575)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetTime this13576 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13577] (.format this13576 java-time-format-DateTimeFormatter13577)))
