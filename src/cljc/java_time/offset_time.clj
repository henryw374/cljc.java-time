(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time OffsetTime]))
(def min java.time.OffsetTime/MIN)
(def max java.time.OffsetTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59668 ^long long59669] (.minusMinutes this59668 long59669)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59670 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit59671] (.truncatedTo this59670 java-time-temporal-TemporalUnit59671)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetTime this59672 ^java.time.temporal.TemporalField java-time-temporal-TemporalField59673] (.range this59672 java-time-temporal-TemporalField59673)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this59674] (.getHour this59674)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59675 ^long long59676] (.minusHours this59675 long59676)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime java-time-LocalTime59677 ^java.time.ZoneOffset java-time-ZoneOffset59678] (java.time.OffsetTime/of java-time-LocalTime59677 java-time-ZoneOffset59678)) (^java.time.OffsetTime [^java.lang.Integer int59679 ^java.lang.Integer int59680 ^java.lang.Integer int59681 ^java.lang.Integer int59682 ^java.time.ZoneOffset java-time-ZoneOffset59683] (java.time.OffsetTime/of int59679 int59680 int59681 int59682 java-time-ZoneOffset59683)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this59684 ^java.time.OffsetTime java-time-OffsetTime59685] (.isEqual this59684 java-time-OffsetTime59685)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this59686] (.getNano this59686)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59687 ^long long59688] (.minusSeconds this59687 long59688)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this59689] (.getSecond this59689)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59690 ^long long59691] (.plusNanos this59690 long59691)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this59692 G__59693 G__59694] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59693) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59694)) (clojure.core/let [G__59693 (clojure.core/long G__59693) G__59694 ^"java.time.temporal.TemporalUnit" G__59694] (.plus ^java.time.OffsetTime this59692 G__59693 G__59694)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59693) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59694)) (clojure.core/let [G__59693 (clojure.core/long G__59693) G__59694 ^"java.time.temporal.TemporalUnit" G__59694] (.plus ^java.time.OffsetTime this59692 G__59693 G__59694)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this59695 G__59696] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59696)) (clojure.core/let [G__59696 ^"java.time.temporal.TemporalAmount" G__59696] (.plus ^java.time.OffsetTime this59695 G__59696)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59696)) (clojure.core/let [G__59696 ^"java.time.temporal.TemporalAmount" G__59696] (.plus ^java.time.OffsetTime this59695 G__59696)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59697 ^java.lang.Integer int59698] (.withHour this59697 int59698)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59699 ^java.lang.Integer int59700] (.withMinute this59699 int59700)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59701 ^long long59702] (.plusMinutes this59701 long59702)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetTime this59703 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery59704] (.query this59703 java-time-temporal-TemporalQuery59704)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^java.time.OffsetDateTime [^java.time.OffsetTime this59705 ^java.time.LocalDate java-time-LocalDate59706] (.atDate this59705 java-time-LocalDate59706)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59707 ^java.time.ZoneOffset java-time-ZoneOffset59708] (.withOffsetSameInstant this59707 java-time-ZoneOffset59708)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^java.time.OffsetTime this59709] (.toString this59709)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this59710 ^java.time.OffsetTime java-time-OffsetTime59711] (.isBefore this59710 java-time-OffsetTime59711)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this59712 G__59713] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59713)) (clojure.core/let [G__59713 ^"java.time.temporal.TemporalAmount" G__59713] (.minus ^java.time.OffsetTime this59712 G__59713)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59713)) (clojure.core/let [G__59713 ^"java.time.temporal.TemporalAmount" G__59713] (.minus ^java.time.OffsetTime this59712 G__59713)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this59714 G__59715 G__59716] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59715) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59716)) (clojure.core/let [G__59715 (clojure.core/long G__59715) G__59716 ^"java.time.temporal.TemporalUnit" G__59716] (.minus ^java.time.OffsetTime this59714 G__59715 G__59716)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59715) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59716)) (clojure.core/let [G__59715 (clojure.core/long G__59715) G__59716 ^"java.time.temporal.TemporalUnit" G__59716] (.minus ^java.time.OffsetTime this59714 G__59715 G__59716)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59717 ^long long59718] (.plusHours this59717 long59718)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.LocalTime [^java.time.OffsetTime this59719] (.toLocalTime this59719)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetTime this59720 ^java.time.temporal.TemporalField java-time-temporal-TemporalField59721] (.getLong this59720 java-time-temporal-TemporalField59721)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.ZoneOffset [^java.time.OffsetTime this59722] (.getOffset this59722)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59723 ^java.lang.Integer int59724] (.withNano this59723 int59724)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetTime this59725 ^java.time.temporal.Temporal java-time-temporal-Temporal59726 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit59727] (.until this59725 java-time-temporal-Temporal59726 java-time-temporal-TemporalUnit59727)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59728 ^java.time.ZoneOffset java-time-ZoneOffset59729] (.withOffsetSameLocal this59728 java-time-ZoneOffset59729)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor59730] (java.time.OffsetTime/from java-time-temporal-TemporalAccessor59730)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this59731 ^java.time.OffsetTime java-time-OffsetTime59732] (.isAfter this59731 java-time-OffsetTime59732)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59733 ^long long59734] (.minusNanos this59733 long59734)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this59735 G__59736] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59736)) (clojure.core/let [G__59736 ^"java.time.temporal.TemporalUnit" G__59736] (.isSupported ^java.time.OffsetTime this59735 G__59736)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__59736)) (clojure.core/let [G__59736 ^"java.time.temporal.TemporalField" G__59736] (.isSupported ^java.time.OffsetTime this59735 G__59736)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence59737 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter59738] (java.time.OffsetTime/parse java-lang-CharSequence59737 java-time-format-DateTimeFormatter59738)) (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence59739] (java.time.OffsetTime/parse java-lang-CharSequence59739)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59740 ^java.lang.Integer int59741] (.withSecond this59740 int59741)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this59742] (.getMinute this59742)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this59743] (.hashCode this59743)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetTime this59744 ^java.time.temporal.Temporal java-time-temporal-Temporal59745] (.adjustInto this59744 java-time-temporal-Temporal59745)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this59746 G__59747 G__59748] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__59747) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59748)) (clojure.core/let [G__59747 ^"java.time.temporal.TemporalField" G__59747 G__59748 (clojure.core/long G__59748)] (.with ^java.time.OffsetTime this59746 G__59747 G__59748)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__59747) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59748)) (clojure.core/let [G__59747 ^"java.time.temporal.TemporalField" G__59747 G__59748 (clojure.core/long G__59748)] (.with ^java.time.OffsetTime this59746 G__59747 G__59748)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this59749 G__59750] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__59750)) (clojure.core/let [G__59750 ^"java.time.temporal.TemporalAdjuster" G__59750] (.with ^java.time.OffsetTime this59749 G__59750)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__59750)) (clojure.core/let [G__59750 ^"java.time.temporal.TemporalAdjuster" G__59750] (.with ^java.time.OffsetTime this59749 G__59750)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.OffsetTime [] (java.time.OffsetTime/now)) (^java.time.OffsetTime [G__59752] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__59752)) (clojure.core/let [G__59752 ^"java.time.ZoneId" G__59752] (java.time.OffsetTime/now G__59752)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__59752)) (clojure.core/let [G__59752 ^"java.time.Clock" G__59752] (java.time.OffsetTime/now G__59752)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"] ["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Integer [this59753 G__59754] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__59754)) (clojure.core/let [G__59754 ^"java.time.OffsetTime" G__59754] (.compareTo ^java.time.OffsetTime this59753 G__59754)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__59754)) (clojure.core/let [G__59754 ^"java.lang.Object" G__59754] (.compareTo ^java.time.OffsetTime this59753 G__59754)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetTime [^java.time.Instant java-time-Instant59755 ^java.time.ZoneId java-time-ZoneId59756] (java.time.OffsetTime/ofInstant java-time-Instant59755 java-time-ZoneId59756)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this59757 ^long long59758] (.plusSeconds this59757 long59758)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetTime this59759 ^java.time.temporal.TemporalField java-time-temporal-TemporalField59760] (.get this59759 java-time-temporal-TemporalField59760)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetTime this59761 ^java.lang.Object java-lang-Object59762] (.equals this59761 java-lang-Object59762)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetTime this59763 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter59764] (.format this59763 java-time-format-DateTimeFormatter59764)))
