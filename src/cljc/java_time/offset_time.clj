(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time OffsetTime]))
(def min java.time.OffsetTime/MIN)
(def max java.time.OffsetTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3964 ^long long3965] (.minusMinutes this3964 long3965)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3966 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3967] (.truncatedTo this3966 java-time-temporal-TemporalUnit3967)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetTime this3968 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3969] (.range this3968 java-time-temporal-TemporalField3969)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this3970] (.getHour this3970)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3971 ^long long3972] (.minusHours this3971 long3972)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime java-time-LocalTime3973 ^java.time.ZoneOffset java-time-ZoneOffset3974] (java.time.OffsetTime/of java-time-LocalTime3973 java-time-ZoneOffset3974)) (^java.time.OffsetTime [^java.lang.Integer int3975 ^java.lang.Integer int3976 ^java.lang.Integer int3977 ^java.lang.Integer int3978 ^java.time.ZoneOffset java-time-ZoneOffset3979] (java.time.OffsetTime/of int3975 int3976 int3977 int3978 java-time-ZoneOffset3979)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this3980 ^java.time.OffsetTime java-time-OffsetTime3981] (.isEqual this3980 java-time-OffsetTime3981)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this3982] (.getNano this3982)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3983 ^long long3984] (.minusSeconds this3983 long3984)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this3985] (.getSecond this3985)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3986 ^long long3987] (.plusNanos this3986 long3987)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3988 ^long long3989 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3990] (.plus this3988 long3989 java-time-temporal-TemporalUnit3990)) (^java.time.OffsetTime [^java.time.OffsetTime this3991 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3992] (.plus this3991 java-time-temporal-TemporalAmount3992)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3993 ^java.lang.Integer int3994] (.withHour this3993 int3994)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3995 ^java.lang.Integer int3996] (.withMinute this3995 int3996)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this3997 ^long long3998] (.plusMinutes this3997 long3998)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetTime this3999 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4000] (.query this3999 java-time-temporal-TemporalQuery4000)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^java.time.OffsetDateTime [^java.time.OffsetTime this4001 ^java.time.LocalDate java-time-LocalDate4002] (.atDate this4001 java-time-LocalDate4002)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4003 ^java.time.ZoneOffset java-time-ZoneOffset4004] (.withOffsetSameInstant this4003 java-time-ZoneOffset4004)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^java.time.OffsetTime this4005] (.toString this4005)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this4006 ^java.time.OffsetTime java-time-OffsetTime4007] (.isBefore this4006 java-time-OffsetTime4007)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4008 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4009] (.minus this4008 java-time-temporal-TemporalAmount4009)) (^java.time.OffsetTime [^java.time.OffsetTime this4010 ^long long4011 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4012] (.minus this4010 long4011 java-time-temporal-TemporalUnit4012)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4013 ^long long4014] (.plusHours this4013 long4014)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.LocalTime [^java.time.OffsetTime this4015] (.toLocalTime this4015)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetTime this4016 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4017] (.getLong this4016 java-time-temporal-TemporalField4017)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.ZoneOffset [^java.time.OffsetTime this4018] (.getOffset this4018)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4019 ^java.lang.Integer int4020] (.withNano this4019 int4020)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetTime this4021 ^java.time.temporal.Temporal java-time-temporal-Temporal4022 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4023] (.until this4021 java-time-temporal-Temporal4022 java-time-temporal-TemporalUnit4023)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4024 ^java.time.ZoneOffset java-time-ZoneOffset4025] (.withOffsetSameLocal this4024 java-time-ZoneOffset4025)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4026] (java.time.OffsetTime/from java-time-temporal-TemporalAccessor4026)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this4027 ^java.time.OffsetTime java-time-OffsetTime4028] (.isAfter this4027 java-time-OffsetTime4028)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4029 ^long long4030] (.minusNanos this4029 long4030)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this4031 G__4032] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalUnit G__4032)) (clojure.core/let [G__4032 ^"java.time.temporal.TemporalUnit" G__4032] (.isSupported ^java.time.OffsetTime this4031 G__4032)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__4032)) (clojure.core/let [G__4032 ^"java.time.temporal.TemporalField" G__4032] (.isSupported ^java.time.OffsetTime this4031 G__4032)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence4033 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4034] (java.time.OffsetTime/parse java-lang-CharSequence4033 java-time-format-DateTimeFormatter4034)) (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence4035] (java.time.OffsetTime/parse java-lang-CharSequence4035)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4036 ^java.lang.Integer int4037] (.withSecond this4036 int4037)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this4038] (.getMinute this4038)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this4039] (.hashCode this4039)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetTime this4040 ^java.time.temporal.Temporal java-time-temporal-Temporal4041] (.adjustInto this4040 java-time-temporal-Temporal4041)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4042 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4043 ^long long4044] (.with this4042 java-time-temporal-TemporalField4043 long4044)) (^java.time.OffsetTime [^java.time.OffsetTime this4045 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster4046] (.with this4045 java-time-temporal-TemporalAdjuster4046)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.OffsetTime [] (java.time.OffsetTime/now)) (^java.time.OffsetTime [G__4048] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__4048)) (clojure.core/let [G__4048 ^"java.time.ZoneId" G__4048] (java.time.OffsetTime/now G__4048)) (clojure.core/and (clojure.core/instance? java.time.Clock G__4048)) (clojure.core/let [G__4048 ^"java.time.Clock" G__4048] (java.time.OffsetTime/now G__4048)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this4049 ^java.time.OffsetTime java-time-OffsetTime4050] (.compareTo this4049 java-time-OffsetTime4050)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetTime [^java.time.Instant java-time-Instant4051 ^java.time.ZoneId java-time-ZoneId4052] (java.time.OffsetTime/ofInstant java-time-Instant4051 java-time-ZoneId4052)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this4053 ^long long4054] (.plusSeconds this4053 long4054)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetTime this4055 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4056] (.get this4055 java-time-temporal-TemporalField4056)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetTime this4057 ^java.lang.Object java-lang-Object4058] (.equals this4057 java-lang-Object4058)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetTime this4059 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4060] (.format this4059 java-time-format-DateTimeFormatter4060)))
