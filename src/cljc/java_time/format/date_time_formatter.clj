(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatter]))
(def iso-local-time java.time.format.DateTimeFormatter/ISO_LOCAL_TIME)
(def iso-ordinal-date java.time.format.DateTimeFormatter/ISO_ORDINAL_DATE)
(def iso-offset-date java.time.format.DateTimeFormatter/ISO_OFFSET_DATE)
(def iso-time java.time.format.DateTimeFormatter/ISO_TIME)
(def iso-local-date-time java.time.format.DateTimeFormatter/ISO_LOCAL_DATE_TIME)
(def iso-instant java.time.format.DateTimeFormatter/ISO_INSTANT)
(def rfc-1123-date-time java.time.format.DateTimeFormatter/RFC_1123_DATE_TIME)
(def iso-date java.time.format.DateTimeFormatter/ISO_DATE)
(def iso-week-date java.time.format.DateTimeFormatter/ISO_WEEK_DATE)
(def iso-offset-time java.time.format.DateTimeFormatter/ISO_OFFSET_TIME)
(def iso-local-date java.time.format.DateTimeFormatter/ISO_LOCAL_DATE)
(def iso-zoned-date-time java.time.format.DateTimeFormatter/ISO_ZONED_DATE_TIME)
(def iso-offset-date-time java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME)
(def iso-date-time java.time.format.DateTimeFormatter/ISO_DATE_TIME)
(def basic-iso-date java.time.format.DateTimeFormatter/BASIC_ISO_DATE)
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String13171] (. java.time.format.DateTimeFormatter ofPattern java-lang-String13171)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String13172 ^java.util.Locale java-util-Locale13173] (. java.time.format.DateTimeFormatter ofPattern java-lang-String13172 java-util-Locale13173)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this13174 ^java.lang.CharSequence java-lang-CharSequence13175 ^"java.lang.Class" java-time-temporal-TemporalQuery-array13176] (.parseBest this13174 java-lang-CharSequence13175 java-time-temporal-TemporalQuery-array13176)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this13177 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13178 ^java.lang.Appendable java-lang-Appendable13179] (.formatTo this13177 java-time-temporal-TemporalAccessor13178 java-lang-Appendable13179)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this13180] (.getDecimalStyle this13180)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13181 ^java.time.chrono.Chronology java-time-chrono-Chronology13182] (.withChronology this13181 java-time-chrono-Chronology13182)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this13183] (.getResolverStyle this13183)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13184 ^java.time.format.DecimalStyle java-time-format-DecimalStyle13185] (.withDecimalStyle this13184 java-time-format-DecimalStyle13185)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this13186] (.getLocale this13186)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this13187] (.toString this13187)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13188 ^java.time.ZoneId java-time-ZoneId13189] (.withZone this13188 java-time-ZoneId13189)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this13190] (.getZone this13190)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle"] ["java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle13191] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle13191)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle13192 ^java.time.format.FormatStyle java-time-format-FormatStyle13193] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle13192 java-time-format-FormatStyle13193)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this13194] (.getResolverFields this13194)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this13195] (.getChronology this13195)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this13196 ^java.lang.CharSequence java-lang-CharSequence13197] (.parse this13196 java-lang-CharSequence13197)) (^java.lang.Object [this13198 G__13199 G__13200] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__13199) (clojure.core/instance? (java.lang.Class/forName "java.text.ParsePosition") G__13200)) (clojure.core/let [G__13199 ^"java.lang.CharSequence" G__13199 G__13200 ^"java.text.ParsePosition" G__13200] (.parse ^java.time.format.DateTimeFormatter this13198 G__13199 G__13200)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__13199) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalQuery") G__13200)) (clojure.core/let [G__13199 ^"java.lang.CharSequence" G__13199 G__13200 ^"java.time.temporal.TemporalQuery" G__13200] (.parse ^java.time.format.DateTimeFormatter this13198 G__13199 G__13200)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13201 ^java.util.Locale java-util-Locale13202] (.withLocale this13201 java-util-Locale13202)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this13203 G__13204] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.util.Set") G__13204)) (clojure.core/let [G__13204 ^"java.util.Set" G__13204] (.withResolverFields ^java.time.format.DateTimeFormatter this13203 G__13204)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "[Ljava.time.temporal.TemporalField;") G__13204)) (clojure.core/let [G__13204 ^"[Ljava.time.temporal.TemporalField;" G__13204] (.withResolverFields ^java.time.format.DateTimeFormatter this13203 G__13204)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this13205 ^java.lang.CharSequence java-lang-CharSequence13206 ^java.text.ParsePosition java-text-ParsePosition13207] (.parseUnresolved this13205 java-lang-CharSequence13206 java-text-ParsePosition13207)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle13208] (. java.time.format.DateTimeFormatter ofLocalizedTime java-time-format-FormatStyle13208)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle13209] (. java.time.format.DateTimeFormatter ofLocalizedDate java-time-format-FormatStyle13209)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this13210 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13211] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.format this13210 java-time-temporal-TemporalAccessor13211))))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this13212] (.toFormat this13212)) (^java.text.Format [^java.time.format.DateTimeFormatter this13213 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13214] (.toFormat this13213 java-time-temporal-TemporalQuery13214)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13215 ^java.time.format.ResolverStyle java-time-format-ResolverStyle13216] (.withResolverStyle this13215 java-time-format-ResolverStyle13216)))
