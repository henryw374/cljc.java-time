(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatter]))
(def iso-local-time java.time.format.DateTimeFormatter/ISO_LOCAL_TIME)
(def iso-ordinal-date java.time.format.DateTimeFormatter/ISO_ORDINAL_DATE)
(def iso-offset-date java.time.format.DateTimeFormatter/ISO_OFFSET_DATE)
(def iso-time java.time.format.DateTimeFormatter/ISO_TIME)
(def iso-local-date-time java.time.format.DateTimeFormatter/ISO_LOCAL_DATE_TIME)
(def iso-instant java.time.format.DateTimeFormatter/ISO_INSTANT)
(def rfc-1123-date-time java.time.format.DateTimeFormatter/RFC_1123_DATE_TIME)
(def iso-date java.time.format.DateTimeFormatter/ISO_DATE)
(def iso-week-date java.time.format.DateTimeFormatter/ISO_WEEK_DATE)
(def iso-offset-time java.time.format.DateTimeFormatter/ISO_OFFSET_TIME)
(def iso-local-date java.time.format.DateTimeFormatter/ISO_LOCAL_DATE)
(def iso-zoned-date-time java.time.format.DateTimeFormatter/ISO_ZONED_DATE_TIME)
(def iso-offset-date-time java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME)
(def iso-date-time java.time.format.DateTimeFormatter/ISO_DATE_TIME)
(def basic-iso-date java.time.format.DateTimeFormatter/BASIC_ISO_DATE)
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String5950] (java.time.format.DateTimeFormatter/ofPattern java-lang-String5950)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String5951 ^java.util.Locale java-util-Locale5952] (java.time.format.DateTimeFormatter/ofPattern java-lang-String5951 java-util-Locale5952)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this5953 ^java.lang.CharSequence java-lang-CharSequence5954 ^"java.lang.Class" java-time-temporal-TemporalQuery-array5955] (.parseBest this5953 java-lang-CharSequence5954 java-time-temporal-TemporalQuery-array5955)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this5956 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5957 ^java.lang.Appendable java-lang-Appendable5958] (.formatTo this5956 java-time-temporal-TemporalAccessor5957 java-lang-Appendable5958)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this5959] (.getDecimalStyle this5959)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this5960 ^java.time.chrono.Chronology java-time-chrono-Chronology5961] (.withChronology this5960 java-time-chrono-Chronology5961)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this5962] (.getResolverStyle this5962)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this5963 ^java.time.format.DecimalStyle java-time-format-DecimalStyle5964] (.withDecimalStyle this5963 java-time-format-DecimalStyle5964)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this5965] (.getLocale this5965)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this5966] (.toString this5966)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (java.time.format.DateTimeFormatter/parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this5967 ^java.time.ZoneId java-time-ZoneId5968] (.withZone this5967 java-time-ZoneId5968)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (java.time.format.DateTimeFormatter/parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this5969] (.getZone this5969)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle"] ["java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle5970] (java.time.format.DateTimeFormatter/ofLocalizedDateTime java-time-format-FormatStyle5970)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle5971 ^java.time.format.FormatStyle java-time-format-FormatStyle5972] (java.time.format.DateTimeFormatter/ofLocalizedDateTime java-time-format-FormatStyle5971 java-time-format-FormatStyle5972)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this5973] (.getResolverFields this5973)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this5974] (.getChronology this5974)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.lang.Object [this5975 G__5976 G__5977] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.CharSequence G__5976) (clojure.core/instance? java.time.temporal.TemporalQuery G__5977)) (clojure.core/let [G__5976 ^"java.lang.CharSequence" G__5976 G__5977 ^"java.time.temporal.TemporalQuery" G__5977] (.parse ^java.time.format.DateTimeFormatter this5975 G__5976 G__5977)) (clojure.core/and (clojure.core/instance? java.lang.CharSequence G__5976) (clojure.core/instance? java.text.ParsePosition G__5977)) (clojure.core/let [G__5976 ^"java.lang.CharSequence" G__5976 G__5977 ^"java.text.ParsePosition" G__5977] (.parse ^java.time.format.DateTimeFormatter this5975 G__5976 G__5977)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this5978 ^java.lang.CharSequence java-lang-CharSequence5979] (.parse this5978 java-lang-CharSequence5979)))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this5980 ^java.util.Locale java-util-Locale5981] (.withLocale this5980 java-util-Locale5981)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"] ["java.time.format.DateTimeFormatter" "java.util.Set"]))} (^java.time.format.DateTimeFormatter [this5982 G__5983] (clojure.core/cond (clojure.core/and (clojure.core/= java.time.temporal.TemporalField (.getComponentType (clojure.core/class G__5983)))) (clojure.core/let [G__5983 ^"[Ljava.time.temporal.TemporalField;" G__5983] (.withResolverFields ^java.time.format.DateTimeFormatter this5982 G__5983)) (clojure.core/and (clojure.core/instance? java.util.Set G__5983)) (clojure.core/let [G__5983 ^"java.util.Set" G__5983] (.withResolverFields ^java.time.format.DateTimeFormatter this5982 G__5983)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this5984 ^java.lang.CharSequence java-lang-CharSequence5985 ^java.text.ParsePosition java-text-ParsePosition5986] (.parseUnresolved this5984 java-lang-CharSequence5985 java-text-ParsePosition5986)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle5987] (java.time.format.DateTimeFormatter/ofLocalizedTime java-time-format-FormatStyle5987)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle5988] (java.time.format.DateTimeFormatter/ofLocalizedDate java-time-format-FormatStyle5988)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this5989 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5990] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.format this5989 java-time-temporal-TemporalAccessor5990))))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this5991] (.toFormat this5991)) (^java.text.Format [^java.time.format.DateTimeFormatter this5992 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery5993] (.toFormat this5992 java-time-temporal-TemporalQuery5993)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this5994 ^java.time.format.ResolverStyle java-time-format-ResolverStyle5995] (.withResolverStyle this5994 java-time-format-ResolverStyle5995)))
