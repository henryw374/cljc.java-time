(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatter]))
(def iso-local-time java.time.format.DateTimeFormatter/ISO_LOCAL_TIME)
(def iso-ordinal-date java.time.format.DateTimeFormatter/ISO_ORDINAL_DATE)
(def iso-offset-date java.time.format.DateTimeFormatter/ISO_OFFSET_DATE)
(def iso-time java.time.format.DateTimeFormatter/ISO_TIME)
(def iso-local-date-time java.time.format.DateTimeFormatter/ISO_LOCAL_DATE_TIME)
(def iso-instant java.time.format.DateTimeFormatter/ISO_INSTANT)
(def rfc-1123-date-time java.time.format.DateTimeFormatter/RFC_1123_DATE_TIME)
(def iso-date java.time.format.DateTimeFormatter/ISO_DATE)
(def iso-week-date java.time.format.DateTimeFormatter/ISO_WEEK_DATE)
(def iso-offset-time java.time.format.DateTimeFormatter/ISO_OFFSET_TIME)
(def iso-local-date java.time.format.DateTimeFormatter/ISO_LOCAL_DATE)
(def iso-zoned-date-time java.time.format.DateTimeFormatter/ISO_ZONED_DATE_TIME)
(def iso-offset-date-time java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME)
(def iso-date-time java.time.format.DateTimeFormatter/ISO_DATE_TIME)
(def basic-iso-date java.time.format.DateTimeFormatter/BASIC_ISO_DATE)
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String8992] (java.time.format.DateTimeFormatter/ofPattern java-lang-String8992)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String8993 ^java.util.Locale java-util-Locale8994] (java.time.format.DateTimeFormatter/ofPattern java-lang-String8993 java-util-Locale8994)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this8995 ^java.lang.CharSequence java-lang-CharSequence8996 ^"java.lang.Class" java-time-temporal-TemporalQuery-array8997] (.parseBest this8995 java-lang-CharSequence8996 java-time-temporal-TemporalQuery-array8997)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this8998 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8999 ^java.lang.Appendable java-lang-Appendable9000] (.formatTo this8998 java-time-temporal-TemporalAccessor8999 java-lang-Appendable9000)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this9001] (.getDecimalStyle this9001)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this9002 ^java.time.chrono.Chronology java-time-chrono-Chronology9003] (.withChronology this9002 java-time-chrono-Chronology9003)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this9004] (.getResolverStyle this9004)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this9005 ^java.time.format.DecimalStyle java-time-format-DecimalStyle9006] (.withDecimalStyle this9005 java-time-format-DecimalStyle9006)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this9007] (.getLocale this9007)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this9008] (.toString this9008)))
(clojure.core/defn localized-by {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this9009 ^java.util.Locale java-util-Locale9010] (.localizedBy this9009 java-util-Locale9010)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (java.time.format.DateTimeFormatter/parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this9011 ^java.time.ZoneId java-time-ZoneId9012] (.withZone this9011 java-time-ZoneId9012)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (java.time.format.DateTimeFormatter/parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this9013] (.getZone this9013)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle"] ["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle9014 ^java.time.format.FormatStyle java-time-format-FormatStyle9015] (java.time.format.DateTimeFormatter/ofLocalizedDateTime java-time-format-FormatStyle9014 java-time-format-FormatStyle9015)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle9016] (java.time.format.DateTimeFormatter/ofLocalizedDateTime java-time-format-FormatStyle9016)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this9017] (.getResolverFields this9017)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this9018] (.getChronology this9018)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [this9019 G__9020 G__9021] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__9020) (clojure.core/instance? (java.lang.Class/forName "java.text.ParsePosition") G__9021)) (clojure.core/let [G__9020 ^"java.lang.CharSequence" G__9020 G__9021 ^"java.text.ParsePosition" G__9021] (.parse ^java.time.format.DateTimeFormatter this9019 G__9020 G__9021)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__9020) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalQuery") G__9021)) (clojure.core/let [G__9020 ^"java.lang.CharSequence" G__9020 G__9021 ^"java.time.temporal.TemporalQuery" G__9021] (.parse ^java.time.format.DateTimeFormatter this9019 G__9020 G__9021)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this9022 ^java.lang.CharSequence java-lang-CharSequence9023] (.parse this9022 java-lang-CharSequence9023)))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this9024 ^java.util.Locale java-util-Locale9025] (.withLocale this9024 java-util-Locale9025)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this9026 G__9027] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.util.Set") G__9027)) (clojure.core/let [G__9027 ^"java.util.Set" G__9027] (.withResolverFields ^java.time.format.DateTimeFormatter this9026 G__9027)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "[Ljava.time.temporal.TemporalField;") G__9027)) (clojure.core/let [G__9027 ^"[Ljava.time.temporal.TemporalField;" G__9027] (.withResolverFields ^java.time.format.DateTimeFormatter this9026 G__9027)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this9028 ^java.lang.CharSequence java-lang-CharSequence9029 ^java.text.ParsePosition java-text-ParsePosition9030] (.parseUnresolved this9028 java-lang-CharSequence9029 java-text-ParsePosition9030)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle9031] (java.time.format.DateTimeFormatter/ofLocalizedTime java-time-format-FormatStyle9031)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle9032] (java.time.format.DateTimeFormatter/ofLocalizedDate java-time-format-FormatStyle9032)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this9033 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor9034] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.format this9033 java-time-temporal-TemporalAccessor9034))))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this9035] (.toFormat this9035)) (^java.text.Format [^java.time.format.DateTimeFormatter this9036 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery9037] (.toFormat this9036 java-time-temporal-TemporalQuery9037)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this9038 ^java.time.format.ResolverStyle java-time-format-ResolverStyle9039] (.withResolverStyle this9038 java-time-format-ResolverStyle9039)))
