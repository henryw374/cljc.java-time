(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatter]))
(def iso-local-time java.time.format.DateTimeFormatter/ISO_LOCAL_TIME)
(def iso-ordinal-date java.time.format.DateTimeFormatter/ISO_ORDINAL_DATE)
(def iso-offset-date java.time.format.DateTimeFormatter/ISO_OFFSET_DATE)
(def iso-time java.time.format.DateTimeFormatter/ISO_TIME)
(def iso-local-date-time java.time.format.DateTimeFormatter/ISO_LOCAL_DATE_TIME)
(def iso-instant java.time.format.DateTimeFormatter/ISO_INSTANT)
(def rfc-1123-date-time java.time.format.DateTimeFormatter/RFC_1123_DATE_TIME)
(def iso-date java.time.format.DateTimeFormatter/ISO_DATE)
(def iso-week-date java.time.format.DateTimeFormatter/ISO_WEEK_DATE)
(def iso-offset-time java.time.format.DateTimeFormatter/ISO_OFFSET_TIME)
(def iso-local-date java.time.format.DateTimeFormatter/ISO_LOCAL_DATE)
(def iso-zoned-date-time java.time.format.DateTimeFormatter/ISO_ZONED_DATE_TIME)
(def iso-offset-date-time java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME)
(def iso-date-time java.time.format.DateTimeFormatter/ISO_DATE_TIME)
(def basic-iso-date java.time.format.DateTimeFormatter/BASIC_ISO_DATE)
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String8938] (java.time.format.DateTimeFormatter/ofPattern java-lang-String8938)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String8939 ^java.util.Locale java-util-Locale8940] (java.time.format.DateTimeFormatter/ofPattern java-lang-String8939 java-util-Locale8940)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this8941 ^java.lang.CharSequence java-lang-CharSequence8942 ^"java.lang.Class" java-time-temporal-TemporalQuery-array8943] (.parseBest this8941 java-lang-CharSequence8942 java-time-temporal-TemporalQuery-array8943)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this8944 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8945 ^java.lang.Appendable java-lang-Appendable8946] (.formatTo this8944 java-time-temporal-TemporalAccessor8945 java-lang-Appendable8946)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this8947] (.getDecimalStyle this8947)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this8948 ^java.time.chrono.Chronology java-time-chrono-Chronology8949] (.withChronology this8948 java-time-chrono-Chronology8949)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this8950] (.getResolverStyle this8950)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this8951 ^java.time.format.DecimalStyle java-time-format-DecimalStyle8952] (.withDecimalStyle this8951 java-time-format-DecimalStyle8952)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this8953] (.getLocale this8953)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this8954] (.toString this8954)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (java.time.format.DateTimeFormatter/parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this8955 ^java.time.ZoneId java-time-ZoneId8956] (.withZone this8955 java-time-ZoneId8956)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (java.time.format.DateTimeFormatter/parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this8957] (.getZone this8957)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle"] ["java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle8958] (java.time.format.DateTimeFormatter/ofLocalizedDateTime java-time-format-FormatStyle8958)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle8959 ^java.time.format.FormatStyle java-time-format-FormatStyle8960] (java.time.format.DateTimeFormatter/ofLocalizedDateTime java-time-format-FormatStyle8959 java-time-format-FormatStyle8960)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this8961] (.getResolverFields this8961)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this8962] (.getChronology this8962)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this8963 ^java.lang.CharSequence java-lang-CharSequence8964] (.parse this8963 java-lang-CharSequence8964)) (^java.lang.Object [this8965 G__8966 G__8967] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__8966) (clojure.core/instance? (java.lang.Class/forName "java.text.ParsePosition") G__8967)) (clojure.core/let [G__8966 ^"java.lang.CharSequence" G__8966 G__8967 ^"java.text.ParsePosition" G__8967] (.parse ^java.time.format.DateTimeFormatter this8965 G__8966 G__8967)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__8966) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalQuery") G__8967)) (clojure.core/let [G__8966 ^"java.lang.CharSequence" G__8966 G__8967 ^"java.time.temporal.TemporalQuery" G__8967] (.parse ^java.time.format.DateTimeFormatter this8965 G__8966 G__8967)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this8968 ^java.util.Locale java-util-Locale8969] (.withLocale this8968 java-util-Locale8969)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this8970 G__8971] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.util.Set") G__8971)) (clojure.core/let [G__8971 ^"java.util.Set" G__8971] (.withResolverFields ^java.time.format.DateTimeFormatter this8970 G__8971)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "[Ljava.time.temporal.TemporalField;") G__8971)) (clojure.core/let [G__8971 ^"[Ljava.time.temporal.TemporalField;" G__8971] (.withResolverFields ^java.time.format.DateTimeFormatter this8970 G__8971)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this8972 ^java.lang.CharSequence java-lang-CharSequence8973 ^java.text.ParsePosition java-text-ParsePosition8974] (.parseUnresolved this8972 java-lang-CharSequence8973 java-text-ParsePosition8974)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle8975] (java.time.format.DateTimeFormatter/ofLocalizedTime java-time-format-FormatStyle8975)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle8976] (java.time.format.DateTimeFormatter/ofLocalizedDate java-time-format-FormatStyle8976)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this8977 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor8978] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.format this8977 java-time-temporal-TemporalAccessor8978))))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this8979] (.toFormat this8979)) (^java.text.Format [^java.time.format.DateTimeFormatter this8980 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery8981] (.toFormat this8980 java-time-temporal-TemporalQuery8981)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this8982 ^java.time.format.ResolverStyle java-time-format-ResolverStyle8983] (.withResolverStyle this8982 java-time-format-ResolverStyle8983)))
