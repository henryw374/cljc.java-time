(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatter]))
(def iso-local-time java.time.format.DateTimeFormatter/ISO_LOCAL_TIME)
(def iso-ordinal-date java.time.format.DateTimeFormatter/ISO_ORDINAL_DATE)
(def iso-offset-date java.time.format.DateTimeFormatter/ISO_OFFSET_DATE)
(def iso-time java.time.format.DateTimeFormatter/ISO_TIME)
(def iso-local-date-time java.time.format.DateTimeFormatter/ISO_LOCAL_DATE_TIME)
(def iso-instant java.time.format.DateTimeFormatter/ISO_INSTANT)
(def rfc-1123-date-time java.time.format.DateTimeFormatter/RFC_1123_DATE_TIME)
(def iso-date java.time.format.DateTimeFormatter/ISO_DATE)
(def iso-week-date java.time.format.DateTimeFormatter/ISO_WEEK_DATE)
(def iso-offset-time java.time.format.DateTimeFormatter/ISO_OFFSET_TIME)
(def iso-local-date java.time.format.DateTimeFormatter/ISO_LOCAL_DATE)
(def iso-zoned-date-time java.time.format.DateTimeFormatter/ISO_ZONED_DATE_TIME)
(def iso-offset-date-time java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME)
(def iso-date-time java.time.format.DateTimeFormatter/ISO_DATE_TIME)
(def basic-iso-date java.time.format.DateTimeFormatter/BASIC_ISO_DATE)
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String15874] (java.time.format.DateTimeFormatter/ofPattern java-lang-String15874)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String15875 ^java.util.Locale java-util-Locale15876] (java.time.format.DateTimeFormatter/ofPattern java-lang-String15875 java-util-Locale15876)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this15877 ^java.lang.CharSequence java-lang-CharSequence15878 ^"java.lang.Class" java-time-temporal-TemporalQuery-array15879] (.parseBest this15877 java-lang-CharSequence15878 java-time-temporal-TemporalQuery-array15879)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this15880 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15881 ^java.lang.Appendable java-lang-Appendable15882] (.formatTo this15880 java-time-temporal-TemporalAccessor15881 java-lang-Appendable15882)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this15883] (.getDecimalStyle this15883)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this15884 ^java.time.chrono.Chronology java-time-chrono-Chronology15885] (.withChronology this15884 java-time-chrono-Chronology15885)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this15886] (.getResolverStyle this15886)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this15887 ^java.time.format.DecimalStyle java-time-format-DecimalStyle15888] (.withDecimalStyle this15887 java-time-format-DecimalStyle15888)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this15889] (.getLocale this15889)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this15890] (.toString this15890)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (java.time.format.DateTimeFormatter/parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this15891 ^java.time.ZoneId java-time-ZoneId15892] (.withZone this15891 java-time-ZoneId15892)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (java.time.format.DateTimeFormatter/parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this15893] (.getZone this15893)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle"] ["java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle15894] (java.time.format.DateTimeFormatter/ofLocalizedDateTime java-time-format-FormatStyle15894)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle15895 ^java.time.format.FormatStyle java-time-format-FormatStyle15896] (java.time.format.DateTimeFormatter/ofLocalizedDateTime java-time-format-FormatStyle15895 java-time-format-FormatStyle15896)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this15897] (.getResolverFields this15897)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this15898] (.getChronology this15898)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.lang.Object [this15899 G__15900 G__15901] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.CharSequence G__15900) (clojure.core/instance? java.time.temporal.TemporalQuery G__15901)) (clojure.core/let [G__15900 ^"java.lang.CharSequence" G__15900 G__15901 ^"java.time.temporal.TemporalQuery" G__15901] (.parse ^java.time.format.DateTimeFormatter this15899 G__15900 G__15901)) (clojure.core/and (clojure.core/instance? java.lang.CharSequence G__15900) (clojure.core/instance? java.text.ParsePosition G__15901)) (clojure.core/let [G__15900 ^"java.lang.CharSequence" G__15900 G__15901 ^"java.text.ParsePosition" G__15901] (.parse ^java.time.format.DateTimeFormatter this15899 G__15900 G__15901)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this15902 ^java.lang.CharSequence java-lang-CharSequence15903] (.parse this15902 java-lang-CharSequence15903)))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this15904 ^java.util.Locale java-util-Locale15905] (.withLocale this15904 java-util-Locale15905)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this15906 G__15907] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.util.Set G__15907)) (clojure.core/let [G__15907 ^"java.util.Set" G__15907] (.withResolverFields ^java.time.format.DateTimeFormatter this15906 G__15907)) (clojure.core/and (clojure.core/= java.time.temporal.TemporalField (.getComponentType (clojure.core/class G__15907)))) (clojure.core/let [G__15907 ^"[Ljava.time.temporal.TemporalField;" G__15907] (.withResolverFields ^java.time.format.DateTimeFormatter this15906 G__15907)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this15908 ^java.lang.CharSequence java-lang-CharSequence15909 ^java.text.ParsePosition java-text-ParsePosition15910] (.parseUnresolved this15908 java-lang-CharSequence15909 java-text-ParsePosition15910)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle15911] (java.time.format.DateTimeFormatter/ofLocalizedTime java-time-format-FormatStyle15911)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle15912] (java.time.format.DateTimeFormatter/ofLocalizedDate java-time-format-FormatStyle15912)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this15913 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15914] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.format this15913 java-time-temporal-TemporalAccessor15914))))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this15915] (.toFormat this15915)) (^java.text.Format [^java.time.format.DateTimeFormatter this15916 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery15917] (.toFormat this15916 java-time-temporal-TemporalQuery15917)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this15918 ^java.time.format.ResolverStyle java-time-format-ResolverStyle15919] (.withResolverStyle this15918 java-time-format-ResolverStyle15919)))
