(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time.format DateTimeFormatter]))
(def iso-local-time (. java.time.format.DateTimeFormatter -ISO_LOCAL_TIME))
(def iso-ordinal-date (. java.time.format.DateTimeFormatter -ISO_ORDINAL_DATE))
(def iso-offset-date (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE))
(def iso-time (. java.time.format.DateTimeFormatter -ISO_TIME))
(def iso-local-date-time (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE_TIME))
(def iso-instant (. java.time.format.DateTimeFormatter -ISO_INSTANT))
(def rfc-1123-date-time (. java.time.format.DateTimeFormatter -RFC_1123_DATE_TIME))
(def iso-date (. java.time.format.DateTimeFormatter -ISO_DATE))
(def iso-week-date (. java.time.format.DateTimeFormatter -ISO_WEEK_DATE))
(def iso-offset-time (. java.time.format.DateTimeFormatter -ISO_OFFSET_TIME))
(def iso-local-date (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE))
(def iso-zoned-date-time (. java.time.format.DateTimeFormatter -ISO_ZONED_DATE_TIME))
(def iso-offset-date-time (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE_TIME))
(def iso-date-time (. java.time.format.DateTimeFormatter -ISO_DATE_TIME))
(def basic-iso-date (. java.time.format.DateTimeFormatter -BASIC_ISO_DATE))
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String7574] (. java.time.format.DateTimeFormatter ofPattern java-lang-String7574)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String7575 ^java.util.Locale java-util-Locale7576] (. java.time.format.DateTimeFormatter ofPattern java-lang-String7575 java-util-Locale7576)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this7577 ^java.lang.CharSequence java-lang-CharSequence7578 ^"java.lang.Class" java-time-temporal-TemporalQuery-array7579] (.parseBest this7577 java-lang-CharSequence7578 java-time-temporal-TemporalQuery-array7579)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this7580 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7581 ^java.lang.Appendable java-lang-Appendable7582] (.formatTo this7580 java-time-temporal-TemporalAccessor7581 java-lang-Appendable7582)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this7583] (.getDecimalStyle this7583)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this7584 ^java.time.chrono.Chronology java-time-chrono-Chronology7585] (.withChronology this7584 java-time-chrono-Chronology7585)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this7586] (.getResolverStyle this7586)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this7587 ^java.time.format.DecimalStyle java-time-format-DecimalStyle7588] (.withDecimalStyle this7587 java-time-format-DecimalStyle7588)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this7589] (.getLocale this7589)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this7590] (.toString this7590)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this7591 ^java.time.ZoneId java-time-ZoneId7592] (.withZone this7591 java-time-ZoneId7592)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this7593] (.getZone this7593)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle"] ["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle7594 ^java.time.format.FormatStyle java-time-format-FormatStyle7595] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle7594 java-time-format-FormatStyle7595)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle7596] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle7596)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this7597] (.getResolverFields this7597)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this7598] (.getChronology this7598)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this7599 ^java.lang.CharSequence java-lang-CharSequence7600] (.parse this7599 java-lang-CharSequence7600)) (^java.lang.Object [this7601 G__7602 G__7603] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__7602) (clojure.core/instance? (java.lang.Class/forName "java.text.ParsePosition") G__7603)) (clojure.core/let [G__7602 ^"java.lang.CharSequence" G__7602 G__7603 ^"java.text.ParsePosition" G__7603] (.parse ^java.time.format.DateTimeFormatter this7601 G__7602 G__7603)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__7602) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalQuery") G__7603)) (clojure.core/let [G__7602 ^"java.lang.CharSequence" G__7602 G__7603 ^"java.time.temporal.TemporalQuery" G__7603] (.parse ^java.time.format.DateTimeFormatter this7601 G__7602 G__7603)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this7604 ^java.util.Locale java-util-Locale7605] (.withLocale this7604 java-util-Locale7605)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this7606 G__7607] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.util.Set") G__7607)) (clojure.core/let [G__7607 ^"java.util.Set" G__7607] (.withResolverFields ^java.time.format.DateTimeFormatter this7606 G__7607)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "[Ljava.time.temporal.TemporalField;") G__7607)) (clojure.core/let [G__7607 ^"[Ljava.time.temporal.TemporalField;" G__7607] (.withResolverFields ^java.time.format.DateTimeFormatter this7606 G__7607)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this7608 ^java.lang.CharSequence java-lang-CharSequence7609 ^java.text.ParsePosition java-text-ParsePosition7610] (.parseUnresolved this7608 java-lang-CharSequence7609 java-text-ParsePosition7610)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle7611] (. java.time.format.DateTimeFormatter ofLocalizedTime java-time-format-FormatStyle7611)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle7612] (. java.time.format.DateTimeFormatter ofLocalizedDate java-time-format-FormatStyle7612)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this7613 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7614] (.format this7613 java-time-temporal-TemporalAccessor7614)))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"] ["java.time.format.DateTimeFormatter"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this7615 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7616] (.toFormat this7615 java-time-temporal-TemporalQuery7616)) (^java.text.Format [^java.time.format.DateTimeFormatter this7617] (.toFormat this7617)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this7618 ^java.time.format.ResolverStyle java-time-format-ResolverStyle7619] (.withResolverStyle this7618 java-time-format-ResolverStyle7619)))
