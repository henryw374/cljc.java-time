(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatter]))
(def iso-local-time java.time.format.DateTimeFormatter/ISO_LOCAL_TIME)
(def iso-ordinal-date java.time.format.DateTimeFormatter/ISO_ORDINAL_DATE)
(def iso-offset-date java.time.format.DateTimeFormatter/ISO_OFFSET_DATE)
(def iso-time java.time.format.DateTimeFormatter/ISO_TIME)
(def iso-local-date-time java.time.format.DateTimeFormatter/ISO_LOCAL_DATE_TIME)
(def iso-instant java.time.format.DateTimeFormatter/ISO_INSTANT)
(def rfc-1123-date-time java.time.format.DateTimeFormatter/RFC_1123_DATE_TIME)
(def iso-date java.time.format.DateTimeFormatter/ISO_DATE)
(def iso-week-date java.time.format.DateTimeFormatter/ISO_WEEK_DATE)
(def iso-offset-time java.time.format.DateTimeFormatter/ISO_OFFSET_TIME)
(def iso-local-date java.time.format.DateTimeFormatter/ISO_LOCAL_DATE)
(def iso-zoned-date-time java.time.format.DateTimeFormatter/ISO_ZONED_DATE_TIME)
(def iso-offset-date-time java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME)
(def iso-date-time java.time.format.DateTimeFormatter/ISO_DATE_TIME)
(def basic-iso-date java.time.format.DateTimeFormatter/BASIC_ISO_DATE)
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String15495] (java.time.format.DateTimeFormatter/ofPattern java-lang-String15495)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String15496 ^java.util.Locale java-util-Locale15497] (java.time.format.DateTimeFormatter/ofPattern java-lang-String15496 java-util-Locale15497)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this15498 ^java.lang.CharSequence java-lang-CharSequence15499 ^"java.lang.Class" java-time-temporal-TemporalQuery-array15500] (.parseBest this15498 java-lang-CharSequence15499 java-time-temporal-TemporalQuery-array15500)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this15501 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15502 ^java.lang.Appendable java-lang-Appendable15503] (.formatTo this15501 java-time-temporal-TemporalAccessor15502 java-lang-Appendable15503)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this15504] (.getDecimalStyle this15504)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this15505 ^java.time.chrono.Chronology java-time-chrono-Chronology15506] (.withChronology this15505 java-time-chrono-Chronology15506)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this15507] (.getResolverStyle this15507)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this15508 ^java.time.format.DecimalStyle java-time-format-DecimalStyle15509] (.withDecimalStyle this15508 java-time-format-DecimalStyle15509)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this15510] (.getLocale this15510)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this15511] (.toString this15511)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (java.time.format.DateTimeFormatter/parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this15512 ^java.time.ZoneId java-time-ZoneId15513] (.withZone this15512 java-time-ZoneId15513)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (java.time.format.DateTimeFormatter/parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this15514] (.getZone this15514)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle"] ["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle15515 ^java.time.format.FormatStyle java-time-format-FormatStyle15516] (java.time.format.DateTimeFormatter/ofLocalizedDateTime java-time-format-FormatStyle15515 java-time-format-FormatStyle15516)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle15517] (java.time.format.DateTimeFormatter/ofLocalizedDateTime java-time-format-FormatStyle15517)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this15518] (.getResolverFields this15518)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this15519] (.getChronology this15519)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.lang.Object [this15520 G__15521 G__15522] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.CharSequence G__15521) (clojure.core/instance? java.time.temporal.TemporalQuery G__15522)) (clojure.core/let [G__15521 ^"java.lang.CharSequence" G__15521 G__15522 ^"java.time.temporal.TemporalQuery" G__15522] (.parse ^java.time.format.DateTimeFormatter this15520 G__15521 G__15522)) (clojure.core/and (clojure.core/instance? java.lang.CharSequence G__15521) (clojure.core/instance? java.text.ParsePosition G__15522)) (clojure.core/let [G__15521 ^"java.lang.CharSequence" G__15521 G__15522 ^"java.text.ParsePosition" G__15522] (.parse ^java.time.format.DateTimeFormatter this15520 G__15521 G__15522)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this15523 ^java.lang.CharSequence java-lang-CharSequence15524] (.parse this15523 java-lang-CharSequence15524)))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this15525 ^java.util.Locale java-util-Locale15526] (.withLocale this15525 java-util-Locale15526)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this15527 G__15528] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.util.Set G__15528)) (clojure.core/let [G__15528 ^"java.util.Set" G__15528] (.withResolverFields ^java.time.format.DateTimeFormatter this15527 G__15528)) (clojure.core/and (clojure.core/= java.time.temporal.TemporalField (.getComponentType (clojure.core/class G__15528)))) (clojure.core/let [G__15528 ^"[Ljava.time.temporal.TemporalField;" G__15528] (.withResolverFields ^java.time.format.DateTimeFormatter this15527 G__15528)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this15529 ^java.lang.CharSequence java-lang-CharSequence15530 ^java.text.ParsePosition java-text-ParsePosition15531] (.parseUnresolved this15529 java-lang-CharSequence15530 java-text-ParsePosition15531)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle15532] (java.time.format.DateTimeFormatter/ofLocalizedTime java-time-format-FormatStyle15532)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle15533] (java.time.format.DateTimeFormatter/ofLocalizedDate java-time-format-FormatStyle15533)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this15534 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15535] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.format this15534 java-time-temporal-TemporalAccessor15535))))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this15536] (.toFormat this15536)) (^java.text.Format [^java.time.format.DateTimeFormatter this15537 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery15538] (.toFormat this15537 java-time-temporal-TemporalQuery15538)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this15539 ^java.time.format.ResolverStyle java-time-format-ResolverStyle15540] (.withResolverStyle this15539 java-time-format-ResolverStyle15540)))
