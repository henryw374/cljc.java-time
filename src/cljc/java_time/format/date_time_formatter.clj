(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatter]))
(def iso-local-time java.time.format.DateTimeFormatter/ISO_LOCAL_TIME)
(def iso-ordinal-date java.time.format.DateTimeFormatter/ISO_ORDINAL_DATE)
(def iso-offset-date java.time.format.DateTimeFormatter/ISO_OFFSET_DATE)
(def iso-time java.time.format.DateTimeFormatter/ISO_TIME)
(def iso-local-date-time java.time.format.DateTimeFormatter/ISO_LOCAL_DATE_TIME)
(def iso-instant java.time.format.DateTimeFormatter/ISO_INSTANT)
(def rfc-1123-date-time java.time.format.DateTimeFormatter/RFC_1123_DATE_TIME)
(def iso-date java.time.format.DateTimeFormatter/ISO_DATE)
(def iso-week-date java.time.format.DateTimeFormatter/ISO_WEEK_DATE)
(def iso-offset-time java.time.format.DateTimeFormatter/ISO_OFFSET_TIME)
(def iso-local-date java.time.format.DateTimeFormatter/ISO_LOCAL_DATE)
(def iso-zoned-date-time java.time.format.DateTimeFormatter/ISO_ZONED_DATE_TIME)
(def iso-offset-date-time java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME)
(def iso-date-time java.time.format.DateTimeFormatter/ISO_DATE_TIME)
(def basic-iso-date java.time.format.DateTimeFormatter/BASIC_ISO_DATE)
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String61654] (java.time.format.DateTimeFormatter/ofPattern java-lang-String61654)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String61655 ^java.util.Locale java-util-Locale61656] (java.time.format.DateTimeFormatter/ofPattern java-lang-String61655 java-util-Locale61656)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this61657 ^java.lang.CharSequence java-lang-CharSequence61658 ^"java.lang.Class" java-time-temporal-TemporalQuery-array61659] (.parseBest this61657 java-lang-CharSequence61658 java-time-temporal-TemporalQuery-array61659)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this61660 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor61661 ^java.lang.Appendable java-lang-Appendable61662] (.formatTo this61660 java-time-temporal-TemporalAccessor61661 java-lang-Appendable61662)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this61663] (.getDecimalStyle this61663)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this61664 ^java.time.chrono.Chronology java-time-chrono-Chronology61665] (.withChronology this61664 java-time-chrono-Chronology61665)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this61666] (.getResolverStyle this61666)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this61667 ^java.time.format.DecimalStyle java-time-format-DecimalStyle61668] (.withDecimalStyle this61667 java-time-format-DecimalStyle61668)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this61669] (.getLocale this61669)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this61670] (.toString this61670)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (java.time.format.DateTimeFormatter/parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this61671 ^java.time.ZoneId java-time-ZoneId61672] (.withZone this61671 java-time-ZoneId61672)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (java.time.format.DateTimeFormatter/parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this61673] (.getZone this61673)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle"] ["java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle61674] (java.time.format.DateTimeFormatter/ofLocalizedDateTime java-time-format-FormatStyle61674)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle61675 ^java.time.format.FormatStyle java-time-format-FormatStyle61676] (java.time.format.DateTimeFormatter/ofLocalizedDateTime java-time-format-FormatStyle61675 java-time-format-FormatStyle61676)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this61677] (.getResolverFields this61677)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this61678] (.getChronology this61678)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this61679 ^java.lang.CharSequence java-lang-CharSequence61680] (.parse this61679 java-lang-CharSequence61680)) (^java.lang.Object [this61681 G__61682 G__61683] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__61682) (clojure.core/instance? (java.lang.Class/forName "java.text.ParsePosition") G__61683)) (clojure.core/let [G__61682 ^"java.lang.CharSequence" G__61682 G__61683 ^"java.text.ParsePosition" G__61683] (.parse ^java.time.format.DateTimeFormatter this61681 G__61682 G__61683)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__61682) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalQuery") G__61683)) (clojure.core/let [G__61682 ^"java.lang.CharSequence" G__61682 G__61683 ^"java.time.temporal.TemporalQuery" G__61683] (.parse ^java.time.format.DateTimeFormatter this61681 G__61682 G__61683)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this61684 ^java.util.Locale java-util-Locale61685] (.withLocale this61684 java-util-Locale61685)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this61686 G__61687] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.util.Set") G__61687)) (clojure.core/let [G__61687 ^"java.util.Set" G__61687] (.withResolverFields ^java.time.format.DateTimeFormatter this61686 G__61687)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "[Ljava.time.temporal.TemporalField;") G__61687)) (clojure.core/let [G__61687 ^"[Ljava.time.temporal.TemporalField;" G__61687] (.withResolverFields ^java.time.format.DateTimeFormatter this61686 G__61687)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this61688 ^java.lang.CharSequence java-lang-CharSequence61689 ^java.text.ParsePosition java-text-ParsePosition61690] (.parseUnresolved this61688 java-lang-CharSequence61689 java-text-ParsePosition61690)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle61691] (java.time.format.DateTimeFormatter/ofLocalizedTime java-time-format-FormatStyle61691)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle61692] (java.time.format.DateTimeFormatter/ofLocalizedDate java-time-format-FormatStyle61692)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this61693 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor61694] (cljc.java-time.extn.calendar-awareness/calendar-aware-clj (.format this61693 java-time-temporal-TemporalAccessor61694))))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this61695] (.toFormat this61695)) (^java.text.Format [^java.time.format.DateTimeFormatter this61696 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery61697] (.toFormat this61696 java-time-temporal-TemporalQuery61697)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this61698 ^java.time.format.ResolverStyle java-time-format-ResolverStyle61699] (.withResolverStyle this61698 java-time-format-ResolverStyle61699)))
