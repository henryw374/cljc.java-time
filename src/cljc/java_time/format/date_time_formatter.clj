(ns cljc.java-time.format.date-time-formatter (:import [java.time.format DateTimeFormatter]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def iso-local-time java.time.format.DateTimeFormatter/ISO_LOCAL_TIME)
(def iso-ordinal-date java.time.format.DateTimeFormatter/ISO_ORDINAL_DATE)
(def iso-offset-date java.time.format.DateTimeFormatter/ISO_OFFSET_DATE)
(def iso-time java.time.format.DateTimeFormatter/ISO_TIME)
(def iso-local-date-time java.time.format.DateTimeFormatter/ISO_LOCAL_DATE_TIME)
(def iso-instant java.time.format.DateTimeFormatter/ISO_INSTANT)
(def rfc-1123-date-time java.time.format.DateTimeFormatter/RFC_1123_DATE_TIME)
(def iso-date java.time.format.DateTimeFormatter/ISO_DATE)
(def iso-week-date java.time.format.DateTimeFormatter/ISO_WEEK_DATE)
(def iso-offset-time java.time.format.DateTimeFormatter/ISO_OFFSET_TIME)
(def iso-local-date java.time.format.DateTimeFormatter/ISO_LOCAL_DATE)
(def iso-zoned-date-time java.time.format.DateTimeFormatter/ISO_ZONED_DATE_TIME)
(def iso-offset-date-time java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME)
(def iso-date-time java.time.format.DateTimeFormatter/ISO_DATE_TIME)
(def basic-iso-date java.time.format.DateTimeFormatter/BASIC_ISO_DATE)
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String51163] (. java.time.format.DateTimeFormatter ofPattern java-lang-String51163)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String51164 ^java.util.Locale java-util-Locale51165] (. java.time.format.DateTimeFormatter ofPattern java-lang-String51164 java-util-Locale51165)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this51166 ^java.lang.CharSequence java-lang-CharSequence51167 ^"java.lang.Class" java-time-temporal-TemporalQuery-array51168] (.parseBest this51166 java-lang-CharSequence51167 java-time-temporal-TemporalQuery-array51168)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this51169 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor51170 ^java.lang.Appendable java-lang-Appendable51171] (.formatTo this51169 java-time-temporal-TemporalAccessor51170 java-lang-Appendable51171)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this51172] (.getDecimalStyle this51172)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this51173 ^java.time.chrono.Chronology java-time-chrono-Chronology51174] (.withChronology this51173 java-time-chrono-Chronology51174)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this51175] (.getResolverStyle this51175)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this51176 ^java.time.format.DecimalStyle java-time-format-DecimalStyle51177] (.withDecimalStyle this51176 java-time-format-DecimalStyle51177)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this51178] (.getLocale this51178)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this51179] (.toString this51179)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this51180 ^java.time.ZoneId java-time-ZoneId51181] (.withZone this51180 java-time-ZoneId51181)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this51182] (.getZone this51182)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle"] ["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle51183 ^java.time.format.FormatStyle java-time-format-FormatStyle51184] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle51183 java-time-format-FormatStyle51184)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle51185] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle51185)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this51186] (.getResolverFields this51186)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this51187] (.getChronology this51187)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [this51188 G__51189 G__51190] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__51189) (clojure.core/instance? (java.lang.Class/forName "java.text.ParsePosition") G__51190)) (clojure.core/let [G__51189 ^"java.lang.CharSequence" G__51189 G__51190 ^"java.text.ParsePosition" G__51190] (.parse ^java.time.format.DateTimeFormatter this51188 G__51189 G__51190)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__51189) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalQuery") G__51190)) (clojure.core/let [G__51189 ^"java.lang.CharSequence" G__51189 G__51190 ^"java.time.temporal.TemporalQuery" G__51190] (.parse ^java.time.format.DateTimeFormatter this51188 G__51189 G__51190)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this51191 ^java.lang.CharSequence java-lang-CharSequence51192] (.parse this51191 java-lang-CharSequence51192)))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this51193 ^java.util.Locale java-util-Locale51194] (.withLocale this51193 java-util-Locale51194)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this51195 G__51196] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.util.Set") G__51196)) (clojure.core/let [G__51196 ^"java.util.Set" G__51196] (.withResolverFields ^java.time.format.DateTimeFormatter this51195 G__51196)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "[Ljava.time.temporal.TemporalField;") G__51196)) (clojure.core/let [G__51196 ^"[Ljava.time.temporal.TemporalField;" G__51196] (.withResolverFields ^java.time.format.DateTimeFormatter this51195 G__51196)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this51197 ^java.lang.CharSequence java-lang-CharSequence51198 ^java.text.ParsePosition java-text-ParsePosition51199] (.parseUnresolved this51197 java-lang-CharSequence51198 java-text-ParsePosition51199)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle51200] (. java.time.format.DateTimeFormatter ofLocalizedTime java-time-format-FormatStyle51200)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle51201] (. java.time.format.DateTimeFormatter ofLocalizedDate java-time-format-FormatStyle51201)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this51202 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor51203] (.format this51202 java-time-temporal-TemporalAccessor51203)))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"] ["java.time.format.DateTimeFormatter"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this51204 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery51205] (.toFormat this51204 java-time-temporal-TemporalQuery51205)) (^java.text.Format [^java.time.format.DateTimeFormatter this51206] (.toFormat this51206)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this51207 ^java.time.format.ResolverStyle java-time-format-ResolverStyle51208] (.withResolverStyle this51207 java-time-format-ResolverStyle51208)))
