(ns cljc.java-time.format.text-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [TextStyle]]))
(def short (goog.object/get java.time.format.TextStyle "SHORT"))
(def full-standalone (goog.object/get java.time.format.TextStyle "FULL_STANDALONE"))
(def full (goog.object/get java.time.format.TextStyle "FULL"))
(def short-standalone (goog.object/get java.time.format.TextStyle "SHORT_STANDALONE"))
(def narrow (goog.object/get java.time.format.TextStyle "NARROW"))
(def narrow-standalone (goog.object/get java.time.format.TextStyle "NARROW_STANDALONE"))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.format.TextStyle "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.TextStyle [^java.lang.String java-lang-String6293] (js-invoke java.time.format.TextStyle "valueOf" java-lang-String6293)) (^java.lang.Enum [^java.lang.Class java-lang-Class6294 ^java.lang.String java-lang-String6295] (js-invoke java.time.format.TextStyle "valueOf" java-lang-Class6294 java-lang-String6295)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.TextStyle"]))} (^int [^js/JSJoda.TextStyle this6296] (.ordinal this6296)))
(clojure.core/defn as-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^js/JSJoda.TextStyle [^js/JSJoda.TextStyle this6297] (.asStandalone this6297)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^js/JSJoda.TextStyle this6298] (.toString this6298)))
(clojure.core/defn name {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^js/JSJoda.TextStyle this6299] (.name this6299)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Class [^js/JSJoda.TextStyle this6300] (.declaringClass this6300)))
(clojure.core/defn as-normal {:arglists (quote (["java.time.format.TextStyle"]))} (^js/JSJoda.TextStyle [^js/JSJoda.TextStyle this6301] (.asNormal this6301)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.TextStyle"]))} (^int [^js/JSJoda.TextStyle this6302] (.hashCode this6302)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.TextStyle" "java.lang.Enum"]))} (^int [^js/JSJoda.TextStyle this6303 ^java.lang.Enum java-lang-Enum6304] (.compareTo this6303 java-lang-Enum6304)))
(clojure.core/defn is-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^boolean [^js/JSJoda.TextStyle this6305] (.isStandalone this6305)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"]))} (^boolean [^js/JSJoda.TextStyle this6306 ^java.lang.Object java-lang-Object6307] (.equals this6306 java-lang-Object6307)))
