(ns cljc.java-time.format.text-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [TextStyle]]))
(def short (goog.object/get java.time.format.TextStyle "SHORT"))
(def full-standalone (goog.object/get java.time.format.TextStyle "FULL_STANDALONE"))
(def full (goog.object/get java.time.format.TextStyle "FULL"))
(def short-standalone (goog.object/get java.time.format.TextStyle "SHORT_STANDALONE"))
(def narrow (goog.object/get java.time.format.TextStyle "NARROW"))
(def narrow-standalone (goog.object/get java.time.format.TextStyle "NARROW_STANDALONE"))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.format.TextStyle "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.TextStyle [^java.lang.String java-lang-String61997] (js-invoke java.time.format.TextStyle "valueOf" java-lang-String61997)) (^java.lang.Enum [^java.lang.Class java-lang-Class61998 ^java.lang.String java-lang-String61999] (js-invoke java.time.format.TextStyle "valueOf" java-lang-Class61998 java-lang-String61999)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.TextStyle"]))} (^int [^js/JSJoda.TextStyle this62000] (.ordinal this62000)))
(clojure.core/defn as-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^js/JSJoda.TextStyle [^js/JSJoda.TextStyle this62001] (.asStandalone this62001)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^js/JSJoda.TextStyle this62002] (.toString this62002)))
(clojure.core/defn name {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^js/JSJoda.TextStyle this62003] (.name this62003)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Class [^js/JSJoda.TextStyle this62004] (.declaringClass this62004)))
(clojure.core/defn as-normal {:arglists (quote (["java.time.format.TextStyle"]))} (^js/JSJoda.TextStyle [^js/JSJoda.TextStyle this62005] (.asNormal this62005)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.TextStyle"]))} (^int [^js/JSJoda.TextStyle this62006] (.hashCode this62006)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"] ["java.time.format.TextStyle" "java.lang.Enum"]))} (^int [this62007 G__62008] (.compareTo ^js/JSJoda.TextStyle this62007 G__62008)))
(clojure.core/defn is-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^boolean [^js/JSJoda.TextStyle this62009] (.isStandalone this62009)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"]))} (^boolean [^js/JSJoda.TextStyle this62010 ^java.lang.Object java-lang-Object62011] (.equals this62010 java-lang-Object62011)))
