(ns cljc.java-time.format.text-style (:require [java.time.format :refer [TextStyle]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def short (. java.time.format.TextStyle -SHORT))
(def full-standalone (. java.time.format.TextStyle -FULL_STANDALONE))
(def full (. java.time.format.TextStyle -FULL))
(def short-standalone (. java.time.format.TextStyle -SHORT_STANDALONE))
(def narrow (. java.time.format.TextStyle -NARROW))
(def narrow-standalone (. java.time.format.TextStyle -NARROW_STANDALONE))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.format.TextStyle values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.TextStyle [^java.lang.String java-lang-String51506] (. java.time.format.TextStyle valueOf java-lang-String51506)) (^java.lang.Enum [^java.lang.Class java-lang-Class51507 ^java.lang.String java-lang-String51508] (. java.time.format.TextStyle valueOf java-lang-Class51507 java-lang-String51508)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Integer [^java.time.format.TextStyle this51509] (.ordinal this51509)))
(clojure.core/defn as-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^java.time.format.TextStyle [^java.time.format.TextStyle this51510] (.asStandalone this51510)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^java.time.format.TextStyle this51511] (.toString this51511)))
(clojure.core/defn name {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^java.time.format.TextStyle this51512] (.name this51512)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Class [^java.time.format.TextStyle this51513] (.declaringClass this51513)))
(clojure.core/defn as-normal {:arglists (quote (["java.time.format.TextStyle"]))} (^java.time.format.TextStyle [^java.time.format.TextStyle this51514] (.asNormal this51514)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Integer [^java.time.format.TextStyle this51515] (.hashCode this51515)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"] ["java.time.format.TextStyle" "java.lang.Enum"]))} (^java.lang.Integer [this51516 G__51517] (.compareTo ^java.time.format.TextStyle this51516 G__51517)))
(clojure.core/defn is-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Boolean [^java.time.format.TextStyle this51518] (.isStandalone this51518)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.TextStyle this51519 ^java.lang.Object java-lang-Object51520] (.equals this51519 java-lang-Object51520)))
