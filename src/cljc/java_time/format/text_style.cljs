(ns cljc.java-time.format.text-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [TextStyle]]))
(def short (. java.time.format.TextStyle -SHORT))
(def full-standalone (. java.time.format.TextStyle -FULL_STANDALONE))
(def full (. java.time.format.TextStyle -FULL))
(def short-standalone (. java.time.format.TextStyle -SHORT_STANDALONE))
(def narrow (. java.time.format.TextStyle -NARROW))
(def narrow-standalone (. java.time.format.TextStyle -NARROW_STANDALONE))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.format.TextStyle values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.TextStyle [^java.lang.String java-lang-String13514] (. java.time.format.TextStyle valueOf java-lang-String13514)) (^java.lang.Enum [^java.lang.Class java-lang-Class13515 ^java.lang.String java-lang-String13516] (. java.time.format.TextStyle valueOf java-lang-Class13515 java-lang-String13516)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Integer [^java.time.format.TextStyle this13517] (.ordinal this13517)))
(clojure.core/defn as-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^java.time.format.TextStyle [^java.time.format.TextStyle this13518] (.asStandalone this13518)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^java.time.format.TextStyle this13519] (.toString this13519)))
(clojure.core/defn name {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^java.time.format.TextStyle this13520] (.name this13520)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Class [^java.time.format.TextStyle this13521] (.declaringClass this13521)))
(clojure.core/defn as-normal {:arglists (quote (["java.time.format.TextStyle"]))} (^java.time.format.TextStyle [^java.time.format.TextStyle this13522] (.asNormal this13522)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Integer [^java.time.format.TextStyle this13523] (.hashCode this13523)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"] ["java.time.format.TextStyle" "java.lang.Enum"]))} (^java.lang.Integer [this13524 G__13525] (.compareTo ^java.time.format.TextStyle this13524 G__13525)))
(clojure.core/defn is-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Boolean [^java.time.format.TextStyle this13526] (.isStandalone this13526)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.TextStyle this13527 ^java.lang.Object java-lang-Object13528] (.equals this13527 java-lang-Object13528)))
