(ns cljc.java-time.format.text-style (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time.format :refer [TextStyle]]))
(def short (goog.object/get java.time.format.TextStyle "SHORT"))
(def full-standalone (goog.object/get java.time.format.TextStyle "FULL_STANDALONE"))
(def full (goog.object/get java.time.format.TextStyle "FULL"))
(def short-standalone (goog.object/get java.time.format.TextStyle "SHORT_STANDALONE"))
(def narrow (goog.object/get java.time.format.TextStyle "NARROW"))
(def narrow-standalone (goog.object/get java.time.format.TextStyle "NARROW_STANDALONE"))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.format.TextStyle "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.TextStyle [^java.lang.String java-lang-String16217] (js-invoke java.time.format.TextStyle "valueOf" java-lang-String16217)) (^java.lang.Enum [^java.lang.Class java-lang-Class16218 ^java.lang.String java-lang-String16219] (js-invoke java.time.format.TextStyle "valueOf" java-lang-Class16218 java-lang-String16219)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.TextStyle"]))} (^int [^js/JSJoda.TextStyle this16220] (.ordinal this16220)))
(clojure.core/defn as-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^js/JSJoda.TextStyle [^js/JSJoda.TextStyle this16221] (.asStandalone this16221)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^js/JSJoda.TextStyle this16222] (.toString this16222)))
(clojure.core/defn name {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^js/JSJoda.TextStyle this16223] (.name this16223)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Class [^js/JSJoda.TextStyle this16224] (.declaringClass this16224)))
(clojure.core/defn as-normal {:arglists (quote (["java.time.format.TextStyle"]))} (^js/JSJoda.TextStyle [^js/JSJoda.TextStyle this16225] (.asNormal this16225)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.TextStyle"]))} (^int [^js/JSJoda.TextStyle this16226] (.hashCode this16226)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.TextStyle" "java.lang.Enum"]))} (^int [^js/JSJoda.TextStyle this16227 ^java.lang.Enum java-lang-Enum16228] (.compareTo this16227 java-lang-Enum16228)))
(clojure.core/defn is-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^boolean [^js/JSJoda.TextStyle this16229] (.isStandalone this16229)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"]))} (^boolean [^js/JSJoda.TextStyle this16230 ^java.lang.Object java-lang-Object16231] (.equals this16230 java-lang-Object16231)))
