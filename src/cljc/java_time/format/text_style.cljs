(ns cljc.java-time.format.text-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [TextStyle]]))
(def short (goog.object/get java.time.format.TextStyle "SHORT"))
(def full-standalone (goog.object/get java.time.format.TextStyle "FULL_STANDALONE"))
(def full (goog.object/get java.time.format.TextStyle "FULL"))
(def short-standalone (goog.object/get java.time.format.TextStyle "SHORT_STANDALONE"))
(def narrow (goog.object/get java.time.format.TextStyle "NARROW"))
(def narrow-standalone (goog.object/get java.time.format.TextStyle "NARROW_STANDALONE"))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.format.TextStyle "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.TextStyle [^java.lang.String java-lang-String9349] (js-invoke java.time.format.TextStyle "valueOf" java-lang-String9349)) (^java.lang.Enum [^java.lang.Class java-lang-Class9350 ^java.lang.String java-lang-String9351] (js-invoke java.time.format.TextStyle "valueOf" java-lang-Class9350 java-lang-String9351)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.TextStyle"]))} (^int [^js/JSJoda.TextStyle this9352] (.ordinal this9352)))
(clojure.core/defn as-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^js/JSJoda.TextStyle [^js/JSJoda.TextStyle this9353] (.asStandalone this9353)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^js/JSJoda.TextStyle this9354] (.toString this9354)))
(clojure.core/defn name {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^js/JSJoda.TextStyle this9355] (.name this9355)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Class [^js/JSJoda.TextStyle this9356] (.declaringClass this9356)))
(clojure.core/defn as-normal {:arglists (quote (["java.time.format.TextStyle"]))} (^js/JSJoda.TextStyle [^js/JSJoda.TextStyle this9357] (.asNormal this9357)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.TextStyle"]))} (^int [^js/JSJoda.TextStyle this9358] (.hashCode this9358)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"] ["java.time.format.TextStyle" "java.lang.Enum"]))} (^int [this9359 G__9360] (.compareTo ^js/JSJoda.TextStyle this9359 G__9360)))
(clojure.core/defn is-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^boolean [^js/JSJoda.TextStyle this9361] (.isStandalone this9361)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"]))} (^boolean [^js/JSJoda.TextStyle this9362 ^java.lang.Object java-lang-Object9363] (.equals this9362 java-lang-Object9363)))
