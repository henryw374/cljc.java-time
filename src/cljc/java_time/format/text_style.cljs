(ns cljc.java-time.format.text-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time.format :refer [TextStyle]]))
(def short (goog.object/get java.time.format.TextStyle "SHORT"))
(def full-standalone (goog.object/get java.time.format.TextStyle "FULL_STANDALONE"))
(def full (goog.object/get java.time.format.TextStyle "FULL"))
(def short-standalone (goog.object/get java.time.format.TextStyle "SHORT_STANDALONE"))
(def narrow (goog.object/get java.time.format.TextStyle "NARROW"))
(def narrow-standalone (goog.object/get java.time.format.TextStyle "NARROW_STANDALONE"))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.format.TextStyle "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.TextStyle [^java.lang.String java-lang-String15838] (js-invoke java.time.format.TextStyle "valueOf" java-lang-String15838)) (^java.lang.Enum [^java.lang.Class java-lang-Class15839 ^java.lang.String java-lang-String15840] (js-invoke java.time.format.TextStyle "valueOf" java-lang-Class15839 java-lang-String15840)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.TextStyle"]))} (^int [^js/JSJoda.TextStyle this15841] (.ordinal this15841)))
(clojure.core/defn as-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^js/JSJoda.TextStyle [^js/JSJoda.TextStyle this15842] (.asStandalone this15842)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^js/JSJoda.TextStyle this15843] (.toString this15843)))
(clojure.core/defn name {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^js/JSJoda.TextStyle this15844] (.name this15844)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Class [^js/JSJoda.TextStyle this15845] (.declaringClass this15845)))
(clojure.core/defn as-normal {:arglists (quote (["java.time.format.TextStyle"]))} (^js/JSJoda.TextStyle [^js/JSJoda.TextStyle this15846] (.asNormal this15846)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.TextStyle"]))} (^int [^js/JSJoda.TextStyle this15847] (.hashCode this15847)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.TextStyle" "java.lang.Enum"]))} (^int [^js/JSJoda.TextStyle this15848 ^java.lang.Enum java-lang-Enum15849] (.compareTo this15848 java-lang-Enum15849)))
(clojure.core/defn is-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^boolean [^js/JSJoda.TextStyle this15850] (.isStandalone this15850)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"]))} (^boolean [^js/JSJoda.TextStyle this15851 ^java.lang.Object java-lang-Object15852] (.equals this15851 java-lang-Object15852)))
