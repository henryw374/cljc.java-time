(ns cljc.java-time.format.resolver-style (:import [java.time.format ResolverStyle]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def smart java.time.format.ResolverStyle/SMART)
(def strict java.time.format.ResolverStyle/STRICT)
(def lenient java.time.format.ResolverStyle/LENIENT)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.format.ResolverStyle values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.ResolverStyle [^java.lang.String java-lang-String51409] (. java.time.format.ResolverStyle valueOf java-lang-String51409)) (^java.lang.Enum [^java.lang.Class java-lang-Class51410 ^java.lang.String java-lang-String51411] (. java.time.format.ResolverStyle valueOf java-lang-Class51410 java-lang-String51411)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this51412] (.ordinal this51412)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this51413] (.toString this51413)))
(clojure.core/defn name {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this51414] (.name this51414)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Class [^java.time.format.ResolverStyle this51415] (.getDeclaringClass this51415)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this51416] (.hashCode this51416)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"] ["java.time.format.ResolverStyle" "java.lang.Enum"]))} (^java.lang.Integer [this51417 G__51418] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__51418)) (clojure.core/let [G__51418 ^"java.lang.Object" G__51418] (.compareTo ^java.time.format.ResolverStyle this51417 G__51418)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__51418)) (clojure.core/let [G__51418 ^"java.lang.Enum" G__51418] (.compareTo ^java.time.format.ResolverStyle this51417 G__51418)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn equals {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.ResolverStyle this51419 ^java.lang.Object java-lang-Object51420] (.equals this51419 java-lang-Object51420)))
