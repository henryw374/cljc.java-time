(ns cljc.java-time.format.resolver-style (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time.format ResolverStyle]))
(def smart (. java.time.format.ResolverStyle -SMART))
(def strict (. java.time.format.ResolverStyle -STRICT))
(def lenient (. java.time.format.ResolverStyle -LENIENT))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.format.ResolverStyle values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.ResolverStyle [^java.lang.String java-lang-String7697] (. java.time.format.ResolverStyle valueOf java-lang-String7697)) (^java.lang.Enum [^java.lang.Class java-lang-Class7698 ^java.lang.String java-lang-String7699] (. java.time.format.ResolverStyle valueOf java-lang-Class7698 java-lang-String7699)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this7700] (.ordinal this7700)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this7701] (.toString this7701)))
(clojure.core/defn name {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this7702] (.name this7702)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Class [^java.time.format.ResolverStyle this7703] (.getDeclaringClass this7703)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this7704] (.hashCode this7704)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"] ["java.time.format.ResolverStyle" "java.lang.Enum"]))} (^java.lang.Integer [this7705 G__7706] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7706)) (clojure.core/let [G__7706 ^"java.lang.Object" G__7706] (.compareTo ^java.time.format.ResolverStyle this7705 G__7706)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__7706)) (clojure.core/let [G__7706 ^"java.lang.Enum" G__7706] (.compareTo ^java.time.format.ResolverStyle this7705 G__7706)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn equals {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.ResolverStyle this7707 ^java.lang.Object java-lang-Object7708] (.equals this7707 java-lang-Object7708)))
