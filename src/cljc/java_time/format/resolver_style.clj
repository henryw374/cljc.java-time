(ns cljc.java-time.format.resolver-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format ResolverStyle]))
(def smart java.time.format.ResolverStyle/SMART)
(def strict java.time.format.ResolverStyle/STRICT)
(def lenient java.time.format.ResolverStyle/LENIENT)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.format.ResolverStyle/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.ResolverStyle [^java.lang.String java-lang-String6195] (java.time.format.ResolverStyle/valueOf java-lang-String6195)) (^java.lang.Enum [^java.lang.Class java-lang-Class6196 ^java.lang.String java-lang-String6197] (java.time.format.ResolverStyle/valueOf java-lang-Class6196 java-lang-String6197)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this6198] (.ordinal this6198)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this6199] (.toString this6199)))
(clojure.core/defn name {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this6200] (.name this6200)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Class [^java.time.format.ResolverStyle this6201] (.getDeclaringClass this6201)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this6202] (.hashCode this6202)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this6203 ^java.lang.Enum java-lang-Enum6204] (.compareTo this6203 java-lang-Enum6204)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.ResolverStyle this6205 ^java.lang.Object java-lang-Object6206] (.equals this6205 java-lang-Object6206)))
