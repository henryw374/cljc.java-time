(ns cljc.java-time.format.resolver-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format ResolverStyle]))
(def smart java.time.format.ResolverStyle/SMART)
(def strict java.time.format.ResolverStyle/STRICT)
(def lenient java.time.format.ResolverStyle/LENIENT)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.format.ResolverStyle/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.ResolverStyle [^java.lang.String java-lang-String9184] (java.time.format.ResolverStyle/valueOf java-lang-String9184)) (^java.lang.Enum [^java.lang.Class java-lang-Class9185 ^java.lang.String java-lang-String9186] (java.time.format.ResolverStyle/valueOf java-lang-Class9185 java-lang-String9186)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this9187] (.ordinal this9187)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this9188] (.toString this9188)))
(clojure.core/defn name {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this9189] (.name this9189)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Class [^java.time.format.ResolverStyle this9190] (.getDeclaringClass this9190)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this9191] (.hashCode this9191)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"] ["java.time.format.ResolverStyle" "java.lang.Enum"]))} (^java.lang.Integer [this9192 G__9193] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__9193)) (clojure.core/let [G__9193 ^"java.lang.Object" G__9193] (.compareTo ^java.time.format.ResolverStyle this9192 G__9193)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__9193)) (clojure.core/let [G__9193 ^"java.lang.Enum" G__9193] (.compareTo ^java.time.format.ResolverStyle this9192 G__9193)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn equals {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.ResolverStyle this9194 ^java.lang.Object java-lang-Object9195] (.equals this9194 java-lang-Object9195)))
