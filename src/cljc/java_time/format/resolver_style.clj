(ns cljc.java-time.format.resolver-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format ResolverStyle]))
(def smart java.time.format.ResolverStyle/SMART)
(def strict java.time.format.ResolverStyle/STRICT)
(def lenient java.time.format.ResolverStyle/LENIENT)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.format.ResolverStyle/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.ResolverStyle [^java.lang.String java-lang-String15741] (java.time.format.ResolverStyle/valueOf java-lang-String15741)) (^java.lang.Enum [^java.lang.Class java-lang-Class15742 ^java.lang.String java-lang-String15743] (java.time.format.ResolverStyle/valueOf java-lang-Class15742 java-lang-String15743)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this15744] (.ordinal this15744)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this15745] (.toString this15745)))
(clojure.core/defn name {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this15746] (.name this15746)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Class [^java.time.format.ResolverStyle this15747] (.getDeclaringClass this15747)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this15748] (.hashCode this15748)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this15749 ^java.lang.Enum java-lang-Enum15750] (.compareTo this15749 java-lang-Enum15750)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.ResolverStyle this15751 ^java.lang.Object java-lang-Object15752] (.equals this15751 java-lang-Object15752)))
