(ns cljc.java-time.format.decimal-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [DecimalStyle]]))
(def standard (goog.object/get java.time.format.DecimalStyle "STANDARD"))
(clojure.core/defn with-decimal-separator {:arglists (quote (["java.time.format.DecimalStyle" "char"]))} (^js/JSJoda.DecimalStyle [^js/JSJoda.DecimalStyle this9293 ^char char9294] (.withDecimalSeparator this9293 char9294)))
(clojure.core/defn of {:arglists (quote (["java.util.Locale"]))} (^js/JSJoda.DecimalStyle [^java.util.Locale java-util-Locale9295] (js-invoke java.time.format.DecimalStyle "of" java-util-Locale9295)))
(clojure.core/defn with-positive-sign {:arglists (quote (["java.time.format.DecimalStyle" "char"]))} (^js/JSJoda.DecimalStyle [^js/JSJoda.DecimalStyle this9296 ^char char9297] (.withPositiveSign this9296 char9297)))
(clojure.core/defn get-decimal-separator {:arglists (quote (["java.time.format.DecimalStyle"]))} (^char [^js/JSJoda.DecimalStyle this9298] (.decimalSeparator this9298)))
(clojure.core/defn of-default-locale {:arglists (quote ([]))} (^js/JSJoda.DecimalStyle [] (js-invoke java.time.format.DecimalStyle "ofDefaultLocale")))
(clojure.core/defn with-zero-digit {:arglists (quote (["java.time.format.DecimalStyle" "char"]))} (^js/JSJoda.DecimalStyle [^js/JSJoda.DecimalStyle this9299 ^char char9300] (.withZeroDigit this9299 char9300)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.String [^js/JSJoda.DecimalStyle this9301] (.toString this9301)))
(clojure.core/defn get-zero-digit {:arglists (quote (["java.time.format.DecimalStyle"]))} (^char [^js/JSJoda.DecimalStyle this9302] (.zeroDigit this9302)))
(clojure.core/defn with-negative-sign {:arglists (quote (["java.time.format.DecimalStyle" "char"]))} (^js/JSJoda.DecimalStyle [^js/JSJoda.DecimalStyle this9303 ^char char9304] (.withNegativeSign this9303 char9304)))
(clojure.core/defn get-available-locales {:arglists (quote ([]))} (^java.util.Set [] (js-invoke java.time.format.DecimalStyle "getAvailableLocales")))
(clojure.core/defn get-positive-sign {:arglists (quote (["java.time.format.DecimalStyle"]))} (^char [^js/JSJoda.DecimalStyle this9305] (.positiveSign this9305)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.DecimalStyle"]))} (^int [^js/JSJoda.DecimalStyle this9306] (.hashCode this9306)))
(clojure.core/defn get-negative-sign {:arglists (quote (["java.time.format.DecimalStyle"]))} (^char [^js/JSJoda.DecimalStyle this9307] (.negativeSign this9307)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.DecimalStyle" "java.lang.Object"]))} (^boolean [^js/JSJoda.DecimalStyle this9308 ^java.lang.Object java-lang-Object9309] (.equals this9308 java-lang-Object9309)))
