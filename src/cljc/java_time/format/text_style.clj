(ns cljc.java-time.format.text-style (:import [java.time.format TextStyle]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def short java.time.format.TextStyle/SHORT)
(def full-standalone java.time.format.TextStyle/FULL_STANDALONE)
(def full java.time.format.TextStyle/FULL)
(def short-standalone java.time.format.TextStyle/SHORT_STANDALONE)
(def narrow java.time.format.TextStyle/NARROW)
(def narrow-standalone java.time.format.TextStyle/NARROW_STANDALONE)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.format.TextStyle values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.TextStyle [^java.lang.String java-lang-String51491] (. java.time.format.TextStyle valueOf java-lang-String51491)) (^java.lang.Enum [^java.lang.Class java-lang-Class51492 ^java.lang.String java-lang-String51493] (. java.time.format.TextStyle valueOf java-lang-Class51492 java-lang-String51493)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Integer [^java.time.format.TextStyle this51494] (.ordinal this51494)))
(clojure.core/defn as-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^java.time.format.TextStyle [^java.time.format.TextStyle this51495] (.asStandalone this51495)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^java.time.format.TextStyle this51496] (.toString this51496)))
(clojure.core/defn name {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^java.time.format.TextStyle this51497] (.name this51497)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Class [^java.time.format.TextStyle this51498] (.getDeclaringClass this51498)))
(clojure.core/defn as-normal {:arglists (quote (["java.time.format.TextStyle"]))} (^java.time.format.TextStyle [^java.time.format.TextStyle this51499] (.asNormal this51499)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Integer [^java.time.format.TextStyle this51500] (.hashCode this51500)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"] ["java.time.format.TextStyle" "java.lang.Enum"]))} (^java.lang.Integer [this51501 G__51502] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__51502)) (clojure.core/let [G__51502 ^"java.lang.Object" G__51502] (.compareTo ^java.time.format.TextStyle this51501 G__51502)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__51502)) (clojure.core/let [G__51502 ^"java.lang.Enum" G__51502] (.compareTo ^java.time.format.TextStyle this51501 G__51502)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Boolean [^java.time.format.TextStyle this51503] (.isStandalone this51503)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.TextStyle this51504 ^java.lang.Object java-lang-Object51505] (.equals this51504 java-lang-Object51505)))
