(ns cljc.java-time.format.text-style (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time.format TextStyle]))
(def short (. java.time.format.TextStyle -SHORT))
(def full-standalone (. java.time.format.TextStyle -FULL_STANDALONE))
(def full (. java.time.format.TextStyle -FULL))
(def short-standalone (. java.time.format.TextStyle -SHORT_STANDALONE))
(def narrow (. java.time.format.TextStyle -NARROW))
(def narrow-standalone (. java.time.format.TextStyle -NARROW_STANDALONE))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.format.TextStyle values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.TextStyle [^java.lang.String java-lang-String7738] (. java.time.format.TextStyle valueOf java-lang-String7738)) (^java.lang.Enum [^java.lang.Class java-lang-Class7739 ^java.lang.String java-lang-String7740] (. java.time.format.TextStyle valueOf java-lang-Class7739 java-lang-String7740)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Integer [^java.time.format.TextStyle this7741] (.ordinal this7741)))
(clojure.core/defn as-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^java.time.format.TextStyle [^java.time.format.TextStyle this7742] (.asStandalone this7742)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^java.time.format.TextStyle this7743] (.toString this7743)))
(clojure.core/defn name {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^java.time.format.TextStyle this7744] (.name this7744)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Class [^java.time.format.TextStyle this7745] (.getDeclaringClass this7745)))
(clojure.core/defn as-normal {:arglists (quote (["java.time.format.TextStyle"]))} (^java.time.format.TextStyle [^java.time.format.TextStyle this7746] (.asNormal this7746)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Integer [^java.time.format.TextStyle this7747] (.hashCode this7747)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"] ["java.time.format.TextStyle" "java.lang.Enum"]))} (^java.lang.Integer [this7748 G__7749] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7749)) (clojure.core/let [G__7749 ^"java.lang.Object" G__7749] (.compareTo ^java.time.format.TextStyle this7748 G__7749)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__7749)) (clojure.core/let [G__7749 ^"java.lang.Enum" G__7749] (.compareTo ^java.time.format.TextStyle this7748 G__7749)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Boolean [^java.time.format.TextStyle this7750] (.isStandalone this7750)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.TextStyle this7751 ^java.lang.Object java-lang-Object7752] (.equals this7751 java-lang-Object7752)))
