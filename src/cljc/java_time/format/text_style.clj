(ns cljc.java-time.format.text-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format TextStyle]))
(def short java.time.format.TextStyle/SHORT)
(def full-standalone java.time.format.TextStyle/FULL_STANDALONE)
(def full java.time.format.TextStyle/FULL)
(def short-standalone java.time.format.TextStyle/SHORT_STANDALONE)
(def narrow java.time.format.TextStyle/NARROW)
(def narrow-standalone java.time.format.TextStyle/NARROW_STANDALONE)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.format.TextStyle/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.TextStyle [^java.lang.String java-lang-String9266] (java.time.format.TextStyle/valueOf java-lang-String9266)) (^java.lang.Enum [^java.lang.Class java-lang-Class9267 ^java.lang.String java-lang-String9268] (java.time.format.TextStyle/valueOf java-lang-Class9267 java-lang-String9268)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Integer [^java.time.format.TextStyle this9269] (.ordinal this9269)))
(clojure.core/defn as-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^java.time.format.TextStyle [^java.time.format.TextStyle this9270] (.asStandalone this9270)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^java.time.format.TextStyle this9271] (.toString this9271)))
(clojure.core/defn name {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^java.time.format.TextStyle this9272] (.name this9272)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Class [^java.time.format.TextStyle this9273] (.getDeclaringClass this9273)))
(clojure.core/defn as-normal {:arglists (quote (["java.time.format.TextStyle"]))} (^java.time.format.TextStyle [^java.time.format.TextStyle this9274] (.asNormal this9274)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Integer [^java.time.format.TextStyle this9275] (.hashCode this9275)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"] ["java.time.format.TextStyle" "java.lang.Enum"]))} (^java.lang.Integer [this9276 G__9277] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__9277)) (clojure.core/let [G__9277 ^"java.lang.Object" G__9277] (.compareTo ^java.time.format.TextStyle this9276 G__9277)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__9277)) (clojure.core/let [G__9277 ^"java.lang.Enum" G__9277] (.compareTo ^java.time.format.TextStyle this9276 G__9277)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Boolean [^java.time.format.TextStyle this9278] (.isStandalone this9278)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.TextStyle this9279 ^java.lang.Object java-lang-Object9280] (.equals this9279 java-lang-Object9280)))
