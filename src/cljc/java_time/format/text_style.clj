(ns cljc.java-time.format.text-style (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format TextStyle]))
(def short java.time.format.TextStyle/SHORT)
(def full-standalone java.time.format.TextStyle/FULL_STANDALONE)
(def full java.time.format.TextStyle/FULL)
(def short-standalone java.time.format.TextStyle/SHORT_STANDALONE)
(def narrow java.time.format.TextStyle/NARROW)
(def narrow-standalone java.time.format.TextStyle/NARROW_STANDALONE)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.format.TextStyle/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.TextStyle [^java.lang.String java-lang-String16202] (java.time.format.TextStyle/valueOf java-lang-String16202)) (^java.lang.Enum [^java.lang.Class java-lang-Class16203 ^java.lang.String java-lang-String16204] (java.time.format.TextStyle/valueOf java-lang-Class16203 java-lang-String16204)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Integer [^java.time.format.TextStyle this16205] (.ordinal this16205)))
(clojure.core/defn as-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^java.time.format.TextStyle [^java.time.format.TextStyle this16206] (.asStandalone this16206)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^java.time.format.TextStyle this16207] (.toString this16207)))
(clojure.core/defn name {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.String [^java.time.format.TextStyle this16208] (.name this16208)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Class [^java.time.format.TextStyle this16209] (.getDeclaringClass this16209)))
(clojure.core/defn as-normal {:arglists (quote (["java.time.format.TextStyle"]))} (^java.time.format.TextStyle [^java.time.format.TextStyle this16210] (.asNormal this16210)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Integer [^java.time.format.TextStyle this16211] (.hashCode this16211)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.TextStyle" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.format.TextStyle this16212 ^java.lang.Enum java-lang-Enum16213] (.compareTo this16212 java-lang-Enum16213)))
(clojure.core/defn is-standalone {:arglists (quote (["java.time.format.TextStyle"]))} (^java.lang.Boolean [^java.time.format.TextStyle this16214] (.isStandalone this16214)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.TextStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.TextStyle this16215 ^java.lang.Object java-lang-Object16216] (.equals this16215 java-lang-Object16216)))
