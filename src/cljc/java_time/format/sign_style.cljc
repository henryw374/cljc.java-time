(ns cljc.java-time.format.sign-style (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.format :refer [SignStyle]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.format SignStyle])))
(def exceeds-pad #? (:clj java.time.format.SignStyle/EXCEEDS_PAD :cljs (. java.time.format.SignStyle -EXCEEDS_PAD)))
(def normal #? (:clj java.time.format.SignStyle/NORMAL :cljs (. java.time.format.SignStyle -NORMAL)))
(def always #? (:clj java.time.format.SignStyle/ALWAYS :cljs (. java.time.format.SignStyle -ALWAYS)))
(def never #? (:clj java.time.format.SignStyle/NEVER :cljs (. java.time.format.SignStyle -NEVER)))
(def not-negative #? (:clj java.time.format.SignStyle/NOT_NEGATIVE :cljs (. java.time.format.SignStyle -NOT_NEGATIVE)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.format.SignStyle values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.SignStyle [^java.lang.String java-lang-String13810] (. java.time.format.SignStyle valueOf java-lang-String13810)) (^java.lang.Enum [^java.lang.Class java-lang-Class13811 ^java.lang.String java-lang-String13812] (. java.time.format.SignStyle valueOf java-lang-Class13811 java-lang-String13812)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this13813] (.ordinal this13813)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this13814] (.toString this13814)))
(clojure.core/defn name {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this13815] (.name this13815)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Class [^java.time.format.SignStyle this13816] (jti/getter declaringClass this13816)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this13817] (.hashCode this13817)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"] ["java.time.format.SignStyle" "java.lang.Enum"]))} (^java.lang.Integer [this13818 G__13819] #? (:cljs (.compareTo ^java.time.format.SignStyle this13818 G__13819) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13819)) (clojure.core/let [G__13819 ^"java.lang.Object" G__13819] (.compareTo ^java.time.format.SignStyle this13818 G__13819)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__13819)) (clojure.core/let [G__13819 ^"java.lang.Enum" G__13819] (.compareTo ^java.time.format.SignStyle this13818 G__13819)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn equals {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.SignStyle this13820 ^java.lang.Object java-lang-Object13821] (.equals this13820 java-lang-Object13821)))
