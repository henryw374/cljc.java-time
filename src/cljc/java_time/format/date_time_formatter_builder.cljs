(ns cljc.java-time.format.date-time-formatter-builder (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [DateTimeFormatterBuilder]]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"] ["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatterBuilder this9107 ^java.util.Locale java-util-Locale9108] (.toFormatter this9107 java-util-Locale9108)) (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatterBuilder this9109] (.toFormatter this9109)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9110 ^java.lang.String java-lang-String9111] (.appendPattern this9110 java-lang-String9111)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9112 ^js/JSJoda.TemporalField java-time-temporal-TemporalField9113 ^int int9114] (.appendValue this9112 java-time-temporal-TemporalField9113 int9114)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9115 ^js/JSJoda.TemporalField java-time-temporal-TemporalField9116 ^int int9117 ^int int9118 ^js/JSJoda.SignStyle java-time-format-SignStyle9119] (.appendValue this9115 java-time-temporal-TemporalField9116 int9117 int9118 java-time-format-SignStyle9119)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9120 ^js/JSJoda.TemporalField java-time-temporal-TemporalField9121] (.appendValue this9120 java-time-temporal-TemporalField9121)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9122 ^int int9123] (.appendInstant this9122 int9123)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9124] (.appendInstant this9124)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "char"] ["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^js/JSJoda.DateTimeFormatterBuilder [this9125 G__9126] (.appendLiteral ^js/JSJoda.DateTimeFormatterBuilder this9125 G__9126)))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9127] (.optionalStart this9127)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9128 ^js/JSJoda.TemporalField java-time-temporal-TemporalField9129 ^int int9130 ^int int9131 ^boolean boolean9132] (.appendFraction this9128 java-time-temporal-TemporalField9129 int9130 int9131 boolean9132)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9133 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter9134] (.appendOptional this9133 java-time-format-DateTimeFormatter9134)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9135] (.optionalEnd this9135)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9136] (.parseLenient this9136)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int" "char"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9137 ^int int9138 ^char char9139] (.padNext this9137 int9138 char9139)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9140 ^int int9141] (.padNext this9140 int9141)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9142] (.appendChronologyId this9142)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9143] (.appendZoneOrOffsetId this9143)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9144] (.parseCaseSensitive this9144)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9145] (.parseStrict this9145)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9146 ^js/JSJoda.TextStyle java-time-format-TextStyle9147] (.appendChronologyText this9146 java-time-format-TextStyle9147)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9148] (.appendOffsetId this9148)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9149] (.appendZoneRegionId this9149)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9150 ^js/JSJoda.TemporalField java-time-temporal-TemporalField9151 ^long long9152] (.parseDefaulting this9150 java-time-temporal-TemporalField9151 long9152)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9153] (.appendZoneId this9153)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.FormatStyle java-time-format-FormatStyle9154 ^js/JSJoda.FormatStyle java-time-format-FormatStyle9155 ^js/JSJoda.Chronology java-time-chrono-Chronology9156 ^java.util.Locale java-util-Locale9157] (js-invoke java.time.format.DateTimeFormatterBuilder "getLocalizedDateTimePattern" java-time-format-FormatStyle9154 java-time-format-FormatStyle9155 java-time-chrono-Chronology9156 java-util-Locale9157)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9158] (.parseCaseInsensitive this9158)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9159 ^js/JSJoda.TextStyle java-time-format-TextStyle9160] (.appendLocalizedOffset this9159 java-time-format-TextStyle9160)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9161 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter9162] (.append this9161 java-time-format-DateTimeFormatter9162)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"]))} (^js/JSJoda.DateTimeFormatterBuilder [this9163 G__9164 G__9165] (.appendText ^js/JSJoda.DateTimeFormatterBuilder this9163 G__9164 G__9165)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9166 ^js/JSJoda.TemporalField java-time-temporal-TemporalField9167] (.appendText this9166 java-time-temporal-TemporalField9167)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9168 ^js/JSJoda.FormatStyle java-time-format-FormatStyle9169 ^js/JSJoda.FormatStyle java-time-format-FormatStyle9170] (.appendLocalized this9168 java-time-format-FormatStyle9169 java-time-format-FormatStyle9170)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9171 ^java.lang.String java-lang-String9172 ^java.lang.String java-lang-String9173] (.appendOffset this9171 java-lang-String9172 java-lang-String9173)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^js/JSJoda.DateTimeFormatterBuilder [this9174 G__9175 G__9176 G__9177 G__9178] (.appendValueReduced ^js/JSJoda.DateTimeFormatterBuilder this9174 G__9175 G__9176 G__9177 G__9178)))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9179 ^js/JSJoda.TextStyle java-time-format-TextStyle9180 ^java.util.Set java-util-Set9181] (.appendZoneText this9179 java-time-format-TextStyle9180 java-util-Set9181)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this9182 ^js/JSJoda.TextStyle java-time-format-TextStyle9183] (.appendZoneText this9182 java-time-format-TextStyle9183)))
