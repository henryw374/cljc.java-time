(ns cljc.java-time.format.date-time-formatter-builder (:require [java.time.format :refer [DateTimeFormatterBuilder]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this51332] (.toFormatter this51332)) (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this51333 ^java.util.Locale java-util-Locale51334] (.toFormatter this51333 java-util-Locale51334)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51335 ^java.lang.String java-lang-String51336] (.appendPattern this51335 java-lang-String51336)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51337 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51338 ^java.lang.Integer int51339 ^java.lang.Integer int51340 ^java.time.format.SignStyle java-time-format-SignStyle51341] (.appendValue this51337 java-time-temporal-TemporalField51338 int51339 int51340 java-time-format-SignStyle51341)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51342 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51343 ^java.lang.Integer int51344] (.appendValue this51342 java-time-temporal-TemporalField51343 int51344)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51345 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51346] (.appendValue this51345 java-time-temporal-TemporalField51346)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51347] (.appendInstant this51347)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51348 ^java.lang.Integer int51349] (.appendInstant this51348 int51349)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "char"] ["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [this51350 G__51351] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this51350 G__51351)))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51352] (.optionalStart this51352)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51353 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51354 ^java.lang.Integer int51355 ^java.lang.Integer int51356 ^java.lang.Boolean boolean51357] (.appendFraction this51353 java-time-temporal-TemporalField51354 int51355 int51356 boolean51357)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51358 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter51359] (.appendOptional this51358 java-time-format-DateTimeFormatter51359)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51360] (.optionalEnd this51360)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51361] (.parseLenient this51361)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder" "int" "char"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51362 ^java.lang.Integer int51363] (.padNext this51362 int51363)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51364 ^java.lang.Integer int51365 ^java.lang.Character char51366] (.padNext this51364 int51365 char51366)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51367] (.appendChronologyId this51367)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51368] (.appendZoneOrOffsetId this51368)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51369] (.parseCaseSensitive this51369)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51370] (.parseStrict this51370)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51371 ^java.time.format.TextStyle java-time-format-TextStyle51372] (.appendChronologyText this51371 java-time-format-TextStyle51372)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51373] (.appendOffsetId this51373)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51374] (.appendZoneRegionId this51374)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51375 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51376 ^long long51377] (.parseDefaulting this51375 java-time-temporal-TemporalField51376 long51377)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51378] (.appendZoneId this51378)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^java.time.format.FormatStyle java-time-format-FormatStyle51379 ^java.time.format.FormatStyle java-time-format-FormatStyle51380 ^java.time.chrono.Chronology java-time-chrono-Chronology51381 ^java.util.Locale java-util-Locale51382] (. java.time.format.DateTimeFormatterBuilder getLocalizedDateTimePattern java-time-format-FormatStyle51379 java-time-format-FormatStyle51380 java-time-chrono-Chronology51381 java-util-Locale51382)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51383] (.parseCaseInsensitive this51383)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51384 ^java.time.format.TextStyle java-time-format-TextStyle51385] (.appendLocalizedOffset this51384 java-time-format-TextStyle51385)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51386 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter51387] (.append this51386 java-time-format-DateTimeFormatter51387)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^java.time.format.DateTimeFormatterBuilder [this51388 G__51389 G__51390] (.appendText ^java.time.format.DateTimeFormatterBuilder this51388 G__51389 G__51390)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51391 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51392] (.appendText this51391 java-time-temporal-TemporalField51392)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51393 ^java.time.format.FormatStyle java-time-format-FormatStyle51394 ^java.time.format.FormatStyle java-time-format-FormatStyle51395] (.appendLocalized this51393 java-time-format-FormatStyle51394 java-time-format-FormatStyle51395)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51396 ^java.lang.String java-lang-String51397 ^java.lang.String java-lang-String51398] (.appendOffset this51396 java-lang-String51397 java-lang-String51398)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"]))} (^java.time.format.DateTimeFormatterBuilder [this51399 G__51400 G__51401 G__51402 G__51403] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this51399 G__51400 G__51401 G__51402 G__51403)))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51404 ^java.time.format.TextStyle java-time-format-TextStyle51405] (.appendZoneText this51404 java-time-format-TextStyle51405)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51406 ^java.time.format.TextStyle java-time-format-TextStyle51407 ^java.util.Set java-util-Set51408] (.appendZoneText this51406 java-time-format-TextStyle51407 java-util-Set51408)))
