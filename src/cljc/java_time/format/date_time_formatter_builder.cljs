(ns cljc.java-time.format.date-time-formatter-builder (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [DateTimeFormatterBuilder]]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"] ["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatterBuilder this6118 ^java.util.Locale java-util-Locale6119] (.toFormatter this6118 java-util-Locale6119)) (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatterBuilder this6120] (.toFormatter this6120)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6121 ^java.lang.String java-lang-String6122] (.appendPattern this6121 java-lang-String6122)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6123 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6124 ^int int6125 ^int int6126 ^js/JSJoda.SignStyle java-time-format-SignStyle6127] (.appendValue this6123 java-time-temporal-TemporalField6124 int6125 int6126 java-time-format-SignStyle6127)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6128 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6129 ^int int6130] (.appendValue this6128 java-time-temporal-TemporalField6129 int6130)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6131 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6132] (.appendValue this6131 java-time-temporal-TemporalField6132)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6133 ^int int6134] (.appendInstant this6133 int6134)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6135] (.appendInstant this6135)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"] ["java.time.format.DateTimeFormatterBuilder" "char"]))} (^js/JSJoda.DateTimeFormatterBuilder [this6136 G__6137] (.appendLiteral ^js/JSJoda.DateTimeFormatterBuilder this6136 G__6137)))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6138] (.optionalStart this6138)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6139 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6140 ^int int6141 ^int int6142 ^boolean boolean6143] (.appendFraction this6139 java-time-temporal-TemporalField6140 int6141 int6142 boolean6143)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6144 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6145] (.appendOptional this6144 java-time-format-DateTimeFormatter6145)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6146] (.optionalEnd this6146)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6147] (.parseLenient this6147)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int" "char"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6148 ^int int6149 ^char char6150] (.padNext this6148 int6149 char6150)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6151 ^int int6152] (.padNext this6151 int6152)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6153] (.appendChronologyId this6153)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6154] (.appendZoneOrOffsetId this6154)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6155] (.parseCaseSensitive this6155)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6156] (.parseStrict this6156)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6157 ^js/JSJoda.TextStyle java-time-format-TextStyle6158] (.appendChronologyText this6157 java-time-format-TextStyle6158)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6159] (.appendOffsetId this6159)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6160] (.appendZoneRegionId this6160)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6161 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6162 ^long long6163] (.parseDefaulting this6161 java-time-temporal-TemporalField6162 long6163)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6164] (.appendZoneId this6164)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.FormatStyle java-time-format-FormatStyle6165 ^js/JSJoda.FormatStyle java-time-format-FormatStyle6166 ^js/JSJoda.Chronology java-time-chrono-Chronology6167 ^java.util.Locale java-util-Locale6168] (js-invoke java.time.format.DateTimeFormatterBuilder "getLocalizedDateTimePattern" java-time-format-FormatStyle6165 java-time-format-FormatStyle6166 java-time-chrono-Chronology6167 java-util-Locale6168)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6169] (.parseCaseInsensitive this6169)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6170 ^js/JSJoda.TextStyle java-time-format-TextStyle6171] (.appendLocalizedOffset this6170 java-time-format-TextStyle6171)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6172 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6173] (.append this6172 java-time-format-DateTimeFormatter6173)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^js/JSJoda.DateTimeFormatterBuilder [this6174 G__6175 G__6176] (.appendText ^js/JSJoda.DateTimeFormatterBuilder this6174 G__6175 G__6176)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6177 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6178] (.appendText this6177 java-time-temporal-TemporalField6178)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6179 ^js/JSJoda.FormatStyle java-time-format-FormatStyle6180 ^js/JSJoda.FormatStyle java-time-format-FormatStyle6181] (.appendLocalized this6179 java-time-format-FormatStyle6180 java-time-format-FormatStyle6181)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6182 ^java.lang.String java-lang-String6183 ^java.lang.String java-lang-String6184] (.appendOffset this6182 java-lang-String6183 java-lang-String6184)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^js/JSJoda.DateTimeFormatterBuilder [this6185 G__6186 G__6187 G__6188 G__6189] (.appendValueReduced ^js/JSJoda.DateTimeFormatterBuilder this6185 G__6186 G__6187 G__6188 G__6189)))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6190 ^js/JSJoda.TextStyle java-time-format-TextStyle6191 ^java.util.Set java-util-Set6192] (.appendZoneText this6190 java-time-format-TextStyle6191 java-util-Set6192)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6193 ^js/JSJoda.TextStyle java-time-format-TextStyle6194] (.appendZoneText this6193 java-time-format-TextStyle6194)))
