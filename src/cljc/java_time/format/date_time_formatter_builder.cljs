(ns cljc.java-time.format.date-time-formatter-builder (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [DateTimeFormatterBuilder]]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this13340] (.toFormatter this13340)) (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this13341 ^java.util.Locale java-util-Locale13342] (.toFormatter this13341 java-util-Locale13342)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13343 ^java.lang.String java-lang-String13344] (.appendPattern this13343 java-lang-String13344)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13345 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13346 ^java.lang.Integer int13347 ^java.lang.Integer int13348 ^java.time.format.SignStyle java-time-format-SignStyle13349] (.appendValue this13345 java-time-temporal-TemporalField13346 int13347 int13348 java-time-format-SignStyle13349)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13350 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13351] (.appendValue this13350 java-time-temporal-TemporalField13351)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13352 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13353 ^java.lang.Integer int13354] (.appendValue this13352 java-time-temporal-TemporalField13353 int13354)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13355 ^java.lang.Integer int13356] (.appendInstant this13355 int13356)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13357] (.appendInstant this13357)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "char"] ["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [this13358 G__13359] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this13358 G__13359)))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13360] (.optionalStart this13360)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13361 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13362 ^java.lang.Integer int13363 ^java.lang.Integer int13364 ^java.lang.Boolean boolean13365] (.appendFraction this13361 java-time-temporal-TemporalField13362 int13363 int13364 boolean13365)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13366 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13367] (.appendOptional this13366 java-time-format-DateTimeFormatter13367)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13368] (.optionalEnd this13368)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13369] (.parseLenient this13369)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int" "char"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13370 ^java.lang.Integer int13371 ^java.lang.Character char13372] (.padNext this13370 int13371 char13372)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13373 ^java.lang.Integer int13374] (.padNext this13373 int13374)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13375] (.appendChronologyId this13375)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13376] (.appendZoneOrOffsetId this13376)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13377] (.parseCaseSensitive this13377)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13378] (.parseStrict this13378)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13379 ^java.time.format.TextStyle java-time-format-TextStyle13380] (.appendChronologyText this13379 java-time-format-TextStyle13380)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13381] (.appendOffsetId this13381)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13382] (.appendZoneRegionId this13382)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13383 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13384 ^long long13385] (.parseDefaulting this13383 java-time-temporal-TemporalField13384 long13385)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13386] (.appendZoneId this13386)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^java.time.format.FormatStyle java-time-format-FormatStyle13387 ^java.time.format.FormatStyle java-time-format-FormatStyle13388 ^java.time.chrono.Chronology java-time-chrono-Chronology13389 ^java.util.Locale java-util-Locale13390] (. java.time.format.DateTimeFormatterBuilder getLocalizedDateTimePattern java-time-format-FormatStyle13387 java-time-format-FormatStyle13388 java-time-chrono-Chronology13389 java-util-Locale13390)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13391] (.parseCaseInsensitive this13391)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13392 ^java.time.format.TextStyle java-time-format-TextStyle13393] (.appendLocalizedOffset this13392 java-time-format-TextStyle13393)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13394 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13395] (.append this13394 java-time-format-DateTimeFormatter13395)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"]))} (^java.time.format.DateTimeFormatterBuilder [this13396 G__13397 G__13398] (.appendText ^java.time.format.DateTimeFormatterBuilder this13396 G__13397 G__13398)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13399 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13400] (.appendText this13399 java-time-temporal-TemporalField13400)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13401 ^java.time.format.FormatStyle java-time-format-FormatStyle13402 ^java.time.format.FormatStyle java-time-format-FormatStyle13403] (.appendLocalized this13401 java-time-format-FormatStyle13402 java-time-format-FormatStyle13403)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13404 ^java.lang.String java-lang-String13405 ^java.lang.String java-lang-String13406] (.appendOffset this13404 java-lang-String13405 java-lang-String13406)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^java.time.format.DateTimeFormatterBuilder [this13407 G__13408 G__13409 G__13410 G__13411] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this13407 G__13408 G__13409 G__13410 G__13411)))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13412 ^java.time.format.TextStyle java-time-format-TextStyle13413 ^java.util.Set java-util-Set13414] (.appendZoneText this13412 java-time-format-TextStyle13413 java-util-Set13414)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13415 ^java.time.format.TextStyle java-time-format-TextStyle13416] (.appendZoneText this13415 java-time-format-TextStyle13416)))
