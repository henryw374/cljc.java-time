(ns cljc.java-time.format.date-time-formatter-builder (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [DateTimeFormatterBuilder]]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatterBuilder this61823] (.toFormatter this61823)) (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatterBuilder this61824 ^java.util.Locale java-util-Locale61825] (.toFormatter this61824 java-util-Locale61825)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61826 ^java.lang.String java-lang-String61827] (.appendPattern this61826 java-lang-String61827)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61828 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61829 ^int int61830 ^int int61831 ^js/JSJoda.SignStyle java-time-format-SignStyle61832] (.appendValue this61828 java-time-temporal-TemporalField61829 int61830 int61831 java-time-format-SignStyle61832)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61833 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61834] (.appendValue this61833 java-time-temporal-TemporalField61834)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61835 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61836 ^int int61837] (.appendValue this61835 java-time-temporal-TemporalField61836 int61837)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61838 ^int int61839] (.appendInstant this61838 int61839)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61840] (.appendInstant this61840)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "char"] ["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^js/JSJoda.DateTimeFormatterBuilder [this61841 G__61842] (.appendLiteral ^js/JSJoda.DateTimeFormatterBuilder this61841 G__61842)))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61843] (.optionalStart this61843)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61844 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61845 ^int int61846 ^int int61847 ^boolean boolean61848] (.appendFraction this61844 java-time-temporal-TemporalField61845 int61846 int61847 boolean61848)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61849 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter61850] (.appendOptional this61849 java-time-format-DateTimeFormatter61850)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61851] (.optionalEnd this61851)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61852] (.parseLenient this61852)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int" "char"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61853 ^int int61854 ^char char61855] (.padNext this61853 int61854 char61855)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61856 ^int int61857] (.padNext this61856 int61857)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61858] (.appendChronologyId this61858)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61859] (.appendZoneOrOffsetId this61859)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61860] (.parseCaseSensitive this61860)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61861] (.parseStrict this61861)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61862 ^js/JSJoda.TextStyle java-time-format-TextStyle61863] (.appendChronologyText this61862 java-time-format-TextStyle61863)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61864] (.appendOffsetId this61864)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61865] (.appendZoneRegionId this61865)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61866 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61867 ^long long61868] (.parseDefaulting this61866 java-time-temporal-TemporalField61867 long61868)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61869] (.appendZoneId this61869)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.FormatStyle java-time-format-FormatStyle61870 ^js/JSJoda.FormatStyle java-time-format-FormatStyle61871 ^js/JSJoda.Chronology java-time-chrono-Chronology61872 ^java.util.Locale java-util-Locale61873] (js-invoke java.time.format.DateTimeFormatterBuilder "getLocalizedDateTimePattern" java-time-format-FormatStyle61870 java-time-format-FormatStyle61871 java-time-chrono-Chronology61872 java-util-Locale61873)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61874] (.parseCaseInsensitive this61874)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61875 ^js/JSJoda.TextStyle java-time-format-TextStyle61876] (.appendLocalizedOffset this61875 java-time-format-TextStyle61876)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61877 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter61878] (.append this61877 java-time-format-DateTimeFormatter61878)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"]))} (^js/JSJoda.DateTimeFormatterBuilder [this61879 G__61880 G__61881] (.appendText ^js/JSJoda.DateTimeFormatterBuilder this61879 G__61880 G__61881)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61882 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61883] (.appendText this61882 java-time-temporal-TemporalField61883)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61884 ^js/JSJoda.FormatStyle java-time-format-FormatStyle61885 ^js/JSJoda.FormatStyle java-time-format-FormatStyle61886] (.appendLocalized this61884 java-time-format-FormatStyle61885 java-time-format-FormatStyle61886)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61887 ^java.lang.String java-lang-String61888 ^java.lang.String java-lang-String61889] (.appendOffset this61887 java-lang-String61888 java-lang-String61889)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^js/JSJoda.DateTimeFormatterBuilder [this61890 G__61891 G__61892 G__61893 G__61894] (.appendValueReduced ^js/JSJoda.DateTimeFormatterBuilder this61890 G__61891 G__61892 G__61893 G__61894)))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61895 ^js/JSJoda.TextStyle java-time-format-TextStyle61896 ^java.util.Set java-util-Set61897] (.appendZoneText this61895 java-time-format-TextStyle61896 java-util-Set61897)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this61898 ^js/JSJoda.TextStyle java-time-format-TextStyle61899] (.appendZoneText this61898 java-time-format-TextStyle61899)))
