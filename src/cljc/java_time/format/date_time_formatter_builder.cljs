(ns cljc.java-time.format.date-time-formatter-builder (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time.format :refer [DateTimeFormatterBuilder]]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"] ["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatterBuilder this15664 ^java.util.Locale java-util-Locale15665] (.toFormatter this15664 java-util-Locale15665)) (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatterBuilder this15666] (.toFormatter this15666)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15667 ^java.lang.String java-lang-String15668] (.appendPattern this15667 java-lang-String15668)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15669 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15670 ^int int15671 ^int int15672 ^js/JSJoda.SignStyle java-time-format-SignStyle15673] (.appendValue this15669 java-time-temporal-TemporalField15670 int15671 int15672 java-time-format-SignStyle15673)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15674 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15675] (.appendValue this15674 java-time-temporal-TemporalField15675)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15676 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15677 ^int int15678] (.appendValue this15676 java-time-temporal-TemporalField15677 int15678)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15679 ^int int15680] (.appendInstant this15679 int15680)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15681] (.appendInstant this15681)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"] ["java.time.format.DateTimeFormatterBuilder" "char"]))} (^js/JSJoda.DateTimeFormatterBuilder [this15682 G__15683] (.appendLiteral ^js/JSJoda.DateTimeFormatterBuilder this15682 G__15683)))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15684] (.optionalStart this15684)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15685 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15686 ^int int15687 ^int int15688 ^boolean boolean15689] (.appendFraction this15685 java-time-temporal-TemporalField15686 int15687 int15688 boolean15689)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15690 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter15691] (.appendOptional this15690 java-time-format-DateTimeFormatter15691)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15692] (.optionalEnd this15692)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15693] (.parseLenient this15693)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder" "int" "char"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15694 ^int int15695] (.padNext this15694 int15695)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15696 ^int int15697 ^char char15698] (.padNext this15696 int15697 char15698)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15699] (.appendChronologyId this15699)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15700] (.appendZoneOrOffsetId this15700)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15701] (.parseCaseSensitive this15701)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15702] (.parseStrict this15702)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15703 ^js/JSJoda.TextStyle java-time-format-TextStyle15704] (.appendChronologyText this15703 java-time-format-TextStyle15704)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15705] (.appendOffsetId this15705)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15706] (.appendZoneRegionId this15706)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15707 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15708 ^long long15709] (.parseDefaulting this15707 java-time-temporal-TemporalField15708 long15709)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15710] (.appendZoneId this15710)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.FormatStyle java-time-format-FormatStyle15711 ^js/JSJoda.FormatStyle java-time-format-FormatStyle15712 ^js/JSJoda.Chronology java-time-chrono-Chronology15713 ^java.util.Locale java-util-Locale15714] (js-invoke java.time.format.DateTimeFormatterBuilder "getLocalizedDateTimePattern" java-time-format-FormatStyle15711 java-time-format-FormatStyle15712 java-time-chrono-Chronology15713 java-util-Locale15714)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15715] (.parseCaseInsensitive this15715)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15716 ^js/JSJoda.TextStyle java-time-format-TextStyle15717] (.appendLocalizedOffset this15716 java-time-format-TextStyle15717)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15718 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter15719] (.append this15718 java-time-format-DateTimeFormatter15719)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15720 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15721] (.appendText this15720 java-time-temporal-TemporalField15721)) (^js/JSJoda.DateTimeFormatterBuilder [this15722 G__15723 G__15724] (.appendText ^js/JSJoda.DateTimeFormatterBuilder this15722 G__15723 G__15724)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15725 ^js/JSJoda.FormatStyle java-time-format-FormatStyle15726 ^js/JSJoda.FormatStyle java-time-format-FormatStyle15727] (.appendLocalized this15725 java-time-format-FormatStyle15726 java-time-format-FormatStyle15727)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15728 ^java.lang.String java-lang-String15729 ^java.lang.String java-lang-String15730] (.appendOffset this15728 java-lang-String15729 java-lang-String15730)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^js/JSJoda.DateTimeFormatterBuilder [this15731 G__15732 G__15733 G__15734 G__15735] (.appendValueReduced ^js/JSJoda.DateTimeFormatterBuilder this15731 G__15732 G__15733 G__15734 G__15735)))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15736 ^js/JSJoda.TextStyle java-time-format-TextStyle15737] (.appendZoneText this15736 java-time-format-TextStyle15737)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this15738 ^js/JSJoda.TextStyle java-time-format-TextStyle15739 ^java.util.Set java-util-Set15740] (.appendZoneText this15738 java-time-format-TextStyle15739 java-util-Set15740)))
