(ns cljc.java-time.format.date-time-formatter-builder (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [DateTimeFormatterBuilder]]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatterBuilder this6119] (.toFormatter this6119)) (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatterBuilder this6120 ^java.util.Locale java-util-Locale6121] (.toFormatter this6120 java-util-Locale6121)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6122 ^java.lang.String java-lang-String6123] (.appendPattern this6122 java-lang-String6123)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6124 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6125 ^int int6126 ^int int6127 ^js/JSJoda.SignStyle java-time-format-SignStyle6128] (.appendValue this6124 java-time-temporal-TemporalField6125 int6126 int6127 java-time-format-SignStyle6128)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6129 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6130] (.appendValue this6129 java-time-temporal-TemporalField6130)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6131 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6132 ^int int6133] (.appendValue this6131 java-time-temporal-TemporalField6132 int6133)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6134 ^int int6135] (.appendInstant this6134 int6135)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6136] (.appendInstant this6136)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"] ["java.time.format.DateTimeFormatterBuilder" "char"]))} (^js/JSJoda.DateTimeFormatterBuilder [this6137 G__6138] (.appendLiteral ^js/JSJoda.DateTimeFormatterBuilder this6137 G__6138)))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6139] (.optionalStart this6139)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6140 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6141 ^int int6142 ^int int6143 ^boolean boolean6144] (.appendFraction this6140 java-time-temporal-TemporalField6141 int6142 int6143 boolean6144)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6145 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6146] (.appendOptional this6145 java-time-format-DateTimeFormatter6146)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6147] (.optionalEnd this6147)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6148] (.parseLenient this6148)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder" "int" "char"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6149 ^int int6150] (.padNext this6149 int6150)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6151 ^int int6152 ^char char6153] (.padNext this6151 int6152 char6153)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6154] (.appendChronologyId this6154)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6155] (.appendZoneOrOffsetId this6155)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6156] (.parseCaseSensitive this6156)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6157] (.parseStrict this6157)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6158 ^js/JSJoda.TextStyle java-time-format-TextStyle6159] (.appendChronologyText this6158 java-time-format-TextStyle6159)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6160] (.appendOffsetId this6160)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6161] (.appendZoneRegionId this6161)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6162 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6163 ^long long6164] (.parseDefaulting this6162 java-time-temporal-TemporalField6163 long6164)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6165] (.appendZoneId this6165)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.FormatStyle java-time-format-FormatStyle6166 ^js/JSJoda.FormatStyle java-time-format-FormatStyle6167 ^js/JSJoda.Chronology java-time-chrono-Chronology6168 ^java.util.Locale java-util-Locale6169] (js-invoke java.time.format.DateTimeFormatterBuilder "getLocalizedDateTimePattern" java-time-format-FormatStyle6166 java-time-format-FormatStyle6167 java-time-chrono-Chronology6168 java-util-Locale6169)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6170] (.parseCaseInsensitive this6170)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6171 ^js/JSJoda.TextStyle java-time-format-TextStyle6172] (.appendLocalizedOffset this6171 java-time-format-TextStyle6172)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6173 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6174] (.append this6173 java-time-format-DateTimeFormatter6174)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^js/JSJoda.DateTimeFormatterBuilder [this6175 G__6176 G__6177] (.appendText ^js/JSJoda.DateTimeFormatterBuilder this6175 G__6176 G__6177)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6178 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6179] (.appendText this6178 java-time-temporal-TemporalField6179)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6180 ^js/JSJoda.FormatStyle java-time-format-FormatStyle6181 ^js/JSJoda.FormatStyle java-time-format-FormatStyle6182] (.appendLocalized this6180 java-time-format-FormatStyle6181 java-time-format-FormatStyle6182)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6183 ^java.lang.String java-lang-String6184 ^java.lang.String java-lang-String6185] (.appendOffset this6183 java-lang-String6184 java-lang-String6185)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^js/JSJoda.DateTimeFormatterBuilder [this6186 G__6187 G__6188 G__6189 G__6190] (.appendValueReduced ^js/JSJoda.DateTimeFormatterBuilder this6186 G__6187 G__6188 G__6189 G__6190)))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"]))} (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6191 ^js/JSJoda.TextStyle java-time-format-TextStyle6192] (.appendZoneText this6191 java-time-format-TextStyle6192)) (^js/JSJoda.DateTimeFormatterBuilder [^js/JSJoda.DateTimeFormatterBuilder this6193 ^js/JSJoda.TextStyle java-time-format-TextStyle6194 ^java.util.Set java-util-Set6195] (.appendZoneText this6193 java-time-format-TextStyle6194 java-util-Set6195)))
