(ns cljc.java-time.format.resolver-style (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.format :refer [ResolverStyle]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.format ResolverStyle])))
(def smart #? (:clj java.time.format.ResolverStyle/SMART :cljs (. java.time.format.ResolverStyle -SMART)))
(def strict #? (:clj java.time.format.ResolverStyle/STRICT :cljs (. java.time.format.ResolverStyle -STRICT)))
(def lenient #? (:clj java.time.format.ResolverStyle/LENIENT :cljs (. java.time.format.ResolverStyle -LENIENT)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.format.ResolverStyle values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.ResolverStyle [^java.lang.String java-lang-String13781] (. java.time.format.ResolverStyle valueOf java-lang-String13781)) (^java.lang.Enum [^java.lang.Class java-lang-Class13782 ^java.lang.String java-lang-String13783] (. java.time.format.ResolverStyle valueOf java-lang-Class13782 java-lang-String13783)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this13784] (.ordinal this13784)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this13785] (.toString this13785)))
(clojure.core/defn name {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this13786] (.name this13786)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Class [^java.time.format.ResolverStyle this13787] (jti/getter declaringClass this13787)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this13788] (.hashCode this13788)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"] ["java.time.format.ResolverStyle" "java.lang.Enum"]))} (^java.lang.Integer [this13789 G__13790] #? (:cljs (.compareTo ^java.time.format.ResolverStyle this13789 G__13790) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13790)) (clojure.core/let [G__13790 ^"java.lang.Object" G__13790] (.compareTo ^java.time.format.ResolverStyle this13789 G__13790)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__13790)) (clojure.core/let [G__13790 ^"java.lang.Enum" G__13790] (.compareTo ^java.time.format.ResolverStyle this13789 G__13790)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn equals {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.ResolverStyle this13791 ^java.lang.Object java-lang-Object13792] (.equals this13791 java-lang-Object13792)))
