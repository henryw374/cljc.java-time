(ns cljc.java-time.format.sign-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format SignStyle]))
(def exceeds-pad java.time.format.SignStyle/EXCEEDS_PAD)
(def normal java.time.format.SignStyle/NORMAL)
(def always java.time.format.SignStyle/ALWAYS)
(def never java.time.format.SignStyle/NEVER)
(def not-negative java.time.format.SignStyle/NOT_NEGATIVE)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.format.SignStyle/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.SignStyle [^java.lang.String java-lang-String9242] (java.time.format.SignStyle/valueOf java-lang-String9242)) (^java.lang.Enum [^java.lang.Class java-lang-Class9243 ^java.lang.String java-lang-String9244] (java.time.format.SignStyle/valueOf java-lang-Class9243 java-lang-String9244)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this9245] (.ordinal this9245)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this9246] (.toString this9246)))
(clojure.core/defn name {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this9247] (.name this9247)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Class [^java.time.format.SignStyle this9248] (.getDeclaringClass this9248)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this9249] (.hashCode this9249)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"] ["java.time.format.SignStyle" "java.lang.Enum"]))} (^java.lang.Integer [this9250 G__9251] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__9251)) (clojure.core/let [G__9251 ^"java.lang.Object" G__9251] (.compareTo ^java.time.format.SignStyle this9250 G__9251)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__9251)) (clojure.core/let [G__9251 ^"java.lang.Enum" G__9251] (.compareTo ^java.time.format.SignStyle this9250 G__9251)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn equals {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.SignStyle this9252 ^java.lang.Object java-lang-Object9253] (.equals this9252 java-lang-Object9253)))
