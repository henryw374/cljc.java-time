(ns cljc.java-time.format.sign-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format SignStyle]))
(def exceeds-pad java.time.format.SignStyle/EXCEEDS_PAD)
(def normal java.time.format.SignStyle/NORMAL)
(def always java.time.format.SignStyle/ALWAYS)
(def never java.time.format.SignStyle/NEVER)
(def not-negative java.time.format.SignStyle/NOT_NEGATIVE)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.format.SignStyle/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.SignStyle [^java.lang.String java-lang-String6253] (java.time.format.SignStyle/valueOf java-lang-String6253)) (^java.lang.Enum [^java.lang.Class java-lang-Class6254 ^java.lang.String java-lang-String6255] (java.time.format.SignStyle/valueOf java-lang-Class6254 java-lang-String6255)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this6256] (.ordinal this6256)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this6257] (.toString this6257)))
(clojure.core/defn name {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this6258] (.name this6258)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Class [^java.time.format.SignStyle this6259] (.getDeclaringClass this6259)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this6260] (.hashCode this6260)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.SignStyle" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.format.SignStyle this6261 ^java.lang.Enum java-lang-Enum6262] (.compareTo this6261 java-lang-Enum6262)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.SignStyle this6263 ^java.lang.Object java-lang-Object6264] (.equals this6263 java-lang-Object6264)))
