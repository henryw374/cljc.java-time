(ns cljc.java-time.format.sign-style (:import [java.time.format SignStyle]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def exceeds-pad java.time.format.SignStyle/EXCEEDS_PAD)
(def normal java.time.format.SignStyle/NORMAL)
(def always java.time.format.SignStyle/ALWAYS)
(def never java.time.format.SignStyle/NEVER)
(def not-negative java.time.format.SignStyle/NOT_NEGATIVE)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.format.SignStyle values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.SignStyle [^java.lang.String java-lang-String51467] (. java.time.format.SignStyle valueOf java-lang-String51467)) (^java.lang.Enum [^java.lang.Class java-lang-Class51468 ^java.lang.String java-lang-String51469] (. java.time.format.SignStyle valueOf java-lang-Class51468 java-lang-String51469)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this51470] (.ordinal this51470)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this51471] (.toString this51471)))
(clojure.core/defn name {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this51472] (.name this51472)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Class [^java.time.format.SignStyle this51473] (.getDeclaringClass this51473)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this51474] (.hashCode this51474)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"] ["java.time.format.SignStyle" "java.lang.Enum"]))} (^java.lang.Integer [this51475 G__51476] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__51476)) (clojure.core/let [G__51476 ^"java.lang.Object" G__51476] (.compareTo ^java.time.format.SignStyle this51475 G__51476)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__51476)) (clojure.core/let [G__51476 ^"java.lang.Enum" G__51476] (.compareTo ^java.time.format.SignStyle this51475 G__51476)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn equals {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.SignStyle this51477 ^java.lang.Object java-lang-Object51478] (.equals this51477 java-lang-Object51478)))
