(ns cljc.java-time.format.sign-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format SignStyle]))
(def exceeds-pad java.time.format.SignStyle/EXCEEDS_PAD)
(def normal java.time.format.SignStyle/NORMAL)
(def always java.time.format.SignStyle/ALWAYS)
(def never java.time.format.SignStyle/NEVER)
(def not-negative java.time.format.SignStyle/NOT_NEGATIVE)
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (java.time.format.SignStyle/values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.SignStyle [^java.lang.String java-lang-String15799] (java.time.format.SignStyle/valueOf java-lang-String15799)) (^java.lang.Enum [^java.lang.Class java-lang-Class15800 ^java.lang.String java-lang-String15801] (java.time.format.SignStyle/valueOf java-lang-Class15800 java-lang-String15801)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this15802] (.ordinal this15802)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this15803] (.toString this15803)))
(clojure.core/defn name {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this15804] (.name this15804)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Class [^java.time.format.SignStyle this15805] (.getDeclaringClass this15805)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this15806] (.hashCode this15806)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.SignStyle" "java.lang.Enum"]))} (^java.lang.Integer [^java.time.format.SignStyle this15807 ^java.lang.Enum java-lang-Enum15808] (.compareTo this15807 java-lang-Enum15808)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.SignStyle this15809 ^java.lang.Object java-lang-Object15810] (.equals this15809 java-lang-Object15810)))
