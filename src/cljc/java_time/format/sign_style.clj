(ns cljc.java-time.format.sign-style (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time.format SignStyle]))
(def exceeds-pad (. java.time.format.SignStyle -EXCEEDS_PAD))
(def normal (. java.time.format.SignStyle -NORMAL))
(def always (. java.time.format.SignStyle -ALWAYS))
(def never (. java.time.format.SignStyle -NEVER))
(def not-negative (. java.time.format.SignStyle -NOT_NEGATIVE))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.format.SignStyle values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.SignStyle [^java.lang.String java-lang-String7726] (. java.time.format.SignStyle valueOf java-lang-String7726)) (^java.lang.Enum [^java.lang.Class java-lang-Class7727 ^java.lang.String java-lang-String7728] (. java.time.format.SignStyle valueOf java-lang-Class7727 java-lang-String7728)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this7729] (.ordinal this7729)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this7730] (.toString this7730)))
(clojure.core/defn name {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this7731] (.name this7731)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Class [^java.time.format.SignStyle this7732] (.getDeclaringClass this7732)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this7733] (.hashCode this7733)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"] ["java.time.format.SignStyle" "java.lang.Enum"]))} (^java.lang.Integer [this7734 G__7735] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7735)) (clojure.core/let [G__7735 ^"java.lang.Object" G__7735] (.compareTo ^java.time.format.SignStyle this7734 G__7735)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__7735)) (clojure.core/let [G__7735 ^"java.lang.Enum" G__7735] (.compareTo ^java.time.format.SignStyle this7734 G__7735)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn equals {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.SignStyle this7736 ^java.lang.Object java-lang-Object7737] (.equals this7736 java-lang-Object7737)))
