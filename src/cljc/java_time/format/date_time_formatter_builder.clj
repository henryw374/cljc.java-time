(ns cljc.java-time.format.date-time-formatter-builder (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatterBuilder]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"] ["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this9088 ^java.util.Locale java-util-Locale9089] (.toFormatter this9088 java-util-Locale9089)) (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this9090] (.toFormatter this9090)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9091 ^java.lang.String java-lang-String9092] (.appendPattern this9091 java-lang-String9092)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9093 ^java.time.temporal.TemporalField java-time-temporal-TemporalField9094] (.appendValue this9093 java-time-temporal-TemporalField9094)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9095 ^java.time.temporal.TemporalField java-time-temporal-TemporalField9096 ^java.lang.Integer int9097 ^java.lang.Integer int9098 ^java.time.format.SignStyle java-time-format-SignStyle9099] (.appendValue this9095 java-time-temporal-TemporalField9096 int9097 int9098 java-time-format-SignStyle9099)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9100 ^java.time.temporal.TemporalField java-time-temporal-TemporalField9101 ^java.lang.Integer int9102] (.appendValue this9100 java-time-temporal-TemporalField9101 int9102)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9103] (.appendInstant this9103)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9104 ^java.lang.Integer int9105] (.appendInstant this9104 int9105)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"] ["java.time.format.DateTimeFormatterBuilder" "char"]))} (^java.time.format.DateTimeFormatterBuilder [this9106 G__9107] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__9107)) (clojure.core/let [G__9107 ^"java.lang.String" G__9107] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this9106 G__9107)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Character") G__9107)) (clojure.core/let [G__9107 ^"java.lang.Character" G__9107] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this9106 G__9107)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9108] (.optionalStart this9108)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9109 ^java.time.temporal.TemporalField java-time-temporal-TemporalField9110 ^java.lang.Integer int9111 ^java.lang.Integer int9112 ^java.lang.Boolean boolean9113] (.appendFraction this9109 java-time-temporal-TemporalField9110 int9111 int9112 boolean9113)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9114 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter9115] (.appendOptional this9114 java-time-format-DateTimeFormatter9115)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9116] (.optionalEnd this9116)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9117] (.parseLenient this9117)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int" "char"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9118 ^java.lang.Integer int9119 ^java.lang.Character char9120] (.padNext this9118 int9119 char9120)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9121 ^java.lang.Integer int9122] (.padNext this9121 int9122)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9123] (.appendChronologyId this9123)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9124] (.appendZoneOrOffsetId this9124)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9125] (.parseCaseSensitive this9125)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9126] (.parseStrict this9126)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9127 ^java.time.format.TextStyle java-time-format-TextStyle9128] (.appendChronologyText this9127 java-time-format-TextStyle9128)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9129] (.appendOffsetId this9129)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9130] (.appendZoneRegionId this9130)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9131 ^java.time.temporal.TemporalField java-time-temporal-TemporalField9132 ^long long9133] (.parseDefaulting this9131 java-time-temporal-TemporalField9132 long9133)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9134] (.appendZoneId this9134)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^java.time.format.FormatStyle java-time-format-FormatStyle9135 ^java.time.format.FormatStyle java-time-format-FormatStyle9136 ^java.time.chrono.Chronology java-time-chrono-Chronology9137 ^java.util.Locale java-util-Locale9138] (java.time.format.DateTimeFormatterBuilder/getLocalizedDateTimePattern java-time-format-FormatStyle9135 java-time-format-FormatStyle9136 java-time-chrono-Chronology9137 java-util-Locale9138)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9139] (.parseCaseInsensitive this9139)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9140 ^java.time.format.TextStyle java-time-format-TextStyle9141] (.appendLocalizedOffset this9140 java-time-format-TextStyle9141)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9142 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter9143] (.append this9142 java-time-format-DateTimeFormatter9143)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^java.time.format.DateTimeFormatterBuilder [this9144 G__9145 G__9146] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__9145) (clojure.core/instance? (java.lang.Class/forName "java.util.Map") G__9146)) (clojure.core/let [G__9145 ^"java.time.temporal.TemporalField" G__9145 G__9146 ^"java.util.Map" G__9146] (.appendText ^java.time.format.DateTimeFormatterBuilder this9144 G__9145 G__9146)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__9145) (clojure.core/instance? (java.lang.Class/forName "java.time.format.TextStyle") G__9146)) (clojure.core/let [G__9145 ^"java.time.temporal.TemporalField" G__9145 G__9146 ^"java.time.format.TextStyle" G__9146] (.appendText ^java.time.format.DateTimeFormatterBuilder this9144 G__9145 G__9146)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9147 ^java.time.temporal.TemporalField java-time-temporal-TemporalField9148] (.appendText this9147 java-time-temporal-TemporalField9148)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9149 ^java.time.format.FormatStyle java-time-format-FormatStyle9150 ^java.time.format.FormatStyle java-time-format-FormatStyle9151] (.appendLocalized this9149 java-time-format-FormatStyle9150 java-time-format-FormatStyle9151)))
(clojure.core/defn append-generic-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9152 ^java.time.format.TextStyle java-time-format-TextStyle9153] (.appendGenericZoneText this9152 java-time-format-TextStyle9153)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9154 ^java.time.format.TextStyle java-time-format-TextStyle9155 ^java.util.Set java-util-Set9156] (.appendGenericZoneText this9154 java-time-format-TextStyle9155 java-util-Set9156)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9157 ^java.lang.String java-lang-String9158 ^java.lang.String java-lang-String9159] (.appendOffset this9157 java-lang-String9158 java-lang-String9159)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"]))} (^java.time.format.DateTimeFormatterBuilder [this9160 G__9161 G__9162 G__9163 G__9164] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__9161) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__9162) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__9163) (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__9164)) (clojure.core/let [G__9161 ^"java.time.temporal.TemporalField" G__9161 G__9162 (clojure.core/int G__9162) G__9163 (clojure.core/int G__9163) G__9164 ^"java.time.chrono.ChronoLocalDate" G__9164] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this9160 G__9161 G__9162 G__9163 G__9164)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__9161) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__9162) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__9163) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__9164)) (clojure.core/let [G__9161 ^"java.time.temporal.TemporalField" G__9161 G__9162 (clojure.core/int G__9162) G__9163 (clojure.core/int G__9163) G__9164 (clojure.core/int G__9164)] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this9160 G__9161 G__9162 G__9163 G__9164)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9165 ^java.time.format.TextStyle java-time-format-TextStyle9166 ^java.util.Set java-util-Set9167] (.appendZoneText this9165 java-time-format-TextStyle9166 java-util-Set9167)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9168 ^java.time.format.TextStyle java-time-format-TextStyle9169] (.appendZoneText this9168 java-time-format-TextStyle9169)))
