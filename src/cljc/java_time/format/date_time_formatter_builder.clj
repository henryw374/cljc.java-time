(ns cljc.java-time.format.date-time-formatter-builder (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatterBuilder]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this61746] (.toFormatter this61746)) (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this61747 ^java.util.Locale java-util-Locale61748] (.toFormatter this61747 java-util-Locale61748)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61749 ^java.lang.String java-lang-String61750] (.appendPattern this61749 java-lang-String61750)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61751 ^java.time.temporal.TemporalField java-time-temporal-TemporalField61752 ^java.lang.Integer int61753 ^java.lang.Integer int61754 ^java.time.format.SignStyle java-time-format-SignStyle61755] (.appendValue this61751 java-time-temporal-TemporalField61752 int61753 int61754 java-time-format-SignStyle61755)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61756 ^java.time.temporal.TemporalField java-time-temporal-TemporalField61757] (.appendValue this61756 java-time-temporal-TemporalField61757)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61758 ^java.time.temporal.TemporalField java-time-temporal-TemporalField61759 ^java.lang.Integer int61760] (.appendValue this61758 java-time-temporal-TemporalField61759 int61760)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61761 ^java.lang.Integer int61762] (.appendInstant this61761 int61762)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61763] (.appendInstant this61763)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "char"] ["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [this61764 G__61765] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Character") G__61765)) (clojure.core/let [G__61765 ^"java.lang.Character" G__61765] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this61764 G__61765)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__61765)) (clojure.core/let [G__61765 ^"java.lang.String" G__61765] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this61764 G__61765)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61766] (.optionalStart this61766)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61767 ^java.time.temporal.TemporalField java-time-temporal-TemporalField61768 ^java.lang.Integer int61769 ^java.lang.Integer int61770 ^java.lang.Boolean boolean61771] (.appendFraction this61767 java-time-temporal-TemporalField61768 int61769 int61770 boolean61771)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61772 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter61773] (.appendOptional this61772 java-time-format-DateTimeFormatter61773)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61774] (.optionalEnd this61774)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61775] (.parseLenient this61775)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int" "char"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61776 ^java.lang.Integer int61777 ^java.lang.Character char61778] (.padNext this61776 int61777 char61778)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61779 ^java.lang.Integer int61780] (.padNext this61779 int61780)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61781] (.appendChronologyId this61781)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61782] (.appendZoneOrOffsetId this61782)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61783] (.parseCaseSensitive this61783)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61784] (.parseStrict this61784)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61785 ^java.time.format.TextStyle java-time-format-TextStyle61786] (.appendChronologyText this61785 java-time-format-TextStyle61786)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61787] (.appendOffsetId this61787)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61788] (.appendZoneRegionId this61788)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61789 ^java.time.temporal.TemporalField java-time-temporal-TemporalField61790 ^long long61791] (.parseDefaulting this61789 java-time-temporal-TemporalField61790 long61791)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61792] (.appendZoneId this61792)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^java.time.format.FormatStyle java-time-format-FormatStyle61793 ^java.time.format.FormatStyle java-time-format-FormatStyle61794 ^java.time.chrono.Chronology java-time-chrono-Chronology61795 ^java.util.Locale java-util-Locale61796] (java.time.format.DateTimeFormatterBuilder/getLocalizedDateTimePattern java-time-format-FormatStyle61793 java-time-format-FormatStyle61794 java-time-chrono-Chronology61795 java-util-Locale61796)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61797] (.parseCaseInsensitive this61797)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61798 ^java.time.format.TextStyle java-time-format-TextStyle61799] (.appendLocalizedOffset this61798 java-time-format-TextStyle61799)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61800 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter61801] (.append this61800 java-time-format-DateTimeFormatter61801)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"]))} (^java.time.format.DateTimeFormatterBuilder [this61802 G__61803 G__61804] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__61803) (clojure.core/instance? (java.lang.Class/forName "java.time.format.TextStyle") G__61804)) (clojure.core/let [G__61803 ^"java.time.temporal.TemporalField" G__61803 G__61804 ^"java.time.format.TextStyle" G__61804] (.appendText ^java.time.format.DateTimeFormatterBuilder this61802 G__61803 G__61804)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__61803) (clojure.core/instance? (java.lang.Class/forName "java.util.Map") G__61804)) (clojure.core/let [G__61803 ^"java.time.temporal.TemporalField" G__61803 G__61804 ^"java.util.Map" G__61804] (.appendText ^java.time.format.DateTimeFormatterBuilder this61802 G__61803 G__61804)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61805 ^java.time.temporal.TemporalField java-time-temporal-TemporalField61806] (.appendText this61805 java-time-temporal-TemporalField61806)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61807 ^java.time.format.FormatStyle java-time-format-FormatStyle61808 ^java.time.format.FormatStyle java-time-format-FormatStyle61809] (.appendLocalized this61807 java-time-format-FormatStyle61808 java-time-format-FormatStyle61809)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61810 ^java.lang.String java-lang-String61811 ^java.lang.String java-lang-String61812] (.appendOffset this61810 java-lang-String61811 java-lang-String61812)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^java.time.format.DateTimeFormatterBuilder [this61813 G__61814 G__61815 G__61816 G__61817] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__61814) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__61815) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__61816) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__61817)) (clojure.core/let [G__61814 ^"java.time.temporal.TemporalField" G__61814 G__61815 (clojure.core/int G__61815) G__61816 (clojure.core/int G__61816) G__61817 (clojure.core/int G__61817)] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this61813 G__61814 G__61815 G__61816 G__61817)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__61814) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__61815) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__61816) (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__61817)) (clojure.core/let [G__61814 ^"java.time.temporal.TemporalField" G__61814 G__61815 (clojure.core/int G__61815) G__61816 (clojure.core/int G__61816) G__61817 ^"java.time.chrono.ChronoLocalDate" G__61817] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this61813 G__61814 G__61815 G__61816 G__61817)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61818 ^java.time.format.TextStyle java-time-format-TextStyle61819 ^java.util.Set java-util-Set61820] (.appendZoneText this61818 java-time-format-TextStyle61819 java-util-Set61820)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this61821 ^java.time.format.TextStyle java-time-format-TextStyle61822] (.appendZoneText this61821 java-time-format-TextStyle61822)))
