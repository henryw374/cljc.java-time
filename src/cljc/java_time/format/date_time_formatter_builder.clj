(ns cljc.java-time.format.date-time-formatter-builder (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatterBuilder]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"] ["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this9030 ^java.util.Locale java-util-Locale9031] (.toFormatter this9030 java-util-Locale9031)) (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this9032] (.toFormatter this9032)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9033 ^java.lang.String java-lang-String9034] (.appendPattern this9033 java-lang-String9034)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9035 ^java.time.temporal.TemporalField java-time-temporal-TemporalField9036 ^java.lang.Integer int9037] (.appendValue this9035 java-time-temporal-TemporalField9036 int9037)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9038 ^java.time.temporal.TemporalField java-time-temporal-TemporalField9039 ^java.lang.Integer int9040 ^java.lang.Integer int9041 ^java.time.format.SignStyle java-time-format-SignStyle9042] (.appendValue this9038 java-time-temporal-TemporalField9039 int9040 int9041 java-time-format-SignStyle9042)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9043 ^java.time.temporal.TemporalField java-time-temporal-TemporalField9044] (.appendValue this9043 java-time-temporal-TemporalField9044)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9045 ^java.lang.Integer int9046] (.appendInstant this9045 int9046)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9047] (.appendInstant this9047)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "char"] ["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [this9048 G__9049] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Character") G__9049)) (clojure.core/let [G__9049 ^"java.lang.Character" G__9049] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this9048 G__9049)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__9049)) (clojure.core/let [G__9049 ^"java.lang.String" G__9049] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this9048 G__9049)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9050] (.optionalStart this9050)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9051 ^java.time.temporal.TemporalField java-time-temporal-TemporalField9052 ^java.lang.Integer int9053 ^java.lang.Integer int9054 ^java.lang.Boolean boolean9055] (.appendFraction this9051 java-time-temporal-TemporalField9052 int9053 int9054 boolean9055)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9056 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter9057] (.appendOptional this9056 java-time-format-DateTimeFormatter9057)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9058] (.optionalEnd this9058)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9059] (.parseLenient this9059)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int" "char"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9060 ^java.lang.Integer int9061 ^java.lang.Character char9062] (.padNext this9060 int9061 char9062)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9063 ^java.lang.Integer int9064] (.padNext this9063 int9064)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9065] (.appendChronologyId this9065)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9066] (.appendZoneOrOffsetId this9066)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9067] (.parseCaseSensitive this9067)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9068] (.parseStrict this9068)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9069 ^java.time.format.TextStyle java-time-format-TextStyle9070] (.appendChronologyText this9069 java-time-format-TextStyle9070)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9071] (.appendOffsetId this9071)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9072] (.appendZoneRegionId this9072)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9073 ^java.time.temporal.TemporalField java-time-temporal-TemporalField9074 ^long long9075] (.parseDefaulting this9073 java-time-temporal-TemporalField9074 long9075)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9076] (.appendZoneId this9076)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^java.time.format.FormatStyle java-time-format-FormatStyle9077 ^java.time.format.FormatStyle java-time-format-FormatStyle9078 ^java.time.chrono.Chronology java-time-chrono-Chronology9079 ^java.util.Locale java-util-Locale9080] (java.time.format.DateTimeFormatterBuilder/getLocalizedDateTimePattern java-time-format-FormatStyle9077 java-time-format-FormatStyle9078 java-time-chrono-Chronology9079 java-util-Locale9080)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9081] (.parseCaseInsensitive this9081)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9082 ^java.time.format.TextStyle java-time-format-TextStyle9083] (.appendLocalizedOffset this9082 java-time-format-TextStyle9083)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9084 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter9085] (.append this9084 java-time-format-DateTimeFormatter9085)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"]))} (^java.time.format.DateTimeFormatterBuilder [this9086 G__9087 G__9088] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__9087) (clojure.core/instance? (java.lang.Class/forName "java.time.format.TextStyle") G__9088)) (clojure.core/let [G__9087 ^"java.time.temporal.TemporalField" G__9087 G__9088 ^"java.time.format.TextStyle" G__9088] (.appendText ^java.time.format.DateTimeFormatterBuilder this9086 G__9087 G__9088)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__9087) (clojure.core/instance? (java.lang.Class/forName "java.util.Map") G__9088)) (clojure.core/let [G__9087 ^"java.time.temporal.TemporalField" G__9087 G__9088 ^"java.util.Map" G__9088] (.appendText ^java.time.format.DateTimeFormatterBuilder this9086 G__9087 G__9088)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9089 ^java.time.temporal.TemporalField java-time-temporal-TemporalField9090] (.appendText this9089 java-time-temporal-TemporalField9090)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9091 ^java.time.format.FormatStyle java-time-format-FormatStyle9092 ^java.time.format.FormatStyle java-time-format-FormatStyle9093] (.appendLocalized this9091 java-time-format-FormatStyle9092 java-time-format-FormatStyle9093)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9094 ^java.lang.String java-lang-String9095 ^java.lang.String java-lang-String9096] (.appendOffset this9094 java-lang-String9095 java-lang-String9096)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^java.time.format.DateTimeFormatterBuilder [this9097 G__9098 G__9099 G__9100 G__9101] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__9098) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__9099) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__9100) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__9101)) (clojure.core/let [G__9098 ^"java.time.temporal.TemporalField" G__9098 G__9099 (clojure.core/int G__9099) G__9100 (clojure.core/int G__9100) G__9101 (clojure.core/int G__9101)] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this9097 G__9098 G__9099 G__9100 G__9101)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__9098) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__9099) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__9100) (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__9101)) (clojure.core/let [G__9098 ^"java.time.temporal.TemporalField" G__9098 G__9099 (clojure.core/int G__9099) G__9100 (clojure.core/int G__9100) G__9101 ^"java.time.chrono.ChronoLocalDate" G__9101] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this9097 G__9098 G__9099 G__9100 G__9101)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9102 ^java.time.format.TextStyle java-time-format-TextStyle9103 ^java.util.Set java-util-Set9104] (.appendZoneText this9102 java-time-format-TextStyle9103 java-util-Set9104)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this9105 ^java.time.format.TextStyle java-time-format-TextStyle9106] (.appendZoneText this9105 java-time-format-TextStyle9106)))
