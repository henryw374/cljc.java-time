(ns cljc.java-time.format.date-time-formatter-builder (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatterBuilder]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this6042] (.toFormatter this6042)) (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this6043 ^java.util.Locale java-util-Locale6044] (.toFormatter this6043 java-util-Locale6044)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6045 ^java.lang.String java-lang-String6046] (.appendPattern this6045 java-lang-String6046)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6047 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6048 ^java.lang.Integer int6049 ^java.lang.Integer int6050 ^java.time.format.SignStyle java-time-format-SignStyle6051] (.appendValue this6047 java-time-temporal-TemporalField6048 int6049 int6050 java-time-format-SignStyle6051)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6052 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6053] (.appendValue this6052 java-time-temporal-TemporalField6053)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6054 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6055 ^java.lang.Integer int6056] (.appendValue this6054 java-time-temporal-TemporalField6055 int6056)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6057 ^java.lang.Integer int6058] (.appendInstant this6057 int6058)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6059] (.appendInstant this6059)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"] ["java.time.format.DateTimeFormatterBuilder" "char"]))} (^java.time.format.DateTimeFormatterBuilder [this6060 G__6061] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.String G__6061)) (clojure.core/let [G__6061 ^"java.lang.String" G__6061] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this6060 G__6061)) (clojure.core/and (clojure.core/instance? java.lang.Character G__6061)) (clojure.core/let [G__6061 ^"java.lang.Character" G__6061] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this6060 G__6061)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6062] (.optionalStart this6062)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6063 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6064 ^java.lang.Integer int6065 ^java.lang.Integer int6066 ^java.lang.Boolean boolean6067] (.appendFraction this6063 java-time-temporal-TemporalField6064 int6065 int6066 boolean6067)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6068 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6069] (.appendOptional this6068 java-time-format-DateTimeFormatter6069)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6070] (.optionalEnd this6070)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6071] (.parseLenient this6071)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder" "int" "char"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6072 ^java.lang.Integer int6073] (.padNext this6072 int6073)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6074 ^java.lang.Integer int6075 ^java.lang.Character char6076] (.padNext this6074 int6075 char6076)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6077] (.appendChronologyId this6077)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6078] (.appendZoneOrOffsetId this6078)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6079] (.parseCaseSensitive this6079)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6080] (.parseStrict this6080)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6081 ^java.time.format.TextStyle java-time-format-TextStyle6082] (.appendChronologyText this6081 java-time-format-TextStyle6082)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6083] (.appendOffsetId this6083)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6084] (.appendZoneRegionId this6084)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6085 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6086 ^long long6087] (.parseDefaulting this6085 java-time-temporal-TemporalField6086 long6087)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6088] (.appendZoneId this6088)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^java.time.format.FormatStyle java-time-format-FormatStyle6089 ^java.time.format.FormatStyle java-time-format-FormatStyle6090 ^java.time.chrono.Chronology java-time-chrono-Chronology6091 ^java.util.Locale java-util-Locale6092] (java.time.format.DateTimeFormatterBuilder/getLocalizedDateTimePattern java-time-format-FormatStyle6089 java-time-format-FormatStyle6090 java-time-chrono-Chronology6091 java-util-Locale6092)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6093] (.parseCaseInsensitive this6093)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6094 ^java.time.format.TextStyle java-time-format-TextStyle6095] (.appendLocalizedOffset this6094 java-time-format-TextStyle6095)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6096 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6097] (.append this6096 java-time-format-DateTimeFormatter6097)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^java.time.format.DateTimeFormatterBuilder [this6098 G__6099 G__6100] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__6099) (clojure.core/instance? java.time.format.TextStyle G__6100)) (clojure.core/let [G__6099 ^"java.time.temporal.TemporalField" G__6099 G__6100 ^"java.time.format.TextStyle" G__6100] (.appendText ^java.time.format.DateTimeFormatterBuilder this6098 G__6099 G__6100)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__6099) (clojure.core/instance? java.util.Map G__6100)) (clojure.core/let [G__6099 ^"java.time.temporal.TemporalField" G__6099 G__6100 ^"java.util.Map" G__6100] (.appendText ^java.time.format.DateTimeFormatterBuilder this6098 G__6099 G__6100)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6101 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6102] (.appendText this6101 java-time-temporal-TemporalField6102)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6103 ^java.time.format.FormatStyle java-time-format-FormatStyle6104 ^java.time.format.FormatStyle java-time-format-FormatStyle6105] (.appendLocalized this6103 java-time-format-FormatStyle6104 java-time-format-FormatStyle6105)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6106 ^java.lang.String java-lang-String6107 ^java.lang.String java-lang-String6108] (.appendOffset this6106 java-lang-String6107 java-lang-String6108)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^java.time.format.DateTimeFormatterBuilder [this6109 G__6110 G__6111 G__6112 G__6113] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__6110) (clojure.core/instance? java.lang.Number G__6111) (clojure.core/instance? java.lang.Number G__6112) (clojure.core/instance? java.lang.Number G__6113)) (clojure.core/let [G__6110 ^"java.time.temporal.TemporalField" G__6110 G__6111 (clojure.core/int G__6111) G__6112 (clojure.core/int G__6112) G__6113 (clojure.core/int G__6113)] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this6109 G__6110 G__6111 G__6112 G__6113)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__6110) (clojure.core/instance? java.lang.Number G__6111) (clojure.core/instance? java.lang.Number G__6112) (clojure.core/instance? java.time.chrono.ChronoLocalDate G__6113)) (clojure.core/let [G__6110 ^"java.time.temporal.TemporalField" G__6110 G__6111 (clojure.core/int G__6111) G__6112 (clojure.core/int G__6112) G__6113 ^"java.time.chrono.ChronoLocalDate" G__6113] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this6109 G__6110 G__6111 G__6112 G__6113)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6114 ^java.time.format.TextStyle java-time-format-TextStyle6115] (.appendZoneText this6114 java-time-format-TextStyle6115)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this6116 ^java.time.format.TextStyle java-time-format-TextStyle6117 ^java.util.Set java-util-Set6118] (.appendZoneText this6116 java-time-format-TextStyle6117 java-util-Set6118)))
