(ns cljc.java-time.format.date-time-formatter-builder (:import [java.time.format DateTimeFormatterBuilder]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this51255] (.toFormatter this51255)) (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this51256 ^java.util.Locale java-util-Locale51257] (.toFormatter this51256 java-util-Locale51257)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51258 ^java.lang.String java-lang-String51259] (.appendPattern this51258 java-lang-String51259)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51260 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51261 ^java.lang.Integer int51262 ^java.lang.Integer int51263 ^java.time.format.SignStyle java-time-format-SignStyle51264] (.appendValue this51260 java-time-temporal-TemporalField51261 int51262 int51263 java-time-format-SignStyle51264)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51265 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51266 ^java.lang.Integer int51267] (.appendValue this51265 java-time-temporal-TemporalField51266 int51267)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51268 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51269] (.appendValue this51268 java-time-temporal-TemporalField51269)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51270] (.appendInstant this51270)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51271 ^java.lang.Integer int51272] (.appendInstant this51271 int51272)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "char"] ["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [this51273 G__51274] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Character") G__51274)) (clojure.core/let [G__51274 ^"java.lang.Character" G__51274] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this51273 G__51274)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__51274)) (clojure.core/let [G__51274 ^"java.lang.String" G__51274] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this51273 G__51274)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51275] (.optionalStart this51275)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51276 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51277 ^java.lang.Integer int51278 ^java.lang.Integer int51279 ^java.lang.Boolean boolean51280] (.appendFraction this51276 java-time-temporal-TemporalField51277 int51278 int51279 boolean51280)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51281 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter51282] (.appendOptional this51281 java-time-format-DateTimeFormatter51282)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51283] (.optionalEnd this51283)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51284] (.parseLenient this51284)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder" "int" "char"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51285 ^java.lang.Integer int51286] (.padNext this51285 int51286)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51287 ^java.lang.Integer int51288 ^java.lang.Character char51289] (.padNext this51287 int51288 char51289)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51290] (.appendChronologyId this51290)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51291] (.appendZoneOrOffsetId this51291)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51292] (.parseCaseSensitive this51292)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51293] (.parseStrict this51293)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51294 ^java.time.format.TextStyle java-time-format-TextStyle51295] (.appendChronologyText this51294 java-time-format-TextStyle51295)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51296] (.appendOffsetId this51296)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51297] (.appendZoneRegionId this51297)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51298 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51299 ^long long51300] (.parseDefaulting this51298 java-time-temporal-TemporalField51299 long51300)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51301] (.appendZoneId this51301)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^java.time.format.FormatStyle java-time-format-FormatStyle51302 ^java.time.format.FormatStyle java-time-format-FormatStyle51303 ^java.time.chrono.Chronology java-time-chrono-Chronology51304 ^java.util.Locale java-util-Locale51305] (. java.time.format.DateTimeFormatterBuilder getLocalizedDateTimePattern java-time-format-FormatStyle51302 java-time-format-FormatStyle51303 java-time-chrono-Chronology51304 java-util-Locale51305)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51306] (.parseCaseInsensitive this51306)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51307 ^java.time.format.TextStyle java-time-format-TextStyle51308] (.appendLocalizedOffset this51307 java-time-format-TextStyle51308)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51309 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter51310] (.append this51309 java-time-format-DateTimeFormatter51310)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^java.time.format.DateTimeFormatterBuilder [this51311 G__51312 G__51313] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__51312) (clojure.core/instance? (java.lang.Class/forName "java.time.format.TextStyle") G__51313)) (clojure.core/let [G__51312 ^"java.time.temporal.TemporalField" G__51312 G__51313 ^"java.time.format.TextStyle" G__51313] (.appendText ^java.time.format.DateTimeFormatterBuilder this51311 G__51312 G__51313)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__51312) (clojure.core/instance? (java.lang.Class/forName "java.util.Map") G__51313)) (clojure.core/let [G__51312 ^"java.time.temporal.TemporalField" G__51312 G__51313 ^"java.util.Map" G__51313] (.appendText ^java.time.format.DateTimeFormatterBuilder this51311 G__51312 G__51313)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51314 ^java.time.temporal.TemporalField java-time-temporal-TemporalField51315] (.appendText this51314 java-time-temporal-TemporalField51315)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51316 ^java.time.format.FormatStyle java-time-format-FormatStyle51317 ^java.time.format.FormatStyle java-time-format-FormatStyle51318] (.appendLocalized this51316 java-time-format-FormatStyle51317 java-time-format-FormatStyle51318)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51319 ^java.lang.String java-lang-String51320 ^java.lang.String java-lang-String51321] (.appendOffset this51319 java-lang-String51320 java-lang-String51321)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"]))} (^java.time.format.DateTimeFormatterBuilder [this51322 G__51323 G__51324 G__51325 G__51326] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__51323) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__51324) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__51325) (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__51326)) (clojure.core/let [G__51323 ^"java.time.temporal.TemporalField" G__51323 G__51324 (clojure.core/int G__51324) G__51325 (clojure.core/int G__51325) G__51326 ^"java.time.chrono.ChronoLocalDate" G__51326] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this51322 G__51323 G__51324 G__51325 G__51326)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__51323) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__51324) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__51325) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__51326)) (clojure.core/let [G__51323 ^"java.time.temporal.TemporalField" G__51323 G__51324 (clojure.core/int G__51324) G__51325 (clojure.core/int G__51325) G__51326 (clojure.core/int G__51326)] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this51322 G__51323 G__51324 G__51325 G__51326)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51327 ^java.time.format.TextStyle java-time-format-TextStyle51328] (.appendZoneText this51327 java-time-format-TextStyle51328)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this51329 ^java.time.format.TextStyle java-time-format-TextStyle51330 ^java.util.Set java-util-Set51331] (.appendZoneText this51329 java-time-format-TextStyle51330 java-util-Set51331)))
