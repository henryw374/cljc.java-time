(ns cljc.java-time.format.date-time-formatter-builder (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatterBuilder]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this13263] (.toFormatter this13263)) (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this13264 ^java.util.Locale java-util-Locale13265] (.toFormatter this13264 java-util-Locale13265)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13266 ^java.lang.String java-lang-String13267] (.appendPattern this13266 java-lang-String13267)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13268 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13269 ^java.lang.Integer int13270 ^java.lang.Integer int13271 ^java.time.format.SignStyle java-time-format-SignStyle13272] (.appendValue this13268 java-time-temporal-TemporalField13269 int13270 int13271 java-time-format-SignStyle13272)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13273 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13274] (.appendValue this13273 java-time-temporal-TemporalField13274)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13275 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13276 ^java.lang.Integer int13277] (.appendValue this13275 java-time-temporal-TemporalField13276 int13277)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13278 ^java.lang.Integer int13279] (.appendInstant this13278 int13279)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13280] (.appendInstant this13280)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "char"] ["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [this13281 G__13282] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Character") G__13282)) (clojure.core/let [G__13282 ^"java.lang.Character" G__13282] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this13281 G__13282)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__13282)) (clojure.core/let [G__13282 ^"java.lang.String" G__13282] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this13281 G__13282)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13283] (.optionalStart this13283)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13284 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13285 ^java.lang.Integer int13286 ^java.lang.Integer int13287 ^java.lang.Boolean boolean13288] (.appendFraction this13284 java-time-temporal-TemporalField13285 int13286 int13287 boolean13288)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13289 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13290] (.appendOptional this13289 java-time-format-DateTimeFormatter13290)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13291] (.optionalEnd this13291)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13292] (.parseLenient this13292)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int" "char"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13293 ^java.lang.Integer int13294 ^java.lang.Character char13295] (.padNext this13293 int13294 char13295)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13296 ^java.lang.Integer int13297] (.padNext this13296 int13297)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13298] (.appendChronologyId this13298)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13299] (.appendZoneOrOffsetId this13299)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13300] (.parseCaseSensitive this13300)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13301] (.parseStrict this13301)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13302 ^java.time.format.TextStyle java-time-format-TextStyle13303] (.appendChronologyText this13302 java-time-format-TextStyle13303)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13304] (.appendOffsetId this13304)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13305] (.appendZoneRegionId this13305)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13306 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13307 ^long long13308] (.parseDefaulting this13306 java-time-temporal-TemporalField13307 long13308)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13309] (.appendZoneId this13309)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^java.time.format.FormatStyle java-time-format-FormatStyle13310 ^java.time.format.FormatStyle java-time-format-FormatStyle13311 ^java.time.chrono.Chronology java-time-chrono-Chronology13312 ^java.util.Locale java-util-Locale13313] (. java.time.format.DateTimeFormatterBuilder getLocalizedDateTimePattern java-time-format-FormatStyle13310 java-time-format-FormatStyle13311 java-time-chrono-Chronology13312 java-util-Locale13313)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13314] (.parseCaseInsensitive this13314)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13315 ^java.time.format.TextStyle java-time-format-TextStyle13316] (.appendLocalizedOffset this13315 java-time-format-TextStyle13316)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13317 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13318] (.append this13317 java-time-format-DateTimeFormatter13318)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"]))} (^java.time.format.DateTimeFormatterBuilder [this13319 G__13320 G__13321] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13320) (clojure.core/instance? (java.lang.Class/forName "java.time.format.TextStyle") G__13321)) (clojure.core/let [G__13320 ^"java.time.temporal.TemporalField" G__13320 G__13321 ^"java.time.format.TextStyle" G__13321] (.appendText ^java.time.format.DateTimeFormatterBuilder this13319 G__13320 G__13321)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13320) (clojure.core/instance? (java.lang.Class/forName "java.util.Map") G__13321)) (clojure.core/let [G__13320 ^"java.time.temporal.TemporalField" G__13320 G__13321 ^"java.util.Map" G__13321] (.appendText ^java.time.format.DateTimeFormatterBuilder this13319 G__13320 G__13321)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13322 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13323] (.appendText this13322 java-time-temporal-TemporalField13323)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13324 ^java.time.format.FormatStyle java-time-format-FormatStyle13325 ^java.time.format.FormatStyle java-time-format-FormatStyle13326] (.appendLocalized this13324 java-time-format-FormatStyle13325 java-time-format-FormatStyle13326)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13327 ^java.lang.String java-lang-String13328 ^java.lang.String java-lang-String13329] (.appendOffset this13327 java-lang-String13328 java-lang-String13329)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^java.time.format.DateTimeFormatterBuilder [this13330 G__13331 G__13332 G__13333 G__13334] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13331) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13332) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13333) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13334)) (clojure.core/let [G__13331 ^"java.time.temporal.TemporalField" G__13331 G__13332 (clojure.core/int G__13332) G__13333 (clojure.core/int G__13333) G__13334 (clojure.core/int G__13334)] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this13330 G__13331 G__13332 G__13333 G__13334)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13331) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13332) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13333) (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__13334)) (clojure.core/let [G__13331 ^"java.time.temporal.TemporalField" G__13331 G__13332 (clojure.core/int G__13332) G__13333 (clojure.core/int G__13333) G__13334 ^"java.time.chrono.ChronoLocalDate" G__13334] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this13330 G__13331 G__13332 G__13333 G__13334)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13335 ^java.time.format.TextStyle java-time-format-TextStyle13336 ^java.util.Set java-util-Set13337] (.appendZoneText this13335 java-time-format-TextStyle13336 java-util-Set13337)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13338 ^java.time.format.TextStyle java-time-format-TextStyle13339] (.appendZoneText this13338 java-time-format-TextStyle13339)))
