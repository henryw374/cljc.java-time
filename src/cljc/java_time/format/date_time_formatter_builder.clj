(ns cljc.java-time.format.date-time-formatter-builder (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time.format DateTimeFormatterBuilder]))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"] ["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this15587 ^java.util.Locale java-util-Locale15588] (.toFormatter this15587 java-util-Locale15588)) (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this15589] (.toFormatter this15589)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15590 ^java.lang.String java-lang-String15591] (.appendPattern this15590 java-lang-String15591)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15592 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15593 ^java.lang.Integer int15594 ^java.lang.Integer int15595 ^java.time.format.SignStyle java-time-format-SignStyle15596] (.appendValue this15592 java-time-temporal-TemporalField15593 int15594 int15595 java-time-format-SignStyle15596)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15597 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15598] (.appendValue this15597 java-time-temporal-TemporalField15598)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15599 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15600 ^java.lang.Integer int15601] (.appendValue this15599 java-time-temporal-TemporalField15600 int15601)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15602 ^java.lang.Integer int15603] (.appendInstant this15602 int15603)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15604] (.appendInstant this15604)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"] ["java.time.format.DateTimeFormatterBuilder" "char"]))} (^java.time.format.DateTimeFormatterBuilder [this15605 G__15606] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.String G__15606)) (clojure.core/let [G__15606 ^"java.lang.String" G__15606] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this15605 G__15606)) (clojure.core/and (clojure.core/instance? java.lang.Character G__15606)) (clojure.core/let [G__15606 ^"java.lang.Character" G__15606] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this15605 G__15606)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15607] (.optionalStart this15607)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15608 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15609 ^java.lang.Integer int15610 ^java.lang.Integer int15611 ^java.lang.Boolean boolean15612] (.appendFraction this15608 java-time-temporal-TemporalField15609 int15610 int15611 boolean15612)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15613 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter15614] (.appendOptional this15613 java-time-format-DateTimeFormatter15614)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15615] (.optionalEnd this15615)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15616] (.parseLenient this15616)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int"] ["java.time.format.DateTimeFormatterBuilder" "int" "char"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15617 ^java.lang.Integer int15618] (.padNext this15617 int15618)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15619 ^java.lang.Integer int15620 ^java.lang.Character char15621] (.padNext this15619 int15620 char15621)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15622] (.appendChronologyId this15622)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15623] (.appendZoneOrOffsetId this15623)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15624] (.parseCaseSensitive this15624)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15625] (.parseStrict this15625)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15626 ^java.time.format.TextStyle java-time-format-TextStyle15627] (.appendChronologyText this15626 java-time-format-TextStyle15627)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15628] (.appendOffsetId this15628)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15629] (.appendZoneRegionId this15629)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15630 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15631 ^long long15632] (.parseDefaulting this15630 java-time-temporal-TemporalField15631 long15632)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15633] (.appendZoneId this15633)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^java.time.format.FormatStyle java-time-format-FormatStyle15634 ^java.time.format.FormatStyle java-time-format-FormatStyle15635 ^java.time.chrono.Chronology java-time-chrono-Chronology15636 ^java.util.Locale java-util-Locale15637] (java.time.format.DateTimeFormatterBuilder/getLocalizedDateTimePattern java-time-format-FormatStyle15634 java-time-format-FormatStyle15635 java-time-chrono-Chronology15636 java-util-Locale15637)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15638] (.parseCaseInsensitive this15638)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15639 ^java.time.format.TextStyle java-time-format-TextStyle15640] (.appendLocalizedOffset this15639 java-time-format-TextStyle15640)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15641 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter15642] (.append this15641 java-time-format-DateTimeFormatter15642)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15643 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15644] (.appendText this15643 java-time-temporal-TemporalField15644)) (^java.time.format.DateTimeFormatterBuilder [this15645 G__15646 G__15647] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__15646) (clojure.core/instance? java.time.format.TextStyle G__15647)) (clojure.core/let [G__15646 ^"java.time.temporal.TemporalField" G__15646 G__15647 ^"java.time.format.TextStyle" G__15647] (.appendText ^java.time.format.DateTimeFormatterBuilder this15645 G__15646 G__15647)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__15646) (clojure.core/instance? java.util.Map G__15647)) (clojure.core/let [G__15646 ^"java.time.temporal.TemporalField" G__15646 G__15647 ^"java.util.Map" G__15647] (.appendText ^java.time.format.DateTimeFormatterBuilder this15645 G__15646 G__15647)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15648 ^java.time.format.FormatStyle java-time-format-FormatStyle15649 ^java.time.format.FormatStyle java-time-format-FormatStyle15650] (.appendLocalized this15648 java-time-format-FormatStyle15649 java-time-format-FormatStyle15650)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15651 ^java.lang.String java-lang-String15652 ^java.lang.String java-lang-String15653] (.appendOffset this15651 java-lang-String15652 java-lang-String15653)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^java.time.format.DateTimeFormatterBuilder [this15654 G__15655 G__15656 G__15657 G__15658] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__15655) (clojure.core/instance? java.lang.Number G__15656) (clojure.core/instance? java.lang.Number G__15657) (clojure.core/instance? java.lang.Number G__15658)) (clojure.core/let [G__15655 ^"java.time.temporal.TemporalField" G__15655 G__15656 (clojure.core/int G__15656) G__15657 (clojure.core/int G__15657) G__15658 (clojure.core/int G__15658)] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this15654 G__15655 G__15656 G__15657 G__15658)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__15655) (clojure.core/instance? java.lang.Number G__15656) (clojure.core/instance? java.lang.Number G__15657) (clojure.core/instance? java.time.chrono.ChronoLocalDate G__15658)) (clojure.core/let [G__15655 ^"java.time.temporal.TemporalField" G__15655 G__15656 (clojure.core/int G__15656) G__15657 (clojure.core/int G__15657) G__15658 ^"java.time.chrono.ChronoLocalDate" G__15658] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this15654 G__15655 G__15656 G__15657 G__15658)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15659 ^java.time.format.TextStyle java-time-format-TextStyle15660] (.appendZoneText this15659 java-time-format-TextStyle15660)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this15661 ^java.time.format.TextStyle java-time-format-TextStyle15662 ^java.util.Set java-util-Set15663] (.appendZoneText this15661 java-time-format-TextStyle15662 java-util-Set15663)))
