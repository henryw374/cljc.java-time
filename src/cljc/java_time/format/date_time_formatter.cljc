(ns cljc.java-time.format.date-time-formatter (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.format :refer [DateTimeFormatter]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.format DateTimeFormatter])))
(def iso-local-time #? (:clj java.time.format.DateTimeFormatter/ISO_LOCAL_TIME :cljs (. java.time.format.DateTimeFormatter -ISO_LOCAL_TIME)))
(def iso-ordinal-date #? (:clj java.time.format.DateTimeFormatter/ISO_ORDINAL_DATE :cljs (. java.time.format.DateTimeFormatter -ISO_ORDINAL_DATE)))
(def iso-offset-date #? (:clj java.time.format.DateTimeFormatter/ISO_OFFSET_DATE :cljs (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE)))
(def iso-time #? (:clj java.time.format.DateTimeFormatter/ISO_TIME :cljs (. java.time.format.DateTimeFormatter -ISO_TIME)))
(def iso-local-date-time #? (:clj java.time.format.DateTimeFormatter/ISO_LOCAL_DATE_TIME :cljs (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE_TIME)))
(def iso-instant #? (:clj java.time.format.DateTimeFormatter/ISO_INSTANT :cljs (. java.time.format.DateTimeFormatter -ISO_INSTANT)))
(def rfc-1123-date-time #? (:clj java.time.format.DateTimeFormatter/RFC_1123_DATE_TIME :cljs (. java.time.format.DateTimeFormatter -RFC_1123_DATE_TIME)))
(def iso-date #? (:clj java.time.format.DateTimeFormatter/ISO_DATE :cljs (. java.time.format.DateTimeFormatter -ISO_DATE)))
(def iso-week-date #? (:clj java.time.format.DateTimeFormatter/ISO_WEEK_DATE :cljs (. java.time.format.DateTimeFormatter -ISO_WEEK_DATE)))
(def iso-offset-time #? (:clj java.time.format.DateTimeFormatter/ISO_OFFSET_TIME :cljs (. java.time.format.DateTimeFormatter -ISO_OFFSET_TIME)))
(def iso-local-date #? (:clj java.time.format.DateTimeFormatter/ISO_LOCAL_DATE :cljs (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE)))
(def iso-zoned-date-time #? (:clj java.time.format.DateTimeFormatter/ISO_ZONED_DATE_TIME :cljs (. java.time.format.DateTimeFormatter -ISO_ZONED_DATE_TIME)))
(def iso-offset-date-time #? (:clj java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME :cljs (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE_TIME)))
(def iso-date-time #? (:clj java.time.format.DateTimeFormatter/ISO_DATE_TIME :cljs (. java.time.format.DateTimeFormatter -ISO_DATE_TIME)))
(def basic-iso-date #? (:clj java.time.format.DateTimeFormatter/BASIC_ISO_DATE :cljs (. java.time.format.DateTimeFormatter -BASIC_ISO_DATE)))
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String13658] (. java.time.format.DateTimeFormatter ofPattern java-lang-String13658)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String13659 ^java.util.Locale java-util-Locale13660] (. java.time.format.DateTimeFormatter ofPattern java-lang-String13659 java-util-Locale13660)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this13661 ^java.lang.CharSequence java-lang-CharSequence13662 ^"java.lang.Class" java-time-temporal-TemporalQuery-array13663] (.parseBest this13661 java-lang-CharSequence13662 java-time-temporal-TemporalQuery-array13663)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this13664 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13665 ^java.lang.Appendable java-lang-Appendable13666] (.formatTo this13664 java-time-temporal-TemporalAccessor13665 java-lang-Appendable13666)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this13667] (jti/getter decimalStyle this13667)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13668 ^java.time.chrono.Chronology java-time-chrono-Chronology13669] (.withChronology this13668 java-time-chrono-Chronology13669)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this13670] (jti/getter resolverStyle this13670)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13671 ^java.time.format.DecimalStyle java-time-format-DecimalStyle13672] (.withDecimalStyle this13671 java-time-format-DecimalStyle13672)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this13673] (jti/getter locale this13673)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this13674] (.toString this13674)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13675 ^java.time.ZoneId java-time-ZoneId13676] (.withZone this13675 java-time-ZoneId13676)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this13677] (jti/getter zone this13677)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle"] ["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle13678 ^java.time.format.FormatStyle java-time-format-FormatStyle13679] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle13678 java-time-format-FormatStyle13679)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle13680] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle13680)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this13681] (jti/getter resolverFields this13681)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this13682] (jti/getter chronology this13682)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this13683 ^java.lang.CharSequence java-lang-CharSequence13684] (.parse this13683 java-lang-CharSequence13684)) (^java.lang.Object [this13685 G__13686 G__13687] #? (:cljs (.parse ^java.time.format.DateTimeFormatter this13685 G__13686 G__13687) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__13686) (clojure.core/instance? (java.lang.Class/forName "java.text.ParsePosition") G__13687)) (clojure.core/let [G__13686 ^"java.lang.CharSequence" G__13686 G__13687 ^"java.text.ParsePosition" G__13687] (.parse ^java.time.format.DateTimeFormatter this13685 G__13686 G__13687)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__13686) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalQuery") G__13687)) (clojure.core/let [G__13686 ^"java.lang.CharSequence" G__13686 G__13687 ^"java.time.temporal.TemporalQuery" G__13687] (.parse ^java.time.format.DateTimeFormatter this13685 G__13686 G__13687)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13688 ^java.util.Locale java-util-Locale13689] (.withLocale this13688 java-util-Locale13689)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this13690 G__13691] #? (:cljs (.withResolverFields ^java.time.format.DateTimeFormatter this13690 G__13691) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.util.Set") G__13691)) (clojure.core/let [G__13691 ^"java.util.Set" G__13691] (.withResolverFields ^java.time.format.DateTimeFormatter this13690 G__13691)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "[Ljava.time.temporal.TemporalField;") G__13691)) (clojure.core/let [G__13691 ^"[Ljava.time.temporal.TemporalField;" G__13691] (.withResolverFields ^java.time.format.DateTimeFormatter this13690 G__13691)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this13692 ^java.lang.CharSequence java-lang-CharSequence13693 ^java.text.ParsePosition java-text-ParsePosition13694] (.parseUnresolved this13692 java-lang-CharSequence13693 java-text-ParsePosition13694)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle13695] (. java.time.format.DateTimeFormatter ofLocalizedTime java-time-format-FormatStyle13695)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle13696] (. java.time.format.DateTimeFormatter ofLocalizedDate java-time-format-FormatStyle13696)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this13697 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13698] (.format this13697 java-time-temporal-TemporalAccessor13698)))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"] ["java.time.format.DateTimeFormatter"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this13699 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13700] (.toFormat this13699 java-time-temporal-TemporalQuery13700)) (^java.text.Format [^java.time.format.DateTimeFormatter this13701] (.toFormat this13701)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13702 ^java.time.format.ResolverStyle java-time-format-ResolverStyle13703] (.withResolverStyle this13702 java-time-format-ResolverStyle13703)))
