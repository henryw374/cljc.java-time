(ns cljc.java-time.format.date-time-formatter (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.format :refer [DateTimeFormatter]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.format DateTimeFormatter])))
(def iso-local-time (. java.time.format.DateTimeFormatter -ISO_LOCAL_TIME))
(def iso-ordinal-date (. java.time.format.DateTimeFormatter -ISO_ORDINAL_DATE))
(def iso-offset-date (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE))
(def iso-time (. java.time.format.DateTimeFormatter -ISO_TIME))
(def iso-local-date-time (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE_TIME))
(def iso-instant (. java.time.format.DateTimeFormatter -ISO_INSTANT))
(def rfc-1123-date-time (. java.time.format.DateTimeFormatter -RFC_1123_DATE_TIME))
(def iso-date (. java.time.format.DateTimeFormatter -ISO_DATE))
(def iso-week-date (. java.time.format.DateTimeFormatter -ISO_WEEK_DATE))
(def iso-offset-time (. java.time.format.DateTimeFormatter -ISO_OFFSET_TIME))
(def iso-local-date (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE))
(def iso-zoned-date-time (. java.time.format.DateTimeFormatter -ISO_ZONED_DATE_TIME))
(def iso-offset-date-time (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE_TIME))
(def iso-date-time (. java.time.format.DateTimeFormatter -ISO_DATE_TIME))
(def basic-iso-date (. java.time.format.DateTimeFormatter -BASIC_ISO_DATE))
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String4877] (. java.time.format.DateTimeFormatter ofPattern java-lang-String4877)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String4878 ^java.util.Locale java-util-Locale4879] (. java.time.format.DateTimeFormatter ofPattern java-lang-String4878 java-util-Locale4879)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this4880 ^java.lang.CharSequence java-lang-CharSequence4881 ^"java.lang.Class" java-time-temporal-TemporalQuery-array4882] (.parseBest this4880 java-lang-CharSequence4881 java-time-temporal-TemporalQuery-array4882)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this4883 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4884 ^java.lang.Appendable java-lang-Appendable4885] (.formatTo this4883 java-time-temporal-TemporalAccessor4884 java-lang-Appendable4885)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this4886] (jti/getter decimalStyle this4886)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this4887 ^java.time.chrono.Chronology java-time-chrono-Chronology4888] (.withChronology this4887 java-time-chrono-Chronology4888)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this4889] (jti/getter resolverStyle this4889)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this4890 ^java.time.format.DecimalStyle java-time-format-DecimalStyle4891] (.withDecimalStyle this4890 java-time-format-DecimalStyle4891)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this4892] (jti/getter locale this4892)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this4893] (.toString this4893)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this4894 ^java.time.ZoneId java-time-ZoneId4895] (.withZone this4894 java-time-ZoneId4895)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this4896] (jti/getter zone this4896)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle"] ["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle4897 ^java.time.format.FormatStyle java-time-format-FormatStyle4898] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle4897 java-time-format-FormatStyle4898)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle4899] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle4899)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this4900] (jti/getter resolverFields this4900)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this4901] (jti/getter chronology this4901)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [this4902 G__4903 G__4904] #? (:cljs (.parse ^java.time.format.DateTimeFormatter this4902 G__4903 G__4904) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__4903) (clojure.core/instance? (java.lang.Class/forName "java.text.ParsePosition") G__4904)) (clojure.core/let [G__4903 ^"java.lang.CharSequence" G__4903 G__4904 ^"java.text.ParsePosition" G__4904] (.parse ^java.time.format.DateTimeFormatter this4902 G__4903 G__4904)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__4903) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalQuery") G__4904)) (clojure.core/let [G__4903 ^"java.lang.CharSequence" G__4903 G__4904 ^"java.time.temporal.TemporalQuery" G__4904] (.parse ^java.time.format.DateTimeFormatter this4902 G__4903 G__4904)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this4905 ^java.lang.CharSequence java-lang-CharSequence4906] (.parse this4905 java-lang-CharSequence4906)))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this4907 ^java.util.Locale java-util-Locale4908] (.withLocale this4907 java-util-Locale4908)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this4909 G__4910] #? (:cljs (.withResolverFields ^java.time.format.DateTimeFormatter this4909 G__4910) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.util.Set") G__4910)) (clojure.core/let [G__4910 ^"java.util.Set" G__4910] (.withResolverFields ^java.time.format.DateTimeFormatter this4909 G__4910)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "[Ljava.time.temporal.TemporalField;") G__4910)) (clojure.core/let [G__4910 ^"[Ljava.time.temporal.TemporalField;" G__4910] (.withResolverFields ^java.time.format.DateTimeFormatter this4909 G__4910)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this4911 ^java.lang.CharSequence java-lang-CharSequence4912 ^java.text.ParsePosition java-text-ParsePosition4913] (.parseUnresolved this4911 java-lang-CharSequence4912 java-text-ParsePosition4913)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle4914] (. java.time.format.DateTimeFormatter ofLocalizedTime java-time-format-FormatStyle4914)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle4915] (. java.time.format.DateTimeFormatter ofLocalizedDate java-time-format-FormatStyle4915)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this4916 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4917] (.format this4916 java-time-temporal-TemporalAccessor4917)))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"] ["java.time.format.DateTimeFormatter"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this4918 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4919] (.toFormat this4918 java-time-temporal-TemporalQuery4919)) (^java.text.Format [^java.time.format.DateTimeFormatter this4920] (.toFormat this4920)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this4921 ^java.time.format.ResolverStyle java-time-format-ResolverStyle4922] (.withResolverStyle this4921 java-time-format-ResolverStyle4922)))
