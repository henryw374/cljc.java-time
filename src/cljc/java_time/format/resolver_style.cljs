(ns cljc.java-time.format.resolver-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [ResolverStyle]]))
(def smart (goog.object/get java.time.format.ResolverStyle "SMART"))
(def strict (goog.object/get java.time.format.ResolverStyle "STRICT"))
(def lenient (goog.object/get java.time.format.ResolverStyle "LENIENT"))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.format.ResolverStyle "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.ResolverStyle [^java.lang.String java-lang-String61912] (js-invoke java.time.format.ResolverStyle "valueOf" java-lang-String61912)) (^java.lang.Enum [^java.lang.Class java-lang-Class61913 ^java.lang.String java-lang-String61914] (js-invoke java.time.format.ResolverStyle "valueOf" java-lang-Class61913 java-lang-String61914)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.ResolverStyle"]))} (^int [^js/JSJoda.ResolverStyle this61915] (.ordinal this61915)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^js/JSJoda.ResolverStyle this61916] (.toString this61916)))
(clojure.core/defn name {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^js/JSJoda.ResolverStyle this61917] (.name this61917)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Class [^js/JSJoda.ResolverStyle this61918] (.declaringClass this61918)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.ResolverStyle"]))} (^int [^js/JSJoda.ResolverStyle this61919] (.hashCode this61919)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"] ["java.time.format.ResolverStyle" "java.lang.Enum"]))} (^int [this61920 G__61921] (.compareTo ^js/JSJoda.ResolverStyle this61920 G__61921)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"]))} (^boolean [^js/JSJoda.ResolverStyle this61922 ^java.lang.Object java-lang-Object61923] (.equals this61922 java-lang-Object61923)))
