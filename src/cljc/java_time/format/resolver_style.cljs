(ns cljc.java-time.format.resolver-style (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time.format :refer [ResolverStyle]]))
(def smart (goog.object/get java.time.format.ResolverStyle "SMART"))
(def strict (goog.object/get java.time.format.ResolverStyle "STRICT"))
(def lenient (goog.object/get java.time.format.ResolverStyle "LENIENT"))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.format.ResolverStyle "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.ResolverStyle [^java.lang.String java-lang-String16132] (js-invoke java.time.format.ResolverStyle "valueOf" java-lang-String16132)) (^java.lang.Enum [^java.lang.Class java-lang-Class16133 ^java.lang.String java-lang-String16134] (js-invoke java.time.format.ResolverStyle "valueOf" java-lang-Class16133 java-lang-String16134)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.ResolverStyle"]))} (^int [^js/JSJoda.ResolverStyle this16135] (.ordinal this16135)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^js/JSJoda.ResolverStyle this16136] (.toString this16136)))
(clojure.core/defn name {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^js/JSJoda.ResolverStyle this16137] (.name this16137)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Class [^js/JSJoda.ResolverStyle this16138] (.declaringClass this16138)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.ResolverStyle"]))} (^int [^js/JSJoda.ResolverStyle this16139] (.hashCode this16139)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Enum"]))} (^int [^js/JSJoda.ResolverStyle this16140 ^java.lang.Enum java-lang-Enum16141] (.compareTo this16140 java-lang-Enum16141)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"]))} (^boolean [^js/JSJoda.ResolverStyle this16142 ^java.lang.Object java-lang-Object16143] (.equals this16142 java-lang-Object16143)))
