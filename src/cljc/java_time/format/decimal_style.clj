(ns cljc.java-time.format.decimal-style (:import [java.time.format DecimalStyle]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def standard java.time.format.DecimalStyle/STANDARD)
(clojure.core/defn with-decimal-separator {:arglists (quote (["java.time.format.DecimalStyle" "char"]))} (^java.time.format.DecimalStyle [^java.time.format.DecimalStyle this51433 ^java.lang.Character char51434] (.withDecimalSeparator this51433 char51434)))
(clojure.core/defn of {:arglists (quote (["java.util.Locale"]))} (^java.time.format.DecimalStyle [^java.util.Locale java-util-Locale51435] (. java.time.format.DecimalStyle of java-util-Locale51435)))
(clojure.core/defn with-positive-sign {:arglists (quote (["java.time.format.DecimalStyle" "char"]))} (^java.time.format.DecimalStyle [^java.time.format.DecimalStyle this51436 ^java.lang.Character char51437] (.withPositiveSign this51436 char51437)))
(clojure.core/defn get-decimal-separator {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.Character [^java.time.format.DecimalStyle this51438] (.getDecimalSeparator this51438)))
(clojure.core/defn of-default-locale {:arglists (quote ([]))} (^java.time.format.DecimalStyle [] (. java.time.format.DecimalStyle ofDefaultLocale)))
(clojure.core/defn with-zero-digit {:arglists (quote (["java.time.format.DecimalStyle" "char"]))} (^java.time.format.DecimalStyle [^java.time.format.DecimalStyle this51439 ^java.lang.Character char51440] (.withZeroDigit this51439 char51440)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.String [^java.time.format.DecimalStyle this51441] (.toString this51441)))
(clojure.core/defn get-zero-digit {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.Character [^java.time.format.DecimalStyle this51442] (.getZeroDigit this51442)))
(clojure.core/defn with-negative-sign {:arglists (quote (["java.time.format.DecimalStyle" "char"]))} (^java.time.format.DecimalStyle [^java.time.format.DecimalStyle this51443 ^java.lang.Character char51444] (.withNegativeSign this51443 char51444)))
(clojure.core/defn get-available-locales {:arglists (quote ([]))} (^java.util.Set [] (. java.time.format.DecimalStyle getAvailableLocales)))
(clojure.core/defn get-positive-sign {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.Character [^java.time.format.DecimalStyle this51445] (.getPositiveSign this51445)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.Integer [^java.time.format.DecimalStyle this51446] (.hashCode this51446)))
(clojure.core/defn get-negative-sign {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.Character [^java.time.format.DecimalStyle this51447] (.getNegativeSign this51447)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.DecimalStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.DecimalStyle this51448 ^java.lang.Object java-lang-Object51449] (.equals this51448 java-lang-Object51449)))
