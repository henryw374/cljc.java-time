(ns cljc.java-time.format.sign-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [SignStyle]]))
(def exceeds-pad (. java.time.format.SignStyle -EXCEEDS_PAD))
(def normal (. java.time.format.SignStyle -NORMAL))
(def always (. java.time.format.SignStyle -ALWAYS))
(def never (. java.time.format.SignStyle -NEVER))
(def not-negative (. java.time.format.SignStyle -NOT_NEGATIVE))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.format.SignStyle values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.SignStyle [^java.lang.String java-lang-String13487] (. java.time.format.SignStyle valueOf java-lang-String13487)) (^java.lang.Enum [^java.lang.Class java-lang-Class13488 ^java.lang.String java-lang-String13489] (. java.time.format.SignStyle valueOf java-lang-Class13488 java-lang-String13489)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this13490] (.ordinal this13490)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this13491] (.toString this13491)))
(clojure.core/defn name {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^java.time.format.SignStyle this13492] (.name this13492)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Class [^java.time.format.SignStyle this13493] (.declaringClass this13493)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Integer [^java.time.format.SignStyle this13494] (.hashCode this13494)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"] ["java.time.format.SignStyle" "java.lang.Enum"]))} (^java.lang.Integer [this13495 G__13496] (.compareTo ^java.time.format.SignStyle this13495 G__13496)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.SignStyle this13497 ^java.lang.Object java-lang-Object13498] (.equals this13497 java-lang-Object13498)))
