(ns cljc.java-time.format.sign-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [SignStyle]]))
(def exceeds-pad (goog.object/get java.time.format.SignStyle "EXCEEDS_PAD"))
(def normal (goog.object/get java.time.format.SignStyle "NORMAL"))
(def always (goog.object/get java.time.format.SignStyle "ALWAYS"))
(def never (goog.object/get java.time.format.SignStyle "NEVER"))
(def not-negative (goog.object/get java.time.format.SignStyle "NOT_NEGATIVE"))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.format.SignStyle "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.SignStyle [^java.lang.String java-lang-String61970] (js-invoke java.time.format.SignStyle "valueOf" java-lang-String61970)) (^java.lang.Enum [^java.lang.Class java-lang-Class61971 ^java.lang.String java-lang-String61972] (js-invoke java.time.format.SignStyle "valueOf" java-lang-Class61971 java-lang-String61972)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.SignStyle"]))} (^int [^js/JSJoda.SignStyle this61973] (.ordinal this61973)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^js/JSJoda.SignStyle this61974] (.toString this61974)))
(clojure.core/defn name {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^js/JSJoda.SignStyle this61975] (.name this61975)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Class [^js/JSJoda.SignStyle this61976] (.declaringClass this61976)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.SignStyle"]))} (^int [^js/JSJoda.SignStyle this61977] (.hashCode this61977)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"] ["java.time.format.SignStyle" "java.lang.Enum"]))} (^int [this61978 G__61979] (.compareTo ^js/JSJoda.SignStyle this61978 G__61979)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"]))} (^boolean [^js/JSJoda.SignStyle this61980 ^java.lang.Object java-lang-Object61981] (.equals this61980 java-lang-Object61981)))
