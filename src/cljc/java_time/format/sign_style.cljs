(ns cljc.java-time.format.sign-style (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [SignStyle]]))
(def exceeds-pad (goog.object/get java.time.format.SignStyle "EXCEEDS_PAD"))
(def normal (goog.object/get java.time.format.SignStyle "NORMAL"))
(def always (goog.object/get java.time.format.SignStyle "ALWAYS"))
(def never (goog.object/get java.time.format.SignStyle "NEVER"))
(def not-negative (goog.object/get java.time.format.SignStyle "NOT_NEGATIVE"))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.format.SignStyle "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.SignStyle [^java.lang.String java-lang-String6266] (js-invoke java.time.format.SignStyle "valueOf" java-lang-String6266)) (^java.lang.Enum [^java.lang.Class java-lang-Class6267 ^java.lang.String java-lang-String6268] (js-invoke java.time.format.SignStyle "valueOf" java-lang-Class6267 java-lang-String6268)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.SignStyle"]))} (^int [^js/JSJoda.SignStyle this6269] (.ordinal this6269)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^js/JSJoda.SignStyle this6270] (.toString this6270)))
(clojure.core/defn name {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.String [^js/JSJoda.SignStyle this6271] (.name this6271)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.SignStyle"]))} (^java.lang.Class [^js/JSJoda.SignStyle this6272] (.declaringClass this6272)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.SignStyle"]))} (^int [^js/JSJoda.SignStyle this6273] (.hashCode this6273)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.SignStyle" "java.lang.Enum"]))} (^int [^js/JSJoda.SignStyle this6274 ^java.lang.Enum java-lang-Enum6275] (.compareTo this6274 java-lang-Enum6275)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.SignStyle" "java.lang.Object"]))} (^boolean [^js/JSJoda.SignStyle this6276 ^java.lang.Object java-lang-Object6277] (.equals this6276 java-lang-Object6277)))
