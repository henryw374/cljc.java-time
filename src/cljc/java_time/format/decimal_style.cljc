(ns cljc.java-time.format.decimal-style (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.format :refer [DecimalStyle]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.format DecimalStyle])))
(def standard #? (:clj java.time.format.DecimalStyle/STANDARD :cljs (. java.time.format.DecimalStyle -STANDARD)))
(clojure.core/defn with-decimal-separator {:arglists (quote (["java.time.format.DecimalStyle" "char"]))} (^java.time.format.DecimalStyle [^java.time.format.DecimalStyle this13793 ^java.lang.Character char13794] (.withDecimalSeparator this13793 char13794)))
(clojure.core/defn of {:arglists (quote (["java.util.Locale"]))} (^java.time.format.DecimalStyle [^java.util.Locale java-util-Locale13795] (. java.time.format.DecimalStyle of java-util-Locale13795)))
(clojure.core/defn with-positive-sign {:arglists (quote (["java.time.format.DecimalStyle" "char"]))} (^java.time.format.DecimalStyle [^java.time.format.DecimalStyle this13796 ^java.lang.Character char13797] (.withPositiveSign this13796 char13797)))
(clojure.core/defn get-decimal-separator {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.Character [^java.time.format.DecimalStyle this13798] (jti/getter decimalSeparator this13798)))
(clojure.core/defn of-default-locale {:arglists (quote ([]))} (^java.time.format.DecimalStyle [] (. java.time.format.DecimalStyle ofDefaultLocale)))
(clojure.core/defn with-zero-digit {:arglists (quote (["java.time.format.DecimalStyle" "char"]))} (^java.time.format.DecimalStyle [^java.time.format.DecimalStyle this13799 ^java.lang.Character char13800] (.withZeroDigit this13799 char13800)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.String [^java.time.format.DecimalStyle this13801] (.toString this13801)))
(clojure.core/defn get-zero-digit {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.Character [^java.time.format.DecimalStyle this13802] (jti/getter zeroDigit this13802)))
(clojure.core/defn with-negative-sign {:arglists (quote (["java.time.format.DecimalStyle" "char"]))} (^java.time.format.DecimalStyle [^java.time.format.DecimalStyle this13803 ^java.lang.Character char13804] (.withNegativeSign this13803 char13804)))
(clojure.core/defn get-available-locales {:arglists (quote ([]))} (^java.util.Set [] (. java.time.format.DecimalStyle getAvailableLocales)))
(clojure.core/defn get-positive-sign {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.Character [^java.time.format.DecimalStyle this13805] (jti/getter positiveSign this13805)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.Integer [^java.time.format.DecimalStyle this13806] (.hashCode this13806)))
(clojure.core/defn get-negative-sign {:arglists (quote (["java.time.format.DecimalStyle"]))} (^java.lang.Character [^java.time.format.DecimalStyle this13807] (jti/getter negativeSign this13807)))
(clojure.core/defn equals {:arglists (quote (["java.time.format.DecimalStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.DecimalStyle this13808 ^java.lang.Object java-lang-Object13809] (.equals this13808 java-lang-Object13809)))
