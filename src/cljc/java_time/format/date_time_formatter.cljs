(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [DateTimeFormatter]]))
(def iso-local-time (goog.object/get java.time.format.DateTimeFormatter "ISO_LOCAL_TIME"))
(def iso-ordinal-date (goog.object/get java.time.format.DateTimeFormatter "ISO_ORDINAL_DATE"))
(def iso-offset-date (goog.object/get java.time.format.DateTimeFormatter "ISO_OFFSET_DATE"))
(def iso-time (goog.object/get java.time.format.DateTimeFormatter "ISO_TIME"))
(def iso-local-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_LOCAL_DATE_TIME"))
(def iso-instant (goog.object/get java.time.format.DateTimeFormatter "ISO_INSTANT"))
(def rfc-1123-date-time (goog.object/get java.time.format.DateTimeFormatter "RFC_1123_DATE_TIME"))
(def iso-date (goog.object/get java.time.format.DateTimeFormatter "ISO_DATE"))
(def iso-week-date (goog.object/get java.time.format.DateTimeFormatter "ISO_WEEK_DATE"))
(def iso-offset-time (goog.object/get java.time.format.DateTimeFormatter "ISO_OFFSET_TIME"))
(def iso-local-date (goog.object/get java.time.format.DateTimeFormatter "ISO_LOCAL_DATE"))
(def iso-zoned-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_ZONED_DATE_TIME"))
(def iso-offset-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_OFFSET_DATE_TIME"))
(def iso-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_DATE_TIME"))
(def basic-iso-date (goog.object/get java.time.format.DateTimeFormatter "BASIC_ISO_DATE"))
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^js/JSJoda.DateTimeFormatter [^java.lang.String java-lang-String8984] (js-invoke java.time.format.DateTimeFormatter "ofPattern" java-lang-String8984)) (^js/JSJoda.DateTimeFormatter [^java.lang.String java-lang-String8985 ^java.util.Locale java-util-Locale8986] (js-invoke java.time.format.DateTimeFormatter "ofPattern" java-lang-String8985 java-util-Locale8986)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.DateTimeFormatter this8987 ^java.lang.CharSequence java-lang-CharSequence8988 ^"java.lang.Class" java-time-temporal-TemporalQuery-array8989] (.parseBest this8987 java-lang-CharSequence8988 java-time-temporal-TemporalQuery-array8989)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^void [^js/JSJoda.DateTimeFormatter this8990 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8991 ^java.lang.Appendable java-lang-Appendable8992] (.formatTo this8990 java-time-temporal-TemporalAccessor8991 java-lang-Appendable8992)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DecimalStyle [^js/JSJoda.DateTimeFormatter this8993] (.decimalStyle this8993)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this8994 ^js/JSJoda.Chronology java-time-chrono-Chronology8995] (.withChronology this8994 java-time-chrono-Chronology8995)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.ResolverStyle [^js/JSJoda.DateTimeFormatter this8996] (.resolverStyle this8996)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this8997 ^js/JSJoda.DecimalStyle java-time-format-DecimalStyle8998] (.withDecimalStyle this8997 java-time-format-DecimalStyle8998)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^js/JSJoda.DateTimeFormatter this8999] (.locale this8999)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.DateTimeFormatter this9000] (.toString this9000)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^js/JSJoda.TemporalQuery [] (js-invoke java.time.format.DateTimeFormatter "parsedLeapSecond")))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this9001 ^js/JSJoda.ZoneId java-time-ZoneId9002] (.withZone this9001 java-time-ZoneId9002)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^js/JSJoda.TemporalQuery [] (js-invoke java.time.format.DateTimeFormatter "parsedExcessDays")))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.ZoneId [^js/JSJoda.DateTimeFormatter this9003] (.zone this9003)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle"] ["java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle9004] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedDateTime" java-time-format-FormatStyle9004)) (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle9005 ^js/JSJoda.FormatStyle java-time-format-FormatStyle9006] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedDateTime" java-time-format-FormatStyle9005 java-time-format-FormatStyle9006)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^js/JSJoda.DateTimeFormatter this9007] (.resolverFields this9007)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.Chronology [^js/JSJoda.DateTimeFormatter this9008] (.chronology this9008)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.DateTimeFormatter this9009 ^java.lang.CharSequence java-lang-CharSequence9010] (.parse this9009 java-lang-CharSequence9010)) (^java.lang.Object [this9011 G__9012 G__9013] (.parse ^js/JSJoda.DateTimeFormatter this9011 G__9012 G__9013)))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this9014 ^java.util.Locale java-util-Locale9015] (.withLocale this9014 java-util-Locale9015)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^js/JSJoda.DateTimeFormatter [this9016 G__9017] (.withResolverFields ^js/JSJoda.DateTimeFormatter this9016 G__9017)))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.DateTimeFormatter this9018 ^java.lang.CharSequence java-lang-CharSequence9019 ^java.text.ParsePosition java-text-ParsePosition9020] (.parseUnresolved this9018 java-lang-CharSequence9019 java-text-ParsePosition9020)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle9021] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedTime" java-time-format-FormatStyle9021)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle9022] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedDate" java-time-format-FormatStyle9022)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^js/JSJoda.DateTimeFormatter this9023 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor9024] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.format this9023 java-time-temporal-TemporalAccessor9024))))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^js/JSJoda.DateTimeFormatter this9025] (.toFormat this9025)) (^java.text.Format [^js/JSJoda.DateTimeFormatter this9026 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery9027] (.toFormat this9026 java-time-temporal-TemporalQuery9027)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this9028 ^js/JSJoda.ResolverStyle java-time-format-ResolverStyle9029] (.withResolverStyle this9028 java-time-format-ResolverStyle9029)))
