(ns cljc.java-time.format.date-time-formatter (:require [java.time.format :refer [DateTimeFormatter]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def iso-local-time (. java.time.format.DateTimeFormatter -ISO_LOCAL_TIME))
(def iso-ordinal-date (. java.time.format.DateTimeFormatter -ISO_ORDINAL_DATE))
(def iso-offset-date (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE))
(def iso-time (. java.time.format.DateTimeFormatter -ISO_TIME))
(def iso-local-date-time (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE_TIME))
(def iso-instant (. java.time.format.DateTimeFormatter -ISO_INSTANT))
(def rfc-1123-date-time (. java.time.format.DateTimeFormatter -RFC_1123_DATE_TIME))
(def iso-date (. java.time.format.DateTimeFormatter -ISO_DATE))
(def iso-week-date (. java.time.format.DateTimeFormatter -ISO_WEEK_DATE))
(def iso-offset-time (. java.time.format.DateTimeFormatter -ISO_OFFSET_TIME))
(def iso-local-date (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE))
(def iso-zoned-date-time (. java.time.format.DateTimeFormatter -ISO_ZONED_DATE_TIME))
(def iso-offset-date-time (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE_TIME))
(def iso-date-time (. java.time.format.DateTimeFormatter -ISO_DATE_TIME))
(def basic-iso-date (. java.time.format.DateTimeFormatter -BASIC_ISO_DATE))
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String51209] (. java.time.format.DateTimeFormatter ofPattern java-lang-String51209)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String51210 ^java.util.Locale java-util-Locale51211] (. java.time.format.DateTimeFormatter ofPattern java-lang-String51210 java-util-Locale51211)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this51212 ^java.lang.CharSequence java-lang-CharSequence51213 ^"java.lang.Class" java-time-temporal-TemporalQuery-array51214] (.parseBest this51212 java-lang-CharSequence51213 java-time-temporal-TemporalQuery-array51214)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this51215 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor51216 ^java.lang.Appendable java-lang-Appendable51217] (.formatTo this51215 java-time-temporal-TemporalAccessor51216 java-lang-Appendable51217)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this51218] (.decimalStyle this51218)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this51219 ^java.time.chrono.Chronology java-time-chrono-Chronology51220] (.withChronology this51219 java-time-chrono-Chronology51220)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this51221] (.resolverStyle this51221)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this51222 ^java.time.format.DecimalStyle java-time-format-DecimalStyle51223] (.withDecimalStyle this51222 java-time-format-DecimalStyle51223)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this51224] (.locale this51224)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this51225] (.toString this51225)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this51226 ^java.time.ZoneId java-time-ZoneId51227] (.withZone this51226 java-time-ZoneId51227)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this51228] (.zone this51228)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle"] ["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle51229 ^java.time.format.FormatStyle java-time-format-FormatStyle51230] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle51229 java-time-format-FormatStyle51230)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle51231] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle51231)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this51232] (.resolverFields this51232)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this51233] (.chronology this51233)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [this51234 G__51235 G__51236] (.parse ^java.time.format.DateTimeFormatter this51234 G__51235 G__51236)) (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this51237 ^java.lang.CharSequence java-lang-CharSequence51238] (.parse this51237 java-lang-CharSequence51238)))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this51239 ^java.util.Locale java-util-Locale51240] (.withLocale this51239 java-util-Locale51240)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this51241 G__51242] (.withResolverFields ^java.time.format.DateTimeFormatter this51241 G__51242)))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this51243 ^java.lang.CharSequence java-lang-CharSequence51244 ^java.text.ParsePosition java-text-ParsePosition51245] (.parseUnresolved this51243 java-lang-CharSequence51244 java-text-ParsePosition51245)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle51246] (. java.time.format.DateTimeFormatter ofLocalizedTime java-time-format-FormatStyle51246)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle51247] (. java.time.format.DateTimeFormatter ofLocalizedDate java-time-format-FormatStyle51247)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this51248 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor51249] (.format this51248 java-time-temporal-TemporalAccessor51249)))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"] ["java.time.format.DateTimeFormatter"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this51250 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery51251] (.toFormat this51250 java-time-temporal-TemporalQuery51251)) (^java.text.Format [^java.time.format.DateTimeFormatter this51252] (.toFormat this51252)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this51253 ^java.time.format.ResolverStyle java-time-format-ResolverStyle51254] (.withResolverStyle this51253 java-time-format-ResolverStyle51254)))
