(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [DateTimeFormatter]]))
(def iso-local-time (. java.time.format.DateTimeFormatter -ISO_LOCAL_TIME))
(def iso-ordinal-date (. java.time.format.DateTimeFormatter -ISO_ORDINAL_DATE))
(def iso-offset-date (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE))
(def iso-time (. java.time.format.DateTimeFormatter -ISO_TIME))
(def iso-local-date-time (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE_TIME))
(def iso-instant (. java.time.format.DateTimeFormatter -ISO_INSTANT))
(def rfc-1123-date-time (. java.time.format.DateTimeFormatter -RFC_1123_DATE_TIME))
(def iso-date (. java.time.format.DateTimeFormatter -ISO_DATE))
(def iso-week-date (. java.time.format.DateTimeFormatter -ISO_WEEK_DATE))
(def iso-offset-time (. java.time.format.DateTimeFormatter -ISO_OFFSET_TIME))
(def iso-local-date (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE))
(def iso-zoned-date-time (. java.time.format.DateTimeFormatter -ISO_ZONED_DATE_TIME))
(def iso-offset-date-time (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE_TIME))
(def iso-date-time (. java.time.format.DateTimeFormatter -ISO_DATE_TIME))
(def basic-iso-date (. java.time.format.DateTimeFormatter -BASIC_ISO_DATE))
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String13217] (. java.time.format.DateTimeFormatter ofPattern java-lang-String13217)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String13218 ^java.util.Locale java-util-Locale13219] (. java.time.format.DateTimeFormatter ofPattern java-lang-String13218 java-util-Locale13219)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this13220 ^java.lang.CharSequence java-lang-CharSequence13221 ^"java.lang.Class" java-time-temporal-TemporalQuery-array13222] (.parseBest this13220 java-lang-CharSequence13221 java-time-temporal-TemporalQuery-array13222)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this13223 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13224 ^java.lang.Appendable java-lang-Appendable13225] (.formatTo this13223 java-time-temporal-TemporalAccessor13224 java-lang-Appendable13225)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this13226] (.decimalStyle this13226)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13227 ^java.time.chrono.Chronology java-time-chrono-Chronology13228] (.withChronology this13227 java-time-chrono-Chronology13228)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this13229] (.resolverStyle this13229)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13230 ^java.time.format.DecimalStyle java-time-format-DecimalStyle13231] (.withDecimalStyle this13230 java-time-format-DecimalStyle13231)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this13232] (.locale this13232)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this13233] (.toString this13233)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13234 ^java.time.ZoneId java-time-ZoneId13235] (.withZone this13234 java-time-ZoneId13235)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this13236] (.zone this13236)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle"] ["java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle13237] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle13237)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle13238 ^java.time.format.FormatStyle java-time-format-FormatStyle13239] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle13238 java-time-format-FormatStyle13239)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this13240] (.resolverFields this13240)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this13241] (.chronology this13241)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this13242 ^java.lang.CharSequence java-lang-CharSequence13243] (.parse this13242 java-lang-CharSequence13243)) (^java.lang.Object [this13244 G__13245 G__13246] (.parse ^java.time.format.DateTimeFormatter this13244 G__13245 G__13246)))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13247 ^java.util.Locale java-util-Locale13248] (.withLocale this13247 java-util-Locale13248)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this13249 G__13250] (.withResolverFields ^java.time.format.DateTimeFormatter this13249 G__13250)))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this13251 ^java.lang.CharSequence java-lang-CharSequence13252 ^java.text.ParsePosition java-text-ParsePosition13253] (.parseUnresolved this13251 java-lang-CharSequence13252 java-text-ParsePosition13253)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle13254] (. java.time.format.DateTimeFormatter ofLocalizedTime java-time-format-FormatStyle13254)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle13255] (. java.time.format.DateTimeFormatter ofLocalizedDate java-time-format-FormatStyle13255)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this13256 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13257] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.format this13256 java-time-temporal-TemporalAccessor13257))))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this13258] (.toFormat this13258)) (^java.text.Format [^java.time.format.DateTimeFormatter this13259 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13260] (.toFormat this13259 java-time-temporal-TemporalQuery13260)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this13261 ^java.time.format.ResolverStyle java-time-format-ResolverStyle13262] (.withResolverStyle this13261 java-time-format-ResolverStyle13262)))
