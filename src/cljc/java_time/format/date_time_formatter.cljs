(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [DateTimeFormatter]]))
(def iso-local-time (goog.object/get java.time.format.DateTimeFormatter "ISO_LOCAL_TIME"))
(def iso-ordinal-date (goog.object/get java.time.format.DateTimeFormatter "ISO_ORDINAL_DATE"))
(def iso-offset-date (goog.object/get java.time.format.DateTimeFormatter "ISO_OFFSET_DATE"))
(def iso-time (goog.object/get java.time.format.DateTimeFormatter "ISO_TIME"))
(def iso-local-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_LOCAL_DATE_TIME"))
(def iso-instant (goog.object/get java.time.format.DateTimeFormatter "ISO_INSTANT"))
(def rfc-1123-date-time (goog.object/get java.time.format.DateTimeFormatter "RFC_1123_DATE_TIME"))
(def iso-date (goog.object/get java.time.format.DateTimeFormatter "ISO_DATE"))
(def iso-week-date (goog.object/get java.time.format.DateTimeFormatter "ISO_WEEK_DATE"))
(def iso-offset-time (goog.object/get java.time.format.DateTimeFormatter "ISO_OFFSET_TIME"))
(def iso-local-date (goog.object/get java.time.format.DateTimeFormatter "ISO_LOCAL_DATE"))
(def iso-zoned-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_ZONED_DATE_TIME"))
(def iso-offset-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_OFFSET_DATE_TIME"))
(def iso-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_DATE_TIME"))
(def basic-iso-date (goog.object/get java.time.format.DateTimeFormatter "BASIC_ISO_DATE"))
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^js/JSJoda.DateTimeFormatter [^java.lang.String java-lang-String61700] (js-invoke java.time.format.DateTimeFormatter "ofPattern" java-lang-String61700)) (^js/JSJoda.DateTimeFormatter [^java.lang.String java-lang-String61701 ^java.util.Locale java-util-Locale61702] (js-invoke java.time.format.DateTimeFormatter "ofPattern" java-lang-String61701 java-util-Locale61702)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.DateTimeFormatter this61703 ^java.lang.CharSequence java-lang-CharSequence61704 ^"java.lang.Class" java-time-temporal-TemporalQuery-array61705] (.parseBest this61703 java-lang-CharSequence61704 java-time-temporal-TemporalQuery-array61705)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^void [^js/JSJoda.DateTimeFormatter this61706 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor61707 ^java.lang.Appendable java-lang-Appendable61708] (.formatTo this61706 java-time-temporal-TemporalAccessor61707 java-lang-Appendable61708)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DecimalStyle [^js/JSJoda.DateTimeFormatter this61709] (.decimalStyle this61709)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this61710 ^js/JSJoda.Chronology java-time-chrono-Chronology61711] (.withChronology this61710 java-time-chrono-Chronology61711)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.ResolverStyle [^js/JSJoda.DateTimeFormatter this61712] (.resolverStyle this61712)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this61713 ^js/JSJoda.DecimalStyle java-time-format-DecimalStyle61714] (.withDecimalStyle this61713 java-time-format-DecimalStyle61714)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^js/JSJoda.DateTimeFormatter this61715] (.locale this61715)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.DateTimeFormatter this61716] (.toString this61716)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^js/JSJoda.TemporalQuery [] (js-invoke java.time.format.DateTimeFormatter "parsedLeapSecond")))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this61717 ^js/JSJoda.ZoneId java-time-ZoneId61718] (.withZone this61717 java-time-ZoneId61718)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^js/JSJoda.TemporalQuery [] (js-invoke java.time.format.DateTimeFormatter "parsedExcessDays")))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.ZoneId [^js/JSJoda.DateTimeFormatter this61719] (.zone this61719)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle"] ["java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle61720] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedDateTime" java-time-format-FormatStyle61720)) (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle61721 ^js/JSJoda.FormatStyle java-time-format-FormatStyle61722] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedDateTime" java-time-format-FormatStyle61721 java-time-format-FormatStyle61722)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^js/JSJoda.DateTimeFormatter this61723] (.resolverFields this61723)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.Chronology [^js/JSJoda.DateTimeFormatter this61724] (.chronology this61724)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.DateTimeFormatter this61725 ^java.lang.CharSequence java-lang-CharSequence61726] (.parse this61725 java-lang-CharSequence61726)) (^java.lang.Object [this61727 G__61728 G__61729] (.parse ^js/JSJoda.DateTimeFormatter this61727 G__61728 G__61729)))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this61730 ^java.util.Locale java-util-Locale61731] (.withLocale this61730 java-util-Locale61731)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^js/JSJoda.DateTimeFormatter [this61732 G__61733] (.withResolverFields ^js/JSJoda.DateTimeFormatter this61732 G__61733)))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.DateTimeFormatter this61734 ^java.lang.CharSequence java-lang-CharSequence61735 ^java.text.ParsePosition java-text-ParsePosition61736] (.parseUnresolved this61734 java-lang-CharSequence61735 java-text-ParsePosition61736)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle61737] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedTime" java-time-format-FormatStyle61737)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle61738] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedDate" java-time-format-FormatStyle61738)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^js/JSJoda.DateTimeFormatter this61739 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor61740] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.format this61739 java-time-temporal-TemporalAccessor61740))))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^js/JSJoda.DateTimeFormatter this61741] (.toFormat this61741)) (^java.text.Format [^js/JSJoda.DateTimeFormatter this61742 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery61743] (.toFormat this61742 java-time-temporal-TemporalQuery61743)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this61744 ^js/JSJoda.ResolverStyle java-time-format-ResolverStyle61745] (.withResolverStyle this61744 java-time-format-ResolverStyle61745)))
