(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time.format :refer [DateTimeFormatter]]))
(def iso-local-time (goog.object/get java.time.format.DateTimeFormatter "ISO_LOCAL_TIME"))
(def iso-ordinal-date (goog.object/get java.time.format.DateTimeFormatter "ISO_ORDINAL_DATE"))
(def iso-offset-date (goog.object/get java.time.format.DateTimeFormatter "ISO_OFFSET_DATE"))
(def iso-time (goog.object/get java.time.format.DateTimeFormatter "ISO_TIME"))
(def iso-local-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_LOCAL_DATE_TIME"))
(def iso-instant (goog.object/get java.time.format.DateTimeFormatter "ISO_INSTANT"))
(def rfc-1123-date-time (goog.object/get java.time.format.DateTimeFormatter "RFC_1123_DATE_TIME"))
(def iso-date (goog.object/get java.time.format.DateTimeFormatter "ISO_DATE"))
(def iso-week-date (goog.object/get java.time.format.DateTimeFormatter "ISO_WEEK_DATE"))
(def iso-offset-time (goog.object/get java.time.format.DateTimeFormatter "ISO_OFFSET_TIME"))
(def iso-local-date (goog.object/get java.time.format.DateTimeFormatter "ISO_LOCAL_DATE"))
(def iso-zoned-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_ZONED_DATE_TIME"))
(def iso-offset-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_OFFSET_DATE_TIME"))
(def iso-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_DATE_TIME"))
(def basic-iso-date (goog.object/get java.time.format.DateTimeFormatter "BASIC_ISO_DATE"))
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^js/JSJoda.DateTimeFormatter [^java.lang.String java-lang-String15541] (js-invoke java.time.format.DateTimeFormatter "ofPattern" java-lang-String15541)) (^js/JSJoda.DateTimeFormatter [^java.lang.String java-lang-String15542 ^java.util.Locale java-util-Locale15543] (js-invoke java.time.format.DateTimeFormatter "ofPattern" java-lang-String15542 java-util-Locale15543)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.DateTimeFormatter this15544 ^java.lang.CharSequence java-lang-CharSequence15545 ^"java.lang.Class" java-time-temporal-TemporalQuery-array15546] (.parseBest this15544 java-lang-CharSequence15545 java-time-temporal-TemporalQuery-array15546)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^void [^js/JSJoda.DateTimeFormatter this15547 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor15548 ^java.lang.Appendable java-lang-Appendable15549] (.formatTo this15547 java-time-temporal-TemporalAccessor15548 java-lang-Appendable15549)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DecimalStyle [^js/JSJoda.DateTimeFormatter this15550] (.decimalStyle this15550)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this15551 ^js/JSJoda.Chronology java-time-chrono-Chronology15552] (.withChronology this15551 java-time-chrono-Chronology15552)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.ResolverStyle [^js/JSJoda.DateTimeFormatter this15553] (.resolverStyle this15553)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this15554 ^js/JSJoda.DecimalStyle java-time-format-DecimalStyle15555] (.withDecimalStyle this15554 java-time-format-DecimalStyle15555)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^js/JSJoda.DateTimeFormatter this15556] (.locale this15556)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.DateTimeFormatter this15557] (.toString this15557)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^js/JSJoda.TemporalQuery [] (js-invoke java.time.format.DateTimeFormatter "parsedLeapSecond")))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this15558 ^js/JSJoda.ZoneId java-time-ZoneId15559] (.withZone this15558 java-time-ZoneId15559)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^js/JSJoda.TemporalQuery [] (js-invoke java.time.format.DateTimeFormatter "parsedExcessDays")))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.ZoneId [^js/JSJoda.DateTimeFormatter this15560] (.zone this15560)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle"] ["java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle15561 ^js/JSJoda.FormatStyle java-time-format-FormatStyle15562] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedDateTime" java-time-format-FormatStyle15561 java-time-format-FormatStyle15562)) (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle15563] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedDateTime" java-time-format-FormatStyle15563)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^js/JSJoda.DateTimeFormatter this15564] (.resolverFields this15564)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.Chronology [^js/JSJoda.DateTimeFormatter this15565] (.chronology this15565)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.lang.Object [this15566 G__15567 G__15568] (.parse ^js/JSJoda.DateTimeFormatter this15566 G__15567 G__15568)) (^js/JSJoda.TemporalAccessor [^js/JSJoda.DateTimeFormatter this15569 ^java.lang.CharSequence java-lang-CharSequence15570] (.parse this15569 java-lang-CharSequence15570)))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this15571 ^java.util.Locale java-util-Locale15572] (.withLocale this15571 java-util-Locale15572)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^js/JSJoda.DateTimeFormatter [this15573 G__15574] (.withResolverFields ^js/JSJoda.DateTimeFormatter this15573 G__15574)))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.DateTimeFormatter this15575 ^java.lang.CharSequence java-lang-CharSequence15576 ^java.text.ParsePosition java-text-ParsePosition15577] (.parseUnresolved this15575 java-lang-CharSequence15576 java-text-ParsePosition15577)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle15578] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedTime" java-time-format-FormatStyle15578)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle15579] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedDate" java-time-format-FormatStyle15579)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^js/JSJoda.DateTimeFormatter this15580 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor15581] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.format this15580 java-time-temporal-TemporalAccessor15581))))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^js/JSJoda.DateTimeFormatter this15582] (.toFormat this15582)) (^java.text.Format [^js/JSJoda.DateTimeFormatter this15583 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery15584] (.toFormat this15583 java-time-temporal-TemporalQuery15584)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this15585 ^js/JSJoda.ResolverStyle java-time-format-ResolverStyle15586] (.withResolverStyle this15585 java-time-format-ResolverStyle15586)))
