(ns cljc.java-time.format.date-time-formatter (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time.format :refer [DateTimeFormatter]]))
(def iso-local-time (goog.object/get java.time.format.DateTimeFormatter "ISO_LOCAL_TIME"))
(def iso-ordinal-date (goog.object/get java.time.format.DateTimeFormatter "ISO_ORDINAL_DATE"))
(def iso-offset-date (goog.object/get java.time.format.DateTimeFormatter "ISO_OFFSET_DATE"))
(def iso-time (goog.object/get java.time.format.DateTimeFormatter "ISO_TIME"))
(def iso-local-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_LOCAL_DATE_TIME"))
(def iso-instant (goog.object/get java.time.format.DateTimeFormatter "ISO_INSTANT"))
(def rfc-1123-date-time (goog.object/get java.time.format.DateTimeFormatter "RFC_1123_DATE_TIME"))
(def iso-date (goog.object/get java.time.format.DateTimeFormatter "ISO_DATE"))
(def iso-week-date (goog.object/get java.time.format.DateTimeFormatter "ISO_WEEK_DATE"))
(def iso-offset-time (goog.object/get java.time.format.DateTimeFormatter "ISO_OFFSET_TIME"))
(def iso-local-date (goog.object/get java.time.format.DateTimeFormatter "ISO_LOCAL_DATE"))
(def iso-zoned-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_ZONED_DATE_TIME"))
(def iso-offset-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_OFFSET_DATE_TIME"))
(def iso-date-time (goog.object/get java.time.format.DateTimeFormatter "ISO_DATE_TIME"))
(def basic-iso-date (goog.object/get java.time.format.DateTimeFormatter "BASIC_ISO_DATE"))
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^js/JSJoda.DateTimeFormatter [^java.lang.String java-lang-String9040] (js-invoke java.time.format.DateTimeFormatter "ofPattern" java-lang-String9040)) (^js/JSJoda.DateTimeFormatter [^java.lang.String java-lang-String9041 ^java.util.Locale java-util-Locale9042] (js-invoke java.time.format.DateTimeFormatter "ofPattern" java-lang-String9041 java-util-Locale9042)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.DateTimeFormatter this9043 ^java.lang.CharSequence java-lang-CharSequence9044 ^"java.lang.Class" java-time-temporal-TemporalQuery-array9045] (.parseBest this9043 java-lang-CharSequence9044 java-time-temporal-TemporalQuery-array9045)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^void [^js/JSJoda.DateTimeFormatter this9046 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor9047 ^java.lang.Appendable java-lang-Appendable9048] (.formatTo this9046 java-time-temporal-TemporalAccessor9047 java-lang-Appendable9048)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.DecimalStyle [^js/JSJoda.DateTimeFormatter this9049] (.decimalStyle this9049)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this9050 ^js/JSJoda.Chronology java-time-chrono-Chronology9051] (.withChronology this9050 java-time-chrono-Chronology9051)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.ResolverStyle [^js/JSJoda.DateTimeFormatter this9052] (.resolverStyle this9052)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this9053 ^js/JSJoda.DecimalStyle java-time-format-DecimalStyle9054] (.withDecimalStyle this9053 java-time-format-DecimalStyle9054)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^js/JSJoda.DateTimeFormatter this9055] (.locale this9055)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.DateTimeFormatter this9056] (.toString this9056)))
(clojure.core/defn localized-by {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this9057 ^java.util.Locale java-util-Locale9058] (.localizedBy this9057 java-util-Locale9058)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^js/JSJoda.TemporalQuery [] (js-invoke java.time.format.DateTimeFormatter "parsedLeapSecond")))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this9059 ^js/JSJoda.ZoneId java-time-ZoneId9060] (.withZone this9059 java-time-ZoneId9060)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^js/JSJoda.TemporalQuery [] (js-invoke java.time.format.DateTimeFormatter "parsedExcessDays")))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.ZoneId [^js/JSJoda.DateTimeFormatter this9061] (.zone this9061)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle"] ["java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle9062 ^js/JSJoda.FormatStyle java-time-format-FormatStyle9063] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedDateTime" java-time-format-FormatStyle9062 java-time-format-FormatStyle9063)) (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle9064] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedDateTime" java-time-format-FormatStyle9064)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^js/JSJoda.DateTimeFormatter this9065] (.resolverFields this9065)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^js/JSJoda.Chronology [^js/JSJoda.DateTimeFormatter this9066] (.chronology this9066)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [this9067 G__9068 G__9069] (.parse ^js/JSJoda.DateTimeFormatter this9067 G__9068 G__9069)) (^js/JSJoda.TemporalAccessor [^js/JSJoda.DateTimeFormatter this9070 ^java.lang.CharSequence java-lang-CharSequence9071] (.parse this9070 java-lang-CharSequence9071)))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this9072 ^java.util.Locale java-util-Locale9073] (.withLocale this9072 java-util-Locale9073)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^js/JSJoda.DateTimeFormatter [this9074 G__9075] (.withResolverFields ^js/JSJoda.DateTimeFormatter this9074 G__9075)))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^js/JSJoda.TemporalAccessor [^js/JSJoda.DateTimeFormatter this9076 ^java.lang.CharSequence java-lang-CharSequence9077 ^java.text.ParsePosition java-text-ParsePosition9078] (.parseUnresolved this9076 java-lang-CharSequence9077 java-text-ParsePosition9078)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle9079] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedTime" java-time-format-FormatStyle9079)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.FormatStyle java-time-format-FormatStyle9080] (js-invoke java.time.format.DateTimeFormatter "ofLocalizedDate" java-time-format-FormatStyle9080)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^js/JSJoda.DateTimeFormatter this9081 ^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor9082] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.format this9081 java-time-temporal-TemporalAccessor9082))))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter"] ["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"]))} (^java.text.Format [^js/JSJoda.DateTimeFormatter this9083] (.toFormat this9083)) (^java.text.Format [^js/JSJoda.DateTimeFormatter this9084 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery9085] (.toFormat this9084 java-time-temporal-TemporalQuery9085)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^js/JSJoda.DateTimeFormatter [^js/JSJoda.DateTimeFormatter this9086 ^js/JSJoda.ResolverStyle java-time-format-ResolverStyle9087] (.withResolverStyle this9086 java-time-format-ResolverStyle9087)))
