(ns cljc.java-time.format.date-time-formatter-builder (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.format :refer [DateTimeFormatterBuilder]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.format DateTimeFormatterBuilder])))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this4923] (.toFormatter this4923)) (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this4924 ^java.util.Locale java-util-Locale4925] (.toFormatter this4924 java-util-Locale4925)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4926 ^java.lang.String java-lang-String4927] (.appendPattern this4926 java-lang-String4927)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4928 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4929 ^java.lang.Integer int4930 ^java.lang.Integer int4931 ^java.time.format.SignStyle java-time-format-SignStyle4932] (.appendValue this4928 java-time-temporal-TemporalField4929 int4930 int4931 java-time-format-SignStyle4932)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4933 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4934 ^java.lang.Integer int4935] (.appendValue this4933 java-time-temporal-TemporalField4934 int4935)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4936 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4937] (.appendValue this4936 java-time-temporal-TemporalField4937)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4938] (.appendInstant this4938)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4939 ^java.lang.Integer int4940] (.appendInstant this4939 int4940)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "char"] ["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [this4941 G__4942] #? (:cljs (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this4941 G__4942) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Character") G__4942)) (clojure.core/let [G__4942 ^"java.lang.Character" G__4942] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this4941 G__4942)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__4942)) (clojure.core/let [G__4942 ^"java.lang.String" G__4942] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this4941 G__4942)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4943] (.optionalStart this4943)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4944 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4945 ^java.lang.Integer int4946 ^java.lang.Integer int4947 ^java.lang.Boolean boolean4948] (.appendFraction this4944 java-time-temporal-TemporalField4945 int4946 int4947 boolean4948)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4949 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4950] (.appendOptional this4949 java-time-format-DateTimeFormatter4950)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4951] (.optionalEnd this4951)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4952] (.parseLenient this4952)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int" "char"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4953 ^java.lang.Integer int4954 ^java.lang.Character char4955] (.padNext this4953 int4954 char4955)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4956 ^java.lang.Integer int4957] (.padNext this4956 int4957)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4958] (.appendChronologyId this4958)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4959] (.appendZoneOrOffsetId this4959)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4960] (.parseCaseSensitive this4960)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4961] (.parseStrict this4961)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4962 ^java.time.format.TextStyle java-time-format-TextStyle4963] (.appendChronologyText this4962 java-time-format-TextStyle4963)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4964] (.appendOffsetId this4964)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4965] (.appendZoneRegionId this4965)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4966 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4967 ^long long4968] (.parseDefaulting this4966 java-time-temporal-TemporalField4967 long4968)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4969] (.appendZoneId this4969)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^java.time.format.FormatStyle java-time-format-FormatStyle4970 ^java.time.format.FormatStyle java-time-format-FormatStyle4971 ^java.time.chrono.Chronology java-time-chrono-Chronology4972 ^java.util.Locale java-util-Locale4973] (. java.time.format.DateTimeFormatterBuilder getLocalizedDateTimePattern java-time-format-FormatStyle4970 java-time-format-FormatStyle4971 java-time-chrono-Chronology4972 java-util-Locale4973)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4974] (.parseCaseInsensitive this4974)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4975 ^java.time.format.TextStyle java-time-format-TextStyle4976] (.appendLocalizedOffset this4975 java-time-format-TextStyle4976)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4977 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4978] (.append this4977 java-time-format-DateTimeFormatter4978)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"]))} (^java.time.format.DateTimeFormatterBuilder [this4979 G__4980 G__4981] #? (:cljs (.appendText ^java.time.format.DateTimeFormatterBuilder this4979 G__4980 G__4981) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__4980) (clojure.core/instance? (java.lang.Class/forName "java.time.format.TextStyle") G__4981)) (clojure.core/let [G__4980 ^"java.time.temporal.TemporalField" G__4980 G__4981 ^"java.time.format.TextStyle" G__4981] (.appendText ^java.time.format.DateTimeFormatterBuilder this4979 G__4980 G__4981)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__4980) (clojure.core/instance? (java.lang.Class/forName "java.util.Map") G__4981)) (clojure.core/let [G__4980 ^"java.time.temporal.TemporalField" G__4980 G__4981 ^"java.util.Map" G__4981] (.appendText ^java.time.format.DateTimeFormatterBuilder this4979 G__4980 G__4981)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4982 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4983] (.appendText this4982 java-time-temporal-TemporalField4983)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4984 ^java.time.format.FormatStyle java-time-format-FormatStyle4985 ^java.time.format.FormatStyle java-time-format-FormatStyle4986] (.appendLocalized this4984 java-time-format-FormatStyle4985 java-time-format-FormatStyle4986)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4987 ^java.lang.String java-lang-String4988 ^java.lang.String java-lang-String4989] (.appendOffset this4987 java-lang-String4988 java-lang-String4989)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^java.time.format.DateTimeFormatterBuilder [this4990 G__4991 G__4992 G__4993 G__4994] #? (:cljs (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this4990 G__4991 G__4992 G__4993 G__4994) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__4991) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__4992) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__4993) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__4994)) (clojure.core/let [G__4991 ^"java.time.temporal.TemporalField" G__4991 G__4992 (clojure.core/int G__4992) G__4993 (clojure.core/int G__4993) G__4994 (clojure.core/int G__4994)] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this4990 G__4991 G__4992 G__4993 G__4994)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__4991) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__4992) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__4993) (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__4994)) (clojure.core/let [G__4991 ^"java.time.temporal.TemporalField" G__4991 G__4992 (clojure.core/int G__4992) G__4993 (clojure.core/int G__4993) G__4994 ^"java.time.chrono.ChronoLocalDate" G__4994] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this4990 G__4991 G__4992 G__4993 G__4994)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4995 ^java.time.format.TextStyle java-time-format-TextStyle4996] (.appendZoneText this4995 java-time-format-TextStyle4996)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this4997 ^java.time.format.TextStyle java-time-format-TextStyle4998 ^java.util.Set java-util-Set4999] (.appendZoneText this4997 java-time-format-TextStyle4998 java-util-Set4999)))
