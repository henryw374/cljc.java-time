(ns cljc.java-time.format.date-time-formatter-builder (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.format :refer [DateTimeFormatterBuilder]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.format DateTimeFormatterBuilder])))
(clojure.core/defn to-formatter {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this13704] (.toFormatter this13704)) (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatterBuilder this13705 ^java.util.Locale java-util-Locale13706] (.toFormatter this13705 java-util-Locale13706)))
(clojure.core/defn append-pattern {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13707 ^java.lang.String java-lang-String13708] (.appendPattern this13707 java-lang-String13708)))
(clojure.core/defn append-value {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.format.SignStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13709 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13710 ^java.lang.Integer int13711 ^java.lang.Integer int13712 ^java.time.format.SignStyle java-time-format-SignStyle13713] (.appendValue this13709 java-time-temporal-TemporalField13710 int13711 int13712 java-time-format-SignStyle13713)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13714 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13715 ^java.lang.Integer int13716] (.appendValue this13714 java-time-temporal-TemporalField13715 int13716)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13717 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13718] (.appendValue this13717 java-time-temporal-TemporalField13718)))
(clojure.core/defn append-instant {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13719] (.appendInstant this13719)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13720 ^java.lang.Integer int13721] (.appendInstant this13720 int13721)))
(clojure.core/defn append-literal {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "char"] ["java.time.format.DateTimeFormatterBuilder" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [this13722 G__13723] #? (:cljs (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this13722 G__13723) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Character") G__13723)) (clojure.core/let [G__13723 ^"java.lang.Character" G__13723] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this13722 G__13723)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__13723)) (clojure.core/let [G__13723 ^"java.lang.String" G__13723] (.appendLiteral ^java.time.format.DateTimeFormatterBuilder this13722 G__13723)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn optional-start {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13724] (.optionalStart this13724)))
(clojure.core/defn append-fraction {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "boolean"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13725 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13726 ^java.lang.Integer int13727 ^java.lang.Integer int13728 ^java.lang.Boolean boolean13729] (.appendFraction this13725 java-time-temporal-TemporalField13726 int13727 int13728 boolean13729)))
(clojure.core/defn append-optional {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13730 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13731] (.appendOptional this13730 java-time-format-DateTimeFormatter13731)))
(clojure.core/defn optional-end {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13732] (.optionalEnd this13732)))
(clojure.core/defn parse-lenient {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13733] (.parseLenient this13733)))
(clojure.core/defn pad-next {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "int" "char"] ["java.time.format.DateTimeFormatterBuilder" "int"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13734 ^java.lang.Integer int13735 ^java.lang.Character char13736] (.padNext this13734 int13735 char13736)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13737 ^java.lang.Integer int13738] (.padNext this13737 int13738)))
(clojure.core/defn append-chronology-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13739] (.appendChronologyId this13739)))
(clojure.core/defn append-zone-or-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13740] (.appendZoneOrOffsetId this13740)))
(clojure.core/defn parse-case-sensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13741] (.parseCaseSensitive this13741)))
(clojure.core/defn parse-strict {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13742] (.parseStrict this13742)))
(clojure.core/defn append-chronology-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13743 ^java.time.format.TextStyle java-time-format-TextStyle13744] (.appendChronologyText this13743 java-time-format-TextStyle13744)))
(clojure.core/defn append-offset-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13745] (.appendOffsetId this13745)))
(clojure.core/defn append-zone-region-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13746] (.appendZoneRegionId this13746)))
(clojure.core/defn parse-defaulting {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "long"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13747 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13748 ^long long13749] (.parseDefaulting this13747 java-time-temporal-TemporalField13748 long13749)))
(clojure.core/defn append-zone-id {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13750] (.appendZoneId this13750)))
(clojure.core/defn get-localized-date-time-pattern {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle" "java.time.chrono.Chronology" "java.util.Locale"]))} (^java.lang.String [^java.time.format.FormatStyle java-time-format-FormatStyle13751 ^java.time.format.FormatStyle java-time-format-FormatStyle13752 ^java.time.chrono.Chronology java-time-chrono-Chronology13753 ^java.util.Locale java-util-Locale13754] (. java.time.format.DateTimeFormatterBuilder getLocalizedDateTimePattern java-time-format-FormatStyle13751 java-time-format-FormatStyle13752 java-time-chrono-Chronology13753 java-util-Locale13754)))
(clojure.core/defn parse-case-insensitive {:arglists (quote (["java.time.format.DateTimeFormatterBuilder"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13755] (.parseCaseInsensitive this13755)))
(clojure.core/defn append-localized-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13756 ^java.time.format.TextStyle java-time-format-TextStyle13757] (.appendLocalizedOffset this13756 java-time-format-TextStyle13757)))
(clojure.core/defn append {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.DateTimeFormatter"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13758 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13759] (.append this13758 java-time-format-DateTimeFormatter13759)))
(clojure.core/defn append-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "java.util.Map"]))} (^java.time.format.DateTimeFormatterBuilder [this13760 G__13761 G__13762] #? (:cljs (.appendText ^java.time.format.DateTimeFormatterBuilder this13760 G__13761 G__13762) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13761) (clojure.core/instance? (java.lang.Class/forName "java.time.format.TextStyle") G__13762)) (clojure.core/let [G__13761 ^"java.time.temporal.TemporalField" G__13761 G__13762 ^"java.time.format.TextStyle" G__13762] (.appendText ^java.time.format.DateTimeFormatterBuilder this13760 G__13761 G__13762)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13761) (clojure.core/instance? (java.lang.Class/forName "java.util.Map") G__13762)) (clojure.core/let [G__13761 ^"java.time.temporal.TemporalField" G__13761 G__13762 ^"java.util.Map" G__13762] (.appendText ^java.time.format.DateTimeFormatterBuilder this13760 G__13761 G__13762)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13763 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13764] (.appendText this13763 java-time-temporal-TemporalField13764)))
(clojure.core/defn append-localized {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.FormatStyle" "java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13765 ^java.time.format.FormatStyle java-time-format-FormatStyle13766 ^java.time.format.FormatStyle java-time-format-FormatStyle13767] (.appendLocalized this13765 java-time-format-FormatStyle13766 java-time-format-FormatStyle13767)))
(clojure.core/defn append-offset {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.lang.String" "java.lang.String"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13768 ^java.lang.String java-lang-String13769 ^java.lang.String java-lang-String13770] (.appendOffset this13768 java-lang-String13769 java-lang-String13770)))
(clojure.core/defn append-value-reduced {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "int"] ["java.time.format.DateTimeFormatterBuilder" "java.time.temporal.TemporalField" "int" "int" "java.time.chrono.ChronoLocalDate"]))} (^java.time.format.DateTimeFormatterBuilder [this13771 G__13772 G__13773 G__13774 G__13775] #? (:cljs (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this13771 G__13772 G__13773 G__13774 G__13775) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13772) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13773) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13774) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13775)) (clojure.core/let [G__13772 ^"java.time.temporal.TemporalField" G__13772 G__13773 (clojure.core/int G__13773) G__13774 (clojure.core/int G__13774) G__13775 (clojure.core/int G__13775)] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this13771 G__13772 G__13773 G__13774 G__13775)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13772) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13773) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13774) (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDate") G__13775)) (clojure.core/let [G__13772 ^"java.time.temporal.TemporalField" G__13772 G__13773 (clojure.core/int G__13773) G__13774 (clojure.core/int G__13774) G__13775 ^"java.time.chrono.ChronoLocalDate" G__13775] (.appendValueReduced ^java.time.format.DateTimeFormatterBuilder this13771 G__13772 G__13773 G__13774 G__13775)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn append-zone-text {:arglists (quote (["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle"] ["java.time.format.DateTimeFormatterBuilder" "java.time.format.TextStyle" "java.util.Set"]))} (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13776 ^java.time.format.TextStyle java-time-format-TextStyle13777] (.appendZoneText this13776 java-time-format-TextStyle13777)) (^java.time.format.DateTimeFormatterBuilder [^java.time.format.DateTimeFormatterBuilder this13778 ^java.time.format.TextStyle java-time-format-TextStyle13779 ^java.util.Set java-util-Set13780] (.appendZoneText this13778 java-time-format-TextStyle13779 java-util-Set13780)))
