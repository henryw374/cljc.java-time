(ns cljc.java-time.year-month (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [YearMonth]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time YearMonth])))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this13346] (.lengthOfYear this13346)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this13347 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13348] (.range this13347 java-time-temporal-TemporalField13348)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this13349 ^java.lang.Integer int13350] (.isValidDay this13349 int13350)))
(clojure.core/defn of {:arglists (quote (["int" "int"] ["int" "java.time.Month"]))} (^java.time.YearMonth [G__13352 G__13353] #? (:cljs (. java.time.YearMonth of G__13352 G__13353) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13352) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13353)) (clojure.core/let [G__13352 (clojure.core/int G__13352) G__13353 (clojure.core/int G__13353)] (. java.time.YearMonth of G__13352 G__13353)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__13352) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__13353)) (clojure.core/let [G__13352 (clojure.core/int G__13352) G__13353 ^"java.time.Month" G__13353] (. java.time.YearMonth of G__13352 G__13353)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this13354 ^java.lang.Integer int13355] (.withMonth this13354 int13355)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this13356 ^java.lang.Integer int13357] (.atDay this13356 int13357)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this13358] (jti/getter year this13358)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this13359 G__13360 G__13361] #? (:cljs (.plus ^java.time.YearMonth this13359 G__13360 G__13361) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13360) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13361)) (clojure.core/let [G__13360 (clojure.core/long G__13360) G__13361 ^"java.time.temporal.TemporalUnit" G__13361] (.plus ^java.time.YearMonth this13359 G__13360 G__13361)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13360) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13361)) (clojure.core/let [G__13360 (clojure.core/long G__13360) G__13361 ^"java.time.temporal.TemporalUnit" G__13361] (.plus ^java.time.YearMonth this13359 G__13360 G__13361)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13362 G__13363] #? (:cljs (.plus ^java.time.YearMonth this13362 G__13363) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13363)) (clojure.core/let [G__13363 ^"java.time.temporal.TemporalAmount" G__13363] (.plus ^java.time.YearMonth this13362 G__13363)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13363)) (clojure.core/let [G__13363 ^"java.time.temporal.TemporalAmount" G__13363] (.plus ^java.time.YearMonth this13362 G__13363)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this13364] (.isLeapYear this13364)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this13365 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13366] (.query this13365 java-time-temporal-TemporalQuery13366)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this13367] (.toString this13367)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this13368 ^long long13369] (.plusMonths this13368 long13369)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this13370 ^java.time.YearMonth java-time-YearMonth13371] (.isBefore this13370 java-time-YearMonth13371)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this13372 ^long long13373] (.minusMonths this13372 long13373)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this13374 G__13375] #? (:cljs (.minus ^java.time.YearMonth this13374 G__13375) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13375)) (clojure.core/let [G__13375 ^"java.time.temporal.TemporalAmount" G__13375] (.minus ^java.time.YearMonth this13374 G__13375)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__13375)) (clojure.core/let [G__13375 ^"java.time.temporal.TemporalAmount" G__13375] (.minus ^java.time.YearMonth this13374 G__13375)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13376 G__13377 G__13378] #? (:cljs (.minus ^java.time.YearMonth this13376 G__13377 G__13378) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13377) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13378)) (clojure.core/let [G__13377 (clojure.core/long G__13377) G__13378 ^"java.time.temporal.TemporalUnit" G__13378] (.minus ^java.time.YearMonth this13376 G__13377 G__13378)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13377) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13378)) (clojure.core/let [G__13377 (clojure.core/long G__13377) G__13378 ^"java.time.temporal.TemporalUnit" G__13378] (.minus ^java.time.YearMonth this13376 G__13377 G__13378)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this13379 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13380] (.getLong this13379 java-time-temporal-TemporalField13380)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this13381 ^java.lang.Integer int13382] (.withYear this13381 int13382)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this13383] (.atEndOfMonth this13383)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this13384] (.lengthOfMonth this13384)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this13385 ^java.time.temporal.Temporal java-time-temporal-Temporal13386 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit13387] (.until this13385 java-time-temporal-Temporal13386 java-time-temporal-TemporalUnit13387)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13388] (. java.time.YearMonth from java-time-temporal-TemporalAccessor13388)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this13389 ^java.time.YearMonth java-time-YearMonth13390] (.isAfter this13389 java-time-YearMonth13390)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"] ["java.time.YearMonth" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this13391 G__13392] #? (:cljs (.isSupported ^java.time.YearMonth this13391 G__13392) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13392)) (clojure.core/let [G__13392 ^"java.time.temporal.TemporalField" G__13392] (.isSupported ^java.time.YearMonth this13391 G__13392)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__13392)) (clojure.core/let [G__13392 ^"java.time.temporal.TemporalUnit" G__13392] (.isSupported ^java.time.YearMonth this13391 G__13392)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this13393 ^long long13394] (.minusYears this13393 long13394)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence13395 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13396] (. java.time.YearMonth parse java-lang-CharSequence13395 java-time-format-DateTimeFormatter13396)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence13397] (. java.time.YearMonth parse java-lang-CharSequence13397)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this13398] (.hashCode this13398)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this13399 ^java.time.temporal.Temporal java-time-temporal-Temporal13400] (.adjustInto this13399 java-time-temporal-Temporal13400)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this13401 G__13402] #? (:cljs (.with ^java.time.YearMonth this13401 G__13402) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13402)) (clojure.core/let [G__13402 ^"java.time.temporal.TemporalAdjuster" G__13402] (.with ^java.time.YearMonth this13401 G__13402)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__13402)) (clojure.core/let [G__13402 ^"java.time.temporal.TemporalAdjuster" G__13402] (.with ^java.time.YearMonth this13401 G__13402)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this13403 G__13404 G__13405] #? (:cljs (.with ^java.time.YearMonth this13403 G__13404 G__13405) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13404) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13405)) (clojure.core/let [G__13404 ^"java.time.temporal.TemporalField" G__13404 G__13405 (clojure.core/long G__13405)] (.with ^java.time.YearMonth this13403 G__13404 G__13405)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__13404) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__13405)) (clojure.core/let [G__13404 ^"java.time.temporal.TemporalField" G__13404 G__13405 (clojure.core/long G__13405)] (.with ^java.time.YearMonth this13403 G__13404 G__13405)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.YearMonth [G__13407] #? (:cljs (. java.time.YearMonth now G__13407) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__13407)) (clojure.core/let [G__13407 ^"java.time.Clock" G__13407] (. java.time.YearMonth now G__13407)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__13407)) (clojure.core/let [G__13407 ^"java.time.ZoneId" G__13407] (. java.time.YearMonth now G__13407)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.YearMonth [] (. java.time.YearMonth now)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this13408] (jti/getter monthValue this13408)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.lang.Object"] ["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Integer [this13409 G__13410] #? (:cljs (.compareTo ^java.time.YearMonth this13409 G__13410) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13410)) (clojure.core/let [G__13410 ^"java.lang.Object" G__13410] (.compareTo ^java.time.YearMonth this13409 G__13410)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.YearMonth") G__13410)) (clojure.core/let [G__13410 ^"java.time.YearMonth" G__13410] (.compareTo ^java.time.YearMonth this13409 G__13410)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this13411] (jti/getter month this13411)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this13412 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13413] (.get this13412 java-time-temporal-TemporalField13413)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this13414 ^java.lang.Object java-lang-Object13415] (.equals this13414 java-lang-Object13415)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this13416 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13417] (.format this13416 java-time-format-DateTimeFormatter13417)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this13418 ^long long13419] (.plusYears this13418 long13419)))
