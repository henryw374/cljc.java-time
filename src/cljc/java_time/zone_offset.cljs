(ns cljc.java-time.zone-offset (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZoneOffset]]))
(def max (goog.object/get java.time.ZoneOffset "MAX"))
(def min (goog.object/get java.time.ZoneOffset "MIN"))
(def utc (goog.object/get java.time.ZoneOffset "UTC"))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (js-invoke java.time.ZoneOffset "getAvailableZoneIds")))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ZoneOffset this8536 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8537] (.range this8536 java-time-temporal-TemporalField8537)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^js/JSJoda.ZoneOffset [^int int8538] (js-invoke java.time.ZoneOffset "ofTotalSeconds" int8538)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"] ["java.lang.String"]))} (^java.lang.Object [G__8540] (js-invoke java.time.ZoneOffset "of" G__8540)) (^js/JSJoda.ZoneId [^java.lang.String java-lang-String8541 ^java.util.Map java-util-Map8542] (js-invoke java.time.ZoneOffset "of" java-lang-String8541 java-util-Map8542)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^java.lang.String java-lang-String8543 ^js/JSJoda.ZoneOffset java-time-ZoneOffset8544] (js-invoke java.time.ZoneOffset "ofOffset" java-lang-String8543 java-time-ZoneOffset8544)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.ZoneOffset this8545 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery8546] (.query this8545 java-time-temporal-TemporalQuery8546)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this8547] (.toString this8547)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this8548 ^js/JSJoda.TextStyle java-time-format-TextStyle8549 ^java.util.Locale java-util-Locale8550] (.displayName this8548 java-time-format-TextStyle8549 java-util-Locale8550)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ZoneOffset this8551 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8552] (.getLong this8551 java-time-temporal-TemporalField8552)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^js/JSJoda.ZoneRules [^js/JSJoda.ZoneOffset this8553] (.rules this8553)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^js/JSJoda.ZoneOffset [^int int8554] (js-invoke java.time.ZoneOffset "ofHours" int8554)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this8555] (.id this8555)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZoneOffset this8556] (.normalized this8556)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^js/JSJoda.ZoneId [] (js-invoke java.time.ZoneOffset "systemDefault")))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__8558] (js-invoke java.time.ZoneOffset "from" G__8558)))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^js/JSJoda.ZoneOffset [^int int8559 ^int int8560 ^int int8561] (js-invoke java.time.ZoneOffset "ofHoursMinutesSeconds" int8559 int8560 int8561)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.ZoneOffset this8562 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8563] (.isSupported this8562 java-time-temporal-TemporalField8563)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this8564] (.hashCode this8564)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this8565] (.totalSeconds this8565)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.ZoneOffset this8566 ^js/JSJoda.Temporal java-time-temporal-Temporal8567] (.adjustInto this8566 java-time-temporal-Temporal8567)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^js/JSJoda.ZoneOffset [^int int8568 ^int int8569] (js-invoke java.time.ZoneOffset "ofHoursMinutes" int8568 int8569)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^int [this8570 G__8571] (.compareTo ^js/JSJoda.ZoneOffset this8570 G__8571)))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ZoneOffset this8572 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8573] (.get this8572 java-time-temporal-TemporalField8573)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZoneOffset this8574 ^java.lang.Object java-lang-Object8575] (.equals this8574 java-lang-Object8575)))
