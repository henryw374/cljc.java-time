(ns cljc.java-time.zone-offset (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZoneOffset]]))
(def max (goog.object/get java.time.ZoneOffset "MAX"))
(def min (goog.object/get java.time.ZoneOffset "MIN"))
(def utc (goog.object/get java.time.ZoneOffset "UTC"))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (js-invoke java.time.ZoneOffset "getAvailableZoneIds")))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ZoneOffset this5548 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5549] (.range this5548 java-time-temporal-TemporalField5549)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^js/JSJoda.ZoneOffset [^int int5550] (js-invoke java.time.ZoneOffset "ofTotalSeconds" int5550)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__5552] (js-invoke java.time.ZoneOffset "of" G__5552)) (^js/JSJoda.ZoneId [^java.lang.String java-lang-String5553 ^java.util.Map java-util-Map5554] (js-invoke java.time.ZoneOffset "of" java-lang-String5553 java-util-Map5554)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^java.lang.String java-lang-String5555 ^js/JSJoda.ZoneOffset java-time-ZoneOffset5556] (js-invoke java.time.ZoneOffset "ofOffset" java-lang-String5555 java-time-ZoneOffset5556)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.ZoneOffset this5557 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery5558] (.query this5557 java-time-temporal-TemporalQuery5558)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this5559] (.toString this5559)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this5560 ^js/JSJoda.TextStyle java-time-format-TextStyle5561 ^java.util.Locale java-util-Locale5562] (.displayName this5560 java-time-format-TextStyle5561 java-util-Locale5562)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ZoneOffset this5563 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5564] (.getLong this5563 java-time-temporal-TemporalField5564)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^js/JSJoda.ZoneRules [^js/JSJoda.ZoneOffset this5565] (.rules this5565)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^js/JSJoda.ZoneOffset [^int int5566] (js-invoke java.time.ZoneOffset "ofHours" int5566)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this5567] (.id this5567)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZoneOffset this5568] (.normalized this5568)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^js/JSJoda.ZoneId [] (js-invoke java.time.ZoneOffset "systemDefault")))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__5570] (js-invoke java.time.ZoneOffset "from" G__5570)))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^js/JSJoda.ZoneOffset [^int int5571 ^int int5572 ^int int5573] (js-invoke java.time.ZoneOffset "ofHoursMinutesSeconds" int5571 int5572 int5573)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.ZoneOffset this5574 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5575] (.isSupported this5574 java-time-temporal-TemporalField5575)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this5576] (.hashCode this5576)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this5577] (.totalSeconds this5577)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.ZoneOffset this5578 ^js/JSJoda.Temporal java-time-temporal-Temporal5579] (.adjustInto this5578 java-time-temporal-Temporal5579)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^js/JSJoda.ZoneOffset [^int int5580 ^int int5581] (js-invoke java.time.ZoneOffset "ofHoursMinutes" int5580 int5581)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this5582 ^js/JSJoda.ZoneOffset java-time-ZoneOffset5583] (.compareTo this5582 java-time-ZoneOffset5583)))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ZoneOffset this5584 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5585] (.get this5584 java-time-temporal-TemporalField5585)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZoneOffset this5586 ^java.lang.Object java-lang-Object5587] (.equals this5586 java-lang-Object5587)))
