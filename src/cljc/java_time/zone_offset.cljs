(ns cljc.java-time.zone-offset (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZoneOffset]]))
(def max (. java.time.ZoneOffset -MAX))
(def min (. java.time.ZoneOffset -MIN))
(def utc (. java.time.ZoneOffset -UTC))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneOffset getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this12769 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12770] (.range this12769 java-time-temporal-TemporalField12770)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int12771] (. java.time.ZoneOffset ofTotalSeconds int12771)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__12773] (. java.time.ZoneOffset of G__12773)) (^java.time.ZoneId [^java.lang.String java-lang-String12774 ^java.util.Map java-util-Map12775] (. java.time.ZoneOffset of java-lang-String12774 java-util-Map12775)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String12776 ^java.time.ZoneOffset java-time-ZoneOffset12777] (. java.time.ZoneOffset ofOffset java-lang-String12776 java-time-ZoneOffset12777)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this12778 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12779] (.query this12778 java-time-temporal-TemporalQuery12779)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this12780] (.toString this12780)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this12781 ^java.time.format.TextStyle java-time-format-TextStyle12782 ^java.util.Locale java-util-Locale12783] (.displayName this12781 java-time-format-TextStyle12782 java-util-Locale12783)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this12784 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12785] (.getLong this12784 java-time-temporal-TemporalField12785)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this12786] (.rules this12786)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int12787] (. java.time.ZoneOffset ofHours int12787)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this12788] (.id this12788)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this12789] (.normalized this12789)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneOffset systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__12791] (. java.time.ZoneOffset from G__12791)))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int12792 ^java.lang.Integer int12793 ^java.lang.Integer int12794] (. java.time.ZoneOffset ofHoursMinutesSeconds int12792 int12793 int12794)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this12795 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12796] (.isSupported this12795 java-time-temporal-TemporalField12796)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this12797] (.hashCode this12797)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this12798] (.totalSeconds this12798)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this12799 ^java.time.temporal.Temporal java-time-temporal-Temporal12800] (.adjustInto this12799 java-time-temporal-Temporal12800)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int12801 ^java.lang.Integer int12802] (. java.time.ZoneOffset ofHoursMinutes int12801 int12802)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Integer [this12803 G__12804] (.compareTo ^java.time.ZoneOffset this12803 G__12804)))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this12805 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12806] (.get this12805 java-time-temporal-TemporalField12806)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this12807 ^java.lang.Object java-lang-Object12808] (.equals this12807 java-lang-Object12808)))
