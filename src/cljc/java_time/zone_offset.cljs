(ns cljc.java-time.zone-offset (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [ZoneOffset]]))
(def max (goog.object/get java.time.ZoneOffset "MAX"))
(def min (goog.object/get java.time.ZoneOffset "MIN"))
(def utc (goog.object/get java.time.ZoneOffset "UTC"))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (js-invoke java.time.ZoneOffset "getAvailableZoneIds")))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ZoneOffset this15444 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15445] (.range this15444 java-time-temporal-TemporalField15445)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^js/JSJoda.ZoneOffset [^int int15446] (js-invoke java.time.ZoneOffset "ofTotalSeconds" int15446)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"] ["java.lang.String"]))} (^java.lang.Object [G__15448] (js-invoke java.time.ZoneOffset "of" G__15448)) (^js/JSJoda.ZoneId [^java.lang.String java-lang-String15449 ^java.util.Map java-util-Map15450] (js-invoke java.time.ZoneOffset "of" java-lang-String15449 java-util-Map15450)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^java.lang.String java-lang-String15451 ^js/JSJoda.ZoneOffset java-time-ZoneOffset15452] (js-invoke java.time.ZoneOffset "ofOffset" java-lang-String15451 java-time-ZoneOffset15452)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.ZoneOffset this15453 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery15454] (.query this15453 java-time-temporal-TemporalQuery15454)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this15455] (.toString this15455)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this15456 ^js/JSJoda.TextStyle java-time-format-TextStyle15457 ^java.util.Locale java-util-Locale15458] (.displayName this15456 java-time-format-TextStyle15457 java-util-Locale15458)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ZoneOffset this15459 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15460] (.getLong this15459 java-time-temporal-TemporalField15460)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^js/JSJoda.ZoneRules [^js/JSJoda.ZoneOffset this15461] (.rules this15461)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^js/JSJoda.ZoneOffset [^int int15462] (js-invoke java.time.ZoneOffset "ofHours" int15462)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this15463] (.id this15463)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZoneOffset this15464] (.normalized this15464)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^js/JSJoda.ZoneId [] (js-invoke java.time.ZoneOffset "systemDefault")))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__15466] (js-invoke java.time.ZoneOffset "from" G__15466)))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^js/JSJoda.ZoneOffset [^int int15467 ^int int15468 ^int int15469] (js-invoke java.time.ZoneOffset "ofHoursMinutesSeconds" int15467 int15468 int15469)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.ZoneOffset this15470 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15471] (.isSupported this15470 java-time-temporal-TemporalField15471)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this15472] (.hashCode this15472)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this15473] (.totalSeconds this15473)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.ZoneOffset this15474 ^js/JSJoda.Temporal java-time-temporal-Temporal15475] (.adjustInto this15474 java-time-temporal-Temporal15475)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^js/JSJoda.ZoneOffset [^int int15476 ^int int15477] (js-invoke java.time.ZoneOffset "ofHoursMinutes" int15476 int15477)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this15478 ^js/JSJoda.ZoneOffset java-time-ZoneOffset15479] (.compareTo this15478 java-time-ZoneOffset15479)))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ZoneOffset this15480 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15481] (.get this15480 java-time-temporal-TemporalField15481)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZoneOffset this15482 ^java.lang.Object java-lang-Object15483] (.equals this15482 java-lang-Object15483)))
