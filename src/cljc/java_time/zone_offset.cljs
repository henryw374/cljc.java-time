(ns cljc.java-time.zone-offset (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZoneOffset]]))
(def max (goog.object/get java.time.ZoneOffset "MAX"))
(def min (goog.object/get java.time.ZoneOffset "MIN"))
(def utc (goog.object/get java.time.ZoneOffset "UTC"))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (js-invoke java.time.ZoneOffset "getAvailableZoneIds")))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ZoneOffset this61252 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61253] (.range this61252 java-time-temporal-TemporalField61253)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^js/JSJoda.ZoneOffset [^int int61254] (js-invoke java.time.ZoneOffset "ofTotalSeconds" int61254)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__61256] (js-invoke java.time.ZoneOffset "of" G__61256)) (^js/JSJoda.ZoneId [^java.lang.String java-lang-String61257 ^java.util.Map java-util-Map61258] (js-invoke java.time.ZoneOffset "of" java-lang-String61257 java-util-Map61258)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^java.lang.String java-lang-String61259 ^js/JSJoda.ZoneOffset java-time-ZoneOffset61260] (js-invoke java.time.ZoneOffset "ofOffset" java-lang-String61259 java-time-ZoneOffset61260)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.ZoneOffset this61261 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery61262] (.query this61261 java-time-temporal-TemporalQuery61262)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this61263] (.toString this61263)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this61264 ^js/JSJoda.TextStyle java-time-format-TextStyle61265 ^java.util.Locale java-util-Locale61266] (.displayName this61264 java-time-format-TextStyle61265 java-util-Locale61266)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ZoneOffset this61267 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61268] (.getLong this61267 java-time-temporal-TemporalField61268)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^js/JSJoda.ZoneRules [^js/JSJoda.ZoneOffset this61269] (.rules this61269)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^js/JSJoda.ZoneOffset [^int int61270] (js-invoke java.time.ZoneOffset "ofHours" int61270)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this61271] (.id this61271)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZoneOffset this61272] (.normalized this61272)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^js/JSJoda.ZoneId [] (js-invoke java.time.ZoneOffset "systemDefault")))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__61274] (js-invoke java.time.ZoneOffset "from" G__61274)))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^js/JSJoda.ZoneOffset [^int int61275 ^int int61276 ^int int61277] (js-invoke java.time.ZoneOffset "ofHoursMinutesSeconds" int61275 int61276 int61277)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.ZoneOffset this61278 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61279] (.isSupported this61278 java-time-temporal-TemporalField61279)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this61280] (.hashCode this61280)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this61281] (.totalSeconds this61281)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.ZoneOffset this61282 ^js/JSJoda.Temporal java-time-temporal-Temporal61283] (.adjustInto this61282 java-time-temporal-Temporal61283)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^js/JSJoda.ZoneOffset [^int int61284 ^int int61285] (js-invoke java.time.ZoneOffset "ofHoursMinutes" int61284 int61285)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^int [this61286 G__61287] (.compareTo ^js/JSJoda.ZoneOffset this61286 G__61287)))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ZoneOffset this61288 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61289] (.get this61288 java-time-temporal-TemporalField61289)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZoneOffset this61290 ^java.lang.Object java-lang-Object61291] (.equals this61290 java-lang-Object61291)))
