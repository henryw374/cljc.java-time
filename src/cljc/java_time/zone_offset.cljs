(ns cljc.java-time.zone-offset (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [ZoneOffset]]))
(def max (goog.object/get java.time.ZoneOffset "MAX"))
(def min (goog.object/get java.time.ZoneOffset "MIN"))
(def utc (goog.object/get java.time.ZoneOffset "UTC"))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (js-invoke java.time.ZoneOffset "getAvailableZoneIds")))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ZoneOffset this15065 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15066] (.range this15065 java-time-temporal-TemporalField15066)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^js/JSJoda.ZoneOffset [^int int15067] (js-invoke java.time.ZoneOffset "ofTotalSeconds" int15067)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"] ["java.lang.String"]))} (^java.lang.Object [G__15069] (js-invoke java.time.ZoneOffset "of" G__15069)) (^js/JSJoda.ZoneId [^java.lang.String java-lang-String15070 ^java.util.Map java-util-Map15071] (js-invoke java.time.ZoneOffset "of" java-lang-String15070 java-util-Map15071)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^java.lang.String java-lang-String15072 ^js/JSJoda.ZoneOffset java-time-ZoneOffset15073] (js-invoke java.time.ZoneOffset "ofOffset" java-lang-String15072 java-time-ZoneOffset15073)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.ZoneOffset this15074 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery15075] (.query this15074 java-time-temporal-TemporalQuery15075)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this15076] (.toString this15076)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this15077 ^js/JSJoda.TextStyle java-time-format-TextStyle15078 ^java.util.Locale java-util-Locale15079] (.displayName this15077 java-time-format-TextStyle15078 java-util-Locale15079)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ZoneOffset this15080 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15081] (.getLong this15080 java-time-temporal-TemporalField15081)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^js/JSJoda.ZoneRules [^js/JSJoda.ZoneOffset this15082] (.rules this15082)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^js/JSJoda.ZoneOffset [^int int15083] (js-invoke java.time.ZoneOffset "ofHours" int15083)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this15084] (.id this15084)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZoneOffset this15085] (.normalized this15085)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^js/JSJoda.ZoneId [] (js-invoke java.time.ZoneOffset "systemDefault")))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__15087] (js-invoke java.time.ZoneOffset "from" G__15087)))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^js/JSJoda.ZoneOffset [^int int15088 ^int int15089 ^int int15090] (js-invoke java.time.ZoneOffset "ofHoursMinutesSeconds" int15088 int15089 int15090)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.ZoneOffset this15091 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15092] (.isSupported this15091 java-time-temporal-TemporalField15092)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this15093] (.hashCode this15093)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this15094] (.totalSeconds this15094)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.ZoneOffset this15095 ^js/JSJoda.Temporal java-time-temporal-Temporal15096] (.adjustInto this15095 java-time-temporal-Temporal15096)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^js/JSJoda.ZoneOffset [^int int15097 ^int int15098] (js-invoke java.time.ZoneOffset "ofHoursMinutes" int15097 int15098)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this15099 ^js/JSJoda.ZoneOffset java-time-ZoneOffset15100] (.compareTo this15099 java-time-ZoneOffset15100)))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ZoneOffset this15101 ^js/JSJoda.TemporalField java-time-temporal-TemporalField15102] (.get this15101 java-time-temporal-TemporalField15102)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZoneOffset this15103 ^java.lang.Object java-lang-Object15104] (.equals this15103 java-lang-Object15104)))
