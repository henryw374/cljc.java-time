(ns cljc.java-time.zone-offset (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZoneOffset]]))
(def max (goog.object/get java.time.ZoneOffset "MAX"))
(def min (goog.object/get java.time.ZoneOffset "MIN"))
(def utc (goog.object/get java.time.ZoneOffset "UTC"))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (js-invoke java.time.ZoneOffset "getAvailableZoneIds")))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ZoneOffset this5547 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5548] (.range this5547 java-time-temporal-TemporalField5548)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^js/JSJoda.ZoneOffset [^int int5549] (js-invoke java.time.ZoneOffset "ofTotalSeconds" int5549)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__5551] (js-invoke java.time.ZoneOffset "of" G__5551)) (^js/JSJoda.ZoneId [^java.lang.String java-lang-String5552 ^java.util.Map java-util-Map5553] (js-invoke java.time.ZoneOffset "of" java-lang-String5552 java-util-Map5553)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^java.lang.String java-lang-String5554 ^js/JSJoda.ZoneOffset java-time-ZoneOffset5555] (js-invoke java.time.ZoneOffset "ofOffset" java-lang-String5554 java-time-ZoneOffset5555)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.ZoneOffset this5556 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery5557] (.query this5556 java-time-temporal-TemporalQuery5557)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this5558] (.toString this5558)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this5559 ^js/JSJoda.TextStyle java-time-format-TextStyle5560 ^java.util.Locale java-util-Locale5561] (.displayName this5559 java-time-format-TextStyle5560 java-util-Locale5561)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ZoneOffset this5562 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5563] (.getLong this5562 java-time-temporal-TemporalField5563)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^js/JSJoda.ZoneRules [^js/JSJoda.ZoneOffset this5564] (.rules this5564)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^js/JSJoda.ZoneOffset [^int int5565] (js-invoke java.time.ZoneOffset "ofHours" int5565)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^js/JSJoda.ZoneOffset this5566] (.id this5566)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZoneOffset this5567] (.normalized this5567)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^js/JSJoda.ZoneId [] (js-invoke java.time.ZoneOffset "systemDefault")))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__5569] (js-invoke java.time.ZoneOffset "from" G__5569)))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^js/JSJoda.ZoneOffset [^int int5570 ^int int5571 ^int int5572] (js-invoke java.time.ZoneOffset "ofHoursMinutesSeconds" int5570 int5571 int5572)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.ZoneOffset this5573 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5574] (.isSupported this5573 java-time-temporal-TemporalField5574)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this5575] (.hashCode this5575)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this5576] (.totalSeconds this5576)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.ZoneOffset this5577 ^js/JSJoda.Temporal java-time-temporal-Temporal5578] (.adjustInto this5577 java-time-temporal-Temporal5578)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^js/JSJoda.ZoneOffset [^int int5579 ^int int5580] (js-invoke java.time.ZoneOffset "ofHoursMinutes" int5579 int5580)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"]))} (^int [^js/JSJoda.ZoneOffset this5581 ^js/JSJoda.ZoneOffset java-time-ZoneOffset5582] (.compareTo this5581 java-time-ZoneOffset5582)))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ZoneOffset this5583 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5584] (.get this5583 java-time-temporal-TemporalField5584)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZoneOffset this5585 ^java.lang.Object java-lang-Object5586] (.equals this5585 java-lang-Object5586)))
