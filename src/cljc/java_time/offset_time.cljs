(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [OffsetTime]]))
(def min (goog.object/get java.time.OffsetTime "MIN"))
(def max (goog.object/get java.time.OffsetTime "MAX"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13578 ^long long13579] (.minusMinutes this13578 long13579)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13580 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13581] (.truncatedTo this13580 java-time-temporal-TemporalUnit13581)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetTime this13582 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13583] (.range this13582 java-time-temporal-TemporalField13583)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this13584] (.hour this13584)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13585 ^long long13586] (.minusHours this13585 long13586)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime java-time-LocalTime13587 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13588] (js-invoke java.time.OffsetTime "of" java-time-LocalTime13587 java-time-ZoneOffset13588)) (^js/JSJoda.OffsetTime [^int int13589 ^int int13590 ^int int13591 ^int int13592 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13593] (js-invoke java.time.OffsetTime "of" int13589 int13590 int13591 int13592 java-time-ZoneOffset13593)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this13594 ^js/JSJoda.OffsetTime java-time-OffsetTime13595] (.isEqual this13594 java-time-OffsetTime13595)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this13596] (.nano this13596)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13597 ^long long13598] (.minusSeconds this13597 long13598)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this13599] (.second this13599)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13600 ^long long13601] (.plusNanos this13600 long13601)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13602 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount13603] (.plus this13602 java-time-temporal-TemporalAmount13603)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13604 ^long long13605 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13606] (.plus this13604 long13605 java-time-temporal-TemporalUnit13606)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13607 ^int int13608] (.withHour this13607 int13608)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13609 ^int int13610] (.withMinute this13609 int13610)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13611 ^long long13612] (.plusMinutes this13611 long13612)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.OffsetTime this13613 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery13614] (.query this13613 java-time-temporal-TemporalQuery13614)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetTime this13615 ^js/JSJoda.LocalDate java-time-LocalDate13616] (.atDate this13615 java-time-LocalDate13616)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13617 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13618] (.withOffsetSameInstant this13617 java-time-ZoneOffset13618)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^js/JSJoda.OffsetTime this13619] (.toString this13619)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this13620 ^js/JSJoda.OffsetTime java-time-OffsetTime13621] (.isBefore this13620 java-time-OffsetTime13621)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13622 ^long long13623 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13624] (.minus this13622 long13623 java-time-temporal-TemporalUnit13624)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13625 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount13626] (.minus this13625 java-time-temporal-TemporalAmount13626)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13627 ^long long13628] (.plusHours this13627 long13628)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetTime this13629] (.toLocalTime this13629)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.OffsetTime this13630 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13631] (.getLong this13630 java-time-temporal-TemporalField13631)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetTime this13632] (.offset this13632)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13633 ^int int13634] (.withNano this13633 int13634)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.OffsetTime this13635 ^js/JSJoda.Temporal java-time-temporal-Temporal13636 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13637] (.until this13635 java-time-temporal-Temporal13636 java-time-temporal-TemporalUnit13637)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13638 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13639] (.withOffsetSameLocal this13638 java-time-ZoneOffset13639)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor13640] (js-invoke java.time.OffsetTime "from" java-time-temporal-TemporalAccessor13640)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this13641 ^js/JSJoda.OffsetTime java-time-OffsetTime13642] (.isAfter this13641 java-time-OffsetTime13642)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13643 ^long long13644] (.minusNanos this13643 long13644)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"] ["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^boolean [this13645 G__13646] (.isSupported ^js/JSJoda.OffsetTime this13645 G__13646)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence13647] (js-invoke java.time.OffsetTime "parse" java-lang-CharSequence13647)) (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence13648 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter13649] (js-invoke java.time.OffsetTime "parse" java-lang-CharSequence13648 java-time-format-DateTimeFormatter13649)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13650 ^int int13651] (.withSecond this13650 int13651)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this13652] (.minute this13652)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this13653] (.hashCode this13653)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetTime this13654 ^js/JSJoda.Temporal java-time-temporal-Temporal13655] (.adjustInto this13654 java-time-temporal-Temporal13655)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13656 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13657 ^long long13658] (.with this13656 java-time-temporal-TemporalField13657 long13658)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13659 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster13660] (.with this13659 java-time-temporal-TemporalAdjuster13660)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.OffsetTime [] (js-invoke java.time.OffsetTime "now")) (^js/JSJoda.OffsetTime [G__13662] (js-invoke java.time.OffsetTime "now" G__13662)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this13663 ^js/JSJoda.OffsetTime java-time-OffsetTime13664] (.compareTo this13663 java-time-OffsetTime13664)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.Instant java-time-Instant13665 ^js/JSJoda.ZoneId java-time-ZoneId13666] (js-invoke java.time.OffsetTime "ofInstant" java-time-Instant13665 java-time-ZoneId13666)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13667 ^long long13668] (.plusSeconds this13667 long13668)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.OffsetTime this13669 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13670] (.get this13669 java-time-temporal-TemporalField13670)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.OffsetTime this13671 ^java.lang.Object java-lang-Object13672] (.equals this13671 java-lang-Object13672)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.OffsetTime this13673 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter13674] (.format this13673 java-time-format-DateTimeFormatter13674)))
