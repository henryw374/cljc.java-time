(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetTime]]))
(def min (goog.object/get java.time.OffsetTime "MIN"))
(def max (goog.object/get java.time.OffsetTime "MAX"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59765 ^long long59766] (.minusMinutes this59765 long59766)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59767 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit59768] (.truncatedTo this59767 java-time-temporal-TemporalUnit59768)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetTime this59769 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59770] (.range this59769 java-time-temporal-TemporalField59770)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this59771] (.hour this59771)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59772 ^long long59773] (.minusHours this59772 long59773)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime java-time-LocalTime59774 ^js/JSJoda.ZoneOffset java-time-ZoneOffset59775] (js-invoke java.time.OffsetTime "of" java-time-LocalTime59774 java-time-ZoneOffset59775)) (^js/JSJoda.OffsetTime [^int int59776 ^int int59777 ^int int59778 ^int int59779 ^js/JSJoda.ZoneOffset java-time-ZoneOffset59780] (js-invoke java.time.OffsetTime "of" int59776 int59777 int59778 int59779 java-time-ZoneOffset59780)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this59781 ^js/JSJoda.OffsetTime java-time-OffsetTime59782] (.isEqual this59781 java-time-OffsetTime59782)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this59783] (.nano this59783)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59784 ^long long59785] (.minusSeconds this59784 long59785)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this59786] (.second this59786)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59787 ^long long59788] (.plusNanos this59787 long59788)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this59789 G__59790 G__59791] (.plus ^js/JSJoda.OffsetTime this59789 G__59790 G__59791)) (^java.lang.Object [this59792 G__59793] (.plus ^js/JSJoda.OffsetTime this59792 G__59793)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59794 ^int int59795] (.withHour this59794 int59795)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59796 ^int int59797] (.withMinute this59796 int59797)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59798 ^long long59799] (.plusMinutes this59798 long59799)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.OffsetTime this59800 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery59801] (.query this59800 java-time-temporal-TemporalQuery59801)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetTime this59802 ^js/JSJoda.LocalDate java-time-LocalDate59803] (.atDate this59802 java-time-LocalDate59803)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59804 ^js/JSJoda.ZoneOffset java-time-ZoneOffset59805] (.withOffsetSameInstant this59804 java-time-ZoneOffset59805)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^js/JSJoda.OffsetTime this59806] (.toString this59806)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this59807 ^js/JSJoda.OffsetTime java-time-OffsetTime59808] (.isBefore this59807 java-time-OffsetTime59808)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this59809 G__59810] (.minus ^js/JSJoda.OffsetTime this59809 G__59810)) (^java.lang.Object [this59811 G__59812 G__59813] (.minus ^js/JSJoda.OffsetTime this59811 G__59812 G__59813)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59814 ^long long59815] (.plusHours this59814 long59815)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetTime this59816] (.toLocalTime this59816)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.OffsetTime this59817 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59818] (.getLong this59817 java-time-temporal-TemporalField59818)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetTime this59819] (.offset this59819)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59820 ^int int59821] (.withNano this59820 int59821)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.OffsetTime this59822 ^js/JSJoda.Temporal java-time-temporal-Temporal59823 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit59824] (.until this59822 java-time-temporal-Temporal59823 java-time-temporal-TemporalUnit59824)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59825 ^js/JSJoda.ZoneOffset java-time-ZoneOffset59826] (.withOffsetSameLocal this59825 java-time-ZoneOffset59826)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor59827] (js-invoke java.time.OffsetTime "from" java-time-temporal-TemporalAccessor59827)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this59828 ^js/JSJoda.OffsetTime java-time-OffsetTime59829] (.isAfter this59828 java-time-OffsetTime59829)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59830 ^long long59831] (.minusNanos this59830 long59831)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^boolean [this59832 G__59833] (.isSupported ^js/JSJoda.OffsetTime this59832 G__59833)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence59834 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter59835] (js-invoke java.time.OffsetTime "parse" java-lang-CharSequence59834 java-time-format-DateTimeFormatter59835)) (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence59836] (js-invoke java.time.OffsetTime "parse" java-lang-CharSequence59836)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59837 ^int int59838] (.withSecond this59837 int59838)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this59839] (.minute this59839)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this59840] (.hashCode this59840)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetTime this59841 ^js/JSJoda.Temporal java-time-temporal-Temporal59842] (.adjustInto this59841 java-time-temporal-Temporal59842)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this59843 G__59844 G__59845] (.with ^js/JSJoda.OffsetTime this59843 G__59844 G__59845)) (^java.lang.Object [this59846 G__59847] (.with ^js/JSJoda.OffsetTime this59846 G__59847)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.OffsetTime [] (js-invoke java.time.OffsetTime "now")) (^js/JSJoda.OffsetTime [G__59849] (js-invoke java.time.OffsetTime "now" G__59849)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"] ["java.time.OffsetTime" "java.lang.Object"]))} (^int [this59850 G__59851] (.compareTo ^js/JSJoda.OffsetTime this59850 G__59851)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.Instant java-time-Instant59852 ^js/JSJoda.ZoneId java-time-ZoneId59853] (js-invoke java.time.OffsetTime "ofInstant" java-time-Instant59852 java-time-ZoneId59853)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this59854 ^long long59855] (.plusSeconds this59854 long59855)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.OffsetTime this59856 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59857] (.get this59856 java-time-temporal-TemporalField59857)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.OffsetTime this59858 ^java.lang.Object java-lang-Object59859] (.equals this59858 java-lang-Object59859)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.OffsetTime this59860 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter59861] (.format this59860 java-time-format-DateTimeFormatter59861)))
