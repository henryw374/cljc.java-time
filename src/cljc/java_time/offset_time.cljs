(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetTime]]))
(def min (goog.object/get java.time.OffsetTime "MIN"))
(def max (goog.object/get java.time.OffsetTime "MAX"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7071 ^long long7072] (.minusMinutes this7071 long7072)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7073 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7074] (.truncatedTo this7073 java-time-temporal-TemporalUnit7074)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetTime this7075 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7076] (.range this7075 java-time-temporal-TemporalField7076)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this7077] (.hour this7077)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7078 ^long long7079] (.minusHours this7078 long7079)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^int int7080 ^int int7081 ^int int7082 ^int int7083 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7084] (js-invoke java.time.OffsetTime "of" int7080 int7081 int7082 int7083 java-time-ZoneOffset7084)) (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime java-time-LocalTime7085 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7086] (js-invoke java.time.OffsetTime "of" java-time-LocalTime7085 java-time-ZoneOffset7086)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this7087 ^js/JSJoda.OffsetTime java-time-OffsetTime7088] (.isEqual this7087 java-time-OffsetTime7088)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this7089] (.nano this7089)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7090 ^long long7091] (.minusSeconds this7090 long7091)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this7092] (.second this7092)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7093 ^long long7094] (.plusNanos this7093 long7094)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this7095 G__7096 G__7097] (.plus ^js/JSJoda.OffsetTime this7095 G__7096 G__7097)) (^java.lang.Object [this7098 G__7099] (.plus ^js/JSJoda.OffsetTime this7098 G__7099)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7100 ^int int7101] (.withHour this7100 int7101)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7102 ^int int7103] (.withMinute this7102 int7103)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7104 ^long long7105] (.plusMinutes this7104 long7105)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.OffsetTime this7106 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery7107] (.query this7106 java-time-temporal-TemporalQuery7107)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetTime this7108 ^js/JSJoda.LocalDate java-time-LocalDate7109] (.atDate this7108 java-time-LocalDate7109)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7110 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7111] (.withOffsetSameInstant this7110 java-time-ZoneOffset7111)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^js/JSJoda.OffsetTime this7112] (.toString this7112)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this7113 ^js/JSJoda.OffsetTime java-time-OffsetTime7114] (.isBefore this7113 java-time-OffsetTime7114)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7115 G__7116] (.minus ^js/JSJoda.OffsetTime this7115 G__7116)) (^java.lang.Object [this7117 G__7118 G__7119] (.minus ^js/JSJoda.OffsetTime this7117 G__7118 G__7119)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7120 ^long long7121] (.plusHours this7120 long7121)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetTime this7122] (.toLocalTime this7122)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.OffsetTime this7123 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7124] (.getLong this7123 java-time-temporal-TemporalField7124)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetTime this7125] (.offset this7125)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7126 ^int int7127] (.withNano this7126 int7127)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^long [^js/JSJoda.OffsetTime this7128 ^js/JSJoda.LocalDate java-time-LocalDate7129] (.toEpochSecond this7128 java-time-LocalDate7129)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.OffsetTime this7130 ^js/JSJoda.Temporal java-time-temporal-Temporal7131 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7132] (.until this7130 java-time-temporal-Temporal7131 java-time-temporal-TemporalUnit7132)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7133 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7134] (.withOffsetSameLocal this7133 java-time-ZoneOffset7134)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor7135] (js-invoke java.time.OffsetTime "from" java-time-temporal-TemporalAccessor7135)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this7136 ^js/JSJoda.OffsetTime java-time-OffsetTime7137] (.isAfter this7136 java-time-OffsetTime7137)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7138 ^long long7139] (.minusNanos this7138 long7139)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^boolean [this7140 G__7141] (.isSupported ^js/JSJoda.OffsetTime this7140 G__7141)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence7142 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter7143] (js-invoke java.time.OffsetTime "parse" java-lang-CharSequence7142 java-time-format-DateTimeFormatter7143)) (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence7144] (js-invoke java.time.OffsetTime "parse" java-lang-CharSequence7144)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7145 ^int int7146] (.withSecond this7145 int7146)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this7147] (.minute this7147)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this7148] (.hashCode this7148)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetTime this7149 ^js/JSJoda.Temporal java-time-temporal-Temporal7150] (.adjustInto this7149 java-time-temporal-Temporal7150)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this7151 G__7152 G__7153] (.with ^js/JSJoda.OffsetTime this7151 G__7152 G__7153)) (^java.lang.Object [this7154 G__7155] (.with ^js/JSJoda.OffsetTime this7154 G__7155)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^js/JSJoda.OffsetTime [G__7157] (js-invoke java.time.OffsetTime "now" G__7157)) (^js/JSJoda.OffsetTime [] (js-invoke java.time.OffsetTime "now")))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"] ["java.time.OffsetTime" "java.time.OffsetTime"]))} (^int [this7158 G__7159] (.compareTo ^js/JSJoda.OffsetTime this7158 G__7159)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.Instant java-time-Instant7160 ^js/JSJoda.ZoneId java-time-ZoneId7161] (js-invoke java.time.OffsetTime "ofInstant" java-time-Instant7160 java-time-ZoneId7161)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7162 ^long long7163] (.plusSeconds this7162 long7163)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.OffsetTime this7164 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7165] (.get this7164 java-time-temporal-TemporalField7165)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.OffsetTime this7166 ^java.lang.Object java-lang-Object7167] (.equals this7166 java-lang-Object7167)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.OffsetTime this7168 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter7169] (.format this7168 java-time-format-DateTimeFormatter7169)))
