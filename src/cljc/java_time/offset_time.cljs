(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetTime]]))
(def min (goog.object/get java.time.OffsetTime "MIN"))
(def max (goog.object/get java.time.OffsetTime "MAX"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4060 ^long long4061] (.minusMinutes this4060 long4061)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4062 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4063] (.truncatedTo this4062 java-time-temporal-TemporalUnit4063)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetTime this4064 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4065] (.range this4064 java-time-temporal-TemporalField4065)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this4066] (.hour this4066)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4067 ^long long4068] (.minusHours this4067 long4068)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^int int4069 ^int int4070 ^int int4071 ^int int4072 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4073] (js-invoke java.time.OffsetTime "of" int4069 int4070 int4071 int4072 java-time-ZoneOffset4073)) (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime java-time-LocalTime4074 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4075] (js-invoke java.time.OffsetTime "of" java-time-LocalTime4074 java-time-ZoneOffset4075)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this4076 ^js/JSJoda.OffsetTime java-time-OffsetTime4077] (.isEqual this4076 java-time-OffsetTime4077)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this4078] (.nano this4078)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4079 ^long long4080] (.minusSeconds this4079 long4080)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this4081] (.second this4081)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4082 ^long long4083] (.plusNanos this4082 long4083)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4084 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4085] (.plus this4084 java-time-temporal-TemporalAmount4085)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4086 ^long long4087 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4088] (.plus this4086 long4087 java-time-temporal-TemporalUnit4088)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4089 ^int int4090] (.withHour this4089 int4090)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4091 ^int int4092] (.withMinute this4091 int4092)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4093 ^long long4094] (.plusMinutes this4093 long4094)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.OffsetTime this4095 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery4096] (.query this4095 java-time-temporal-TemporalQuery4096)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetTime this4097 ^js/JSJoda.LocalDate java-time-LocalDate4098] (.atDate this4097 java-time-LocalDate4098)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4099 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4100] (.withOffsetSameInstant this4099 java-time-ZoneOffset4100)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^js/JSJoda.OffsetTime this4101] (.toString this4101)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this4102 ^js/JSJoda.OffsetTime java-time-OffsetTime4103] (.isBefore this4102 java-time-OffsetTime4103)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4104 ^long long4105 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4106] (.minus this4104 long4105 java-time-temporal-TemporalUnit4106)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4107 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4108] (.minus this4107 java-time-temporal-TemporalAmount4108)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4109 ^long long4110] (.plusHours this4109 long4110)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetTime this4111] (.toLocalTime this4111)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.OffsetTime this4112 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4113] (.getLong this4112 java-time-temporal-TemporalField4113)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetTime this4114] (.offset this4114)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4115 ^int int4116] (.withNano this4115 int4116)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.OffsetTime this4117 ^js/JSJoda.Temporal java-time-temporal-Temporal4118 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4119] (.until this4117 java-time-temporal-Temporal4118 java-time-temporal-TemporalUnit4119)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4120 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4121] (.withOffsetSameLocal this4120 java-time-ZoneOffset4121)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor4122] (js-invoke java.time.OffsetTime "from" java-time-temporal-TemporalAccessor4122)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this4123 ^js/JSJoda.OffsetTime java-time-OffsetTime4124] (.isAfter this4123 java-time-OffsetTime4124)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4125 ^long long4126] (.minusNanos this4125 long4126)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"] ["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^boolean [this4127 G__4128] (.isSupported ^js/JSJoda.OffsetTime this4127 G__4128)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence4129] (js-invoke java.time.OffsetTime "parse" java-lang-CharSequence4129)) (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence4130 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4131] (js-invoke java.time.OffsetTime "parse" java-lang-CharSequence4130 java-time-format-DateTimeFormatter4131)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4132 ^int int4133] (.withSecond this4132 int4133)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this4134] (.minute this4134)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this4135] (.hashCode this4135)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetTime this4136 ^js/JSJoda.Temporal java-time-temporal-Temporal4137] (.adjustInto this4136 java-time-temporal-Temporal4137)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4138 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster4139] (.with this4138 java-time-temporal-TemporalAdjuster4139)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4140 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4141 ^long long4142] (.with this4140 java-time-temporal-TemporalField4141 long4142)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.OffsetTime [] (js-invoke java.time.OffsetTime "now")) (^js/JSJoda.OffsetTime [G__4144] (js-invoke java.time.OffsetTime "now" G__4144)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this4145 ^js/JSJoda.OffsetTime java-time-OffsetTime4146] (.compareTo this4145 java-time-OffsetTime4146)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.Instant java-time-Instant4147 ^js/JSJoda.ZoneId java-time-ZoneId4148] (js-invoke java.time.OffsetTime "ofInstant" java-time-Instant4147 java-time-ZoneId4148)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4149 ^long long4150] (.plusSeconds this4149 long4150)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.OffsetTime this4151 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4152] (.get this4151 java-time-temporal-TemporalField4152)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.OffsetTime this4153 ^java.lang.Object java-lang-Object4154] (.equals this4153 java-lang-Object4154)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.OffsetTime this4155 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4156] (.format this4155 java-time-format-DateTimeFormatter4156)))
