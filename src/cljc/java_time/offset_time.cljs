(ns cljc.java-time.offset-time (:require [java.time :refer [OffsetTime]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def min (. java.time.OffsetTime -MIN))
(def max (. java.time.OffsetTime -MAX))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49274 ^long long49275] (.minusMinutes this49274 long49275)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49276 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49277] (.truncatedTo this49276 java-time-temporal-TemporalUnit49277)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetTime this49278 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49279] (.range this49278 java-time-temporal-TemporalField49279)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this49280] (.hour this49280)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49281 ^long long49282] (.minusHours this49281 long49282)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.lang.Integer int49283 ^java.lang.Integer int49284 ^java.lang.Integer int49285 ^java.lang.Integer int49286 ^java.time.ZoneOffset java-time-ZoneOffset49287] (. java.time.OffsetTime of int49283 int49284 int49285 int49286 java-time-ZoneOffset49287)) (^java.time.OffsetTime [^java.time.LocalTime java-time-LocalTime49288 ^java.time.ZoneOffset java-time-ZoneOffset49289] (. java.time.OffsetTime of java-time-LocalTime49288 java-time-ZoneOffset49289)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this49290 ^java.time.OffsetTime java-time-OffsetTime49291] (.isEqual this49290 java-time-OffsetTime49291)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this49292] (.nano this49292)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49293 ^long long49294] (.minusSeconds this49293 long49294)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this49295] (.second this49295)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49296 ^long long49297] (.plusNanos this49296 long49297)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this49298 G__49299 G__49300] (.plus ^java.time.OffsetTime this49298 G__49299 G__49300)) (^java.lang.Object [this49301 G__49302] (.plus ^java.time.OffsetTime this49301 G__49302)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49303 ^java.lang.Integer int49304] (.withHour this49303 int49304)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49305 ^java.lang.Integer int49306] (.withMinute this49305 int49306)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49307 ^long long49308] (.plusMinutes this49307 long49308)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetTime this49309 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery49310] (.query this49309 java-time-temporal-TemporalQuery49310)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^java.time.OffsetDateTime [^java.time.OffsetTime this49311 ^java.time.LocalDate java-time-LocalDate49312] (.atDate this49311 java-time-LocalDate49312)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49313 ^java.time.ZoneOffset java-time-ZoneOffset49314] (.withOffsetSameInstant this49313 java-time-ZoneOffset49314)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^java.time.OffsetTime this49315] (.toString this49315)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this49316 ^java.time.OffsetTime java-time-OffsetTime49317] (.isBefore this49316 java-time-OffsetTime49317)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this49318 G__49319] (.minus ^java.time.OffsetTime this49318 G__49319)) (^java.lang.Object [this49320 G__49321 G__49322] (.minus ^java.time.OffsetTime this49320 G__49321 G__49322)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49323 ^long long49324] (.plusHours this49323 long49324)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.LocalTime [^java.time.OffsetTime this49325] (.toLocalTime this49325)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetTime this49326 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49327] (.getLong this49326 java-time-temporal-TemporalField49327)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.ZoneOffset [^java.time.OffsetTime this49328] (.offset this49328)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49329 ^java.lang.Integer int49330] (.withNano this49329 int49330)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetTime this49331 ^java.time.temporal.Temporal java-time-temporal-Temporal49332 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49333] (.until this49331 java-time-temporal-Temporal49332 java-time-temporal-TemporalUnit49333)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49334 ^java.time.ZoneOffset java-time-ZoneOffset49335] (.withOffsetSameLocal this49334 java-time-ZoneOffset49335)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor49336] (. java.time.OffsetTime from java-time-temporal-TemporalAccessor49336)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this49337 ^java.time.OffsetTime java-time-OffsetTime49338] (.isAfter this49337 java-time-OffsetTime49338)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49339 ^long long49340] (.minusNanos this49339 long49340)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"] ["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this49341 G__49342] (.isSupported ^java.time.OffsetTime this49341 G__49342)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence49343] (. java.time.OffsetTime parse java-lang-CharSequence49343)) (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence49344 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49345] (. java.time.OffsetTime parse java-lang-CharSequence49344 java-time-format-DateTimeFormatter49345)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49346 ^java.lang.Integer int49347] (.withSecond this49346 int49347)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this49348] (.minute this49348)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this49349] (.hashCode this49349)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetTime this49350 ^java.time.temporal.Temporal java-time-temporal-Temporal49351] (.adjustInto this49350 java-time-temporal-Temporal49351)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this49352 G__49353 G__49354] (.with ^java.time.OffsetTime this49352 G__49353 G__49354)) (^java.lang.Object [this49355 G__49356] (.with ^java.time.OffsetTime this49355 G__49356)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.OffsetTime [] (. java.time.OffsetTime now)) (^java.time.OffsetTime [G__49358] (. java.time.OffsetTime now G__49358)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"] ["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Integer [this49359 G__49360] (.compareTo ^java.time.OffsetTime this49359 G__49360)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetTime [^java.time.Instant java-time-Instant49361 ^java.time.ZoneId java-time-ZoneId49362] (. java.time.OffsetTime ofInstant java-time-Instant49361 java-time-ZoneId49362)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this49363 ^long long49364] (.plusSeconds this49363 long49364)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetTime this49365 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49366] (.get this49365 java-time-temporal-TemporalField49366)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetTime this49367 ^java.lang.Object java-lang-Object49368] (.equals this49367 java-lang-Object49368)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetTime this49369 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49370] (.format this49369 java-time-format-DateTimeFormatter49370)))
