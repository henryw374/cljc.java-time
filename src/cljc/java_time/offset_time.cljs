(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetTime]]))
(def min (. java.time.OffsetTime -MIN))
(def max (. java.time.OffsetTime -MAX))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11282 ^long long11283] (.minusMinutes this11282 long11283)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11284 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11285] (.truncatedTo this11284 java-time-temporal-TemporalUnit11285)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetTime this11286 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11287] (.range this11286 java-time-temporal-TemporalField11287)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this11288] (.hour this11288)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11289 ^long long11290] (.minusHours this11289 long11290)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime java-time-LocalTime11291 ^java.time.ZoneOffset java-time-ZoneOffset11292] (. java.time.OffsetTime of java-time-LocalTime11291 java-time-ZoneOffset11292)) (^java.time.OffsetTime [^java.lang.Integer int11293 ^java.lang.Integer int11294 ^java.lang.Integer int11295 ^java.lang.Integer int11296 ^java.time.ZoneOffset java-time-ZoneOffset11297] (. java.time.OffsetTime of int11293 int11294 int11295 int11296 java-time-ZoneOffset11297)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this11298 ^java.time.OffsetTime java-time-OffsetTime11299] (.isEqual this11298 java-time-OffsetTime11299)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this11300] (.nano this11300)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11301 ^long long11302] (.minusSeconds this11301 long11302)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this11303] (.second this11303)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11304 ^long long11305] (.plusNanos this11304 long11305)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this11306 G__11307 G__11308] (.plus ^java.time.OffsetTime this11306 G__11307 G__11308)) (^java.lang.Object [this11309 G__11310] (.plus ^java.time.OffsetTime this11309 G__11310)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11311 ^java.lang.Integer int11312] (.withHour this11311 int11312)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11313 ^java.lang.Integer int11314] (.withMinute this11313 int11314)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11315 ^long long11316] (.plusMinutes this11315 long11316)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetTime this11317 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery11318] (.query this11317 java-time-temporal-TemporalQuery11318)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^java.time.OffsetDateTime [^java.time.OffsetTime this11319 ^java.time.LocalDate java-time-LocalDate11320] (.atDate this11319 java-time-LocalDate11320)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11321 ^java.time.ZoneOffset java-time-ZoneOffset11322] (.withOffsetSameInstant this11321 java-time-ZoneOffset11322)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^java.time.OffsetTime this11323] (.toString this11323)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this11324 ^java.time.OffsetTime java-time-OffsetTime11325] (.isBefore this11324 java-time-OffsetTime11325)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11326 G__11327] (.minus ^java.time.OffsetTime this11326 G__11327)) (^java.lang.Object [this11328 G__11329 G__11330] (.minus ^java.time.OffsetTime this11328 G__11329 G__11330)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11331 ^long long11332] (.plusHours this11331 long11332)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.LocalTime [^java.time.OffsetTime this11333] (.toLocalTime this11333)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetTime this11334 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11335] (.getLong this11334 java-time-temporal-TemporalField11335)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.ZoneOffset [^java.time.OffsetTime this11336] (.offset this11336)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11337 ^java.lang.Integer int11338] (.withNano this11337 int11338)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetTime this11339 ^java.time.temporal.Temporal java-time-temporal-Temporal11340 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11341] (.until this11339 java-time-temporal-Temporal11340 java-time-temporal-TemporalUnit11341)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11342 ^java.time.ZoneOffset java-time-ZoneOffset11343] (.withOffsetSameLocal this11342 java-time-ZoneOffset11343)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor11344] (. java.time.OffsetTime from java-time-temporal-TemporalAccessor11344)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this11345 ^java.time.OffsetTime java-time-OffsetTime11346] (.isAfter this11345 java-time-OffsetTime11346)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11347 ^long long11348] (.minusNanos this11347 long11348)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this11349 G__11350] (.isSupported ^java.time.OffsetTime this11349 G__11350)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence11351 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11352] (. java.time.OffsetTime parse java-lang-CharSequence11351 java-time-format-DateTimeFormatter11352)) (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence11353] (. java.time.OffsetTime parse java-lang-CharSequence11353)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11354 ^java.lang.Integer int11355] (.withSecond this11354 int11355)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this11356] (.minute this11356)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this11357] (.hashCode this11357)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetTime this11358 ^java.time.temporal.Temporal java-time-temporal-Temporal11359] (.adjustInto this11358 java-time-temporal-Temporal11359)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this11360 G__11361 G__11362] (.with ^java.time.OffsetTime this11360 G__11361 G__11362)) (^java.lang.Object [this11363 G__11364] (.with ^java.time.OffsetTime this11363 G__11364)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.OffsetTime [] (. java.time.OffsetTime now)) (^java.time.OffsetTime [G__11366] (. java.time.OffsetTime now G__11366)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"] ["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Integer [this11367 G__11368] (.compareTo ^java.time.OffsetTime this11367 G__11368)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetTime [^java.time.Instant java-time-Instant11369 ^java.time.ZoneId java-time-ZoneId11370] (. java.time.OffsetTime ofInstant java-time-Instant11369 java-time-ZoneId11370)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this11371 ^long long11372] (.plusSeconds this11371 long11372)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetTime this11373 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11374] (.get this11373 java-time-temporal-TemporalField11374)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetTime this11375 ^java.lang.Object java-lang-Object11376] (.equals this11375 java-lang-Object11376)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetTime this11377 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11378] (.format this11377 java-time-format-DateTimeFormatter11378)))
