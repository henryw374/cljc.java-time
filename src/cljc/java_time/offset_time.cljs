(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetTime]]))
(def min (goog.object/get java.time.OffsetTime "MIN"))
(def max (goog.object/get java.time.OffsetTime "MAX"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7049 ^long long7050] (.minusMinutes this7049 long7050)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7051 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7052] (.truncatedTo this7051 java-time-temporal-TemporalUnit7052)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetTime this7053 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7054] (.range this7053 java-time-temporal-TemporalField7054)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this7055] (.hour this7055)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7056 ^long long7057] (.minusHours this7056 long7057)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime java-time-LocalTime7058 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7059] (js-invoke java.time.OffsetTime "of" java-time-LocalTime7058 java-time-ZoneOffset7059)) (^js/JSJoda.OffsetTime [^int int7060 ^int int7061 ^int int7062 ^int int7063 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7064] (js-invoke java.time.OffsetTime "of" int7060 int7061 int7062 int7063 java-time-ZoneOffset7064)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this7065 ^js/JSJoda.OffsetTime java-time-OffsetTime7066] (.isEqual this7065 java-time-OffsetTime7066)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this7067] (.nano this7067)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7068 ^long long7069] (.minusSeconds this7068 long7069)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this7070] (.second this7070)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7071 ^long long7072] (.plusNanos this7071 long7072)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7073 G__7074] (.plus ^js/JSJoda.OffsetTime this7073 G__7074)) (^java.lang.Object [this7075 G__7076 G__7077] (.plus ^js/JSJoda.OffsetTime this7075 G__7076 G__7077)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7078 ^int int7079] (.withHour this7078 int7079)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7080 ^int int7081] (.withMinute this7080 int7081)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7082 ^long long7083] (.plusMinutes this7082 long7083)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.OffsetTime this7084 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery7085] (.query this7084 java-time-temporal-TemporalQuery7085)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetTime this7086 ^js/JSJoda.LocalDate java-time-LocalDate7087] (.atDate this7086 java-time-LocalDate7087)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7088 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7089] (.withOffsetSameInstant this7088 java-time-ZoneOffset7089)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^js/JSJoda.OffsetTime this7090] (.toString this7090)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this7091 ^js/JSJoda.OffsetTime java-time-OffsetTime7092] (.isBefore this7091 java-time-OffsetTime7092)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7093 G__7094] (.minus ^js/JSJoda.OffsetTime this7093 G__7094)) (^java.lang.Object [this7095 G__7096 G__7097] (.minus ^js/JSJoda.OffsetTime this7095 G__7096 G__7097)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7098 ^long long7099] (.plusHours this7098 long7099)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetTime this7100] (.toLocalTime this7100)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.OffsetTime this7101 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7102] (.getLong this7101 java-time-temporal-TemporalField7102)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetTime this7103] (.offset this7103)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7104 ^int int7105] (.withNano this7104 int7105)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.OffsetTime this7106 ^js/JSJoda.Temporal java-time-temporal-Temporal7107 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7108] (.until this7106 java-time-temporal-Temporal7107 java-time-temporal-TemporalUnit7108)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7109 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7110] (.withOffsetSameLocal this7109 java-time-ZoneOffset7110)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor7111] (js-invoke java.time.OffsetTime "from" java-time-temporal-TemporalAccessor7111)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this7112 ^js/JSJoda.OffsetTime java-time-OffsetTime7113] (.isAfter this7112 java-time-OffsetTime7113)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7114 ^long long7115] (.minusNanos this7114 long7115)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"] ["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^boolean [this7116 G__7117] (.isSupported ^js/JSJoda.OffsetTime this7116 G__7117)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence7118 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter7119] (js-invoke java.time.OffsetTime "parse" java-lang-CharSequence7118 java-time-format-DateTimeFormatter7119)) (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence7120] (js-invoke java.time.OffsetTime "parse" java-lang-CharSequence7120)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7121 ^int int7122] (.withSecond this7121 int7122)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this7123] (.minute this7123)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this7124] (.hashCode this7124)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetTime this7125 ^js/JSJoda.Temporal java-time-temporal-Temporal7126] (.adjustInto this7125 java-time-temporal-Temporal7126)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this7127 G__7128 G__7129] (.with ^js/JSJoda.OffsetTime this7127 G__7128 G__7129)) (^java.lang.Object [this7130 G__7131] (.with ^js/JSJoda.OffsetTime this7130 G__7131)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^js/JSJoda.OffsetTime [G__7133] (js-invoke java.time.OffsetTime "now" G__7133)) (^js/JSJoda.OffsetTime [] (js-invoke java.time.OffsetTime "now")))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"] ["java.time.OffsetTime" "java.lang.Object"]))} (^int [this7134 G__7135] (.compareTo ^js/JSJoda.OffsetTime this7134 G__7135)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.Instant java-time-Instant7136 ^js/JSJoda.ZoneId java-time-ZoneId7137] (js-invoke java.time.OffsetTime "ofInstant" java-time-Instant7136 java-time-ZoneId7137)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this7138 ^long long7139] (.plusSeconds this7138 long7139)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.OffsetTime this7140 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7141] (.get this7140 java-time-temporal-TemporalField7141)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.OffsetTime this7142 ^java.lang.Object java-lang-Object7143] (.equals this7142 java-lang-Object7143)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.OffsetTime this7144 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter7145] (.format this7144 java-time-format-DateTimeFormatter7145)))
