(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetTime]]))
(def min (goog.object/get java.time.OffsetTime "MIN"))
(def max (goog.object/get java.time.OffsetTime "MAX"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4061 ^long long4062] (.minusMinutes this4061 long4062)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4063 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4064] (.truncatedTo this4063 java-time-temporal-TemporalUnit4064)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetTime this4065 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4066] (.range this4065 java-time-temporal-TemporalField4066)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this4067] (.hour this4067)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4068 ^long long4069] (.minusHours this4068 long4069)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime java-time-LocalTime4070 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4071] (js-invoke java.time.OffsetTime "of" java-time-LocalTime4070 java-time-ZoneOffset4071)) (^js/JSJoda.OffsetTime [^int int4072 ^int int4073 ^int int4074 ^int int4075 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4076] (js-invoke java.time.OffsetTime "of" int4072 int4073 int4074 int4075 java-time-ZoneOffset4076)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this4077 ^js/JSJoda.OffsetTime java-time-OffsetTime4078] (.isEqual this4077 java-time-OffsetTime4078)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this4079] (.nano this4079)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4080 ^long long4081] (.minusSeconds this4080 long4081)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this4082] (.second this4082)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4083 ^long long4084] (.plusNanos this4083 long4084)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4085 ^long long4086 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4087] (.plus this4085 long4086 java-time-temporal-TemporalUnit4087)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4088 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4089] (.plus this4088 java-time-temporal-TemporalAmount4089)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4090 ^int int4091] (.withHour this4090 int4091)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4092 ^int int4093] (.withMinute this4092 int4093)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4094 ^long long4095] (.plusMinutes this4094 long4095)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.OffsetTime this4096 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery4097] (.query this4096 java-time-temporal-TemporalQuery4097)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetTime this4098 ^js/JSJoda.LocalDate java-time-LocalDate4099] (.atDate this4098 java-time-LocalDate4099)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4100 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4101] (.withOffsetSameInstant this4100 java-time-ZoneOffset4101)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^js/JSJoda.OffsetTime this4102] (.toString this4102)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this4103 ^js/JSJoda.OffsetTime java-time-OffsetTime4104] (.isBefore this4103 java-time-OffsetTime4104)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4105 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4106] (.minus this4105 java-time-temporal-TemporalAmount4106)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4107 ^long long4108 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4109] (.minus this4107 long4108 java-time-temporal-TemporalUnit4109)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4110 ^long long4111] (.plusHours this4110 long4111)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetTime this4112] (.toLocalTime this4112)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.OffsetTime this4113 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4114] (.getLong this4113 java-time-temporal-TemporalField4114)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetTime this4115] (.offset this4115)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4116 ^int int4117] (.withNano this4116 int4117)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.OffsetTime this4118 ^js/JSJoda.Temporal java-time-temporal-Temporal4119 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4120] (.until this4118 java-time-temporal-Temporal4119 java-time-temporal-TemporalUnit4120)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4121 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4122] (.withOffsetSameLocal this4121 java-time-ZoneOffset4122)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor4123] (js-invoke java.time.OffsetTime "from" java-time-temporal-TemporalAccessor4123)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^boolean [^js/JSJoda.OffsetTime this4124 ^js/JSJoda.OffsetTime java-time-OffsetTime4125] (.isAfter this4124 java-time-OffsetTime4125)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4126 ^long long4127] (.minusNanos this4126 long4127)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^boolean [this4128 G__4129] (.isSupported ^js/JSJoda.OffsetTime this4128 G__4129)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence4130 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4131] (js-invoke java.time.OffsetTime "parse" java-lang-CharSequence4130 java-time-format-DateTimeFormatter4131)) (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence4132] (js-invoke java.time.OffsetTime "parse" java-lang-CharSequence4132)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4133 ^int int4134] (.withSecond this4133 int4134)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this4135] (.minute this4135)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this4136] (.hashCode this4136)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetTime this4137 ^js/JSJoda.Temporal java-time-temporal-Temporal4138] (.adjustInto this4137 java-time-temporal-Temporal4138)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4139 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4140 ^long long4141] (.with this4139 java-time-temporal-TemporalField4140 long4141)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4142 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster4143] (.with this4142 java-time-temporal-TemporalAdjuster4143)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.OffsetTime [] (js-invoke java.time.OffsetTime "now")) (^js/JSJoda.OffsetTime [G__4145] (js-invoke java.time.OffsetTime "now" G__4145)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^int [^js/JSJoda.OffsetTime this4146 ^js/JSJoda.OffsetTime java-time-OffsetTime4147] (.compareTo this4146 java-time-OffsetTime4147)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.Instant java-time-Instant4148 ^js/JSJoda.ZoneId java-time-ZoneId4149] (js-invoke java.time.OffsetTime "ofInstant" java-time-Instant4148 java-time-ZoneId4149)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4150 ^long long4151] (.plusSeconds this4150 long4151)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.OffsetTime this4152 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4153] (.get this4152 java-time-temporal-TemporalField4153)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.OffsetTime this4154 ^java.lang.Object java-lang-Object4155] (.equals this4154 java-lang-Object4155)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.OffsetTime this4156 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4157] (.format this4156 java-time-format-DateTimeFormatter4157)))
