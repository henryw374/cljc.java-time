(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZonedDateTime]]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59520 ^long long59521] (.minusMinutes this59520 long59521)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59522 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit59523] (.truncatedTo this59522 java-time-temporal-TemporalUnit59523)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59524 ^long long59525] (.minusWeeks this59524 long59525)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Instant [^js/JSJoda.ZonedDateTime this59526] (.toInstant this59526)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59527 ^long long59528] (.plusWeeks this59527 long59528)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ZonedDateTime this59529 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59530] (.range this59529 java-time-temporal-TemporalField59530)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this59531] (.withEarlierOffsetAtOverlap ^js/JSJoda.ZonedDateTime this59531)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this59532] (.hour this59532)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59533 ^long long59534] (.minusHours this59533 long59534)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime59535 ^js/JSJoda.ZoneId java-time-ZoneId59536] (js-invoke java.time.ZonedDateTime "of" java-time-LocalDateTime59535 java-time-ZoneId59536)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDate java-time-LocalDate59537 ^js/JSJoda.LocalTime java-time-LocalTime59538 ^js/JSJoda.ZoneId java-time-ZoneId59539] (js-invoke java.time.ZonedDateTime "of" java-time-LocalDate59537 java-time-LocalTime59538 java-time-ZoneId59539)) (^js/JSJoda.ZonedDateTime [^int int59540 ^int int59541 ^int int59542 ^int int59543 ^int int59544 ^int int59545 ^int int59546 ^js/JSJoda.ZoneId java-time-ZoneId59547] (js-invoke java.time.ZonedDateTime "of" int59540 int59541 int59542 int59543 int59544 int59545 int59546 java-time-ZoneId59547)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59548 ^int int59549] (.withMonth this59548 int59549)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this59550 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime59551] (.isEqual this59550 java-time-chrono-ChronoZonedDateTime59551)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this59552] (.nano this59552)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime59553 ^js/JSJoda.ZoneId java-time-ZoneId59554 ^js/JSJoda.ZoneOffset java-time-ZoneOffset59555] (js-invoke java.time.ZonedDateTime "ofLocal" java-time-LocalDateTime59553 java-time-ZoneId59554 java-time-ZoneOffset59555)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this59556] (.year this59556)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59557 ^long long59558] (.minusSeconds this59557 long59558)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this59559] (.second this59559)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59560 ^long long59561] (.plusNanos this59560 long59561)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this59562] (.dayOfYear this59562)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this59563 G__59564 G__59565] (.plus ^js/JSJoda.ZonedDateTime this59563 G__59564 G__59565)) (^java.lang.Object [this59566 G__59567] (.plus ^js/JSJoda.ZonedDateTime this59566 G__59567)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59568 ^int int59569] (.withHour this59568 int59569)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59570 ^int int59571] (.withMinute this59570 int59571)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59572 ^long long59573] (.plusMinutes this59572 long59573)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.ZonedDateTime this59574 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery59575] (.query this59574 java-time-temporal-TemporalQuery59575)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.ZonedDateTime this59576] (.dayOfWeek this59576)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^js/JSJoda.ZonedDateTime this59577] (.toString this59577)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59578 ^long long59579] (.plusMonths this59578 long59579)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this59580 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime59581] (.isBefore this59580 java-time-chrono-ChronoZonedDateTime59581)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59582 ^long long59583] (.minusMonths this59582 long59583)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this59584 G__59585] (.minus ^js/JSJoda.ZonedDateTime this59584 G__59585)) (^java.lang.Object [this59586 G__59587 G__59588] (.minus ^js/JSJoda.ZonedDateTime this59586 G__59587 G__59588)))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59589] (.withFixedOffsetZone this59589)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59590 ^long long59591] (.plusHours this59590 long59591)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this59592 G__59593] (.withZoneSameLocal ^js/JSJoda.ZonedDateTime this59592 G__59593)))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this59594 G__59595] (.withZoneSameInstant ^js/JSJoda.ZonedDateTime this59594 G__59595)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59596 ^long long59597] (.plusDays this59596 long59597)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.ZonedDateTime this59598] (.toLocalTime this59598)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ZonedDateTime this59599 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59600] (.getLong this59599 java-time-temporal-TemporalField59600)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.ZonedDateTime this59601] (.offset this59601)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59602 ^int int59603] (.withYear this59602 int59603)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59604 ^int int59605] (.withNano this59604 int59605)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^js/JSJoda.ZonedDateTime this59606] (.toEpochSecond this59606)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.ZonedDateTime this59607] (.toOffsetDateTime this59607)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this59608] (.withLaterOffsetAtOverlap ^js/JSJoda.ZonedDateTime this59608)))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.ZonedDateTime this59609 ^js/JSJoda.Temporal java-time-temporal-Temporal59610 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit59611] (.until this59609 java-time-temporal-Temporal59610 java-time-temporal-TemporalUnit59611)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZonedDateTime this59612] (.zone this59612)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59613 ^int int59614] (.withDayOfMonth this59613 int59614)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this59615] (.dayOfMonth this59615)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor59616] (js-invoke java.time.ZonedDateTime "from" java-time-temporal-TemporalAccessor59616)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this59617 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime59618] (.isAfter this59617 java-time-chrono-ChronoZonedDateTime59618)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59619 ^long long59620] (.minusNanos this59619 long59620)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^boolean [this59621 G__59622] (.isSupported ^js/JSJoda.ZonedDateTime this59621 G__59622)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59623 ^long long59624] (.minusYears this59623 long59624)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Chronology [^js/JSJoda.ZonedDateTime this59625] (.chronology this59625)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence59626] (js-invoke java.time.ZonedDateTime "parse" java-lang-CharSequence59626)) (^js/JSJoda.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence59627 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter59628] (js-invoke java.time.ZonedDateTime "parse" java-lang-CharSequence59627 java-time-format-DateTimeFormatter59628)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59629 ^int int59630] (.withSecond this59629 int59630)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this59631] (.toLocalDate ^js/JSJoda.ZonedDateTime this59631)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this59632] (.minute this59632)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this59633] (.hashCode this59633)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this59634 G__59635 G__59636] (.with ^js/JSJoda.ZonedDateTime this59634 G__59635 G__59636)) (^java.lang.Object [this59637 G__59638] (.with ^js/JSJoda.ZonedDateTime this59637 G__59638)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] [] ["java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [G__59640] (js-invoke java.time.ZonedDateTime "now" G__59640)) (^js/JSJoda.ZonedDateTime [] (js-invoke java.time.ZonedDateTime "now")))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this59641] (.toLocalDateTime ^js/JSJoda.ZonedDateTime this59641)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this59642] (.monthValue this59642)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59643 ^int int59644] (.withDayOfYear this59643 int59644)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"] ["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^int [this59645 G__59646] (.compareTo ^js/JSJoda.ZonedDateTime this59645 G__59646)))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime59647 ^js/JSJoda.ZoneOffset java-time-ZoneOffset59648 ^js/JSJoda.ZoneId java-time-ZoneId59649] (js-invoke java.time.ZonedDateTime "ofStrict" java-time-LocalDateTime59647 java-time-ZoneOffset59648 java-time-ZoneId59649)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.ZonedDateTime this59650] (.month this59650)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.Instant java-time-Instant59651 ^js/JSJoda.ZoneId java-time-ZoneId59652] (js-invoke java.time.ZonedDateTime "ofInstant" java-time-Instant59651 java-time-ZoneId59652)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime59653 ^js/JSJoda.ZoneOffset java-time-ZoneOffset59654 ^js/JSJoda.ZoneId java-time-ZoneId59655] (js-invoke java.time.ZonedDateTime "ofInstant" java-time-LocalDateTime59653 java-time-ZoneOffset59654 java-time-ZoneId59655)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59656 ^long long59657] (.plusSeconds this59656 long59657)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ZonedDateTime this59658 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59659] (.get this59658 java-time-temporal-TemporalField59659)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZonedDateTime this59660 ^java.lang.Object java-lang-Object59661] (.equals this59660 java-lang-Object59661)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.ZonedDateTime this59662 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter59663] (.format this59662 java-time-format-DateTimeFormatter59663)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59664 ^long long59665] (.plusYears this59664 long59665)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this59666 ^long long59667] (.minusDays this59666 long59667)))
