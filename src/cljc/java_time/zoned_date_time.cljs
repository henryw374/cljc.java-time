(ns cljc.java-time.zoned-date-time (:require [java.time :refer [ZonedDateTime]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49029 ^long long49030] (.minusMinutes this49029 long49030)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49031 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49032] (.truncatedTo this49031 java-time-temporal-TemporalUnit49032)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49033 ^long long49034] (.minusWeeks this49033 long49034)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this49035] (.toInstant this49035)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49036 ^long long49037] (.plusWeeks this49036 long49037)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this49038 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49039] (.range this49038 java-time-temporal-TemporalField49039)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this49040] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this49040)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this49041] (.hour this49041)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49042 ^long long49043] (.minusHours this49042 long49043)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.lang.Integer int49044 ^java.lang.Integer int49045 ^java.lang.Integer int49046 ^java.lang.Integer int49047 ^java.lang.Integer int49048 ^java.lang.Integer int49049 ^java.lang.Integer int49050 ^java.time.ZoneId java-time-ZoneId49051] (. java.time.ZonedDateTime of int49044 int49045 int49046 int49047 int49048 int49049 int49050 java-time-ZoneId49051)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime49052 ^java.time.ZoneId java-time-ZoneId49053] (. java.time.ZonedDateTime of java-time-LocalDateTime49052 java-time-ZoneId49053)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate49054 ^java.time.LocalTime java-time-LocalTime49055 ^java.time.ZoneId java-time-ZoneId49056] (. java.time.ZonedDateTime of java-time-LocalDate49054 java-time-LocalTime49055 java-time-ZoneId49056)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49057 ^java.lang.Integer int49058] (.withMonth this49057 int49058)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this49059 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime49060] (.isEqual this49059 java-time-chrono-ChronoZonedDateTime49060)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this49061] (.nano this49061)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime49062 ^java.time.ZoneId java-time-ZoneId49063 ^java.time.ZoneOffset java-time-ZoneOffset49064] (. java.time.ZonedDateTime ofLocal java-time-LocalDateTime49062 java-time-ZoneId49063 java-time-ZoneOffset49064)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this49065] (.year this49065)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49066 ^long long49067] (.minusSeconds this49066 long49067)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this49068] (.second this49068)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49069 ^long long49070] (.plusNanos this49069 long49070)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this49071] (.dayOfYear this49071)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this49072 G__49073 G__49074] (.plus ^java.time.ZonedDateTime this49072 G__49073 G__49074)) (^java.lang.Object [this49075 G__49076] (.plus ^java.time.ZonedDateTime this49075 G__49076)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49077 ^java.lang.Integer int49078] (.withHour this49077 int49078)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49079 ^java.lang.Integer int49080] (.withMinute this49079 int49080)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49081 ^long long49082] (.plusMinutes this49081 long49082)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this49083 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery49084] (.query this49083 java-time-temporal-TemporalQuery49084)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this49085] (.dayOfWeek this49085)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this49086] (.toString this49086)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49087 ^long long49088] (.plusMonths this49087 long49088)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this49089 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime49090] (.isBefore this49089 java-time-chrono-ChronoZonedDateTime49090)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49091 ^long long49092] (.minusMonths this49091 long49092)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this49093 G__49094 G__49095] (.minus ^java.time.ZonedDateTime this49093 G__49094 G__49095)) (^java.lang.Object [this49096 G__49097] (.minus ^java.time.ZonedDateTime this49096 G__49097)))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49098] (.withFixedOffsetZone this49098)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49099 ^long long49100] (.plusHours this49099 long49100)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this49101 G__49102] (.withZoneSameLocal ^java.time.ZonedDateTime this49101 G__49102)))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this49103 G__49104] (.withZoneSameInstant ^java.time.ZonedDateTime this49103 G__49104)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49105 ^long long49106] (.plusDays this49105 long49106)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this49107] (.toLocalTime this49107)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this49108 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49109] (.getLong this49108 java-time-temporal-TemporalField49109)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this49110] (.offset this49110)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49111 ^java.lang.Integer int49112] (.withYear this49111 int49112)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49113 ^java.lang.Integer int49114] (.withNano this49113 int49114)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this49115] (.toEpochSecond this49115)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this49116] (.toOffsetDateTime this49116)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this49117] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this49117)))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this49118 ^java.time.temporal.Temporal java-time-temporal-Temporal49119 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49120] (.until this49118 java-time-temporal-Temporal49119 java-time-temporal-TemporalUnit49120)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this49121] (.zone this49121)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49122 ^java.lang.Integer int49123] (.withDayOfMonth this49122 int49123)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this49124] (.dayOfMonth this49124)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor49125] (. java.time.ZonedDateTime from java-time-temporal-TemporalAccessor49125)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this49126 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime49127] (.isAfter this49126 java-time-chrono-ChronoZonedDateTime49127)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49128 ^long long49129] (.minusNanos this49128 long49129)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this49130 G__49131] (.isSupported ^java.time.ZonedDateTime this49130 G__49131)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49132 ^long long49133] (.minusYears this49132 long49133)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this49134] (.chronology this49134)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence49135] (. java.time.ZonedDateTime parse java-lang-CharSequence49135)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence49136 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49137] (. java.time.ZonedDateTime parse java-lang-CharSequence49136 java-time-format-DateTimeFormatter49137)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49138 ^java.lang.Integer int49139] (.withSecond this49138 int49139)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this49140] (.toLocalDate ^java.time.ZonedDateTime this49140)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this49141] (.minute this49141)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this49142] (.hashCode this49142)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this49143 G__49144] (.with ^java.time.ZonedDateTime this49143 G__49144)) (^java.lang.Object [this49145 G__49146 G__49147] (.with ^java.time.ZonedDateTime this49145 G__49146 G__49147)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.ZonedDateTime [G__49149] (. java.time.ZonedDateTime now G__49149)) (^java.time.ZonedDateTime [] (. java.time.ZonedDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this49150] (.toLocalDateTime ^java.time.ZonedDateTime this49150)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this49151] (.monthValue this49151)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49152 ^java.lang.Integer int49153] (.withDayOfYear this49152 int49153)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"] ["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [this49154 G__49155] (.compareTo ^java.time.ZonedDateTime this49154 G__49155)))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime49156 ^java.time.ZoneOffset java-time-ZoneOffset49157 ^java.time.ZoneId java-time-ZoneId49158] (. java.time.ZonedDateTime ofStrict java-time-LocalDateTime49156 java-time-ZoneOffset49157 java-time-ZoneId49158)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this49159] (.month this49159)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"] ["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime49160 ^java.time.ZoneOffset java-time-ZoneOffset49161 ^java.time.ZoneId java-time-ZoneId49162] (. java.time.ZonedDateTime ofInstant java-time-LocalDateTime49160 java-time-ZoneOffset49161 java-time-ZoneId49162)) (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant49163 ^java.time.ZoneId java-time-ZoneId49164] (. java.time.ZonedDateTime ofInstant java-time-Instant49163 java-time-ZoneId49164)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49165 ^long long49166] (.plusSeconds this49165 long49166)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this49167 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49168] (.get this49167 java-time-temporal-TemporalField49168)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this49169 ^java.lang.Object java-lang-Object49170] (.equals this49169 java-lang-Object49170)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this49171 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49172] (.format this49171 java-time-format-DateTimeFormatter49172)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49173 ^long long49174] (.plusYears this49173 long49174)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49175 ^long long49176] (.minusDays this49175 long49176)))
