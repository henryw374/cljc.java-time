(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZonedDateTime]]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3816 ^long long3817] (.minusMinutes this3816 long3817)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3818 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3819] (.truncatedTo this3818 java-time-temporal-TemporalUnit3819)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3820 ^long long3821] (.minusWeeks this3820 long3821)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Instant [^js/JSJoda.ZonedDateTime this3822] (.toInstant this3822)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3823 ^long long3824] (.plusWeeks this3823 long3824)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ZonedDateTime this3825 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3826] (.range this3825 java-time-temporal-TemporalField3826)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3827] (.withEarlierOffsetAtOverlap this3827)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3828] (.hour this3828)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3829 ^long long3830] (.minusHours this3829 long3830)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime3831 ^js/JSJoda.ZoneId java-time-ZoneId3832] (js-invoke java.time.ZonedDateTime "of" java-time-LocalDateTime3831 java-time-ZoneId3832)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDate java-time-LocalDate3833 ^js/JSJoda.LocalTime java-time-LocalTime3834 ^js/JSJoda.ZoneId java-time-ZoneId3835] (js-invoke java.time.ZonedDateTime "of" java-time-LocalDate3833 java-time-LocalTime3834 java-time-ZoneId3835)) (^js/JSJoda.ZonedDateTime [^int int3836 ^int int3837 ^int int3838 ^int int3839 ^int int3840 ^int int3841 ^int int3842 ^js/JSJoda.ZoneId java-time-ZoneId3843] (js-invoke java.time.ZonedDateTime "of" int3836 int3837 int3838 int3839 int3840 int3841 int3842 java-time-ZoneId3843)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3844 ^int int3845] (.withMonth this3844 int3845)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this3846 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3847] (.isEqual this3846 java-time-chrono-ChronoZonedDateTime3847)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3848] (.nano this3848)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime3849 ^js/JSJoda.ZoneId java-time-ZoneId3850 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3851] (js-invoke java.time.ZonedDateTime "ofLocal" java-time-LocalDateTime3849 java-time-ZoneId3850 java-time-ZoneOffset3851)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3852] (.year this3852)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3853 ^long long3854] (.minusSeconds this3853 long3854)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3855] (.second this3855)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3856 ^long long3857] (.plusNanos this3856 long3857)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3858] (.dayOfYear this3858)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3859 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3860] (.plus this3859 java-time-temporal-TemporalAmount3860)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3861 ^long long3862 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3863] (.plus this3861 long3862 java-time-temporal-TemporalUnit3863)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3864 ^int int3865] (.withHour this3864 int3865)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3866 ^int int3867] (.withMinute this3866 int3867)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3868 ^long long3869] (.plusMinutes this3868 long3869)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.ZonedDateTime this3870 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery3871] (.query this3870 java-time-temporal-TemporalQuery3871)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.ZonedDateTime this3872] (.dayOfWeek this3872)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^js/JSJoda.ZonedDateTime this3873] (.toString this3873)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3874 ^long long3875] (.plusMonths this3874 long3875)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this3876 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3877] (.isBefore this3876 java-time-chrono-ChronoZonedDateTime3877)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3878 ^long long3879] (.minusMonths this3878 long3879)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3880 ^long long3881 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3882] (.minus this3880 long3881 java-time-temporal-TemporalUnit3882)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3883 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3884] (.minus this3883 java-time-temporal-TemporalAmount3884)))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3885] (.withFixedOffsetZone this3885)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3886 ^long long3887] (.plusHours this3886 long3887)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3888 ^js/JSJoda.ZoneId java-time-ZoneId3889] (.withZoneSameLocal this3888 java-time-ZoneId3889)))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3890 ^js/JSJoda.ZoneId java-time-ZoneId3891] (.withZoneSameInstant this3890 java-time-ZoneId3891)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3892 ^long long3893] (.plusDays this3892 long3893)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.ZonedDateTime this3894] (.toLocalTime this3894)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ZonedDateTime this3895 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3896] (.getLong this3895 java-time-temporal-TemporalField3896)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.ZonedDateTime this3897] (.offset this3897)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3898 ^int int3899] (.withYear this3898 int3899)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3900 ^int int3901] (.withNano this3900 int3901)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^js/JSJoda.ZonedDateTime this3902] (.toEpochSecond this3902)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.ZonedDateTime this3903] (.toOffsetDateTime this3903)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3904] (.withLaterOffsetAtOverlap this3904)))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.ZonedDateTime this3905 ^js/JSJoda.Temporal java-time-temporal-Temporal3906 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3907] (.until this3905 java-time-temporal-Temporal3906 java-time-temporal-TemporalUnit3907)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZonedDateTime this3908] (.zone this3908)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3909 ^int int3910] (.withDayOfMonth this3909 int3910)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3911] (.dayOfMonth this3911)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor3912] (js-invoke java.time.ZonedDateTime "from" java-time-temporal-TemporalAccessor3912)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this3913 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3914] (.isAfter this3913 java-time-chrono-ChronoZonedDateTime3914)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3915 ^long long3916] (.minusNanos this3915 long3916)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^boolean [this3917 G__3918] (.isSupported ^js/JSJoda.ZonedDateTime this3917 G__3918)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3919 ^long long3920] (.minusYears this3919 long3920)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Chronology [^js/JSJoda.ZonedDateTime this3921] (.chronology this3921)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence3922] (js-invoke java.time.ZonedDateTime "parse" java-lang-CharSequence3922)) (^js/JSJoda.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence3923 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter3924] (js-invoke java.time.ZonedDateTime "parse" java-lang-CharSequence3923 java-time-format-DateTimeFormatter3924)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3925 ^int int3926] (.withSecond this3925 int3926)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.LocalDate [^js/JSJoda.ZonedDateTime this3927] (.toLocalDate this3927)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3928] (.minute this3928)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3929] (.hashCode this3929)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3930 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3931 ^long long3932] (.with this3930 java-time-temporal-TemporalField3931 long3932)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3933 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster3934] (.with this3933 java-time-temporal-TemporalAdjuster3934)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^js/JSJoda.ZonedDateTime [G__3936] (js-invoke java.time.ZonedDateTime "now" G__3936)) (^js/JSJoda.ZonedDateTime [] (js-invoke java.time.ZonedDateTime "now")))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.ZonedDateTime this3937] (.toLocalDateTime this3937)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3938] (.monthValue this3938)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3939 ^int int3940] (.withDayOfYear this3939 int3940)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3941 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3942] (.compareTo this3941 java-time-chrono-ChronoZonedDateTime3942)))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime3943 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3944 ^js/JSJoda.ZoneId java-time-ZoneId3945] (js-invoke java.time.ZonedDateTime "ofStrict" java-time-LocalDateTime3943 java-time-ZoneOffset3944 java-time-ZoneId3945)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.ZonedDateTime this3946] (.month this3946)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.Instant java-time-Instant3947 ^js/JSJoda.ZoneId java-time-ZoneId3948] (js-invoke java.time.ZonedDateTime "ofInstant" java-time-Instant3947 java-time-ZoneId3948)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime3949 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3950 ^js/JSJoda.ZoneId java-time-ZoneId3951] (js-invoke java.time.ZonedDateTime "ofInstant" java-time-LocalDateTime3949 java-time-ZoneOffset3950 java-time-ZoneId3951)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3952 ^long long3953] (.plusSeconds this3952 long3953)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ZonedDateTime this3954 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3955] (.get this3954 java-time-temporal-TemporalField3955)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZonedDateTime this3956 ^java.lang.Object java-lang-Object3957] (.equals this3956 java-lang-Object3957)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.ZonedDateTime this3958 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter3959] (.format this3958 java-time-format-DateTimeFormatter3959)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3960 ^long long3961] (.plusYears this3960 long3961)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3962 ^long long3963] (.minusDays this3962 long3963)))
