(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZonedDateTime]]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11037 ^long long11038] (.minusMinutes this11037 long11038)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11039 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11040] (.truncatedTo this11039 java-time-temporal-TemporalUnit11040)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11041 ^long long11042] (.minusWeeks this11041 long11042)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this11043] (.toInstant this11043)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11044 ^long long11045] (.plusWeeks this11044 long11045)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this11046 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11047] (.range this11046 java-time-temporal-TemporalField11047)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this11048] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this11048)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11049] (.hour this11049)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11050 ^long long11051] (.minusHours this11050 long11051)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime11052 ^java.time.ZoneId java-time-ZoneId11053] (. java.time.ZonedDateTime of java-time-LocalDateTime11052 java-time-ZoneId11053)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate11054 ^java.time.LocalTime java-time-LocalTime11055 ^java.time.ZoneId java-time-ZoneId11056] (. java.time.ZonedDateTime of java-time-LocalDate11054 java-time-LocalTime11055 java-time-ZoneId11056)) (^java.time.ZonedDateTime [^java.lang.Integer int11057 ^java.lang.Integer int11058 ^java.lang.Integer int11059 ^java.lang.Integer int11060 ^java.lang.Integer int11061 ^java.lang.Integer int11062 ^java.lang.Integer int11063 ^java.time.ZoneId java-time-ZoneId11064] (. java.time.ZonedDateTime of int11057 int11058 int11059 int11060 int11061 int11062 int11063 java-time-ZoneId11064)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11065 ^java.lang.Integer int11066] (.withMonth this11065 int11066)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this11067 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime11068] (.isEqual this11067 java-time-chrono-ChronoZonedDateTime11068)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11069] (.nano this11069)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime11070 ^java.time.ZoneId java-time-ZoneId11071 ^java.time.ZoneOffset java-time-ZoneOffset11072] (. java.time.ZonedDateTime ofLocal java-time-LocalDateTime11070 java-time-ZoneId11071 java-time-ZoneOffset11072)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11073] (.year this11073)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11074 ^long long11075] (.minusSeconds this11074 long11075)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11076] (.second this11076)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11077 ^long long11078] (.plusNanos this11077 long11078)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11079] (.dayOfYear this11079)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11080 G__11081 G__11082] (.plus ^java.time.ZonedDateTime this11080 G__11081 G__11082)) (^java.lang.Object [this11083 G__11084] (.plus ^java.time.ZonedDateTime this11083 G__11084)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11085 ^java.lang.Integer int11086] (.withHour this11085 int11086)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11087 ^java.lang.Integer int11088] (.withMinute this11087 int11088)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11089 ^long long11090] (.plusMinutes this11089 long11090)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this11091 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery11092] (.query this11091 java-time-temporal-TemporalQuery11092)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this11093] (.dayOfWeek this11093)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this11094] (.toString this11094)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11095 ^long long11096] (.plusMonths this11095 long11096)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this11097 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime11098] (.isBefore this11097 java-time-chrono-ChronoZonedDateTime11098)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11099 ^long long11100] (.minusMonths this11099 long11100)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11101 G__11102] (.minus ^java.time.ZonedDateTime this11101 G__11102)) (^java.lang.Object [this11103 G__11104 G__11105] (.minus ^java.time.ZonedDateTime this11103 G__11104 G__11105)))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11106] (.withFixedOffsetZone this11106)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11107 ^long long11108] (.plusHours this11107 long11108)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this11109 G__11110] (.withZoneSameLocal ^java.time.ZonedDateTime this11109 G__11110)))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this11111 G__11112] (.withZoneSameInstant ^java.time.ZonedDateTime this11111 G__11112)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11113 ^long long11114] (.plusDays this11113 long11114)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this11115] (.toLocalTime this11115)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this11116 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11117] (.getLong this11116 java-time-temporal-TemporalField11117)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this11118] (.offset this11118)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11119 ^java.lang.Integer int11120] (.withYear this11119 int11120)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11121 ^java.lang.Integer int11122] (.withNano this11121 int11122)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this11123] (.toEpochSecond this11123)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this11124] (.toOffsetDateTime this11124)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this11125] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this11125)))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this11126 ^java.time.temporal.Temporal java-time-temporal-Temporal11127 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11128] (.until this11126 java-time-temporal-Temporal11127 java-time-temporal-TemporalUnit11128)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this11129] (.zone this11129)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11130 ^java.lang.Integer int11131] (.withDayOfMonth this11130 int11131)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11132] (.dayOfMonth this11132)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor11133] (. java.time.ZonedDateTime from java-time-temporal-TemporalAccessor11133)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this11134 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime11135] (.isAfter this11134 java-time-chrono-ChronoZonedDateTime11135)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11136 ^long long11137] (.minusNanos this11136 long11137)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this11138 G__11139] (.isSupported ^java.time.ZonedDateTime this11138 G__11139)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11140 ^long long11141] (.minusYears this11140 long11141)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this11142] (.chronology this11142)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence11143] (. java.time.ZonedDateTime parse java-lang-CharSequence11143)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence11144 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11145] (. java.time.ZonedDateTime parse java-lang-CharSequence11144 java-time-format-DateTimeFormatter11145)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11146 ^java.lang.Integer int11147] (.withSecond this11146 int11147)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this11148] (.toLocalDate ^java.time.ZonedDateTime this11148)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11149] (.minute this11149)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11150] (.hashCode this11150)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this11151 G__11152 G__11153] (.with ^java.time.ZonedDateTime this11151 G__11152 G__11153)) (^java.lang.Object [this11154 G__11155] (.with ^java.time.ZonedDateTime this11154 G__11155)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] [] ["java.time.ZoneId"]))} (^java.time.ZonedDateTime [G__11157] (. java.time.ZonedDateTime now G__11157)) (^java.time.ZonedDateTime [] (. java.time.ZonedDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this11158] (.toLocalDateTime ^java.time.ZonedDateTime this11158)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11159] (.monthValue this11159)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11160 ^java.lang.Integer int11161] (.withDayOfYear this11160 int11161)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"] ["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [this11162 G__11163] (.compareTo ^java.time.ZonedDateTime this11162 G__11163)))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime11164 ^java.time.ZoneOffset java-time-ZoneOffset11165 ^java.time.ZoneId java-time-ZoneId11166] (. java.time.ZonedDateTime ofStrict java-time-LocalDateTime11164 java-time-ZoneOffset11165 java-time-ZoneId11166)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this11167] (.month this11167)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant11168 ^java.time.ZoneId java-time-ZoneId11169] (. java.time.ZonedDateTime ofInstant java-time-Instant11168 java-time-ZoneId11169)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime11170 ^java.time.ZoneOffset java-time-ZoneOffset11171 ^java.time.ZoneId java-time-ZoneId11172] (. java.time.ZonedDateTime ofInstant java-time-LocalDateTime11170 java-time-ZoneOffset11171 java-time-ZoneId11172)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11173 ^long long11174] (.plusSeconds this11173 long11174)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11175 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11176] (.get this11175 java-time-temporal-TemporalField11176)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this11177 ^java.lang.Object java-lang-Object11178] (.equals this11177 java-lang-Object11178)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this11179 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11180] (.format this11179 java-time-format-DateTimeFormatter11180)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11181 ^long long11182] (.plusYears this11181 long11182)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11183 ^long long11184] (.minusDays this11183 long11184)))
