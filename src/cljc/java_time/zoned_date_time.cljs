(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [ZonedDateTime]]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13333 ^long long13334] (.minusMinutes this13333 long13334)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13335 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13336] (.truncatedTo this13335 java-time-temporal-TemporalUnit13336)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13337 ^long long13338] (.minusWeeks this13337 long13338)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Instant [^js/JSJoda.ZonedDateTime this13339] (.toInstant this13339)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13340 ^long long13341] (.plusWeeks this13340 long13341)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ZonedDateTime this13342 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13343] (.range this13342 java-time-temporal-TemporalField13343)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13344] (.withEarlierOffsetAtOverlap this13344)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this13345] (.hour this13345)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13346 ^long long13347] (.minusHours this13346 long13347)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^int int13348 ^int int13349 ^int int13350 ^int int13351 ^int int13352 ^int int13353 ^int int13354 ^js/JSJoda.ZoneId java-time-ZoneId13355] (js-invoke java.time.ZonedDateTime "of" int13348 int13349 int13350 int13351 int13352 int13353 int13354 java-time-ZoneId13355)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDate java-time-LocalDate13356 ^js/JSJoda.LocalTime java-time-LocalTime13357 ^js/JSJoda.ZoneId java-time-ZoneId13358] (js-invoke java.time.ZonedDateTime "of" java-time-LocalDate13356 java-time-LocalTime13357 java-time-ZoneId13358)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime13359 ^js/JSJoda.ZoneId java-time-ZoneId13360] (js-invoke java.time.ZonedDateTime "of" java-time-LocalDateTime13359 java-time-ZoneId13360)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13361 ^int int13362] (.withMonth this13361 int13362)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this13363 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime13364] (.isEqual this13363 java-time-chrono-ChronoZonedDateTime13364)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this13365] (.nano this13365)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime13366 ^js/JSJoda.ZoneId java-time-ZoneId13367 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13368] (js-invoke java.time.ZonedDateTime "ofLocal" java-time-LocalDateTime13366 java-time-ZoneId13367 java-time-ZoneOffset13368)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this13369] (.year this13369)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13370 ^long long13371] (.minusSeconds this13370 long13371)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this13372] (.second this13372)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13373 ^long long13374] (.plusNanos this13373 long13374)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this13375] (.dayOfYear this13375)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13376 ^long long13377 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13378] (.plus this13376 long13377 java-time-temporal-TemporalUnit13378)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13379 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount13380] (.plus this13379 java-time-temporal-TemporalAmount13380)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13381 ^int int13382] (.withHour this13381 int13382)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13383 ^int int13384] (.withMinute this13383 int13384)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13385 ^long long13386] (.plusMinutes this13385 long13386)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.ZonedDateTime this13387 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery13388] (.query this13387 java-time-temporal-TemporalQuery13388)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.ZonedDateTime this13389] (.dayOfWeek this13389)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^js/JSJoda.ZonedDateTime this13390] (.toString this13390)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13391 ^long long13392] (.plusMonths this13391 long13392)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this13393 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime13394] (.isBefore this13393 java-time-chrono-ChronoZonedDateTime13394)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13395 ^long long13396] (.minusMonths this13395 long13396)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13397 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount13398] (.minus this13397 java-time-temporal-TemporalAmount13398)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13399 ^long long13400 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13401] (.minus this13399 long13400 java-time-temporal-TemporalUnit13401)))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13402] (.withFixedOffsetZone this13402)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13403 ^long long13404] (.plusHours this13403 long13404)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13405 ^js/JSJoda.ZoneId java-time-ZoneId13406] (.withZoneSameLocal this13405 java-time-ZoneId13406)))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13407 ^js/JSJoda.ZoneId java-time-ZoneId13408] (.withZoneSameInstant this13407 java-time-ZoneId13408)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13409 ^long long13410] (.plusDays this13409 long13410)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.ZonedDateTime this13411] (.toLocalTime this13411)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ZonedDateTime this13412 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13413] (.getLong this13412 java-time-temporal-TemporalField13413)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.ZonedDateTime this13414] (.offset this13414)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13415 ^int int13416] (.withYear this13415 int13416)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13417 ^int int13418] (.withNano this13417 int13418)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^js/JSJoda.ZonedDateTime this13419] (.toEpochSecond this13419)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.ZonedDateTime this13420] (.toOffsetDateTime this13420)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13421] (.withLaterOffsetAtOverlap this13421)))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.ZonedDateTime this13422 ^js/JSJoda.Temporal java-time-temporal-Temporal13423 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13424] (.until this13422 java-time-temporal-Temporal13423 java-time-temporal-TemporalUnit13424)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZonedDateTime this13425] (.zone this13425)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13426 ^int int13427] (.withDayOfMonth this13426 int13427)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this13428] (.dayOfMonth this13428)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor13429] (js-invoke java.time.ZonedDateTime "from" java-time-temporal-TemporalAccessor13429)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this13430 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime13431] (.isAfter this13430 java-time-chrono-ChronoZonedDateTime13431)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13432 ^long long13433] (.minusNanos this13432 long13433)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^boolean [this13434 G__13435] (.isSupported ^js/JSJoda.ZonedDateTime this13434 G__13435)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13436 ^long long13437] (.minusYears this13436 long13437)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Chronology [^js/JSJoda.ZonedDateTime this13438] (.chronology this13438)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence13439] (js-invoke java.time.ZonedDateTime "parse" java-lang-CharSequence13439)) (^js/JSJoda.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence13440 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter13441] (js-invoke java.time.ZonedDateTime "parse" java-lang-CharSequence13440 java-time-format-DateTimeFormatter13441)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13442 ^int int13443] (.withSecond this13442 int13443)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.LocalDate [^js/JSJoda.ZonedDateTime this13444] (.toLocalDate this13444)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this13445] (.minute this13445)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this13446] (.hashCode this13446)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13447 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster13448] (.with this13447 java-time-temporal-TemporalAdjuster13448)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13449 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13450 ^long long13451] (.with this13449 java-time-temporal-TemporalField13450 long13451)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [] (js-invoke java.time.ZonedDateTime "now")) (^js/JSJoda.ZonedDateTime [G__13453] (js-invoke java.time.ZonedDateTime "now" G__13453)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.ZonedDateTime this13454] (.toLocalDateTime this13454)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this13455] (.monthValue this13455)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13456 ^int int13457] (.withDayOfYear this13456 int13457)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this13458 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime13459] (.compareTo this13458 java-time-chrono-ChronoZonedDateTime13459)))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime13460 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13461 ^js/JSJoda.ZoneId java-time-ZoneId13462] (js-invoke java.time.ZonedDateTime "ofStrict" java-time-LocalDateTime13460 java-time-ZoneOffset13461 java-time-ZoneId13462)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.ZonedDateTime this13463] (.month this13463)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.Instant java-time-Instant13464 ^js/JSJoda.ZoneId java-time-ZoneId13465] (js-invoke java.time.ZonedDateTime "ofInstant" java-time-Instant13464 java-time-ZoneId13465)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime13466 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13467 ^js/JSJoda.ZoneId java-time-ZoneId13468] (js-invoke java.time.ZonedDateTime "ofInstant" java-time-LocalDateTime13466 java-time-ZoneOffset13467 java-time-ZoneId13468)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13469 ^long long13470] (.plusSeconds this13469 long13470)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ZonedDateTime this13471 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13472] (.get this13471 java-time-temporal-TemporalField13472)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZonedDateTime this13473 ^java.lang.Object java-lang-Object13474] (.equals this13473 java-lang-Object13474)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.ZonedDateTime this13475 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter13476] (.format this13475 java-time-format-DateTimeFormatter13476)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13477 ^long long13478] (.plusYears this13477 long13478)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this13479 ^long long13480] (.minusDays this13479 long13480)))
