(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZonedDateTime]]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6804 ^long long6805] (.minusMinutes this6804 long6805)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6806 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit6807] (.truncatedTo this6806 java-time-temporal-TemporalUnit6807)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6808 ^long long6809] (.minusWeeks this6808 long6809)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Instant [^js/JSJoda.ZonedDateTime this6810] (.toInstant this6810)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6811 ^long long6812] (.plusWeeks this6811 long6812)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ZonedDateTime this6813 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6814] (.range this6813 java-time-temporal-TemporalField6814)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6815] (.withEarlierOffsetAtOverlap ^js/JSJoda.ZonedDateTime this6815)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6816] (.hour this6816)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6817 ^long long6818] (.minusHours this6817 long6818)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^int int6819 ^int int6820 ^int int6821 ^int int6822 ^int int6823 ^int int6824 ^int int6825 ^js/JSJoda.ZoneId java-time-ZoneId6826] (js-invoke java.time.ZonedDateTime "of" int6819 int6820 int6821 int6822 int6823 int6824 int6825 java-time-ZoneId6826)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime6827 ^js/JSJoda.ZoneId java-time-ZoneId6828] (js-invoke java.time.ZonedDateTime "of" java-time-LocalDateTime6827 java-time-ZoneId6828)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDate java-time-LocalDate6829 ^js/JSJoda.LocalTime java-time-LocalTime6830 ^js/JSJoda.ZoneId java-time-ZoneId6831] (js-invoke java.time.ZonedDateTime "of" java-time-LocalDate6829 java-time-LocalTime6830 java-time-ZoneId6831)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6832 ^int int6833] (.withMonth this6832 int6833)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this6834 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6835] (.isEqual this6834 java-time-chrono-ChronoZonedDateTime6835)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6836] (.nano this6836)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime6837 ^js/JSJoda.ZoneId java-time-ZoneId6838 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6839] (js-invoke java.time.ZonedDateTime "ofLocal" java-time-LocalDateTime6837 java-time-ZoneId6838 java-time-ZoneOffset6839)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6840] (.year this6840)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6841 ^long long6842] (.minusSeconds this6841 long6842)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6843] (.second this6843)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6844 ^long long6845] (.plusNanos this6844 long6845)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6846] (.dayOfYear this6846)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6847 G__6848] (.plus ^js/JSJoda.ZonedDateTime this6847 G__6848)) (^java.lang.Object [this6849 G__6850 G__6851] (.plus ^js/JSJoda.ZonedDateTime this6849 G__6850 G__6851)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6852 ^int int6853] (.withHour this6852 int6853)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6854 ^int int6855] (.withMinute this6854 int6855)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6856 ^long long6857] (.plusMinutes this6856 long6857)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.ZonedDateTime this6858 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery6859] (.query this6858 java-time-temporal-TemporalQuery6859)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.ZonedDateTime this6860] (.dayOfWeek this6860)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^js/JSJoda.ZonedDateTime this6861] (.toString this6861)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6862 ^long long6863] (.plusMonths this6862 long6863)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this6864 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6865] (.isBefore this6864 java-time-chrono-ChronoZonedDateTime6865)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6866 ^long long6867] (.minusMonths this6866 long6867)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6868 G__6869] (.minus ^js/JSJoda.ZonedDateTime this6868 G__6869)) (^java.lang.Object [this6870 G__6871 G__6872] (.minus ^js/JSJoda.ZonedDateTime this6870 G__6871 G__6872)))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6873] (.withFixedOffsetZone this6873)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6874 ^long long6875] (.plusHours this6874 long6875)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this6876 G__6877] (.withZoneSameLocal ^js/JSJoda.ZonedDateTime this6876 G__6877)))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this6878 G__6879] (.withZoneSameInstant ^js/JSJoda.ZonedDateTime this6878 G__6879)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6880 ^long long6881] (.plusDays this6880 long6881)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.ZonedDateTime this6882] (.toLocalTime this6882)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ZonedDateTime this6883 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6884] (.getLong this6883 java-time-temporal-TemporalField6884)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.ZonedDateTime this6885] (.offset this6885)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6886 ^int int6887] (.withYear this6886 int6887)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6888 ^int int6889] (.withNano this6888 int6889)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^js/JSJoda.ZonedDateTime this6890] (.toEpochSecond this6890)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.ZonedDateTime this6891] (.toOffsetDateTime this6891)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6892] (.withLaterOffsetAtOverlap ^js/JSJoda.ZonedDateTime this6892)))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.ZonedDateTime this6893 ^js/JSJoda.Temporal java-time-temporal-Temporal6894 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit6895] (.until this6893 java-time-temporal-Temporal6894 java-time-temporal-TemporalUnit6895)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZonedDateTime this6896] (.zone this6896)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6897 ^int int6898] (.withDayOfMonth this6897 int6898)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6899] (.dayOfMonth this6899)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor6900] (js-invoke java.time.ZonedDateTime "from" java-time-temporal-TemporalAccessor6900)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this6901 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6902] (.isAfter this6901 java-time-chrono-ChronoZonedDateTime6902)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6903 ^long long6904] (.minusNanos this6903 long6904)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^boolean [this6905 G__6906] (.isSupported ^js/JSJoda.ZonedDateTime this6905 G__6906)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6907 ^long long6908] (.minusYears this6907 long6908)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Chronology [^js/JSJoda.ZonedDateTime this6909] (.chronology this6909)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence6910 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6911] (js-invoke java.time.ZonedDateTime "parse" java-lang-CharSequence6910 java-time-format-DateTimeFormatter6911)) (^js/JSJoda.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence6912] (js-invoke java.time.ZonedDateTime "parse" java-lang-CharSequence6912)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6913 ^int int6914] (.withSecond this6913 int6914)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6915] (.toLocalDate ^js/JSJoda.ZonedDateTime this6915)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6916] (.minute this6916)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6917] (.hashCode this6917)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this6918 G__6919] (.with ^js/JSJoda.ZonedDateTime this6918 G__6919)) (^java.lang.Object [this6920 G__6921 G__6922] (.with ^js/JSJoda.ZonedDateTime this6920 G__6921 G__6922)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [] (js-invoke java.time.ZonedDateTime "now")) (^js/JSJoda.ZonedDateTime [G__6924] (js-invoke java.time.ZonedDateTime "now" G__6924)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6925] (.toLocalDateTime ^js/JSJoda.ZonedDateTime this6925)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6926] (.monthValue this6926)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6927 ^int int6928] (.withDayOfYear this6927 int6928)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"] ["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^int [this6929 G__6930] (.compareTo ^js/JSJoda.ZonedDateTime this6929 G__6930)))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime6931 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6932 ^js/JSJoda.ZoneId java-time-ZoneId6933] (js-invoke java.time.ZonedDateTime "ofStrict" java-time-LocalDateTime6931 java-time-ZoneOffset6932 java-time-ZoneId6933)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.ZonedDateTime this6934] (.month this6934)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.Instant java-time-Instant6935 ^js/JSJoda.ZoneId java-time-ZoneId6936] (js-invoke java.time.ZonedDateTime "ofInstant" java-time-Instant6935 java-time-ZoneId6936)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime6937 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6938 ^js/JSJoda.ZoneId java-time-ZoneId6939] (js-invoke java.time.ZonedDateTime "ofInstant" java-time-LocalDateTime6937 java-time-ZoneOffset6938 java-time-ZoneId6939)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6940 ^long long6941] (.plusSeconds this6940 long6941)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ZonedDateTime this6942 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6943] (.get this6942 java-time-temporal-TemporalField6943)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZonedDateTime this6944 ^java.lang.Object java-lang-Object6945] (.equals this6944 java-lang-Object6945)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.ZonedDateTime this6946 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6947] (.format this6946 java-time-format-DateTimeFormatter6947)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6948 ^long long6949] (.plusYears this6948 long6949)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6950 ^long long6951] (.minusDays this6950 long6951)))
