(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZonedDateTime]]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3815 ^long long3816] (.minusMinutes this3815 long3816)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3817 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3818] (.truncatedTo this3817 java-time-temporal-TemporalUnit3818)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3819 ^long long3820] (.minusWeeks this3819 long3820)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Instant [^js/JSJoda.ZonedDateTime this3821] (.toInstant this3821)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3822 ^long long3823] (.plusWeeks this3822 long3823)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ZonedDateTime this3824 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3825] (.range this3824 java-time-temporal-TemporalField3825)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3826] (.withEarlierOffsetAtOverlap this3826)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3827] (.hour this3827)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3828 ^long long3829] (.minusHours this3828 long3829)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime3830 ^js/JSJoda.ZoneId java-time-ZoneId3831] (js-invoke java.time.ZonedDateTime "of" java-time-LocalDateTime3830 java-time-ZoneId3831)) (^js/JSJoda.ZonedDateTime [^int int3832 ^int int3833 ^int int3834 ^int int3835 ^int int3836 ^int int3837 ^int int3838 ^js/JSJoda.ZoneId java-time-ZoneId3839] (js-invoke java.time.ZonedDateTime "of" int3832 int3833 int3834 int3835 int3836 int3837 int3838 java-time-ZoneId3839)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDate java-time-LocalDate3840 ^js/JSJoda.LocalTime java-time-LocalTime3841 ^js/JSJoda.ZoneId java-time-ZoneId3842] (js-invoke java.time.ZonedDateTime "of" java-time-LocalDate3840 java-time-LocalTime3841 java-time-ZoneId3842)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3843 ^int int3844] (.withMonth this3843 int3844)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this3845 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3846] (.isEqual this3845 java-time-chrono-ChronoZonedDateTime3846)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3847] (.nano this3847)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime3848 ^js/JSJoda.ZoneId java-time-ZoneId3849 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3850] (js-invoke java.time.ZonedDateTime "ofLocal" java-time-LocalDateTime3848 java-time-ZoneId3849 java-time-ZoneOffset3850)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3851] (.year this3851)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3852 ^long long3853] (.minusSeconds this3852 long3853)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3854] (.second this3854)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3855 ^long long3856] (.plusNanos this3855 long3856)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3857] (.dayOfYear this3857)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3858 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3859] (.plus this3858 java-time-temporal-TemporalAmount3859)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3860 ^long long3861 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3862] (.plus this3860 long3861 java-time-temporal-TemporalUnit3862)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3863 ^int int3864] (.withHour this3863 int3864)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3865 ^int int3866] (.withMinute this3865 int3866)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3867 ^long long3868] (.plusMinutes this3867 long3868)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.ZonedDateTime this3869 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery3870] (.query this3869 java-time-temporal-TemporalQuery3870)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.ZonedDateTime this3871] (.dayOfWeek this3871)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^js/JSJoda.ZonedDateTime this3872] (.toString this3872)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3873 ^long long3874] (.plusMonths this3873 long3874)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this3875 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3876] (.isBefore this3875 java-time-chrono-ChronoZonedDateTime3876)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3877 ^long long3878] (.minusMonths this3877 long3878)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3879 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3880] (.minus this3879 java-time-temporal-TemporalAmount3880)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3881 ^long long3882 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3883] (.minus this3881 long3882 java-time-temporal-TemporalUnit3883)))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3884] (.withFixedOffsetZone this3884)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3885 ^long long3886] (.plusHours this3885 long3886)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3887 ^js/JSJoda.ZoneId java-time-ZoneId3888] (.withZoneSameLocal this3887 java-time-ZoneId3888)))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3889 ^js/JSJoda.ZoneId java-time-ZoneId3890] (.withZoneSameInstant this3889 java-time-ZoneId3890)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3891 ^long long3892] (.plusDays this3891 long3892)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.ZonedDateTime this3893] (.toLocalTime this3893)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ZonedDateTime this3894 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3895] (.getLong this3894 java-time-temporal-TemporalField3895)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.ZonedDateTime this3896] (.offset this3896)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3897 ^int int3898] (.withYear this3897 int3898)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3899 ^int int3900] (.withNano this3899 int3900)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^js/JSJoda.ZonedDateTime this3901] (.toEpochSecond this3901)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.ZonedDateTime this3902] (.toOffsetDateTime this3902)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3903] (.withLaterOffsetAtOverlap this3903)))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.ZonedDateTime this3904 ^js/JSJoda.Temporal java-time-temporal-Temporal3905 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3906] (.until this3904 java-time-temporal-Temporal3905 java-time-temporal-TemporalUnit3906)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZonedDateTime this3907] (.zone this3907)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3908 ^int int3909] (.withDayOfMonth this3908 int3909)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3910] (.dayOfMonth this3910)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor3911] (js-invoke java.time.ZonedDateTime "from" java-time-temporal-TemporalAccessor3911)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this3912 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3913] (.isAfter this3912 java-time-chrono-ChronoZonedDateTime3913)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3914 ^long long3915] (.minusNanos this3914 long3915)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^boolean [this3916 G__3917] (.isSupported ^js/JSJoda.ZonedDateTime this3916 G__3917)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3918 ^long long3919] (.minusYears this3918 long3919)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Chronology [^js/JSJoda.ZonedDateTime this3920] (.chronology this3920)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence3921 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter3922] (js-invoke java.time.ZonedDateTime "parse" java-lang-CharSequence3921 java-time-format-DateTimeFormatter3922)) (^js/JSJoda.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence3923] (js-invoke java.time.ZonedDateTime "parse" java-lang-CharSequence3923)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3924 ^int int3925] (.withSecond this3924 int3925)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.LocalDate [^js/JSJoda.ZonedDateTime this3926] (.toLocalDate this3926)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3927] (.minute this3927)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3928] (.hashCode this3928)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3929 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster3930] (.with this3929 java-time-temporal-TemporalAdjuster3930)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3931 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3932 ^long long3933] (.with this3931 java-time-temporal-TemporalField3932 long3933)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [] (js-invoke java.time.ZonedDateTime "now")) (^js/JSJoda.ZonedDateTime [G__3935] (js-invoke java.time.ZonedDateTime "now" G__3935)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.ZonedDateTime this3936] (.toLocalDateTime this3936)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3937] (.monthValue this3937)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3938 ^int int3939] (.withDayOfYear this3938 int3939)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this3940 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3941] (.compareTo this3940 java-time-chrono-ChronoZonedDateTime3941)))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime3942 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3943 ^js/JSJoda.ZoneId java-time-ZoneId3944] (js-invoke java.time.ZonedDateTime "ofStrict" java-time-LocalDateTime3942 java-time-ZoneOffset3943 java-time-ZoneId3944)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.ZonedDateTime this3945] (.month this3945)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"] ["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime3946 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3947 ^js/JSJoda.ZoneId java-time-ZoneId3948] (js-invoke java.time.ZonedDateTime "ofInstant" java-time-LocalDateTime3946 java-time-ZoneOffset3947 java-time-ZoneId3948)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.Instant java-time-Instant3949 ^js/JSJoda.ZoneId java-time-ZoneId3950] (js-invoke java.time.ZonedDateTime "ofInstant" java-time-Instant3949 java-time-ZoneId3950)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3951 ^long long3952] (.plusSeconds this3951 long3952)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ZonedDateTime this3953 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3954] (.get this3953 java-time-temporal-TemporalField3954)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZonedDateTime this3955 ^java.lang.Object java-lang-Object3956] (.equals this3955 java-lang-Object3956)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.ZonedDateTime this3957 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter3958] (.format this3957 java-time-format-DateTimeFormatter3958)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3959 ^long long3960] (.plusYears this3959 long3960)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this3961 ^long long3962] (.minusDays this3961 long3962)))
