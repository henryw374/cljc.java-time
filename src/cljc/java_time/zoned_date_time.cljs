(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [ZonedDateTime]]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6824 ^long long6825] (.minusMinutes this6824 long6825)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6826 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit6827] (.truncatedTo this6826 java-time-temporal-TemporalUnit6827)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6828 ^long long6829] (.minusWeeks this6828 long6829)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Instant [^js/JSJoda.ZonedDateTime this6830] (.toInstant this6830)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6831 ^long long6832] (.plusWeeks this6831 long6832)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.ZonedDateTime this6833 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6834] (.range this6833 java-time-temporal-TemporalField6834)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6835] (.withEarlierOffsetAtOverlap ^js/JSJoda.ZonedDateTime this6835)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6836] (.hour this6836)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6837 ^long long6838] (.minusHours this6837 long6838)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^int int6839 ^int int6840 ^int int6841 ^int int6842 ^int int6843 ^int int6844 ^int int6845 ^js/JSJoda.ZoneId java-time-ZoneId6846] (js-invoke java.time.ZonedDateTime "of" int6839 int6840 int6841 int6842 int6843 int6844 int6845 java-time-ZoneId6846)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime6847 ^js/JSJoda.ZoneId java-time-ZoneId6848] (js-invoke java.time.ZonedDateTime "of" java-time-LocalDateTime6847 java-time-ZoneId6848)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDate java-time-LocalDate6849 ^js/JSJoda.LocalTime java-time-LocalTime6850 ^js/JSJoda.ZoneId java-time-ZoneId6851] (js-invoke java.time.ZonedDateTime "of" java-time-LocalDate6849 java-time-LocalTime6850 java-time-ZoneId6851)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6852 ^int int6853] (.withMonth this6852 int6853)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this6854 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6855] (.isEqual this6854 java-time-chrono-ChronoZonedDateTime6855)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6856] (.nano this6856)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime6857 ^js/JSJoda.ZoneId java-time-ZoneId6858 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6859] (js-invoke java.time.ZonedDateTime "ofLocal" java-time-LocalDateTime6857 java-time-ZoneId6858 java-time-ZoneOffset6859)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6860] (.year this6860)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6861 ^long long6862] (.minusSeconds this6861 long6862)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6863] (.second this6863)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6864 ^long long6865] (.plusNanos this6864 long6865)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6866] (.dayOfYear this6866)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6867 G__6868] (.plus ^js/JSJoda.ZonedDateTime this6867 G__6868)) (^java.lang.Object [this6869 G__6870 G__6871] (.plus ^js/JSJoda.ZonedDateTime this6869 G__6870 G__6871)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6872 ^int int6873] (.withHour this6872 int6873)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6874 ^int int6875] (.withMinute this6874 int6875)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6876 ^long long6877] (.plusMinutes this6876 long6877)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.ZonedDateTime this6878 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery6879] (.query this6878 java-time-temporal-TemporalQuery6879)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.ZonedDateTime this6880] (.dayOfWeek this6880)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^js/JSJoda.ZonedDateTime this6881] (.toString this6881)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6882 ^long long6883] (.plusMonths this6882 long6883)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this6884 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6885] (.isBefore this6884 java-time-chrono-ChronoZonedDateTime6885)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6886 ^long long6887] (.minusMonths this6886 long6887)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6888 G__6889 G__6890] (.minus ^js/JSJoda.ZonedDateTime this6888 G__6889 G__6890)) (^java.lang.Object [this6891 G__6892] (.minus ^js/JSJoda.ZonedDateTime this6891 G__6892)))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6893] (.withFixedOffsetZone this6893)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6894 ^long long6895] (.plusHours this6894 long6895)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this6896 G__6897] (.withZoneSameLocal ^js/JSJoda.ZonedDateTime this6896 G__6897)))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this6898 G__6899] (.withZoneSameInstant ^js/JSJoda.ZonedDateTime this6898 G__6899)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6900 ^long long6901] (.plusDays this6900 long6901)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.ZonedDateTime this6902] (.toLocalTime this6902)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.ZonedDateTime this6903 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6904] (.getLong this6903 java-time-temporal-TemporalField6904)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.ZonedDateTime this6905] (.offset this6905)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6906 ^int int6907] (.withYear this6906 int6907)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6908 ^int int6909] (.withNano this6908 int6909)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^js/JSJoda.ZonedDateTime this6910] (.toEpochSecond this6910)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.ZonedDateTime this6911] (.toOffsetDateTime this6911)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6912] (.withLaterOffsetAtOverlap ^js/JSJoda.ZonedDateTime this6912)))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.ZonedDateTime this6913 ^js/JSJoda.Temporal java-time-temporal-Temporal6914 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit6915] (.until this6913 java-time-temporal-Temporal6914 java-time-temporal-TemporalUnit6915)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.ZoneId [^js/JSJoda.ZonedDateTime this6916] (.zone this6916)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6917 ^int int6918] (.withDayOfMonth this6917 int6918)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6919] (.dayOfMonth this6919)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor6920] (js-invoke java.time.ZonedDateTime "from" java-time-temporal-TemporalAccessor6920)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^boolean [^js/JSJoda.ZonedDateTime this6921 ^js/JSJoda.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6922] (.isAfter this6921 java-time-chrono-ChronoZonedDateTime6922)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6923 ^long long6924] (.minusNanos this6923 long6924)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^boolean [this6925 G__6926] (.isSupported ^js/JSJoda.ZonedDateTime this6925 G__6926)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6927 ^long long6928] (.minusYears this6927 long6928)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Chronology [^js/JSJoda.ZonedDateTime this6929] (.chronology this6929)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence6930] (js-invoke java.time.ZonedDateTime "parse" java-lang-CharSequence6930)) (^js/JSJoda.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence6931 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6932] (js-invoke java.time.ZonedDateTime "parse" java-lang-CharSequence6931 java-time-format-DateTimeFormatter6932)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6933 ^int int6934] (.withSecond this6933 int6934)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6935] (.toLocalDate ^js/JSJoda.ZonedDateTime this6935)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6936] (.minute this6936)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6937] (.hashCode this6937)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this6938 G__6939] (.with ^js/JSJoda.ZonedDateTime this6938 G__6939)) (^java.lang.Object [this6940 G__6941 G__6942] (.with ^js/JSJoda.ZonedDateTime this6940 G__6941 G__6942)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^js/JSJoda.ZonedDateTime [G__6944] (js-invoke java.time.ZonedDateTime "now" G__6944)) (^js/JSJoda.ZonedDateTime [] (js-invoke java.time.ZonedDateTime "now")))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6945] (.toLocalDateTime ^js/JSJoda.ZonedDateTime this6945)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^int [^js/JSJoda.ZonedDateTime this6946] (.monthValue this6946)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6947 ^int int6948] (.withDayOfYear this6947 int6948)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"] ["java.time.ZonedDateTime" "java.lang.Object"]))} (^int [this6949 G__6950] (.compareTo ^js/JSJoda.ZonedDateTime this6949 G__6950)))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime6951 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6952 ^js/JSJoda.ZoneId java-time-ZoneId6953] (js-invoke java.time.ZonedDateTime "ofStrict" java-time-LocalDateTime6951 java-time-ZoneOffset6952 java-time-ZoneId6953)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.ZonedDateTime this6954] (.month this6954)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"] ["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime6955 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6956 ^js/JSJoda.ZoneId java-time-ZoneId6957] (js-invoke java.time.ZonedDateTime "ofInstant" java-time-LocalDateTime6955 java-time-ZoneOffset6956 java-time-ZoneId6957)) (^js/JSJoda.ZonedDateTime [^js/JSJoda.Instant java-time-Instant6958 ^js/JSJoda.ZoneId java-time-ZoneId6959] (js-invoke java.time.ZonedDateTime "ofInstant" java-time-Instant6958 java-time-ZoneId6959)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6960 ^long long6961] (.plusSeconds this6960 long6961)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.ZonedDateTime this6962 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6963] (.get this6962 java-time-temporal-TemporalField6963)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.ZonedDateTime this6964 ^java.lang.Object java-lang-Object6965] (.equals this6964 java-lang-Object6965)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.ZonedDateTime this6966 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6967] (.format this6966 java-time-format-DateTimeFormatter6967)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6968 ^long long6969] (.plusYears this6968 long6969)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.ZonedDateTime this6970 ^long long6971] (.minusDays this6970 long6971)))
