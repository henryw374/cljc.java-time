(ns cljc.java-time.month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Month]]))
(def may (goog.object/get java.time.Month "MAY"))
(def december (goog.object/get java.time.Month "DECEMBER"))
(def june (goog.object/get java.time.Month "JUNE"))
(def september (goog.object/get java.time.Month "SEPTEMBER"))
(def february (goog.object/get java.time.Month "FEBRUARY"))
(def january (goog.object/get java.time.Month "JANUARY"))
(def november (goog.object/get java.time.Month "NOVEMBER"))
(def august (goog.object/get java.time.Month "AUGUST"))
(def july (goog.object/get java.time.Month "JULY"))
(def march (goog.object/get java.time.Month "MARCH"))
(def october (goog.object/get java.time.Month "OCTOBER"))
(def april (goog.object/get java.time.Month "APRIL"))
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Month this4906 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4907] (.range this4906 java-time-temporal-TemporalField4907)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.Month "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.Month [^java.lang.String java-lang-String4908] (js-invoke java.time.Month "valueOf" java-lang-String4908)) (^java.lang.Enum [^java.lang.Class java-lang-Class4909 ^java.lang.String java-lang-String4910] (js-invoke java.time.Month "valueOf" java-lang-Class4909 java-lang-String4910)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.Month [^int int4911] (js-invoke java.time.Month "of" int4911)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this4912] (.ordinal this4912)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^js/JSJoda.Month [^js/JSJoda.Month this4913] (.firstMonthOfQuarter this4913)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this4914] (.minLength this4914)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^js/JSJoda.Month [^js/JSJoda.Month this4915 ^long long4916] (.plus this4915 long4916)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Month this4917 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery4918] (.query this4917 java-time-temporal-TemporalQuery4918)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^js/JSJoda.Month this4919] (.toString this4919)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^int [^js/JSJoda.Month this4920 ^boolean boolean4921] (.firstDayOfYear this4920 boolean4921)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^js/JSJoda.Month [^js/JSJoda.Month this4922 ^long long4923] (.minus this4922 long4923)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.Month this4924 ^js/JSJoda.TextStyle java-time-format-TextStyle4925 ^java.util.Locale java-util-Locale4926] (.displayName this4924 java-time-format-TextStyle4925 java-util-Locale4926)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this4927] (.value this4927)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this4928] (.maxLength this4928)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^js/JSJoda.Month this4929] (.name this4929)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Month this4930 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4931] (.getLong this4930 java-time-temporal-TemporalField4931)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^int [^js/JSJoda.Month this4932 ^boolean boolean4933] (.length this4932 boolean4933)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^js/JSJoda.Month this4934] (.declaringClass this4934)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Month [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor4935] (js-invoke java.time.Month "from" java-time-temporal-TemporalAccessor4935)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.Month this4936 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4937] (.isSupported this4936 java-time-temporal-TemporalField4937)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this4938] (.hashCode this4938)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Month this4939 ^js/JSJoda.Temporal java-time-temporal-Temporal4940] (.adjustInto this4939 java-time-temporal-Temporal4940)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Enum"]))} (^int [^js/JSJoda.Month this4941 ^java.lang.Enum java-lang-Enum4942] (.compareTo this4941 java-lang-Enum4942)))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Month this4943 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4944] (.get this4943 java-time-temporal-TemporalField4944)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^boolean [^js/JSJoda.Month this4945 ^java.lang.Object java-lang-Object4946] (.equals this4945 java-lang-Object4946)))
