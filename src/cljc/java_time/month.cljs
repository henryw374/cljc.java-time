(ns cljc.java-time.month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [Month]]))
(def may (goog.object/get java.time.Month "MAY"))
(def december (goog.object/get java.time.Month "DECEMBER"))
(def june (goog.object/get java.time.Month "JUNE"))
(def september (goog.object/get java.time.Month "SEPTEMBER"))
(def february (goog.object/get java.time.Month "FEBRUARY"))
(def january (goog.object/get java.time.Month "JANUARY"))
(def november (goog.object/get java.time.Month "NOVEMBER"))
(def august (goog.object/get java.time.Month "AUGUST"))
(def july (goog.object/get java.time.Month "JULY"))
(def march (goog.object/get java.time.Month "MARCH"))
(def october (goog.object/get java.time.Month "OCTOBER"))
(def april (goog.object/get java.time.Month "APRIL"))
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Month this14424 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14425] (.range this14424 java-time-temporal-TemporalField14425)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.Month "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.Month [^java.lang.String java-lang-String14426] (js-invoke java.time.Month "valueOf" java-lang-String14426)) (^java.lang.Enum [^java.lang.Class java-lang-Class14427 ^java.lang.String java-lang-String14428] (js-invoke java.time.Month "valueOf" java-lang-Class14427 java-lang-String14428)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.Month [^int int14429] (js-invoke java.time.Month "of" int14429)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this14430] (.ordinal this14430)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^js/JSJoda.Month [^js/JSJoda.Month this14431] (.firstMonthOfQuarter this14431)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this14432] (.minLength this14432)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^js/JSJoda.Month [^js/JSJoda.Month this14433 ^long long14434] (.plus this14433 long14434)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Month this14435 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery14436] (.query this14435 java-time-temporal-TemporalQuery14436)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^js/JSJoda.Month this14437] (.toString this14437)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^int [^js/JSJoda.Month this14438 ^boolean boolean14439] (.firstDayOfYear this14438 boolean14439)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^js/JSJoda.Month [^js/JSJoda.Month this14440 ^long long14441] (.minus this14440 long14441)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.Month this14442 ^js/JSJoda.TextStyle java-time-format-TextStyle14443 ^java.util.Locale java-util-Locale14444] (.displayName this14442 java-time-format-TextStyle14443 java-util-Locale14444)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this14445] (.value this14445)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this14446] (.maxLength this14446)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^js/JSJoda.Month this14447] (.name this14447)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Month this14448 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14449] (.getLong this14448 java-time-temporal-TemporalField14449)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^int [^js/JSJoda.Month this14450 ^boolean boolean14451] (.length this14450 boolean14451)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^js/JSJoda.Month this14452] (.declaringClass this14452)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Month [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor14453] (js-invoke java.time.Month "from" java-time-temporal-TemporalAccessor14453)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.Month this14454 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14455] (.isSupported this14454 java-time-temporal-TemporalField14455)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this14456] (.hashCode this14456)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Month this14457 ^js/JSJoda.Temporal java-time-temporal-Temporal14458] (.adjustInto this14457 java-time-temporal-Temporal14458)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Enum"]))} (^int [^js/JSJoda.Month this14459 ^java.lang.Enum java-lang-Enum14460] (.compareTo this14459 java-lang-Enum14460)))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Month this14461 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14462] (.get this14461 java-time-temporal-TemporalField14462)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^boolean [^js/JSJoda.Month this14463 ^java.lang.Object java-lang-Object14464] (.equals this14463 java-lang-Object14464)))
