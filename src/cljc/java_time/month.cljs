(ns cljc.java-time.month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Month]]))
(def may (goog.object/get java.time.Month "MAY"))
(def december (goog.object/get java.time.Month "DECEMBER"))
(def june (goog.object/get java.time.Month "JUNE"))
(def september (goog.object/get java.time.Month "SEPTEMBER"))
(def february (goog.object/get java.time.Month "FEBRUARY"))
(def january (goog.object/get java.time.Month "JANUARY"))
(def november (goog.object/get java.time.Month "NOVEMBER"))
(def august (goog.object/get java.time.Month "AUGUST"))
(def july (goog.object/get java.time.Month "JULY"))
(def march (goog.object/get java.time.Month "MARCH"))
(def october (goog.object/get java.time.Month "OCTOBER"))
(def april (goog.object/get java.time.Month "APRIL"))
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Month this4907 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4908] (.range this4907 java-time-temporal-TemporalField4908)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.Month "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.Month [^java.lang.String java-lang-String4909] (js-invoke java.time.Month "valueOf" java-lang-String4909)) (^java.lang.Enum [^java.lang.Class java-lang-Class4910 ^java.lang.String java-lang-String4911] (js-invoke java.time.Month "valueOf" java-lang-Class4910 java-lang-String4911)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.Month [^int int4912] (js-invoke java.time.Month "of" int4912)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this4913] (.ordinal this4913)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^js/JSJoda.Month [^js/JSJoda.Month this4914] (.firstMonthOfQuarter this4914)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this4915] (.minLength this4915)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^js/JSJoda.Month [^js/JSJoda.Month this4916 ^long long4917] (.plus this4916 long4917)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Month this4918 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery4919] (.query this4918 java-time-temporal-TemporalQuery4919)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^js/JSJoda.Month this4920] (.toString this4920)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^int [^js/JSJoda.Month this4921 ^boolean boolean4922] (.firstDayOfYear this4921 boolean4922)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^js/JSJoda.Month [^js/JSJoda.Month this4923 ^long long4924] (.minus this4923 long4924)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.Month this4925 ^js/JSJoda.TextStyle java-time-format-TextStyle4926 ^java.util.Locale java-util-Locale4927] (.displayName this4925 java-time-format-TextStyle4926 java-util-Locale4927)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this4928] (.value this4928)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this4929] (.maxLength this4929)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^js/JSJoda.Month this4930] (.name this4930)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Month this4931 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4932] (.getLong this4931 java-time-temporal-TemporalField4932)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^int [^js/JSJoda.Month this4933 ^boolean boolean4934] (.length this4933 boolean4934)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^js/JSJoda.Month this4935] (.declaringClass this4935)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Month [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor4936] (js-invoke java.time.Month "from" java-time-temporal-TemporalAccessor4936)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.Month this4937 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4938] (.isSupported this4937 java-time-temporal-TemporalField4938)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this4939] (.hashCode this4939)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Month this4940 ^js/JSJoda.Temporal java-time-temporal-Temporal4941] (.adjustInto this4940 java-time-temporal-Temporal4941)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Enum"]))} (^int [^js/JSJoda.Month this4942 ^java.lang.Enum java-lang-Enum4943] (.compareTo this4942 java-lang-Enum4943)))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Month this4944 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4945] (.get this4944 java-time-temporal-TemporalField4945)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^boolean [^js/JSJoda.Month this4946 ^java.lang.Object java-lang-Object4947] (.equals this4946 java-lang-Object4947)))
