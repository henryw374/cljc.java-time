(ns cljc.java-time.month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Month]]))
(def may (goog.object/get java.time.Month "MAY"))
(def december (goog.object/get java.time.Month "DECEMBER"))
(def june (goog.object/get java.time.Month "JUNE"))
(def september (goog.object/get java.time.Month "SEPTEMBER"))
(def february (goog.object/get java.time.Month "FEBRUARY"))
(def january (goog.object/get java.time.Month "JANUARY"))
(def november (goog.object/get java.time.Month "NOVEMBER"))
(def august (goog.object/get java.time.Month "AUGUST"))
(def july (goog.object/get java.time.Month "JULY"))
(def march (goog.object/get java.time.Month "MARCH"))
(def october (goog.object/get java.time.Month "OCTOBER"))
(def april (goog.object/get java.time.Month "APRIL"))
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Month this7929 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7930] (.range this7929 java-time-temporal-TemporalField7930)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (js-invoke java.time.Month "values")))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^js/JSJoda.Month [^java.lang.String java-lang-String7931] (js-invoke java.time.Month "valueOf" java-lang-String7931)) (^java.lang.Enum [^java.lang.Class java-lang-Class7932 ^java.lang.String java-lang-String7933] (js-invoke java.time.Month "valueOf" java-lang-Class7932 java-lang-String7933)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.Month [^int int7934] (js-invoke java.time.Month "of" int7934)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this7935] (.ordinal this7935)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^js/JSJoda.Month [^js/JSJoda.Month this7936] (.firstMonthOfQuarter this7936)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this7937] (.minLength this7937)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^js/JSJoda.Month [^js/JSJoda.Month this7938 ^long long7939] (.plus this7938 long7939)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Month this7940 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery7941] (.query this7940 java-time-temporal-TemporalQuery7941)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^js/JSJoda.Month this7942] (.toString this7942)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^int [^js/JSJoda.Month this7943 ^boolean boolean7944] (.firstDayOfYear this7943 boolean7944)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^js/JSJoda.Month [^js/JSJoda.Month this7945 ^long long7946] (.minus this7945 long7946)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^js/JSJoda.Month this7947 ^js/JSJoda.TextStyle java-time-format-TextStyle7948 ^java.util.Locale java-util-Locale7949] (.displayName this7947 java-time-format-TextStyle7948 java-util-Locale7949)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this7950] (.value this7950)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this7951] (.maxLength this7951)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^js/JSJoda.Month this7952] (.name this7952)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Month this7953 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7954] (.getLong this7953 java-time-temporal-TemporalField7954)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^int [^js/JSJoda.Month this7955 ^boolean boolean7956] (.length this7955 boolean7956)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^js/JSJoda.Month this7957] (.declaringClass this7957)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Month [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor7958] (js-invoke java.time.Month "from" java-time-temporal-TemporalAccessor7958)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^boolean [^js/JSJoda.Month this7959 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7960] (.isSupported this7959 java-time-temporal-TemporalField7960)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^int [^js/JSJoda.Month this7961] (.hashCode this7961)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Month this7962 ^js/JSJoda.Temporal java-time-temporal-Temporal7963] (.adjustInto this7962 java-time-temporal-Temporal7963)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Object"] ["java.time.Month" "java.lang.Enum"]))} (^int [this7964 G__7965] (.compareTo ^js/JSJoda.Month this7964 G__7965)))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Month this7966 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7967] (.get this7966 java-time-temporal-TemporalField7967)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^boolean [^js/JSJoda.Month this7968 ^java.lang.Object java-lang-Object7969] (.equals this7968 java-lang-Object7969)))
