(ns cljc.java-time.month (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Month]]))
(def may (. java.time.Month -MAY))
(def december (. java.time.Month -DECEMBER))
(def june (. java.time.Month -JUNE))
(def september (. java.time.Month -SEPTEMBER))
(def february (. java.time.Month -FEBRUARY))
(def january (. java.time.Month -JANUARY))
(def november (. java.time.Month -NOVEMBER))
(def august (. java.time.Month -AUGUST))
(def july (. java.time.Month -JULY))
(def march (. java.time.Month -MARCH))
(def october (. java.time.Month -OCTOBER))
(def april (. java.time.Month -APRIL))
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Month this12128 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12129] (.range this12128 java-time-temporal-TemporalField12129)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.Month values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.Month [^java.lang.String java-lang-String12130] (. java.time.Month valueOf java-lang-String12130)) (^java.lang.Enum [^java.lang.Class java-lang-Class12131 ^java.lang.String java-lang-String12132] (. java.time.Month valueOf java-lang-Class12131 java-lang-String12132)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Month [^java.lang.Integer int12133] (. java.time.Month of int12133)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this12134] (.ordinal this12134)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^java.time.Month [^java.time.Month this12135] (.firstMonthOfQuarter this12135)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this12136] (.minLength this12136)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this12137 ^long long12138] (.plus this12137 long12138)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Month this12139 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12140] (.query this12139 java-time-temporal-TemporalQuery12140)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this12141] (.toString this12141)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this12142 ^java.lang.Boolean boolean12143] (.firstDayOfYear this12142 boolean12143)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this12144 ^long long12145] (.minus this12144 long12145)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.Month this12146 ^java.time.format.TextStyle java-time-format-TextStyle12147 ^java.util.Locale java-util-Locale12148] (.displayName this12146 java-time-format-TextStyle12147 java-util-Locale12148)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this12149] (.value this12149)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this12150] (.maxLength this12150)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this12151] (.name this12151)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^java.time.Month this12152 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12153] (.getLong this12152 java-time-temporal-TemporalField12153)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this12154 ^java.lang.Boolean boolean12155] (.length this12154 boolean12155)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^java.time.Month this12156] (.declaringClass this12156)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Month [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12157] (. java.time.Month from java-time-temporal-TemporalAccessor12157)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.Month this12158 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12159] (.isSupported this12158 java-time-temporal-TemporalField12159)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this12160] (.hashCode this12160)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Month this12161 ^java.time.temporal.Temporal java-time-temporal-Temporal12162] (.adjustInto this12161 java-time-temporal-Temporal12162)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Object"] ["java.time.Month" "java.lang.Enum"]))} (^java.lang.Integer [this12163 G__12164] (.compareTo ^java.time.Month this12163 G__12164)))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Month this12165 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12166] (.get this12165 java-time-temporal-TemporalField12166)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Month this12167 ^java.lang.Object java-lang-Object12168] (.equals this12167 java-lang-Object12168)))
