(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Instant]]))
(def min (goog.object/get java.time.Instant "MIN"))
(def epoch (goog.object/get java.time.Instant "EPOCH"))
(def max (goog.object/get java.time.Instant "MAX"))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this59930 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit59931] (.truncatedTo this59930 java-time-temporal-TemporalUnit59931)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Instant this59932 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59933] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.range this59932 java-time-temporal-TemporalField59933))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "long"] ["long"]))} (^js/JSJoda.Instant [^long long59934 ^long long59935] (js-invoke java.time.Instant "ofEpochSecond" long59934 long59935)) (^js/JSJoda.Instant [^long long59936] (js-invoke java.time.Instant "ofEpochSecond" long59936)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.Instant this59937 ^js/JSJoda.ZoneOffset java-time-ZoneOffset59938] (.atOffset this59937 java-time-ZoneOffset59938)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this59939 ^long long59940] (.minusMillis this59939 long59940)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^int [^js/JSJoda.Instant this59941] (.nano this59941)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this59942 ^long long59943] (.plusMillis this59942 long59943)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this59944 ^long long59945] (.minusSeconds this59944 long59945)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this59946 ^long long59947] (.plusNanos this59946 long59947)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this59948 G__59949] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.plus ^js/JSJoda.Instant this59948 G__59949))) (^java.lang.Object [this59950 G__59951 G__59952] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.plus ^js/JSJoda.Instant this59950 G__59951 G__59952))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Instant this59953 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery59954] (.query this59953 java-time-temporal-TemporalQuery59954)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^js/JSJoda.Instant this59955] (.toString this59955)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^boolean [^js/JSJoda.Instant this59956 ^js/JSJoda.Instant java-time-Instant59957] (.isBefore this59956 java-time-Instant59957)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this59958 G__59959] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.minus ^js/JSJoda.Instant this59958 G__59959))) (^java.lang.Object [this59960 G__59961 G__59962] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.minus ^js/JSJoda.Instant this59960 G__59961 G__59962))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.Instant this59963 ^js/JSJoda.ZoneId java-time-ZoneId59964] (.atZone this59963 java-time-ZoneId59964)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^js/JSJoda.Instant [^long long59965] (js-invoke java.time.Instant "ofEpochMilli" long59965)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Instant this59966 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59967] (.getLong this59966 java-time-temporal-TemporalField59967)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Instant this59968 ^js/JSJoda.Temporal java-time-temporal-Temporal59969 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit59970] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.until this59968 java-time-temporal-Temporal59969 java-time-temporal-TemporalUnit59970))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Instant [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor59971] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (js-invoke java.time.Instant "from" java-time-temporal-TemporalAccessor59971))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^boolean [^js/JSJoda.Instant this59972 ^js/JSJoda.Instant java-time-Instant59973] (.isAfter this59972 java-time-Instant59973)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this59974 ^long long59975] (.minusNanos this59974 long59975)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalField"]))} (^boolean [this59976 G__59977] (.isSupported ^js/JSJoda.Instant this59976 G__59977)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^js/JSJoda.Instant [^java.lang.CharSequence java-lang-CharSequence59978] (js-invoke java.time.Instant "parse" java-lang-CharSequence59978)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^int [^js/JSJoda.Instant this59979] (.hashCode this59979)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Instant this59980 ^js/JSJoda.Temporal java-time-temporal-Temporal59981] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.adjustInto this59980 java-time-temporal-Temporal59981))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this59982 G__59983] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.with ^js/JSJoda.Instant this59982 G__59983))) (^java.lang.Object [this59984 G__59985 G__59986] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.with ^js/JSJoda.Instant this59984 G__59985 G__59986))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"]))} (^js/JSJoda.Instant [] (js-invoke java.time.Instant "now")) (^js/JSJoda.Instant [^js/JSJoda.Clock java-time-Clock59987] (js-invoke java.time.Instant "now" java-time-Clock59987)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^js/JSJoda.Instant this59988] (.toEpochMilli this59988)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^js/JSJoda.Instant this59989] (.epochSecond this59989)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.lang.Object"] ["java.time.Instant" "java.time.Instant"]))} (^int [this59990 G__59991] (.compareTo ^js/JSJoda.Instant this59990 G__59991)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this59992 ^long long59993] (.plusSeconds this59992 long59993)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Instant this59994 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59995] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.get this59994 java-time-temporal-TemporalField59995))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^boolean [^js/JSJoda.Instant this59996 ^java.lang.Object java-lang-Object59997] (.equals this59996 java-lang-Object59997)))
