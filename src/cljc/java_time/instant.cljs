(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Instant]]))
(def min (goog.object/get java.time.Instant "MIN"))
(def epoch (goog.object/get java.time.Instant "EPOCH"))
(def max (goog.object/get java.time.Instant "MAX"))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4226 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4227] (.truncatedTo this4226 java-time-temporal-TemporalUnit4227)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Instant this4228 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4229] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.range this4228 java-time-temporal-TemporalField4229))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long"] ["long" "long"]))} (^js/JSJoda.Instant [^long long4230] (js-invoke java.time.Instant "ofEpochSecond" long4230)) (^js/JSJoda.Instant [^long long4231 ^long long4232] (js-invoke java.time.Instant "ofEpochSecond" long4231 long4232)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.Instant this4233 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4234] (.atOffset this4233 java-time-ZoneOffset4234)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4235 ^long long4236] (.minusMillis this4235 long4236)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^int [^js/JSJoda.Instant this4237] (.nano this4237)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4238 ^long long4239] (.plusMillis this4238 long4239)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4240 ^long long4241] (.minusSeconds this4240 long4241)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4242 ^long long4243] (.plusNanos this4242 long4243)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4244 ^long long4245 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4246] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.plus this4244 long4245 java-time-temporal-TemporalUnit4246))) (^js/JSJoda.Instant [^js/JSJoda.Instant this4247 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4248] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.plus this4247 java-time-temporal-TemporalAmount4248))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Instant this4249 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery4250] (.query this4249 java-time-temporal-TemporalQuery4250)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^js/JSJoda.Instant this4251] (.toString this4251)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^boolean [^js/JSJoda.Instant this4252 ^js/JSJoda.Instant java-time-Instant4253] (.isBefore this4252 java-time-Instant4253)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4254 ^long long4255 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4256] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.minus this4254 long4255 java-time-temporal-TemporalUnit4256))) (^js/JSJoda.Instant [^js/JSJoda.Instant this4257 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4258] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.minus this4257 java-time-temporal-TemporalAmount4258))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.Instant this4259 ^js/JSJoda.ZoneId java-time-ZoneId4260] (.atZone this4259 java-time-ZoneId4260)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^js/JSJoda.Instant [^long long4261] (js-invoke java.time.Instant "ofEpochMilli" long4261)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Instant this4262 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4263] (.getLong this4262 java-time-temporal-TemporalField4263)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Instant this4264 ^js/JSJoda.Temporal java-time-temporal-Temporal4265 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4266] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.until this4264 java-time-temporal-Temporal4265 java-time-temporal-TemporalUnit4266))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Instant [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor4267] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (js-invoke java.time.Instant "from" java-time-temporal-TemporalAccessor4267))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^boolean [^js/JSJoda.Instant this4268 ^js/JSJoda.Instant java-time-Instant4269] (.isAfter this4268 java-time-Instant4269)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4270 ^long long4271] (.minusNanos this4270 long4271)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"] ["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^boolean [this4272 G__4273] (.isSupported ^js/JSJoda.Instant this4272 G__4273)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^js/JSJoda.Instant [^java.lang.CharSequence java-lang-CharSequence4274] (js-invoke java.time.Instant "parse" java-lang-CharSequence4274)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^int [^js/JSJoda.Instant this4275] (.hashCode this4275)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Instant this4276 ^js/JSJoda.Temporal java-time-temporal-Temporal4277] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.adjustInto this4276 java-time-temporal-Temporal4277))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4278 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4279 ^long long4280] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.with this4278 java-time-temporal-TemporalField4279 long4280))) (^js/JSJoda.Instant [^js/JSJoda.Instant this4281 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster4282] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.with this4281 java-time-temporal-TemporalAdjuster4282))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] []))} (^js/JSJoda.Instant [^js/JSJoda.Clock java-time-Clock4283] (js-invoke java.time.Instant "now" java-time-Clock4283)) (^js/JSJoda.Instant [] (js-invoke java.time.Instant "now")))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^js/JSJoda.Instant this4284] (.toEpochMilli this4284)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^js/JSJoda.Instant this4285] (.epochSecond this4285)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^int [^js/JSJoda.Instant this4286 ^js/JSJoda.Instant java-time-Instant4287] (.compareTo this4286 java-time-Instant4287)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4288 ^long long4289] (.plusSeconds this4288 long4289)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Instant this4290 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4291] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.get this4290 java-time-temporal-TemporalField4291))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^boolean [^js/JSJoda.Instant this4292 ^java.lang.Object java-lang-Object4293] (.equals this4292 java-lang-Object4293)))
