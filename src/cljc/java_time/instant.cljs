(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Instant]]))
(def min (goog.object/get java.time.Instant "MIN"))
(def epoch (goog.object/get java.time.Instant "EPOCH"))
(def max (goog.object/get java.time.Instant "MAX"))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7214 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7215] (.truncatedTo this7214 java-time-temporal-TemporalUnit7215)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Instant this7216 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7217] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.range this7216 java-time-temporal-TemporalField7217))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long"] ["long" "long"]))} (^js/JSJoda.Instant [^long long7218] (js-invoke java.time.Instant "ofEpochSecond" long7218)) (^js/JSJoda.Instant [^long long7219 ^long long7220] (js-invoke java.time.Instant "ofEpochSecond" long7219 long7220)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.Instant this7221 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7222] (.atOffset this7221 java-time-ZoneOffset7222)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7223 ^long long7224] (.minusMillis this7223 long7224)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^int [^js/JSJoda.Instant this7225] (.nano this7225)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7226 ^long long7227] (.plusMillis this7226 long7227)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7228 ^long long7229] (.minusSeconds this7228 long7229)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7230 ^long long7231] (.plusNanos this7230 long7231)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7232 G__7233] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.plus ^js/JSJoda.Instant this7232 G__7233))) (^java.lang.Object [this7234 G__7235 G__7236] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.plus ^js/JSJoda.Instant this7234 G__7235 G__7236))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Instant this7237 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery7238] (.query this7237 java-time-temporal-TemporalQuery7238)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^js/JSJoda.Instant this7239] (.toString this7239)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^boolean [^js/JSJoda.Instant this7240 ^js/JSJoda.Instant java-time-Instant7241] (.isBefore this7240 java-time-Instant7241)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this7242 G__7243 G__7244] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.minus ^js/JSJoda.Instant this7242 G__7243 G__7244))) (^java.lang.Object [this7245 G__7246] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.minus ^js/JSJoda.Instant this7245 G__7246))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.Instant this7247 ^js/JSJoda.ZoneId java-time-ZoneId7248] (.atZone this7247 java-time-ZoneId7248)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^js/JSJoda.Instant [^long long7249] (js-invoke java.time.Instant "ofEpochMilli" long7249)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Instant this7250 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7251] (.getLong this7250 java-time-temporal-TemporalField7251)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Instant this7252 ^js/JSJoda.Temporal java-time-temporal-Temporal7253 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7254] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.until this7252 java-time-temporal-Temporal7253 java-time-temporal-TemporalUnit7254))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Instant [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor7255] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (js-invoke java.time.Instant "from" java-time-temporal-TemporalAccessor7255))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^boolean [^js/JSJoda.Instant this7256 ^js/JSJoda.Instant java-time-Instant7257] (.isAfter this7256 java-time-Instant7257)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7258 ^long long7259] (.minusNanos this7258 long7259)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"] ["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^boolean [this7260 G__7261] (.isSupported ^js/JSJoda.Instant this7260 G__7261)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^js/JSJoda.Instant [^java.lang.CharSequence java-lang-CharSequence7262] (js-invoke java.time.Instant "parse" java-lang-CharSequence7262)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^int [^js/JSJoda.Instant this7263] (.hashCode this7263)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Instant this7264 ^js/JSJoda.Temporal java-time-temporal-Temporal7265] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.adjustInto this7264 java-time-temporal-Temporal7265))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this7266 G__7267 G__7268] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.with ^js/JSJoda.Instant this7266 G__7267 G__7268))) (^java.lang.Object [this7269 G__7270] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.with ^js/JSJoda.Instant this7269 G__7270))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"]))} (^js/JSJoda.Instant [] (js-invoke java.time.Instant "now")) (^js/JSJoda.Instant [^js/JSJoda.Clock java-time-Clock7271] (js-invoke java.time.Instant "now" java-time-Clock7271)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^js/JSJoda.Instant this7272] (.toEpochMilli this7272)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^js/JSJoda.Instant this7273] (.epochSecond this7273)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.lang.Object"] ["java.time.Instant" "java.time.Instant"]))} (^int [this7274 G__7275] (.compareTo ^js/JSJoda.Instant this7274 G__7275)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7276 ^long long7277] (.plusSeconds this7276 long7277)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Instant this7278 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7279] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.get this7278 java-time-temporal-TemporalField7279))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^boolean [^js/JSJoda.Instant this7280 ^java.lang.Object java-lang-Object7281] (.equals this7280 java-lang-Object7281)))
