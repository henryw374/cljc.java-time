(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Instant]]))
(def min (. java.time.Instant -MIN))
(def epoch (. java.time.Instant -EPOCH))
(def max (. java.time.Instant -MAX))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this11447 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11448] (.truncatedTo this11447 java-time-temporal-TemporalUnit11448)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Instant this11449 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11450] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.range this11449 java-time-temporal-TemporalField11450))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Instant [^long long11451 ^long long11452] (. java.time.Instant ofEpochSecond long11451 long11452)) (^java.time.Instant [^long long11453] (. java.time.Instant ofEpochSecond long11453)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.Instant this11454 ^java.time.ZoneOffset java-time-ZoneOffset11455] (.atOffset this11454 java-time-ZoneOffset11455)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this11456 ^long long11457] (.minusMillis this11456 long11457)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this11458] (.nano this11458)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this11459 ^long long11460] (.plusMillis this11459 long11460)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this11461 ^long long11462] (.minusSeconds this11461 long11462)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this11463 ^long long11464] (.plusNanos this11463 long11464)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11465 G__11466] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.plus ^java.time.Instant this11465 G__11466))) (^java.lang.Object [this11467 G__11468 G__11469] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.plus ^java.time.Instant this11467 G__11468 G__11469))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Instant this11470 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery11471] (.query this11470 java-time-temporal-TemporalQuery11471)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^java.time.Instant this11472] (.toString this11472)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this11473 ^java.time.Instant java-time-Instant11474] (.isBefore this11473 java-time-Instant11474)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11475 G__11476] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.minus ^java.time.Instant this11475 G__11476))) (^java.lang.Object [this11477 G__11478 G__11479] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.minus ^java.time.Instant this11477 G__11478 G__11479))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant this11480 ^java.time.ZoneId java-time-ZoneId11481] (.atZone this11480 java-time-ZoneId11481)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^java.time.Instant [^long long11482] (. java.time.Instant ofEpochMilli long11482)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^java.time.Instant this11483 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11484] (.getLong this11483 java-time-temporal-TemporalField11484)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Instant this11485 ^java.time.temporal.Temporal java-time-temporal-Temporal11486 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11487] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.until this11485 java-time-temporal-Temporal11486 java-time-temporal-TemporalUnit11487))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Instant [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor11488] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (. java.time.Instant from java-time-temporal-TemporalAccessor11488))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this11489 ^java.time.Instant java-time-Instant11490] (.isAfter this11489 java-time-Instant11490)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this11491 ^long long11492] (.minusNanos this11491 long11492)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this11493 G__11494] (.isSupported ^java.time.Instant this11493 G__11494)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Instant [^java.lang.CharSequence java-lang-CharSequence11495] (. java.time.Instant parse java-lang-CharSequence11495)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this11496] (.hashCode this11496)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Instant this11497 ^java.time.temporal.Temporal java-time-temporal-Temporal11498] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.adjustInto this11497 java-time-temporal-Temporal11498))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this11499 G__11500] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.with ^java.time.Instant this11499 G__11500))) (^java.lang.Object [this11501 G__11502 G__11503] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.with ^java.time.Instant this11501 G__11502 G__11503))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"]))} (^java.time.Instant [] (. java.time.Instant now)) (^java.time.Instant [^java.time.Clock java-time-Clock11504] (. java.time.Instant now java-time-Clock11504)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this11505] (.toEpochMilli this11505)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this11506] (.epochSecond this11506)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.lang.Object"] ["java.time.Instant" "java.time.Instant"]))} (^java.lang.Integer [this11507 G__11508] (.compareTo ^java.time.Instant this11507 G__11508)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this11509 ^long long11510] (.plusSeconds this11509 long11510)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Instant this11511 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11512] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.get this11511 java-time-temporal-TemporalField11512))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Instant this11513 ^java.lang.Object java-lang-Object11514] (.equals this11513 java-lang-Object11514)))
