(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Instant]]))
(def min (goog.object/get java.time.Instant "MIN"))
(def epoch (goog.object/get java.time.Instant "EPOCH"))
(def max (goog.object/get java.time.Instant "MAX"))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4225 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4226] (.truncatedTo this4225 java-time-temporal-TemporalUnit4226)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Instant this4227 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4228] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.range this4227 java-time-temporal-TemporalField4228))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "long"] ["long"]))} (^js/JSJoda.Instant [^long long4229 ^long long4230] (js-invoke java.time.Instant "ofEpochSecond" long4229 long4230)) (^js/JSJoda.Instant [^long long4231] (js-invoke java.time.Instant "ofEpochSecond" long4231)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.Instant this4232 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4233] (.atOffset this4232 java-time-ZoneOffset4233)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4234 ^long long4235] (.minusMillis this4234 long4235)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^int [^js/JSJoda.Instant this4236] (.nano this4236)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4237 ^long long4238] (.plusMillis this4237 long4238)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4239 ^long long4240] (.minusSeconds this4239 long4240)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4241 ^long long4242] (.plusNanos this4241 long4242)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4243 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4244] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.plus this4243 java-time-temporal-TemporalAmount4244))) (^js/JSJoda.Instant [^js/JSJoda.Instant this4245 ^long long4246 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4247] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.plus this4245 long4246 java-time-temporal-TemporalUnit4247))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Instant this4248 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery4249] (.query this4248 java-time-temporal-TemporalQuery4249)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^js/JSJoda.Instant this4250] (.toString this4250)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^boolean [^js/JSJoda.Instant this4251 ^js/JSJoda.Instant java-time-Instant4252] (.isBefore this4251 java-time-Instant4252)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4253 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4254] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.minus this4253 java-time-temporal-TemporalAmount4254))) (^js/JSJoda.Instant [^js/JSJoda.Instant this4255 ^long long4256 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4257] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.minus this4255 long4256 java-time-temporal-TemporalUnit4257))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.Instant this4258 ^js/JSJoda.ZoneId java-time-ZoneId4259] (.atZone this4258 java-time-ZoneId4259)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^js/JSJoda.Instant [^long long4260] (js-invoke java.time.Instant "ofEpochMilli" long4260)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Instant this4261 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4262] (.getLong this4261 java-time-temporal-TemporalField4262)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Instant this4263 ^js/JSJoda.Temporal java-time-temporal-Temporal4264 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4265] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.until this4263 java-time-temporal-Temporal4264 java-time-temporal-TemporalUnit4265))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Instant [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor4266] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (js-invoke java.time.Instant "from" java-time-temporal-TemporalAccessor4266))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^boolean [^js/JSJoda.Instant this4267 ^js/JSJoda.Instant java-time-Instant4268] (.isAfter this4267 java-time-Instant4268)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4269 ^long long4270] (.minusNanos this4269 long4270)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalField"]))} (^boolean [this4271 G__4272] (.isSupported ^js/JSJoda.Instant this4271 G__4272)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^js/JSJoda.Instant [^java.lang.CharSequence java-lang-CharSequence4273] (js-invoke java.time.Instant "parse" java-lang-CharSequence4273)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^int [^js/JSJoda.Instant this4274] (.hashCode this4274)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Instant this4275 ^js/JSJoda.Temporal java-time-temporal-Temporal4276] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.adjustInto this4275 java-time-temporal-Temporal4276))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4277 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster4278] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.with this4277 java-time-temporal-TemporalAdjuster4278))) (^js/JSJoda.Instant [^js/JSJoda.Instant this4279 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4280 ^long long4281] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.with this4279 java-time-temporal-TemporalField4280 long4281))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"]))} (^js/JSJoda.Instant [] (js-invoke java.time.Instant "now")) (^js/JSJoda.Instant [^js/JSJoda.Clock java-time-Clock4282] (js-invoke java.time.Instant "now" java-time-Clock4282)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^js/JSJoda.Instant this4283] (.toEpochMilli this4283)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^js/JSJoda.Instant this4284] (.epochSecond this4284)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^int [^js/JSJoda.Instant this4285 ^js/JSJoda.Instant java-time-Instant4286] (.compareTo this4285 java-time-Instant4286)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this4287 ^long long4288] (.plusSeconds this4287 long4288)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Instant this4289 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4290] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.get this4289 java-time-temporal-TemporalField4290))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^boolean [^js/JSJoda.Instant this4291 ^java.lang.Object java-lang-Object4292] (.equals this4291 java-lang-Object4292)))
