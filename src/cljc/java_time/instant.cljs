(ns cljc.java-time.instant (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Instant]]))
(def min (goog.object/get java.time.Instant "MIN"))
(def epoch (goog.object/get java.time.Instant "EPOCH"))
(def max (goog.object/get java.time.Instant "MAX"))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7238 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7239] (.truncatedTo this7238 java-time-temporal-TemporalUnit7239)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Instant this7240 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7241] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.range this7240 java-time-temporal-TemporalField7241))))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "long"] ["long"]))} (^js/JSJoda.Instant [^long long7242 ^long long7243] (js-invoke java.time.Instant "ofEpochSecond" long7242 long7243)) (^js/JSJoda.Instant [^long long7244] (js-invoke java.time.Instant "ofEpochSecond" long7244)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.Instant this7245 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7246] (.atOffset this7245 java-time-ZoneOffset7246)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7247 ^long long7248] (.minusMillis this7247 long7248)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^int [^js/JSJoda.Instant this7249] (.nano this7249)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7250 ^long long7251] (.plusMillis this7250 long7251)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7252 ^long long7253] (.minusSeconds this7252 long7253)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7254 ^long long7255] (.plusNanos this7254 long7255)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this7256 G__7257 G__7258] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.plus ^js/JSJoda.Instant this7256 G__7257 G__7258))) (^java.lang.Object [this7259 G__7260] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.plus ^js/JSJoda.Instant this7259 G__7260))))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Instant this7261 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery7262] (.query this7261 java-time-temporal-TemporalQuery7262)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^js/JSJoda.Instant this7263] (.toString this7263)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^boolean [^js/JSJoda.Instant this7264 ^js/JSJoda.Instant java-time-Instant7265] (.isBefore this7264 java-time-Instant7265)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7266 G__7267] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.minus ^js/JSJoda.Instant this7266 G__7267))) (^java.lang.Object [this7268 G__7269 G__7270] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.minus ^js/JSJoda.Instant this7268 G__7269 G__7270))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.Instant this7271 ^js/JSJoda.ZoneId java-time-ZoneId7272] (.atZone this7271 java-time-ZoneId7272)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^js/JSJoda.Instant [^long long7273] (js-invoke java.time.Instant "ofEpochMilli" long7273)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Instant this7274 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7275] (.getLong this7274 java-time-temporal-TemporalField7275)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Instant this7276 ^js/JSJoda.Temporal java-time-temporal-Temporal7277 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7278] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.until this7276 java-time-temporal-Temporal7277 java-time-temporal-TemporalUnit7278))))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Instant [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor7279] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (js-invoke java.time.Instant "from" java-time-temporal-TemporalAccessor7279))))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^boolean [^js/JSJoda.Instant this7280 ^js/JSJoda.Instant java-time-Instant7281] (.isAfter this7280 java-time-Instant7281)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7282 ^long long7283] (.minusNanos this7282 long7283)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalField"]))} (^boolean [this7284 G__7285] (.isSupported ^js/JSJoda.Instant this7284 G__7285)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^js/JSJoda.Instant [^java.lang.CharSequence java-lang-CharSequence7286] (js-invoke java.time.Instant "parse" java-lang-CharSequence7286)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^int [^js/JSJoda.Instant this7287] (.hashCode this7287)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Instant this7288 ^js/JSJoda.Temporal java-time-temporal-Temporal7289] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.adjustInto this7288 java-time-temporal-Temporal7289))))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this7290 G__7291 G__7292] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.with ^js/JSJoda.Instant this7290 G__7291 G__7292))) (^java.lang.Object [this7293 G__7294] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.with ^js/JSJoda.Instant this7293 G__7294))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"]))} (^js/JSJoda.Instant [] (js-invoke java.time.Instant "now")) (^js/JSJoda.Instant [^js/JSJoda.Clock java-time-Clock7295] (js-invoke java.time.Instant "now" java-time-Clock7295)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^js/JSJoda.Instant this7296] (.toEpochMilli this7296)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^js/JSJoda.Instant this7297] (.epochSecond this7297)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.time.Instant"] ["java.time.Instant" "java.lang.Object"]))} (^int [this7298 G__7299] (.compareTo ^js/JSJoda.Instant this7298 G__7299)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^js/JSJoda.Instant [^js/JSJoda.Instant this7300 ^long long7301] (.plusSeconds this7300 long7301)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Instant this7302 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7303] (cljc.java-time.extn.calendar-awareness/calendar-aware-cljs (.get this7302 java-time-temporal-TemporalField7303))))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^boolean [^js/JSJoda.Instant this7304 ^java.lang.Object java-lang-Object7305] (.equals this7304 java-lang-Object7305)))
