(ns cljc.java-time.instant (:require [java.time :refer [Instant]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def min (. java.time.Instant -MIN))
(def epoch (. java.time.Instant -EPOCH))
(def max (. java.time.Instant -MAX))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.time.Instant [^java.time.Instant this49439 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49440] (.truncatedTo this49439 java-time-temporal-TemporalUnit49440)))
(clojure.core/defn range {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Instant this49441 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49442] (.range this49441 java-time-temporal-TemporalField49442)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Instant [^long long49443 ^long long49444] (. java.time.Instant ofEpochSecond long49443 long49444)) (^java.time.Instant [^long long49445] (. java.time.Instant ofEpochSecond long49445)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.Instant" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.Instant this49446 ^java.time.ZoneOffset java-time-ZoneOffset49447] (.atOffset this49446 java-time-ZoneOffset49447)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this49448 ^long long49449] (.minusMillis this49448 long49449)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this49450] (.nano this49450)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this49451 ^long long49452] (.plusMillis this49451 long49452)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this49453 ^long long49454] (.minusSeconds this49453 long49454)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this49455 ^long long49456] (.plusNanos this49455 long49456)))
(clojure.core/defn plus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this49457 G__49458] (.plus ^java.time.Instant this49457 G__49458)) (^java.lang.Object [this49459 G__49460 G__49461] (.plus ^java.time.Instant this49459 G__49460 G__49461)))
(clojure.core/defn query {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Instant this49462 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery49463] (.query this49462 java-time-temporal-TemporalQuery49463)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Instant"]))} (^java.lang.String [^java.time.Instant this49464] (.toString this49464)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this49465 ^java.time.Instant java-time-Instant49466] (.isBefore this49465 java-time-Instant49466)))
(clojure.core/defn minus {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalAmount"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "long" "java.time.temporal.TemporalUnit"] ["java.time.Instant" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this49467 G__49468] (.minus ^java.time.Instant this49467 G__49468)) (^java.lang.Object [this49469 G__49470 G__49471] (.minus ^java.time.Instant this49469 G__49470 G__49471)))
(clojure.core/defn at-zone {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant this49472 ^java.time.ZoneId java-time-ZoneId49473] (.atZone this49472 java-time-ZoneId49473)))
(clojure.core/defn of-epoch-milli {:arglists (quote (["long"]))} (^java.time.Instant [^long long49474] (. java.time.Instant ofEpochMilli long49474)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^long [^java.time.Instant this49475 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49476] (.getLong this49475 java-time-temporal-TemporalField49476)))
(clojure.core/defn until {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Instant this49477 ^java.time.temporal.Temporal java-time-temporal-Temporal49478 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49479] (.until this49477 java-time-temporal-Temporal49478 java-time-temporal-TemporalUnit49479)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Instant [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor49480] (. java.time.Instant from java-time-temporal-TemporalAccessor49480)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Instant" "java.time.Instant"]))} (^java.lang.Boolean [^java.time.Instant this49481 ^java.time.Instant java-time-Instant49482] (.isAfter this49481 java-time-Instant49482)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this49483 ^long long49484] (.minusNanos this49483 long49484)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"] ["java.time.Instant" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this49485 G__49486] (.isSupported ^java.time.Instant this49485 G__49486)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Instant [^java.lang.CharSequence java-lang-CharSequence49487] (. java.time.Instant parse java-lang-CharSequence49487)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Instant"]))} (^java.lang.Integer [^java.time.Instant this49488] (.hashCode this49488)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Instant" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Instant this49489 ^java.time.temporal.Temporal java-time-temporal-Temporal49490] (.adjustInto this49489 java-time-temporal-Temporal49490)))
(clojure.core/defn with {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"] ["java.time.Instant" "java.time.temporal.TemporalField" "long"] ["java.time.Instant" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this49491 G__49492 G__49493] (.with ^java.time.Instant this49491 G__49492 G__49493)) (^java.lang.Object [this49494 G__49495] (.with ^java.time.Instant this49494 G__49495)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] []))} (^java.time.Instant [^java.time.Clock java-time-Clock49496] (. java.time.Instant now java-time-Clock49496)) (^java.time.Instant [] (. java.time.Instant now)))
(clojure.core/defn to-epoch-milli {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this49497] (.toEpochMilli this49497)))
(clojure.core/defn get-epoch-second {:arglists (quote (["java.time.Instant"]))} (^long [^java.time.Instant this49498] (.epochSecond this49498)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Instant" "java.time.Instant"] ["java.time.Instant" "java.lang.Object"]))} (^java.lang.Integer [this49499 G__49500] (.compareTo ^java.time.Instant this49499 G__49500)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Instant" "long"]))} (^java.time.Instant [^java.time.Instant this49501 ^long long49502] (.plusSeconds this49501 long49502)))
(clojure.core/defn get {:arglists (quote (["java.time.Instant" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Instant this49503 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49504] (.get this49503 java-time-temporal-TemporalField49504)))
(clojure.core/defn equals {:arglists (quote (["java.time.Instant" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Instant this49505 ^java.lang.Object java-lang-Object49506] (.equals this49505 java-lang-Object49506)))
