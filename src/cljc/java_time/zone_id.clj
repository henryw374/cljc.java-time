(ns cljc.java-time.zone-id (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time ZoneId]))
(def short-ids (. java.time.ZoneId -SHORT_IDS))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneId getAvailableZoneIds)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.time.ZoneId [^java.lang.String java-lang-String6887] (. java.time.ZoneId of java-lang-String6887)) (^java.time.ZoneId [^java.lang.String java-lang-String6888 ^java.util.Map java-util-Map6889] (. java.time.ZoneId of java-lang-String6888 java-util-Map6889)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String6890 ^java.time.ZoneOffset java-time-ZoneOffset6891] (. java.time.ZoneId ofOffset java-lang-String6890 java-time-ZoneOffset6891)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this6892] (.toString this6892)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneId" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneId this6893 ^java.time.format.TextStyle java-time-format-TextStyle6894 ^java.util.Locale java-util-Locale6895] (.getDisplayName this6893 java-time-format-TextStyle6894 java-util-Locale6895)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneId"]))} (^java.time.zone.ZoneRules [^java.time.ZoneId this6896] (.getRules this6896)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this6897] (.getId this6897)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneId"]))} (^java.time.ZoneId [^java.time.ZoneId this6898] (.normalized this6898)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneId systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZoneId [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor6899] (. java.time.ZoneId from java-time-temporal-TemporalAccessor6899)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.Integer [^java.time.ZoneId this6900] (.hashCode this6900)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneId" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneId this6901 ^java.lang.Object java-lang-Object6902] (.equals this6901 java-lang-Object6902)))
