(ns cljc.java-time.zone-id (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZoneId]))
(def short-ids java.time.ZoneId/SHORT_IDS)
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (java.time.ZoneId/getAvailableZoneIds)))
(clojure.core/defn of {:arglists (quote (["java.lang.String" "java.util.Map"] ["java.lang.String"]))} (^java.time.ZoneId [^java.lang.String java-lang-String14093 ^java.util.Map java-util-Map14094] (java.time.ZoneId/of java-lang-String14093 java-util-Map14094)) (^java.time.ZoneId [^java.lang.String java-lang-String14095] (java.time.ZoneId/of java-lang-String14095)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String14096 ^java.time.ZoneOffset java-time-ZoneOffset14097] (java.time.ZoneId/ofOffset java-lang-String14096 java-time-ZoneOffset14097)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this14098] (.toString this14098)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneId" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneId this14099 ^java.time.format.TextStyle java-time-format-TextStyle14100 ^java.util.Locale java-util-Locale14101] (.getDisplayName this14099 java-time-format-TextStyle14100 java-util-Locale14101)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneId"]))} (^java.time.zone.ZoneRules [^java.time.ZoneId this14102] (.getRules this14102)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this14103] (.getId this14103)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneId"]))} (^java.time.ZoneId [^java.time.ZoneId this14104] (.normalized this14104)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (java.time.ZoneId/systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZoneId [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14105] (java.time.ZoneId/from java-time-temporal-TemporalAccessor14105)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.Integer [^java.time.ZoneId this14106] (.hashCode this14106)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneId" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneId this14107 ^java.lang.Object java-lang-Object14108] (.equals this14107 java-lang-Object14108)))
