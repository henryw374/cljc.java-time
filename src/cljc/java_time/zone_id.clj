(ns cljc.java-time.zone-id (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZoneId]))
(def short-ids java.time.ZoneId/SHORT_IDS)
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (java.time.ZoneId/getAvailableZoneIds)))
(clojure.core/defn of {:arglists (quote (["java.lang.String" "java.util.Map"] ["java.lang.String"]))} (^java.time.ZoneId [^java.lang.String java-lang-String14472 ^java.util.Map java-util-Map14473] (java.time.ZoneId/of java-lang-String14472 java-util-Map14473)) (^java.time.ZoneId [^java.lang.String java-lang-String14474] (java.time.ZoneId/of java-lang-String14474)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String14475 ^java.time.ZoneOffset java-time-ZoneOffset14476] (java.time.ZoneId/ofOffset java-lang-String14475 java-time-ZoneOffset14476)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this14477] (.toString this14477)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneId" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneId this14478 ^java.time.format.TextStyle java-time-format-TextStyle14479 ^java.util.Locale java-util-Locale14480] (.getDisplayName this14478 java-time-format-TextStyle14479 java-util-Locale14480)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneId"]))} (^java.time.zone.ZoneRules [^java.time.ZoneId this14481] (.getRules this14481)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this14482] (.getId this14482)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneId"]))} (^java.time.ZoneId [^java.time.ZoneId this14483] (.normalized this14483)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (java.time.ZoneId/systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZoneId [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14484] (java.time.ZoneId/from java-time-temporal-TemporalAccessor14484)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.Integer [^java.time.ZoneId this14485] (.hashCode this14485)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneId" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneId this14486 ^java.lang.Object java-lang-Object14487] (.equals this14486 java-lang-Object14487)))
