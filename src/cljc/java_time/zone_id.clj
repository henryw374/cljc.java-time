(ns cljc.java-time.zone-id (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZoneId]))
(def short-ids java.time.ZoneId/SHORT_IDS)
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneId getAvailableZoneIds)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.time.ZoneId [^java.lang.String java-lang-String11797] (. java.time.ZoneId of java-lang-String11797)) (^java.time.ZoneId [^java.lang.String java-lang-String11798 ^java.util.Map java-util-Map11799] (. java.time.ZoneId of java-lang-String11798 java-util-Map11799)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String11800 ^java.time.ZoneOffset java-time-ZoneOffset11801] (. java.time.ZoneId ofOffset java-lang-String11800 java-time-ZoneOffset11801)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this11802] (.toString this11802)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneId" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneId this11803 ^java.time.format.TextStyle java-time-format-TextStyle11804 ^java.util.Locale java-util-Locale11805] (.getDisplayName this11803 java-time-format-TextStyle11804 java-util-Locale11805)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneId"]))} (^java.time.zone.ZoneRules [^java.time.ZoneId this11806] (.getRules this11806)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this11807] (.getId this11807)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneId"]))} (^java.time.ZoneId [^java.time.ZoneId this11808] (.normalized this11808)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneId systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZoneId [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor11809] (. java.time.ZoneId from java-time-temporal-TemporalAccessor11809)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.Integer [^java.time.ZoneId this11810] (.hashCode this11810)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneId" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneId this11811 ^java.lang.Object java-lang-Object11812] (.equals this11811 java-lang-Object11812)))
