(ns cljc.java-time.zone-id (:import [java.time ZoneId]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def short-ids java.time.ZoneId/SHORT_IDS)
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneId getAvailableZoneIds)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.time.ZoneId [^java.lang.String java-lang-String49789] (. java.time.ZoneId of java-lang-String49789)) (^java.time.ZoneId [^java.lang.String java-lang-String49790 ^java.util.Map java-util-Map49791] (. java.time.ZoneId of java-lang-String49790 java-util-Map49791)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String49792 ^java.time.ZoneOffset java-time-ZoneOffset49793] (. java.time.ZoneId ofOffset java-lang-String49792 java-time-ZoneOffset49793)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this49794] (.toString this49794)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneId" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneId this49795 ^java.time.format.TextStyle java-time-format-TextStyle49796 ^java.util.Locale java-util-Locale49797] (.getDisplayName this49795 java-time-format-TextStyle49796 java-util-Locale49797)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneId"]))} (^java.time.zone.ZoneRules [^java.time.ZoneId this49798] (.getRules this49798)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.String [^java.time.ZoneId this49799] (.getId this49799)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneId"]))} (^java.time.ZoneId [^java.time.ZoneId this49800] (.normalized this49800)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneId systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZoneId [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor49801] (. java.time.ZoneId from java-time-temporal-TemporalAccessor49801)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneId"]))} (^java.lang.Integer [^java.time.ZoneId this49802] (.hashCode this49802)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneId" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneId this49803 ^java.lang.Object java-lang-Object49804] (.equals this49803 java-lang-Object49804)))
