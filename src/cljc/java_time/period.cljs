(ns cljc.java-time.period (:require [java.time :refer [Period]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def zero (. java.time.Period -ZERO))
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this48304] (.months this48304)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int48305] (. java.time.Period ofWeeks int48305)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int48306] (. java.time.Period ofDays int48306)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this48307] (.isNegative this48307)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^java.time.Period [^java.lang.Integer int48308 ^java.lang.Integer int48309 ^java.lang.Integer int48310] (. java.time.Period of int48308 int48309 int48310)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this48311] (.isZero this48311)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"] ["java.time.Period" "int"]))} (^java.lang.Object [this48312 G__48313] (.multipliedBy ^java.time.Period this48312 G__48313)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^java.time.Period this48314] (.units this48314)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this48315 ^java.lang.Integer int48316] (.withDays this48315 int48316)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this48317 G__48318] (.plus ^java.time.Period this48317 G__48318)))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int48319] (. java.time.Period ofMonths int48319)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^java.time.Period this48320] (.toString this48320)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this48321 ^long long48322] (.plusMonths this48321 long48322)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this48323 ^long long48324] (.minusMonths this48323 long48324)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this48325 G__48326] (.minus ^java.time.Period this48325 G__48326)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this48327 ^java.time.temporal.Temporal java-time-temporal-Temporal48328] (.addTo this48327 java-time-temporal-Temporal48328)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^java.time.Period this48329] (.toTotalMonths this48329)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this48330 ^long long48331] (.plusDays this48330 long48331)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int48332] (. java.time.Period ofYears int48332)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this48333] (.days this48333)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this48334] (.negated ^java.time.Period this48334)))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this48335] (.years this48335)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this48336 ^java.lang.Integer int48337] (.withYears this48336 int48337)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this48338] (.normalized ^java.time.Period this48338)))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this48339 ^java.lang.Integer int48340] (.withMonths this48339 int48340)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^java.time.Period [^java.time.LocalDate java-time-LocalDate48341 ^java.time.LocalDate java-time-LocalDate48342] (. java.time.Period between java-time-LocalDate48341 java-time-LocalDate48342)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount48343] (. java.time.Period from java-time-temporal-TemporalAmount48343)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this48344 ^long long48345] (.minusYears this48344 long48345)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this48346] (.chronology ^java.time.Period this48346)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Period [^java.lang.CharSequence java-lang-CharSequence48347] (. java.time.Period parse java-lang-CharSequence48347)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this48348] (.hashCode this48348)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this48349 ^java.time.temporal.Temporal java-time-temporal-Temporal48350] (.subtractFrom this48349 java-time-temporal-Temporal48350)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Period this48351 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit48352] (.get this48351 java-time-temporal-TemporalUnit48352)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Period this48353 ^java.lang.Object java-lang-Object48354] (.equals this48353 java-lang-Object48354)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this48355 ^long long48356] (.plusYears this48355 long48356)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this48357 ^long long48358] (.minusDays this48357 long48358)))
