(ns cljc.java-time.period (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Period]]))
(def zero (goog.object/get java.time.Period "ZERO"))
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^int [^js/JSJoda.Period this3091] (.months this3091)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^js/JSJoda.Period [^int int3092] (js-invoke java.time.Period "ofWeeks" int3092)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^js/JSJoda.Period [^int int3093] (js-invoke java.time.Period "ofDays" int3093)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^boolean [^js/JSJoda.Period this3094] (.isNegative this3094)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^js/JSJoda.Period [^int int3095 ^int int3096 ^int int3097] (js-invoke java.time.Period "of" int3095 int3096 int3097)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^boolean [^js/JSJoda.Period this3098] (.isZero this3098)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3099 ^int int3100] (.multipliedBy this3099 int3100)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^js/JSJoda.Period this3101] (.units this3101)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3102 ^int int3103] (.withDays this3102 int3103)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3104 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3105] (.plus this3104 java-time-temporal-TemporalAmount3105)))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^js/JSJoda.Period [^int int3106] (js-invoke java.time.Period "ofMonths" int3106)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^js/JSJoda.Period this3107] (.toString this3107)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3108 ^long long3109] (.plusMonths this3108 long3109)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3110 ^long long3111] (.minusMonths this3110 long3111)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3112 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3113] (.minus this3112 java-time-temporal-TemporalAmount3113)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Period this3114 ^js/JSJoda.Temporal java-time-temporal-Temporal3115] (.addTo this3114 java-time-temporal-Temporal3115)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^js/JSJoda.Period this3116] (.toTotalMonths this3116)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3117 ^long long3118] (.plusDays this3117 long3118)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^js/JSJoda.Period [^int int3119] (js-invoke java.time.Period "ofYears" int3119)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^int [^js/JSJoda.Period this3120] (.days this3120)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3121] (.negated this3121)))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^int [^js/JSJoda.Period this3122] (.years this3122)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3123 ^int int3124] (.withYears this3123 int3124)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3125] (.normalized this3125)))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3126 ^int int3127] (.withMonths this3126 int3127)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^js/JSJoda.Period [^js/JSJoda.LocalDate java-time-LocalDate3128 ^js/JSJoda.LocalDate java-time-LocalDate3129] (js-invoke java.time.Period "between" java-time-LocalDate3128 java-time-LocalDate3129)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Period [^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3130] (js-invoke java.time.Period "from" java-time-temporal-TemporalAmount3130)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3131 ^long long3132] (.minusYears this3131 long3132)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"]))} (^js/JSJoda.IsoChronology [^js/JSJoda.Period this3133] (.chronology this3133)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^js/JSJoda.Period [^java.lang.CharSequence java-lang-CharSequence3134] (js-invoke java.time.Period "parse" java-lang-CharSequence3134)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^int [^js/JSJoda.Period this3135] (.hashCode this3135)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Period this3136 ^js/JSJoda.Temporal java-time-temporal-Temporal3137] (.subtractFrom this3136 java-time-temporal-Temporal3137)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Period this3138 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3139] (.get this3138 java-time-temporal-TemporalUnit3139)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^boolean [^js/JSJoda.Period this3140 ^java.lang.Object java-lang-Object3141] (.equals this3140 java-lang-Object3141)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3142 ^long long3143] (.plusYears this3142 long3143)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^js/JSJoda.Period [^js/JSJoda.Period this3144 ^long long3145] (.minusDays this3144 long3145)))
