(ns cljc.java-time.period (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Period]]))
(def zero (. java.time.Period -ZERO))
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this10312] (.months this10312)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int10313] (. java.time.Period ofWeeks int10313)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int10314] (. java.time.Period ofDays int10314)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this10315] (.isNegative this10315)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^java.time.Period [^java.lang.Integer int10316 ^java.lang.Integer int10317 ^java.lang.Integer int10318] (. java.time.Period of int10316 int10317 int10318)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this10319] (.isZero this10319)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"] ["java.time.Period" "int"]))} (^java.lang.Object [this10320 G__10321] (.multipliedBy ^java.time.Period this10320 G__10321)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^java.time.Period this10322] (.units this10322)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this10323 ^java.lang.Integer int10324] (.withDays this10323 int10324)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this10325 G__10326] (.plus ^java.time.Period this10325 G__10326)))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int10327] (. java.time.Period ofMonths int10327)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^java.time.Period this10328] (.toString this10328)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this10329 ^long long10330] (.plusMonths this10329 long10330)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this10331 ^long long10332] (.minusMonths this10331 long10332)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this10333 G__10334] (.minus ^java.time.Period this10333 G__10334)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this10335 ^java.time.temporal.Temporal java-time-temporal-Temporal10336] (.addTo this10335 java-time-temporal-Temporal10336)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^java.time.Period this10337] (.toTotalMonths this10337)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this10338 ^long long10339] (.plusDays this10338 long10339)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int10340] (. java.time.Period ofYears int10340)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this10341] (.days this10341)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this10342] (.negated ^java.time.Period this10342)))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this10343] (.years this10343)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this10344 ^java.lang.Integer int10345] (.withYears this10344 int10345)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this10346] (.normalized ^java.time.Period this10346)))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this10347 ^java.lang.Integer int10348] (.withMonths this10347 int10348)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^java.time.Period [^java.time.LocalDate java-time-LocalDate10349 ^java.time.LocalDate java-time-LocalDate10350] (. java.time.Period between java-time-LocalDate10349 java-time-LocalDate10350)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount10351] (. java.time.Period from java-time-temporal-TemporalAmount10351)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this10352 ^long long10353] (.minusYears this10352 long10353)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this10354] (.chronology ^java.time.Period this10354)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Period [^java.lang.CharSequence java-lang-CharSequence10355] (. java.time.Period parse java-lang-CharSequence10355)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this10356] (.hashCode this10356)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this10357 ^java.time.temporal.Temporal java-time-temporal-Temporal10358] (.subtractFrom this10357 java-time-temporal-Temporal10358)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Period this10359 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit10360] (.get this10359 java-time-temporal-TemporalUnit10360)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Period this10361 ^java.lang.Object java-lang-Object10362] (.equals this10361 java-lang-Object10362)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this10363 ^long long10364] (.plusYears this10363 long10364)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this10365 ^long long10366] (.minusDays this10365 long10366)))
