(ns cljc.java-time.period (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [Period]]))
(def zero (goog.object/get java.time.Period "ZERO"))
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^int [^js/JSJoda.Period this12608] (.months this12608)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^js/JSJoda.Period [^int int12609] (js-invoke java.time.Period "ofWeeks" int12609)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^js/JSJoda.Period [^int int12610] (js-invoke java.time.Period "ofDays" int12610)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^boolean [^js/JSJoda.Period this12611] (.isNegative this12611)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^js/JSJoda.Period [^int int12612 ^int int12613 ^int int12614] (js-invoke java.time.Period "of" int12612 int12613 int12614)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^boolean [^js/JSJoda.Period this12615] (.isZero this12615)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12616 ^int int12617] (.multipliedBy this12616 int12617)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^js/JSJoda.Period this12618] (.units this12618)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12619 ^int int12620] (.withDays this12619 int12620)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12621 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount12622] (.plus this12621 java-time-temporal-TemporalAmount12622)))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^js/JSJoda.Period [^int int12623] (js-invoke java.time.Period "ofMonths" int12623)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^js/JSJoda.Period this12624] (.toString this12624)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12625 ^long long12626] (.plusMonths this12625 long12626)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12627 ^long long12628] (.minusMonths this12627 long12628)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12629 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount12630] (.minus this12629 java-time-temporal-TemporalAmount12630)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Period this12631 ^js/JSJoda.Temporal java-time-temporal-Temporal12632] (.addTo this12631 java-time-temporal-Temporal12632)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^js/JSJoda.Period this12633] (.toTotalMonths this12633)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12634 ^long long12635] (.plusDays this12634 long12635)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^js/JSJoda.Period [^int int12636] (js-invoke java.time.Period "ofYears" int12636)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^int [^js/JSJoda.Period this12637] (.days this12637)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12638] (.negated this12638)))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^int [^js/JSJoda.Period this12639] (.years this12639)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12640 ^int int12641] (.withYears this12640 int12641)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12642] (.normalized this12642)))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12643 ^int int12644] (.withMonths this12643 int12644)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^js/JSJoda.Period [^js/JSJoda.LocalDate java-time-LocalDate12645 ^js/JSJoda.LocalDate java-time-LocalDate12646] (js-invoke java.time.Period "between" java-time-LocalDate12645 java-time-LocalDate12646)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Period [^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount12647] (js-invoke java.time.Period "from" java-time-temporal-TemporalAmount12647)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12648 ^long long12649] (.minusYears this12648 long12649)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"]))} (^js/JSJoda.IsoChronology [^js/JSJoda.Period this12650] (.chronology this12650)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^js/JSJoda.Period [^java.lang.CharSequence java-lang-CharSequence12651] (js-invoke java.time.Period "parse" java-lang-CharSequence12651)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^int [^js/JSJoda.Period this12652] (.hashCode this12652)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Period this12653 ^js/JSJoda.Temporal java-time-temporal-Temporal12654] (.subtractFrom this12653 java-time-temporal-Temporal12654)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Period this12655 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit12656] (.get this12655 java-time-temporal-TemporalUnit12656)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^boolean [^js/JSJoda.Period this12657 ^java.lang.Object java-lang-Object12658] (.equals this12657 java-lang-Object12658)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12659 ^long long12660] (.plusYears this12659 long12660)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^js/JSJoda.Period [^js/JSJoda.Period this12661 ^long long12662] (.minusDays this12661 long12662)))
