(ns cljc.java-time.clock (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Clock]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Clock])))
(clojure.core/defn tick {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock4639 ^java.time.Duration java-time-Duration4640] (. java.time.Clock tick java-time-Clock4639 java-time-Duration4640)))
(clojure.core/defn offset {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock4641 ^java.time.Duration java-time-Duration4642] (. java.time.Clock offset java-time-Clock4641 java-time-Duration4642)))
(clojure.core/defn system-utc {:arglists (quote ([]))} (^java.time.Clock [] (. java.time.Clock systemUTC)))
(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^java.time.Clock [] (. java.time.Clock systemDefaultZone)))
(clojure.core/defn fixed {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Instant java-time-Instant4643 ^java.time.ZoneId java-time-ZoneId4644] (. java.time.Clock fixed java-time-Instant4643 java-time-ZoneId4644)))
(clojure.core/defn tick-minutes {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId4645] (. java.time.Clock tickMinutes java-time-ZoneId4645)))
(clojure.core/defn tick-seconds {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId4646] (. java.time.Clock tickSeconds java-time-ZoneId4646)))
(clojure.core/defn millis {:arglists (quote (["java.time.Clock"]))} (^long [^java.time.Clock this4647] (.millis this4647)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.Clock" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Clock this4648 ^java.time.ZoneId java-time-ZoneId4649] (.withZone this4648 java-time-ZoneId4649)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.Clock"]))} (^java.time.ZoneId [^java.time.Clock this4650] (jti/getter zone this4650)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Clock"]))} (^java.lang.Integer [^java.time.Clock this4651] (.hashCode this4651)))
(clojure.core/defn system {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId4652] (. java.time.Clock system java-time-ZoneId4652)))
(clojure.core/defn instant {:arglists (quote (["java.time.Clock"]))} (^java.time.Instant [^java.time.Clock this4653] (.instant this4653)))
(clojure.core/defn equals {:arglists (quote (["java.time.Clock" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Clock this4654 ^java.lang.Object java-lang-Object4655] (.equals this4654 java-lang-Object4655)))
