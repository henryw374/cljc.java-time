(ns cljc.java-time.clock (:require [java.time :refer [Clock]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(clojure.core/defn tick {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock50704 ^java.time.Duration java-time-Duration50705] (. java.time.Clock tick java-time-Clock50704 java-time-Duration50705)))
(clojure.core/defn offset {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^java.time.Clock [^java.time.Clock java-time-Clock50706 ^java.time.Duration java-time-Duration50707] (. java.time.Clock offset java-time-Clock50706 java-time-Duration50707)))
(clojure.core/defn system-utc {:arglists (quote ([]))} (^java.time.Clock [] (. java.time.Clock systemUTC)))
(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^java.time.Clock [] (. java.time.Clock systemDefaultZone)))
(clojure.core/defn fixed {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Instant java-time-Instant50708 ^java.time.ZoneId java-time-ZoneId50709] (. java.time.Clock fixed java-time-Instant50708 java-time-ZoneId50709)))
(clojure.core/defn tick-minutes {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId50710] (. java.time.Clock tickMinutes java-time-ZoneId50710)))
(clojure.core/defn tick-seconds {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId50711] (. java.time.Clock tickSeconds java-time-ZoneId50711)))
(clojure.core/defn millis {:arglists (quote (["java.time.Clock"]))} (^long [^java.time.Clock this50712] (.millis this50712)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.Clock" "java.time.ZoneId"]))} (^java.time.Clock [^java.time.Clock this50713 ^java.time.ZoneId java-time-ZoneId50714] (.withZone this50713 java-time-ZoneId50714)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.Clock"]))} (^java.time.ZoneId [^java.time.Clock this50715] (.zone this50715)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Clock"]))} (^java.lang.Integer [^java.time.Clock this50716] (.hashCode this50716)))
(clojure.core/defn system {:arglists (quote (["java.time.ZoneId"]))} (^java.time.Clock [^java.time.ZoneId java-time-ZoneId50717] (. java.time.Clock system java-time-ZoneId50717)))
(clojure.core/defn instant {:arglists (quote (["java.time.Clock"]))} (^java.time.Instant [^java.time.Clock this50718] (.instant this50718)))
(clojure.core/defn equals {:arglists (quote (["java.time.Clock" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Clock this50719 ^java.lang.Object java-lang-Object50720] (.equals this50719 java-lang-Object50720)))
