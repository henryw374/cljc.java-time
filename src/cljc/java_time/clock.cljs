(ns cljc.java-time.clock (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Clock]]))
(clojure.core/defn tick {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock java-time-Clock8479 ^js/JSJoda.Duration java-time-Duration8480] (js-invoke java.time.Clock "tick" java-time-Clock8479 java-time-Duration8480)))
(clojure.core/defn offset {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock java-time-Clock8481 ^js/JSJoda.Duration java-time-Duration8482] (js-invoke java.time.Clock "offset" java-time-Clock8481 java-time-Duration8482)))
(clojure.core/defn system-utc {:arglists (quote ([]))} (^js/JSJoda.Clock [] (js-invoke java.time.Clock "systemUTC")))
(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^js/JSJoda.Clock [] (js-invoke java.time.Clock "systemDefaultZone")))
(clojure.core/defn fixed {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.Instant java-time-Instant8483 ^js/JSJoda.ZoneId java-time-ZoneId8484] (js-invoke java.time.Clock "fixed" java-time-Instant8483 java-time-ZoneId8484)))
(clojure.core/defn tick-minutes {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId8485] (js-invoke java.time.Clock "tickMinutes" java-time-ZoneId8485)))
(clojure.core/defn tick-seconds {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId8486] (js-invoke java.time.Clock "tickSeconds" java-time-ZoneId8486)))
(clojure.core/defn millis {:arglists (quote (["java.time.Clock"]))} (^long [^js/JSJoda.Clock this8487] (.millis this8487)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.Clock" "java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock this8488 ^js/JSJoda.ZoneId java-time-ZoneId8489] (.withZone this8488 java-time-ZoneId8489)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.Clock"]))} (^js/JSJoda.ZoneId [^js/JSJoda.Clock this8490] (.zone this8490)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Clock"]))} (^int [^js/JSJoda.Clock this8491] (.hashCode this8491)))
(clojure.core/defn system {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId8492] (js-invoke java.time.Clock "system" java-time-ZoneId8492)))
(clojure.core/defn instant {:arglists (quote (["java.time.Clock"]))} (^js/JSJoda.Instant [^js/JSJoda.Clock this8493] (.instant this8493)))
(clojure.core/defn equals {:arglists (quote (["java.time.Clock" "java.lang.Object"]))} (^boolean [^js/JSJoda.Clock this8494 ^java.lang.Object java-lang-Object8495] (.equals this8494 java-lang-Object8495)))
