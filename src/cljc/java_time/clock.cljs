(ns cljc.java-time.clock (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Clock]]))
(clojure.core/defn tick {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock java-time-Clock61195 ^js/JSJoda.Duration java-time-Duration61196] (js-invoke java.time.Clock "tick" java-time-Clock61195 java-time-Duration61196)))
(clojure.core/defn offset {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock java-time-Clock61197 ^js/JSJoda.Duration java-time-Duration61198] (js-invoke java.time.Clock "offset" java-time-Clock61197 java-time-Duration61198)))
(clojure.core/defn system-utc {:arglists (quote ([]))} (^js/JSJoda.Clock [] (js-invoke java.time.Clock "systemUTC")))
(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^js/JSJoda.Clock [] (js-invoke java.time.Clock "systemDefaultZone")))
(clojure.core/defn fixed {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.Instant java-time-Instant61199 ^js/JSJoda.ZoneId java-time-ZoneId61200] (js-invoke java.time.Clock "fixed" java-time-Instant61199 java-time-ZoneId61200)))
(clojure.core/defn tick-minutes {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId61201] (js-invoke java.time.Clock "tickMinutes" java-time-ZoneId61201)))
(clojure.core/defn tick-seconds {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId61202] (js-invoke java.time.Clock "tickSeconds" java-time-ZoneId61202)))
(clojure.core/defn millis {:arglists (quote (["java.time.Clock"]))} (^long [^js/JSJoda.Clock this61203] (.millis this61203)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.Clock" "java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock this61204 ^js/JSJoda.ZoneId java-time-ZoneId61205] (.withZone this61204 java-time-ZoneId61205)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.Clock"]))} (^js/JSJoda.ZoneId [^js/JSJoda.Clock this61206] (.zone this61206)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Clock"]))} (^int [^js/JSJoda.Clock this61207] (.hashCode this61207)))
(clojure.core/defn system {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId61208] (js-invoke java.time.Clock "system" java-time-ZoneId61208)))
(clojure.core/defn instant {:arglists (quote (["java.time.Clock"]))} (^js/JSJoda.Instant [^js/JSJoda.Clock this61209] (.instant this61209)))
(clojure.core/defn equals {:arglists (quote (["java.time.Clock" "java.lang.Object"]))} (^boolean [^js/JSJoda.Clock this61210 ^java.lang.Object java-lang-Object61211] (.equals this61210 java-lang-Object61211)))
