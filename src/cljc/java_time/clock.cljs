(ns cljc.java-time.clock (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Clock]]))
(clojure.core/defn tick {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock java-time-Clock5491 ^js/JSJoda.Duration java-time-Duration5492] (js-invoke java.time.Clock "tick" java-time-Clock5491 java-time-Duration5492)))
(clojure.core/defn offset {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock java-time-Clock5493 ^js/JSJoda.Duration java-time-Duration5494] (js-invoke java.time.Clock "offset" java-time-Clock5493 java-time-Duration5494)))
(clojure.core/defn system-utc {:arglists (quote ([]))} (^js/JSJoda.Clock [] (js-invoke java.time.Clock "systemUTC")))
(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^js/JSJoda.Clock [] (js-invoke java.time.Clock "systemDefaultZone")))
(clojure.core/defn fixed {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.Instant java-time-Instant5495 ^js/JSJoda.ZoneId java-time-ZoneId5496] (js-invoke java.time.Clock "fixed" java-time-Instant5495 java-time-ZoneId5496)))
(clojure.core/defn tick-minutes {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId5497] (js-invoke java.time.Clock "tickMinutes" java-time-ZoneId5497)))
(clojure.core/defn tick-seconds {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId5498] (js-invoke java.time.Clock "tickSeconds" java-time-ZoneId5498)))
(clojure.core/defn millis {:arglists (quote (["java.time.Clock"]))} (^long [^js/JSJoda.Clock this5499] (.millis this5499)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.Clock" "java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock this5500 ^js/JSJoda.ZoneId java-time-ZoneId5501] (.withZone this5500 java-time-ZoneId5501)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.Clock"]))} (^js/JSJoda.ZoneId [^js/JSJoda.Clock this5502] (.zone this5502)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Clock"]))} (^int [^js/JSJoda.Clock this5503] (.hashCode this5503)))
(clojure.core/defn system {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId5504] (js-invoke java.time.Clock "system" java-time-ZoneId5504)))
(clojure.core/defn instant {:arglists (quote (["java.time.Clock"]))} (^js/JSJoda.Instant [^js/JSJoda.Clock this5505] (.instant this5505)))
(clojure.core/defn equals {:arglists (quote (["java.time.Clock" "java.lang.Object"]))} (^boolean [^js/JSJoda.Clock this5506 ^java.lang.Object java-lang-Object5507] (.equals this5506 java-lang-Object5507)))
