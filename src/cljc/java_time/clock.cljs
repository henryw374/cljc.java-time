(ns cljc.java-time.clock (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Clock]]))
(clojure.core/defn tick {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock java-time-Clock8532 ^js/JSJoda.Duration java-time-Duration8533] (js-invoke java.time.Clock "tick" java-time-Clock8532 java-time-Duration8533)))
(clojure.core/defn offset {:arglists (quote (["java.time.Clock" "java.time.Duration"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock java-time-Clock8534 ^js/JSJoda.Duration java-time-Duration8535] (js-invoke java.time.Clock "offset" java-time-Clock8534 java-time-Duration8535)))
(clojure.core/defn system-utc {:arglists (quote ([]))} (^js/JSJoda.Clock [] (js-invoke java.time.Clock "systemUTC")))
(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^js/JSJoda.Clock [] (js-invoke java.time.Clock "systemDefaultZone")))
(clojure.core/defn fixed {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.Instant java-time-Instant8536 ^js/JSJoda.ZoneId java-time-ZoneId8537] (js-invoke java.time.Clock "fixed" java-time-Instant8536 java-time-ZoneId8537)))
(clojure.core/defn tick-minutes {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId8538] (js-invoke java.time.Clock "tickMinutes" java-time-ZoneId8538)))
(clojure.core/defn tick-seconds {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId8539] (js-invoke java.time.Clock "tickSeconds" java-time-ZoneId8539)))
(clojure.core/defn millis {:arglists (quote (["java.time.Clock"]))} (^long [^js/JSJoda.Clock this8540] (.millis this8540)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.Clock" "java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock this8541 ^js/JSJoda.ZoneId java-time-ZoneId8542] (.withZone this8541 java-time-ZoneId8542)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.Clock"]))} (^js/JSJoda.ZoneId [^js/JSJoda.Clock this8543] (.zone this8543)))
(clojure.core/defn tick-millis {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId8544] (js-invoke java.time.Clock "tickMillis" java-time-ZoneId8544)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Clock"]))} (^int [^js/JSJoda.Clock this8545] (.hashCode this8545)))
(clojure.core/defn system {:arglists (quote (["java.time.ZoneId"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId8546] (js-invoke java.time.Clock "system" java-time-ZoneId8546)))
(clojure.core/defn instant {:arglists (quote (["java.time.Clock"]))} (^js/JSJoda.Instant [^js/JSJoda.Clock this8547] (.instant this8547)))
(clojure.core/defn equals {:arglists (quote (["java.time.Clock" "java.lang.Object"]))} (^boolean [^js/JSJoda.Clock this8548 ^java.lang.Object java-lang-Object8549] (.equals this8548 java-lang-Object8549)))
