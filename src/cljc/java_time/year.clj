(ns cljc.java-time.year (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Year]))
(def min-value java.time.Year/MIN_VALUE)
(def max-value java.time.Year/MAX_VALUE)
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Year this5199 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5200] (.range this5199 java-time-temporal-TemporalField5200)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Year [^java.lang.Integer int5201] (java.time.Year/of int5201)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^java.time.LocalDate [^java.time.Year this5202 ^java.lang.Integer int5203] (.atDay this5202 int5203)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Year [^java.time.Year this5204 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount5205] (.plus this5204 java-time-temporal-TemporalAmount5205)) (^java.time.Year [^java.time.Year this5206 ^long long5207 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit5208] (.plus this5206 long5207 java-time-temporal-TemporalUnit5208)))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.Year this5209 ^java.time.MonthDay java-time-MonthDay5210] (.isValidMonthDay this5209 java-time-MonthDay5210)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Year this5211 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery5212] (.query this5211 java-time-temporal-TemporalQuery5212)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^java.time.Year this5213] (.toString this5213)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this5214 ^java.time.Year java-time-Year5215] (.isBefore this5214 java-time-Year5215)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Year [^java.time.Year this5216 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount5217] (.minus this5216 java-time-temporal-TemporalAmount5217)) (^java.time.Year [^java.time.Year this5218 ^long long5219 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit5220] (.minus this5218 long5219 java-time-temporal-TemporalUnit5220)))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.time.LocalDate [^java.time.Year this5221 ^java.time.MonthDay java-time-MonthDay5222] (.atMonthDay this5221 java-time-MonthDay5222)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this5223] (.getValue this5223)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^java.time.Year this5224 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5225] (.getLong this5224 java-time-temporal-TemporalField5225)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "java.time.Month"] ["java.time.Year" "int"]))} (^java.time.YearMonth [this5226 G__5227] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Month G__5227)) (clojure.core/let [G__5227 ^"java.time.Month" G__5227] (.atMonth ^java.time.Year this5226 G__5227)) (clojure.core/and (clojure.core/instance? java.lang.Number G__5227)) (clojure.core/let [G__5227 (clojure.core/int G__5227)] (.atMonth ^java.time.Year this5226 G__5227)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Year this5228 ^java.time.temporal.Temporal java-time-temporal-Temporal5229 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit5230] (.until this5228 java-time-temporal-Temporal5229 java-time-temporal-TemporalUnit5230)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this5231] (.length this5231)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Year [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5232] (java.time.Year/from java-time-temporal-TemporalAccessor5232)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this5233 ^java.time.Year java-time-Year5234] (.isAfter this5233 java-time-Year5234)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this5235 G__5236] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__5236)) (clojure.core/let [G__5236 ^"java.time.temporal.ChronoUnit" G__5236] (.isSupported ^java.time.Year this5235 G__5236)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__5236)) (clojure.core/let [G__5236 ^"java.time.temporal.TemporalField" G__5236] (.isSupported ^java.time.Year this5235 G__5236)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this5237 ^long long5238] (.minusYears this5237 long5238)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence5239 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter5240] (java.time.Year/parse java-lang-CharSequence5239 java-time-format-DateTimeFormatter5240)) (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence5241] (java.time.Year/parse java-lang-CharSequence5241)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this5242] (.hashCode this5242)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Year this5243 ^java.time.temporal.Temporal java-time-temporal-Temporal5244] (.adjustInto this5243 java-time-temporal-Temporal5244)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^java.time.Year [^java.time.Year this5245 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster5246] (.with this5245 java-time-temporal-TemporalAdjuster5246)) (^java.time.Year [^java.time.Year this5247 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5248 ^long long5249] (.with this5247 java-time-temporal-TemporalField5248 long5249)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.Year [] (java.time.Year/now)) (^java.time.Year [G__5251] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__5251)) (clojure.core/let [G__5251 ^"java.time.ZoneId" G__5251] (java.time.Year/now G__5251)) (clojure.core/and (clojure.core/instance? java.time.Clock G__5251)) (clojure.core/let [G__5251 ^"java.time.Clock" G__5251] (java.time.Year/now G__5251)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Integer [^java.time.Year this5252 ^java.time.Year java-time-Year5253] (.compareTo this5252 java-time-Year5253)))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Year this5254 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5255] (.get this5254 java-time-temporal-TemporalField5255)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Year this5256 ^java.lang.Object java-lang-Object5257] (.equals this5256 java-lang-Object5257)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.Year this5258 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter5259] (.format this5258 java-time-format-DateTimeFormatter5259)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this5260 ^long long5261] (.plusYears this5260 long5261)))
