(ns cljc.java-time.year (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Year]))
(def min-value java.time.Year/MIN_VALUE)
(def max-value java.time.Year/MAX_VALUE)
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Year this60904 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60905] (.range this60904 java-time-temporal-TemporalField60905)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Year [^java.lang.Integer int60906] (java.time.Year/of int60906)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^java.time.LocalDate [^java.time.Year this60907 ^java.lang.Integer int60908] (.atDay this60907 int60908)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this60909 G__60910] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__60910)) (clojure.core/let [G__60910 ^"java.time.temporal.TemporalAmount" G__60910] (.plus ^java.time.Year this60909 G__60910)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__60910)) (clojure.core/let [G__60910 ^"java.time.temporal.TemporalAmount" G__60910] (.plus ^java.time.Year this60909 G__60910)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this60911 G__60912 G__60913] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60912) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60913)) (clojure.core/let [G__60912 (clojure.core/long G__60912) G__60913 ^"java.time.temporal.TemporalUnit" G__60913] (.plus ^java.time.Year this60911 G__60912 G__60913)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60912) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60913)) (clojure.core/let [G__60912 (clojure.core/long G__60912) G__60913 ^"java.time.temporal.TemporalUnit" G__60913] (.plus ^java.time.Year this60911 G__60912 G__60913)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.Year this60914 ^java.time.MonthDay java-time-MonthDay60915] (.isValidMonthDay this60914 java-time-MonthDay60915)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Year this60916 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery60917] (.query this60916 java-time-temporal-TemporalQuery60917)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^java.time.Year this60918] (.toString this60918)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this60919 ^java.time.Year java-time-Year60920] (.isBefore this60919 java-time-Year60920)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this60921 G__60922] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__60922)) (clojure.core/let [G__60922 ^"java.time.temporal.TemporalAmount" G__60922] (.minus ^java.time.Year this60921 G__60922)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__60922)) (clojure.core/let [G__60922 ^"java.time.temporal.TemporalAmount" G__60922] (.minus ^java.time.Year this60921 G__60922)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this60923 G__60924 G__60925] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60924) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60925)) (clojure.core/let [G__60924 (clojure.core/long G__60924) G__60925 ^"java.time.temporal.TemporalUnit" G__60925] (.minus ^java.time.Year this60923 G__60924 G__60925)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60924) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60925)) (clojure.core/let [G__60924 (clojure.core/long G__60924) G__60925 ^"java.time.temporal.TemporalUnit" G__60925] (.minus ^java.time.Year this60923 G__60924 G__60925)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.time.LocalDate [^java.time.Year this60926 ^java.time.MonthDay java-time-MonthDay60927] (.atMonthDay this60926 java-time-MonthDay60927)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this60928] (.getValue this60928)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^java.time.Year this60929 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60930] (.getLong this60929 java-time-temporal-TemporalField60930)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "java.time.Month"] ["java.time.Year" "int"]))} (^java.time.YearMonth [this60931 G__60932] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__60932)) (clojure.core/let [G__60932 ^"java.time.Month" G__60932] (.atMonth ^java.time.Year this60931 G__60932)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__60932)) (clojure.core/let [G__60932 (clojure.core/int G__60932)] (.atMonth ^java.time.Year this60931 G__60932)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Year this60933 ^java.time.temporal.Temporal java-time-temporal-Temporal60934 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit60935] (.until this60933 java-time-temporal-Temporal60934 java-time-temporal-TemporalUnit60935)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this60936] (.length this60936)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Year [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor60937] (java.time.Year/from java-time-temporal-TemporalAccessor60937)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this60938 ^java.time.Year java-time-Year60939] (.isAfter this60938 java-time-Year60939)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this60940 G__60941] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60941)) (clojure.core/let [G__60941 ^"java.time.temporal.TemporalUnit" G__60941] (.isSupported ^java.time.Year this60940 G__60941)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__60941)) (clojure.core/let [G__60941 ^"java.time.temporal.TemporalField" G__60941] (.isSupported ^java.time.Year this60940 G__60941)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this60942 ^long long60943] (.minusYears this60942 long60943)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence60944 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter60945] (java.time.Year/parse java-lang-CharSequence60944 java-time-format-DateTimeFormatter60945)) (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence60946] (java.time.Year/parse java-lang-CharSequence60946)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this60947] (.hashCode this60947)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Year this60948 ^java.time.temporal.Temporal java-time-temporal-Temporal60949] (.adjustInto this60948 java-time-temporal-Temporal60949)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this60950 G__60951] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__60951)) (clojure.core/let [G__60951 ^"java.time.temporal.TemporalAdjuster" G__60951] (.with ^java.time.Year this60950 G__60951)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__60951)) (clojure.core/let [G__60951 ^"java.time.temporal.TemporalAdjuster" G__60951] (.with ^java.time.Year this60950 G__60951)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this60952 G__60953 G__60954] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__60953) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60954)) (clojure.core/let [G__60953 ^"java.time.temporal.TemporalField" G__60953 G__60954 (clojure.core/long G__60954)] (.with ^java.time.Year this60952 G__60953 G__60954)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__60953) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60954)) (clojure.core/let [G__60953 ^"java.time.temporal.TemporalField" G__60953 G__60954 (clojure.core/long G__60954)] (.with ^java.time.Year this60952 G__60953 G__60954)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.Year [] (java.time.Year/now)) (^java.time.Year [G__60956] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__60956)) (clojure.core/let [G__60956 ^"java.time.ZoneId" G__60956] (java.time.Year/now G__60956)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__60956)) (clojure.core/let [G__60956 ^"java.time.Clock" G__60956] (java.time.Year/now G__60956)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.lang.Object"] ["java.time.Year" "java.time.Year"]))} (^java.lang.Integer [this60957 G__60958] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__60958)) (clojure.core/let [G__60958 ^"java.lang.Object" G__60958] (.compareTo ^java.time.Year this60957 G__60958)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Year") G__60958)) (clojure.core/let [G__60958 ^"java.time.Year" G__60958] (.compareTo ^java.time.Year this60957 G__60958)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Year this60959 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60960] (.get this60959 java-time-temporal-TemporalField60960)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Year this60961 ^java.lang.Object java-lang-Object60962] (.equals this60961 java-lang-Object60962)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.Year this60963 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter60964] (.format this60963 java-time-format-DateTimeFormatter60964)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this60965 ^long long60966] (.plusYears this60965 long60966)))
