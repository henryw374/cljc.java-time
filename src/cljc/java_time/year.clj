(ns cljc.java-time.year (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Year]))
(def min-value java.time.Year/MIN_VALUE)
(def max-value java.time.Year/MAX_VALUE)
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Year this5200 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5201] (.range this5200 java-time-temporal-TemporalField5201)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Year [^java.lang.Integer int5202] (java.time.Year/of int5202)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^java.time.LocalDate [^java.time.Year this5203 ^java.lang.Integer int5204] (.atDay this5203 int5204)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Year [^java.time.Year this5205 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount5206] (.plus this5205 java-time-temporal-TemporalAmount5206)) (^java.time.Year [^java.time.Year this5207 ^long long5208 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit5209] (.plus this5207 long5208 java-time-temporal-TemporalUnit5209)))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.Year this5210 ^java.time.MonthDay java-time-MonthDay5211] (.isValidMonthDay this5210 java-time-MonthDay5211)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Year this5212 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery5213] (.query this5212 java-time-temporal-TemporalQuery5213)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^java.time.Year this5214] (.toString this5214)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this5215 ^java.time.Year java-time-Year5216] (.isBefore this5215 java-time-Year5216)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Year [^java.time.Year this5217 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount5218] (.minus this5217 java-time-temporal-TemporalAmount5218)) (^java.time.Year [^java.time.Year this5219 ^long long5220 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit5221] (.minus this5219 long5220 java-time-temporal-TemporalUnit5221)))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.time.LocalDate [^java.time.Year this5222 ^java.time.MonthDay java-time-MonthDay5223] (.atMonthDay this5222 java-time-MonthDay5223)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this5224] (.getValue this5224)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^java.time.Year this5225 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5226] (.getLong this5225 java-time-temporal-TemporalField5226)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "int"] ["java.time.Year" "java.time.Month"]))} (^java.time.YearMonth [this5227 G__5228] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__5228)) (clojure.core/let [G__5228 (clojure.core/int G__5228)] (.atMonth ^java.time.Year this5227 G__5228)) (clojure.core/and (clojure.core/instance? java.time.Month G__5228)) (clojure.core/let [G__5228 ^"java.time.Month" G__5228] (.atMonth ^java.time.Year this5227 G__5228)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Year this5229 ^java.time.temporal.Temporal java-time-temporal-Temporal5230 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit5231] (.until this5229 java-time-temporal-Temporal5230 java-time-temporal-TemporalUnit5231)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this5232] (.length this5232)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Year [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor5233] (java.time.Year/from java-time-temporal-TemporalAccessor5233)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this5234 ^java.time.Year java-time-Year5235] (.isAfter this5234 java-time-Year5235)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"] ["java.time.Year" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this5236 G__5237] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__5237)) (clojure.core/let [G__5237 ^"java.time.temporal.TemporalField" G__5237] (.isSupported ^java.time.Year this5236 G__5237)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalUnit G__5237)) (clojure.core/let [G__5237 ^"java.time.temporal.TemporalUnit" G__5237] (.isSupported ^java.time.Year this5236 G__5237)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this5238 ^long long5239] (.minusYears this5238 long5239)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence5240 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter5241] (java.time.Year/parse java-lang-CharSequence5240 java-time-format-DateTimeFormatter5241)) (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence5242] (java.time.Year/parse java-lang-CharSequence5242)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this5243] (.hashCode this5243)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Year this5244 ^java.time.temporal.Temporal java-time-temporal-Temporal5245] (.adjustInto this5244 java-time-temporal-Temporal5245)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^java.time.Year [^java.time.Year this5246 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster5247] (.with this5246 java-time-temporal-TemporalAdjuster5247)) (^java.time.Year [^java.time.Year this5248 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5249 ^long long5250] (.with this5248 java-time-temporal-TemporalField5249 long5250)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.Year [] (java.time.Year/now)) (^java.time.Year [G__5252] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__5252)) (clojure.core/let [G__5252 ^"java.time.ZoneId" G__5252] (java.time.Year/now G__5252)) (clojure.core/and (clojure.core/instance? java.time.Clock G__5252)) (clojure.core/let [G__5252 ^"java.time.Clock" G__5252] (java.time.Year/now G__5252)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Integer [^java.time.Year this5253 ^java.time.Year java-time-Year5254] (.compareTo this5253 java-time-Year5254)))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Year this5255 ^java.time.temporal.TemporalField java-time-temporal-TemporalField5256] (.get this5255 java-time-temporal-TemporalField5256)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Year this5257 ^java.lang.Object java-lang-Object5258] (.equals this5257 java-lang-Object5258)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.Year this5259 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter5260] (.format this5259 java-time-format-DateTimeFormatter5260)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this5261 ^long long5262] (.plusYears this5261 long5262)))
