(ns cljc.java-time.year (:refer-clojure :exclude [abs get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Year]))
(def min-value java.time.Year/MIN_VALUE)
(def max-value java.time.Year/MAX_VALUE)
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Year this15096 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15097] (.range this15096 java-time-temporal-TemporalField15097)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Year [^java.lang.Integer int15098] (java.time.Year/of int15098)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^java.time.LocalDate [^java.time.Year this15099 ^java.lang.Integer int15100] (.atDay this15099 int15100)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Year [^java.time.Year this15101 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount15102] (.plus this15101 java-time-temporal-TemporalAmount15102)) (^java.time.Year [^java.time.Year this15103 ^long long15104 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit15105] (.plus this15103 long15104 java-time-temporal-TemporalUnit15105)))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.Year this15106 ^java.time.MonthDay java-time-MonthDay15107] (.isValidMonthDay this15106 java-time-MonthDay15107)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Year this15108 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery15109] (.query this15108 java-time-temporal-TemporalQuery15109)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^java.time.Year this15110] (.toString this15110)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this15111 ^java.time.Year java-time-Year15112] (.isBefore this15111 java-time-Year15112)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Year [^java.time.Year this15113 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount15114] (.minus this15113 java-time-temporal-TemporalAmount15114)) (^java.time.Year [^java.time.Year this15115 ^long long15116 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit15117] (.minus this15115 long15116 java-time-temporal-TemporalUnit15117)))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.time.LocalDate [^java.time.Year this15118 ^java.time.MonthDay java-time-MonthDay15119] (.atMonthDay this15118 java-time-MonthDay15119)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this15120] (.getValue this15120)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^java.time.Year this15121 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15122] (.getLong this15121 java-time-temporal-TemporalField15122)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "int"] ["java.time.Year" "java.time.Month"]))} (^java.time.YearMonth [this15123 G__15124] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__15124)) (clojure.core/let [G__15124 (clojure.core/int G__15124)] (.atMonth ^java.time.Year this15123 G__15124)) (clojure.core/and (clojure.core/instance? java.time.Month G__15124)) (clojure.core/let [G__15124 ^"java.time.Month" G__15124] (.atMonth ^java.time.Year this15123 G__15124)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Year this15125 ^java.time.temporal.Temporal java-time-temporal-Temporal15126 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit15127] (.until this15125 java-time-temporal-Temporal15126 java-time-temporal-TemporalUnit15127)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this15128] (.length this15128)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Year [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor15129] (java.time.Year/from java-time-temporal-TemporalAccessor15129)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this15130 ^java.time.Year java-time-Year15131] (.isAfter this15130 java-time-Year15131)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"] ["java.time.Year" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this15132 G__15133] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__15133)) (clojure.core/let [G__15133 ^"java.time.temporal.TemporalField" G__15133] (.isSupported ^java.time.Year this15132 G__15133)) (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__15133)) (clojure.core/let [G__15133 ^"java.time.temporal.ChronoUnit" G__15133] (.isSupported ^java.time.Year this15132 G__15133)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this15134 ^long long15135] (.minusYears this15134 long15135)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence15136 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter15137] (java.time.Year/parse java-lang-CharSequence15136 java-time-format-DateTimeFormatter15137)) (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence15138] (java.time.Year/parse java-lang-CharSequence15138)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this15139] (.hashCode this15139)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Year this15140 ^java.time.temporal.Temporal java-time-temporal-Temporal15141] (.adjustInto this15140 java-time-temporal-Temporal15141)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"]))} (^java.time.Year [^java.time.Year this15142 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15143 ^long long15144] (.with this15142 java-time-temporal-TemporalField15143 long15144)) (^java.time.Year [^java.time.Year this15145 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster15146] (.with this15145 java-time-temporal-TemporalAdjuster15146)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.Year [] (java.time.Year/now)) (^java.time.Year [G__15148] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__15148)) (clojure.core/let [G__15148 ^"java.time.Clock" G__15148] (java.time.Year/now G__15148)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__15148)) (clojure.core/let [G__15148 ^"java.time.ZoneId" G__15148] (java.time.Year/now G__15148)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Integer [^java.time.Year this15149 ^java.time.Year java-time-Year15150] (.compareTo this15149 java-time-Year15150)))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Year this15151 ^java.time.temporal.TemporalField java-time-temporal-TemporalField15152] (.get this15151 java-time-temporal-TemporalField15152)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Year this15153 ^java.lang.Object java-lang-Object15154] (.equals this15153 java-lang-Object15154)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.Year this15155 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter15156] (.format this15155 java-time-format-DateTimeFormatter15156)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this15157 ^long long15158] (.plusYears this15157 long15158)))
