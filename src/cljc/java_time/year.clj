(ns cljc.java-time.year (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Year]))
(def min-value java.time.Year/MIN_VALUE)
(def max-value java.time.Year/MAX_VALUE)
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Year this12421 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12422] (.range this12421 java-time-temporal-TemporalField12422)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Year [^java.lang.Integer int12423] (. java.time.Year of int12423)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^java.time.LocalDate [^java.time.Year this12424 ^java.lang.Integer int12425] (.atDay this12424 int12425)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this12426 G__12427] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12427)) (clojure.core/let [G__12427 ^"java.time.temporal.TemporalAmount" G__12427] (.plus ^java.time.Year this12426 G__12427)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12427)) (clojure.core/let [G__12427 ^"java.time.temporal.TemporalAmount" G__12427] (.plus ^java.time.Year this12426 G__12427)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this12428 G__12429 G__12430] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12429) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12430)) (clojure.core/let [G__12429 (clojure.core/long G__12429) G__12430 ^"java.time.temporal.TemporalUnit" G__12430] (.plus ^java.time.Year this12428 G__12429 G__12430)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12429) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12430)) (clojure.core/let [G__12429 (clojure.core/long G__12429) G__12430 ^"java.time.temporal.TemporalUnit" G__12430] (.plus ^java.time.Year this12428 G__12429 G__12430)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.Year this12431 ^java.time.MonthDay java-time-MonthDay12432] (.isValidMonthDay this12431 java-time-MonthDay12432)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Year this12433 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12434] (.query this12433 java-time-temporal-TemporalQuery12434)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^java.time.Year this12435] (.toString this12435)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this12436 ^java.time.Year java-time-Year12437] (.isBefore this12436 java-time-Year12437)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this12438 G__12439] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12439)) (clojure.core/let [G__12439 ^"java.time.temporal.TemporalAmount" G__12439] (.minus ^java.time.Year this12438 G__12439)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12439)) (clojure.core/let [G__12439 ^"java.time.temporal.TemporalAmount" G__12439] (.minus ^java.time.Year this12438 G__12439)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this12440 G__12441 G__12442] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12441) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12442)) (clojure.core/let [G__12441 (clojure.core/long G__12441) G__12442 ^"java.time.temporal.TemporalUnit" G__12442] (.minus ^java.time.Year this12440 G__12441 G__12442)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12441) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12442)) (clojure.core/let [G__12441 (clojure.core/long G__12441) G__12442 ^"java.time.temporal.TemporalUnit" G__12442] (.minus ^java.time.Year this12440 G__12441 G__12442)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.time.LocalDate [^java.time.Year this12443 ^java.time.MonthDay java-time-MonthDay12444] (.atMonthDay this12443 java-time-MonthDay12444)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this12445] (.getValue this12445)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^java.time.Year this12446 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12447] (.getLong this12446 java-time-temporal-TemporalField12447)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "java.time.Month"] ["java.time.Year" "int"]))} (^java.time.YearMonth [this12448 G__12449] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__12449)) (clojure.core/let [G__12449 ^"java.time.Month" G__12449] (.atMonth ^java.time.Year this12448 G__12449)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__12449)) (clojure.core/let [G__12449 (clojure.core/int G__12449)] (.atMonth ^java.time.Year this12448 G__12449)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Year this12450 ^java.time.temporal.Temporal java-time-temporal-Temporal12451 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12452] (.until this12450 java-time-temporal-Temporal12451 java-time-temporal-TemporalUnit12452)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this12453] (.length this12453)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Year [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12454] (. java.time.Year from java-time-temporal-TemporalAccessor12454)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this12455 ^java.time.Year java-time-Year12456] (.isAfter this12455 java-time-Year12456)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this12457 G__12458] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12458)) (clojure.core/let [G__12458 ^"java.time.temporal.TemporalUnit" G__12458] (.isSupported ^java.time.Year this12457 G__12458)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12458)) (clojure.core/let [G__12458 ^"java.time.temporal.TemporalField" G__12458] (.isSupported ^java.time.Year this12457 G__12458)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this12459 ^long long12460] (.minusYears this12459 long12460)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence12461 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12462] (. java.time.Year parse java-lang-CharSequence12461 java-time-format-DateTimeFormatter12462)) (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence12463] (. java.time.Year parse java-lang-CharSequence12463)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this12464] (.hashCode this12464)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Year this12465 ^java.time.temporal.Temporal java-time-temporal-Temporal12466] (.adjustInto this12465 java-time-temporal-Temporal12466)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this12467 G__12468] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12468)) (clojure.core/let [G__12468 ^"java.time.temporal.TemporalAdjuster" G__12468] (.with ^java.time.Year this12467 G__12468)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12468)) (clojure.core/let [G__12468 ^"java.time.temporal.TemporalAdjuster" G__12468] (.with ^java.time.Year this12467 G__12468)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this12469 G__12470 G__12471] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12470) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12471)) (clojure.core/let [G__12470 ^"java.time.temporal.TemporalField" G__12470 G__12471 (clojure.core/long G__12471)] (.with ^java.time.Year this12469 G__12470 G__12471)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12470) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12471)) (clojure.core/let [G__12470 ^"java.time.temporal.TemporalField" G__12470 G__12471 (clojure.core/long G__12471)] (.with ^java.time.Year this12469 G__12470 G__12471)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.Year [] (. java.time.Year now)) (^java.time.Year [G__12473] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12473)) (clojure.core/let [G__12473 ^"java.time.ZoneId" G__12473] (. java.time.Year now G__12473)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__12473)) (clojure.core/let [G__12473 ^"java.time.Clock" G__12473] (. java.time.Year now G__12473)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.lang.Object"] ["java.time.Year" "java.time.Year"]))} (^java.lang.Integer [this12474 G__12475] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__12475)) (clojure.core/let [G__12475 ^"java.lang.Object" G__12475] (.compareTo ^java.time.Year this12474 G__12475)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Year") G__12475)) (clojure.core/let [G__12475 ^"java.time.Year" G__12475] (.compareTo ^java.time.Year this12474 G__12475)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Year this12476 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12477] (.get this12476 java-time-temporal-TemporalField12477)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Year this12478 ^java.lang.Object java-lang-Object12479] (.equals this12478 java-lang-Object12479)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.Year this12480 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12481] (.format this12480 java-time-format-DateTimeFormatter12481)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this12482 ^long long12483] (.plusYears this12482 long12483)))
