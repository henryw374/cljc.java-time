(ns cljc.java-time.year (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time Year]))
(def min-value java.time.Year/MIN_VALUE)
(def max-value java.time.Year/MAX_VALUE)
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Year this14717 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14718] (.range this14717 java-time-temporal-TemporalField14718)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Year [^java.lang.Integer int14719] (java.time.Year/of int14719)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^java.time.LocalDate [^java.time.Year this14720 ^java.lang.Integer int14721] (.atDay this14720 int14721)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"]))} (^java.time.Year [^java.time.Year this14722 ^long long14723 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14724] (.plus this14722 long14723 java-time-temporal-TemporalUnit14724)) (^java.time.Year [^java.time.Year this14725 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount14726] (.plus this14725 java-time-temporal-TemporalAmount14726)))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.Year this14727 ^java.time.MonthDay java-time-MonthDay14728] (.isValidMonthDay this14727 java-time-MonthDay14728)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Year this14729 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery14730] (.query this14729 java-time-temporal-TemporalQuery14730)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^java.time.Year this14731] (.toString this14731)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this14732 ^java.time.Year java-time-Year14733] (.isBefore this14732 java-time-Year14733)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"]))} (^java.time.Year [^java.time.Year this14734 ^long long14735 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14736] (.minus this14734 long14735 java-time-temporal-TemporalUnit14736)) (^java.time.Year [^java.time.Year this14737 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount14738] (.minus this14737 java-time-temporal-TemporalAmount14738)))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.time.LocalDate [^java.time.Year this14739 ^java.time.MonthDay java-time-MonthDay14740] (.atMonthDay this14739 java-time-MonthDay14740)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this14741] (.getValue this14741)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^java.time.Year this14742 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14743] (.getLong this14742 java-time-temporal-TemporalField14743)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "java.time.Month"] ["java.time.Year" "int"]))} (^java.time.YearMonth [this14744 G__14745] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Month G__14745)) (clojure.core/let [G__14745 ^"java.time.Month" G__14745] (.atMonth ^java.time.Year this14744 G__14745)) (clojure.core/and (clojure.core/instance? java.lang.Number G__14745)) (clojure.core/let [G__14745 (clojure.core/int G__14745)] (.atMonth ^java.time.Year this14744 G__14745)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Year this14746 ^java.time.temporal.Temporal java-time-temporal-Temporal14747 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit14748] (.until this14746 java-time-temporal-Temporal14747 java-time-temporal-TemporalUnit14748)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this14749] (.length this14749)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Year [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor14750] (java.time.Year/from java-time-temporal-TemporalAccessor14750)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this14751 ^java.time.Year java-time-Year14752] (.isAfter this14751 java-time-Year14752)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"] ["java.time.Year" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this14753 G__14754] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__14754)) (clojure.core/let [G__14754 ^"java.time.temporal.TemporalField" G__14754] (.isSupported ^java.time.Year this14753 G__14754)) (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__14754)) (clojure.core/let [G__14754 ^"java.time.temporal.ChronoUnit" G__14754] (.isSupported ^java.time.Year this14753 G__14754)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this14755 ^long long14756] (.minusYears this14755 long14756)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence14757] (java.time.Year/parse java-lang-CharSequence14757)) (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence14758 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter14759] (java.time.Year/parse java-lang-CharSequence14758 java-time-format-DateTimeFormatter14759)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this14760] (.hashCode this14760)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Year this14761 ^java.time.temporal.Temporal java-time-temporal-Temporal14762] (.adjustInto this14761 java-time-temporal-Temporal14762)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^java.time.Year [^java.time.Year this14763 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster14764] (.with this14763 java-time-temporal-TemporalAdjuster14764)) (^java.time.Year [^java.time.Year this14765 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14766 ^long long14767] (.with this14765 java-time-temporal-TemporalField14766 long14767)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.Year [] (java.time.Year/now)) (^java.time.Year [G__14769] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__14769)) (clojure.core/let [G__14769 ^"java.time.Clock" G__14769] (java.time.Year/now G__14769)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__14769)) (clojure.core/let [G__14769 ^"java.time.ZoneId" G__14769] (java.time.Year/now G__14769)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Integer [^java.time.Year this14770 ^java.time.Year java-time-Year14771] (.compareTo this14770 java-time-Year14771)))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Year this14772 ^java.time.temporal.TemporalField java-time-temporal-TemporalField14773] (.get this14772 java-time-temporal-TemporalField14773)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Year this14774 ^java.lang.Object java-lang-Object14775] (.equals this14774 java-lang-Object14775)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.Year this14776 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter14777] (.format this14776 java-time-format-DateTimeFormatter14777)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this14778 ^long long14779] (.plusYears this14778 long14779)))
