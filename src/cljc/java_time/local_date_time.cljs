(ns cljc.java-time.local-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalDateTime]]))
(def max (goog.object/get java.time.LocalDateTime "MAX"))
(def min (goog.object/get java.time.LocalDateTime "MIN"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59223 ^long long59224] (.minusMinutes this59223 long59224)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59225 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit59226] (.truncatedTo this59225 java-time-temporal-TemporalUnit59226)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59227 ^long long59228] (.minusWeeks this59227 long59228)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.Instant [^js/JSJoda.LocalDateTime this59229 ^js/JSJoda.ZoneOffset java-time-ZoneOffset59230] (.toInstant this59229 java-time-ZoneOffset59230)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59231 ^long long59232] (.plusWeeks this59231 long59232)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalDateTime this59233 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59234] (.range this59233 java-time-temporal-TemporalField59234)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^js/JSJoda.LocalDateTime [^long long59235 ^int int59236 ^js/JSJoda.ZoneOffset java-time-ZoneOffset59237] (js-invoke java.time.LocalDateTime "ofEpochSecond" long59235 int59236 java-time-ZoneOffset59237)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this59238] (.hour this59238)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDateTime this59239 ^js/JSJoda.ZoneOffset java-time-ZoneOffset59240] (.atOffset this59239 java-time-ZoneOffset59240)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59241 ^long long59242] (.minusHours this59241 long59242)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["int" "java.time.Month" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"]))} (^js/JSJoda.LocalDateTime [G__59244 G__59245 G__59246 G__59247 G__59248 G__59249 G__59250] (js-invoke java.time.LocalDateTime "of" G__59244 G__59245 G__59246 G__59247 G__59248 G__59249 G__59250)) (^js/JSJoda.LocalDateTime [G__59252 G__59253 G__59254 G__59255 G__59256] (js-invoke java.time.LocalDateTime "of" G__59252 G__59253 G__59254 G__59255 G__59256)) (^js/JSJoda.LocalDateTime [G__59258 G__59259 G__59260 G__59261 G__59262 G__59263] (js-invoke java.time.LocalDateTime "of" G__59258 G__59259 G__59260 G__59261 G__59262 G__59263)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate java-time-LocalDate59264 ^js/JSJoda.LocalTime java-time-LocalTime59265] (js-invoke java.time.LocalDateTime "of" java-time-LocalDate59264 java-time-LocalTime59265)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59266 ^int int59267] (.withMonth this59266 int59267)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this59268 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime59269] (.isEqual this59268 java-time-chrono-ChronoLocalDateTime59269)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this59270] (.nano this59270)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this59271] (.year this59271)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59272 ^long long59273] (.minusSeconds this59272 long59273)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this59274] (.second this59274)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59275 ^long long59276] (.plusNanos this59275 long59276)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this59277] (.dayOfYear this59277)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this59278 G__59279 G__59280] (.plus ^js/JSJoda.LocalDateTime this59278 G__59279 G__59280)) (^java.lang.Object [this59281 G__59282] (.plus ^js/JSJoda.LocalDateTime this59281 G__59282)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59283 ^int int59284] (.withHour this59283 int59284)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59285 ^int int59286] (.withMinute this59285 int59286)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59287 ^long long59288] (.plusMinutes this59287 long59288)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalDateTime this59289 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery59290] (.query this59289 java-time-temporal-TemporalQuery59290)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.LocalDateTime this59291] (.dayOfWeek this59291)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^js/JSJoda.LocalDateTime this59292] (.toString this59292)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59293 ^long long59294] (.plusMonths this59293 long59294)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this59295 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime59296] (.isBefore this59295 java-time-chrono-ChronoLocalDateTime59296)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59297 ^long long59298] (.minusMonths this59297 long59298)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this59299 G__59300 G__59301] (.minus ^js/JSJoda.LocalDateTime this59299 G__59300 G__59301)) (^java.lang.Object [this59302 G__59303] (.minus ^js/JSJoda.LocalDateTime this59302 G__59303)))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this59304 G__59305] (.atZone ^js/JSJoda.LocalDateTime this59304 G__59305)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59306 ^long long59307] (.plusHours this59306 long59307)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59308 ^long long59309] (.plusDays this59308 long59309)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalDateTime this59310] (.toLocalTime this59310)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalDateTime this59311 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59312] (.getLong this59311 java-time-temporal-TemporalField59312)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59313 ^int int59314] (.withYear this59313 int59314)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59315 ^int int59316] (.withNano this59315 int59316)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^js/JSJoda.LocalDateTime this59317 ^js/JSJoda.ZoneOffset java-time-ZoneOffset59318] (.toEpochSecond this59317 java-time-ZoneOffset59318)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.LocalDateTime this59319 ^js/JSJoda.Temporal java-time-temporal-Temporal59320 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit59321] (.until this59319 java-time-temporal-Temporal59320 java-time-temporal-TemporalUnit59321)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59322 ^int int59323] (.withDayOfMonth this59322 int59323)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this59324] (.dayOfMonth this59324)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor59325] (js-invoke java.time.LocalDateTime "from" java-time-temporal-TemporalAccessor59325)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this59326 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime59327] (.isAfter this59326 java-time-chrono-ChronoLocalDateTime59327)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59328 ^long long59329] (.minusNanos this59328 long59329)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^boolean [this59330 G__59331] (.isSupported ^js/JSJoda.LocalDateTime this59330 G__59331)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59332 ^long long59333] (.minusYears this59332 long59333)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.Chronology [^js/JSJoda.LocalDateTime this59334] (.chronology this59334)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence59335] (js-invoke java.time.LocalDateTime "parse" java-lang-CharSequence59335)) (^js/JSJoda.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence59336 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter59337] (js-invoke java.time.LocalDateTime "parse" java-lang-CharSequence59336 java-time-format-DateTimeFormatter59337)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59338 ^int int59339] (.withSecond this59338 int59339)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"] ["java.time.LocalDateTime"]))} (^java.lang.Object [this59340] (.toLocalDate ^js/JSJoda.LocalDateTime this59340)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this59341] (.minute this59341)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this59342] (.hashCode this59342)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalDateTime this59343 ^js/JSJoda.Temporal java-time-temporal-Temporal59344] (.adjustInto this59343 java-time-temporal-Temporal59344)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this59345 G__59346] (.with ^js/JSJoda.LocalDateTime this59345 G__59346)) (^java.lang.Object [this59347 G__59348 G__59349] (.with ^js/JSJoda.LocalDateTime this59347 G__59348 G__59349)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [] (js-invoke java.time.LocalDateTime "now")) (^js/JSJoda.LocalDateTime [G__59351] (js-invoke java.time.LocalDateTime "now" G__59351)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this59352] (.monthValue this59352)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59353 ^int int59354] (.withDayOfYear this59353 int59354)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"] ["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^int [this59355 G__59356] (.compareTo ^js/JSJoda.LocalDateTime this59355 G__59356)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.LocalDateTime this59357] (.month this59357)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.Instant java-time-Instant59358 ^js/JSJoda.ZoneId java-time-ZoneId59359] (js-invoke java.time.LocalDateTime "ofInstant" java-time-Instant59358 java-time-ZoneId59359)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59360 ^long long59361] (.plusSeconds this59360 long59361)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalDateTime this59362 ^js/JSJoda.TemporalField java-time-temporal-TemporalField59363] (.get this59362 java-time-temporal-TemporalField59363)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalDateTime this59364 ^java.lang.Object java-lang-Object59365] (.equals this59364 java-lang-Object59365)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalDateTime this59366 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter59367] (.format this59366 java-time-format-DateTimeFormatter59367)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59368 ^long long59369] (.plusYears this59368 long59369)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this59370 ^long long59371] (.minusDays this59370 long59371)))
