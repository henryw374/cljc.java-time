(ns cljc.java-time.local-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalDateTime]]))
(def max (goog.object/get java.time.LocalDateTime "MAX"))
(def min (goog.object/get java.time.LocalDateTime "MIN"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3518 ^long long3519] (.minusMinutes this3518 long3519)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3520 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3521] (.truncatedTo this3520 java-time-temporal-TemporalUnit3521)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3522 ^long long3523] (.minusWeeks this3522 long3523)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.Instant [^js/JSJoda.LocalDateTime this3524 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3525] (.toInstant this3524 java-time-ZoneOffset3525)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3526 ^long long3527] (.plusWeeks this3526 long3527)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalDateTime this3528 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3529] (.range this3528 java-time-temporal-TemporalField3529)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^js/JSJoda.LocalDateTime [^long long3530 ^int int3531 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3532] (js-invoke java.time.LocalDateTime "ofEpochSecond" long3530 int3531 java-time-ZoneOffset3532)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3533] (.hour this3533)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDateTime this3534 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3535] (.atOffset this3534 java-time-ZoneOffset3535)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3536 ^long long3537] (.minusHours this3536 long3537)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"]))} (^js/JSJoda.LocalDateTime [G__3539 G__3540 G__3541 G__3542 G__3543] (js-invoke java.time.LocalDateTime "of" G__3539 G__3540 G__3541 G__3542 G__3543)) (^js/JSJoda.LocalDateTime [G__3545 G__3546 G__3547 G__3548 G__3549 G__3550 G__3551] (js-invoke java.time.LocalDateTime "of" G__3545 G__3546 G__3547 G__3548 G__3549 G__3550 G__3551)) (^js/JSJoda.LocalDateTime [G__3553 G__3554 G__3555 G__3556 G__3557 G__3558] (js-invoke java.time.LocalDateTime "of" G__3553 G__3554 G__3555 G__3556 G__3557 G__3558)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate java-time-LocalDate3559 ^js/JSJoda.LocalTime java-time-LocalTime3560] (js-invoke java.time.LocalDateTime "of" java-time-LocalDate3559 java-time-LocalTime3560)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3561 ^int int3562] (.withMonth this3561 int3562)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this3563 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3564] (.isEqual this3563 java-time-chrono-ChronoLocalDateTime3564)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3565] (.nano this3565)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3566] (.year this3566)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3567 ^long long3568] (.minusSeconds this3567 long3568)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3569] (.second this3569)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3570 ^long long3571] (.plusNanos this3570 long3571)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3572] (.dayOfYear this3572)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3573 ^long long3574 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3575] (.plus this3573 long3574 java-time-temporal-TemporalUnit3575)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3576 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3577] (.plus this3576 java-time-temporal-TemporalAmount3577)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3578 ^int int3579] (.withHour this3578 int3579)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3580 ^int int3581] (.withMinute this3580 int3581)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3582 ^long long3583] (.plusMinutes this3582 long3583)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalDateTime this3584 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery3585] (.query this3584 java-time-temporal-TemporalQuery3585)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.LocalDateTime this3586] (.dayOfWeek this3586)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^js/JSJoda.LocalDateTime this3587] (.toString this3587)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3588 ^long long3589] (.plusMonths this3588 long3589)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this3590 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3591] (.isBefore this3590 java-time-chrono-ChronoLocalDateTime3591)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3592 ^long long3593] (.minusMonths this3592 long3593)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3594 ^long long3595 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3596] (.minus this3594 long3595 java-time-temporal-TemporalUnit3596)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3597 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3598] (.minus this3597 java-time-temporal-TemporalAmount3598)))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime this3599 ^js/JSJoda.ZoneId java-time-ZoneId3600] (.atZone this3599 java-time-ZoneId3600)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3601 ^long long3602] (.plusHours this3601 long3602)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3603 ^long long3604] (.plusDays this3603 long3604)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalDateTime this3605] (.toLocalTime this3605)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalDateTime this3606 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3607] (.getLong this3606 java-time-temporal-TemporalField3607)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3608 ^int int3609] (.withYear this3608 int3609)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3610 ^int int3611] (.withNano this3610 int3611)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^js/JSJoda.LocalDateTime this3612 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3613] (.toEpochSecond this3612 java-time-ZoneOffset3613)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.LocalDateTime this3614 ^js/JSJoda.Temporal java-time-temporal-Temporal3615 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3616] (.until this3614 java-time-temporal-Temporal3615 java-time-temporal-TemporalUnit3616)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3617 ^int int3618] (.withDayOfMonth this3617 int3618)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3619] (.dayOfMonth this3619)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor3620] (js-invoke java.time.LocalDateTime "from" java-time-temporal-TemporalAccessor3620)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this3621 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3622] (.isAfter this3621 java-time-chrono-ChronoLocalDateTime3622)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3623 ^long long3624] (.minusNanos this3623 long3624)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"] ["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^boolean [this3625 G__3626] (.isSupported ^js/JSJoda.LocalDateTime this3625 G__3626)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3627 ^long long3628] (.minusYears this3627 long3628)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.Chronology [^js/JSJoda.LocalDateTime this3629] (.chronology this3629)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence3630] (js-invoke java.time.LocalDateTime "parse" java-lang-CharSequence3630)) (^js/JSJoda.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence3631 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter3632] (js-invoke java.time.LocalDateTime "parse" java-lang-CharSequence3631 java-time-format-DateTimeFormatter3632)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3633 ^int int3634] (.withSecond this3633 int3634)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDateTime this3635] (.toLocalDate this3635)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3636] (.minute this3636)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3637] (.hashCode this3637)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalDateTime this3638 ^js/JSJoda.Temporal java-time-temporal-Temporal3639] (.adjustInto this3638 java-time-temporal-Temporal3639)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3640 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster3641] (.with this3640 java-time-temporal-TemporalAdjuster3641)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3642 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3643 ^long long3644] (.with this3642 java-time-temporal-TemporalField3643 long3644)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [] (js-invoke java.time.LocalDateTime "now")) (^js/JSJoda.LocalDateTime [G__3646] (js-invoke java.time.LocalDateTime "now" G__3646)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3647] (.monthValue this3647)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3648 ^int int3649] (.withDayOfYear this3648 int3649)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3650 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3651] (.compareTo this3650 java-time-chrono-ChronoLocalDateTime3651)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.LocalDateTime this3652] (.month this3652)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.Instant java-time-Instant3653 ^js/JSJoda.ZoneId java-time-ZoneId3654] (js-invoke java.time.LocalDateTime "ofInstant" java-time-Instant3653 java-time-ZoneId3654)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3655 ^long long3656] (.plusSeconds this3655 long3656)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalDateTime this3657 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3658] (.get this3657 java-time-temporal-TemporalField3658)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalDateTime this3659 ^java.lang.Object java-lang-Object3660] (.equals this3659 java-lang-Object3660)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalDateTime this3661 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter3662] (.format this3661 java-time-format-DateTimeFormatter3662)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3663 ^long long3664] (.plusYears this3663 long3664)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3665 ^long long3666] (.minusDays this3665 long3666)))
