(ns cljc.java-time.local-date-time (:require [java.time :refer [LocalDateTime]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def max (. java.time.LocalDateTime -MAX))
(def min (. java.time.LocalDateTime -MIN))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48732 ^long long48733] (.minusMinutes this48732 long48733)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48734 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit48735] (.truncatedTo this48734 java-time-temporal-TemporalUnit48735)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48736 ^long long48737] (.minusWeeks this48736 long48737)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.Instant [^java.time.LocalDateTime this48738 ^java.time.ZoneOffset java-time-ZoneOffset48739] (.toInstant this48738 java-time-ZoneOffset48739)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48740 ^long long48741] (.plusWeeks this48740 long48741)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDateTime this48742 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48743] (.range this48742 java-time-temporal-TemporalField48743)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^java.time.LocalDateTime [^long long48744 ^java.lang.Integer int48745 ^java.time.ZoneOffset java-time-ZoneOffset48746] (. java.time.LocalDateTime ofEpochSecond long48744 int48745 java-time-ZoneOffset48746)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48747] (.hour this48747)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime this48748 ^java.time.ZoneOffset java-time-ZoneOffset48749] (.atOffset this48748 java-time-ZoneOffset48749)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48750 ^long long48751] (.minusHours this48750 long48751)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["int" "java.time.Month" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"]))} (^java.time.LocalDateTime [G__48753 G__48754 G__48755 G__48756 G__48757] (. java.time.LocalDateTime of G__48753 G__48754 G__48755 G__48756 G__48757)) (^java.time.LocalDateTime [G__48759 G__48760 G__48761 G__48762 G__48763 G__48764 G__48765] (. java.time.LocalDateTime of G__48759 G__48760 G__48761 G__48762 G__48763 G__48764 G__48765)) (^java.time.LocalDateTime [^java.time.LocalDate java-time-LocalDate48766 ^java.time.LocalTime java-time-LocalTime48767] (. java.time.LocalDateTime of java-time-LocalDate48766 java-time-LocalTime48767)) (^java.time.LocalDateTime [G__48769 G__48770 G__48771 G__48772 G__48773 G__48774] (. java.time.LocalDateTime of G__48769 G__48770 G__48771 G__48772 G__48773 G__48774)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48775 ^java.lang.Integer int48776] (.withMonth this48775 int48776)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this48777 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime48778] (.isEqual this48777 java-time-chrono-ChronoLocalDateTime48778)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48779] (.nano this48779)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48780] (.year this48780)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48781 ^long long48782] (.minusSeconds this48781 long48782)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48783] (.second this48783)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48784 ^long long48785] (.plusNanos this48784 long48785)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48786] (.dayOfYear this48786)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this48787 G__48788 G__48789] (.plus ^java.time.LocalDateTime this48787 G__48788 G__48789)) (^java.lang.Object [this48790 G__48791] (.plus ^java.time.LocalDateTime this48790 G__48791)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48792 ^java.lang.Integer int48793] (.withHour this48792 int48793)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48794 ^java.lang.Integer int48795] (.withMinute this48794 int48795)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48796 ^long long48797] (.plusMinutes this48796 long48797)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDateTime this48798 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery48799] (.query this48798 java-time-temporal-TemporalQuery48799)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.DayOfWeek [^java.time.LocalDateTime this48800] (.dayOfWeek this48800)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^java.time.LocalDateTime this48801] (.toString this48801)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48802 ^long long48803] (.plusMonths this48802 long48803)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this48804 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime48805] (.isBefore this48804 java-time-chrono-ChronoLocalDateTime48805)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48806 ^long long48807] (.minusMonths this48806 long48807)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this48808 G__48809] (.minus ^java.time.LocalDateTime this48808 G__48809)) (^java.lang.Object [this48810 G__48811 G__48812] (.minus ^java.time.LocalDateTime this48810 G__48811 G__48812)))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this48813 G__48814] (.atZone ^java.time.LocalDateTime this48813 G__48814)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48815 ^long long48816] (.plusHours this48815 long48816)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48817 ^long long48818] (.plusDays this48817 long48818)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalTime [^java.time.LocalDateTime this48819] (.toLocalTime this48819)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDateTime this48820 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48821] (.getLong this48820 java-time-temporal-TemporalField48821)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48822 ^java.lang.Integer int48823] (.withYear this48822 int48823)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48824 ^java.lang.Integer int48825] (.withNano this48824 int48825)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDateTime this48826 ^java.time.ZoneOffset java-time-ZoneOffset48827] (.toEpochSecond this48826 java-time-ZoneOffset48827)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalDateTime this48828 ^java.time.temporal.Temporal java-time-temporal-Temporal48829 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit48830] (.until this48828 java-time-temporal-Temporal48829 java-time-temporal-TemporalUnit48830)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48831 ^java.lang.Integer int48832] (.withDayOfMonth this48831 int48832)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48833] (.dayOfMonth this48833)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor48834] (. java.time.LocalDateTime from java-time-temporal-TemporalAccessor48834)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this48835 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime48836] (.isAfter this48835 java-time-chrono-ChronoLocalDateTime48836)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48837 ^long long48838] (.minusNanos this48837 long48838)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this48839 G__48840] (.isSupported ^java.time.LocalDateTime this48839 G__48840)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48841 ^long long48842] (.minusYears this48841 long48842)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.chrono.Chronology [^java.time.LocalDateTime this48843] (.chronology this48843)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence48844 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter48845] (. java.time.LocalDateTime parse java-lang-CharSequence48844 java-time-format-DateTimeFormatter48845)) (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence48846] (. java.time.LocalDateTime parse java-lang-CharSequence48846)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48847 ^java.lang.Integer int48848] (.withSecond this48847 int48848)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"] ["java.time.LocalDateTime"]))} (^java.lang.Object [this48849] (.toLocalDate ^java.time.LocalDateTime this48849)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48850] (.minute this48850)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48851] (.hashCode this48851)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDateTime this48852 ^java.time.temporal.Temporal java-time-temporal-Temporal48853] (.adjustInto this48852 java-time-temporal-Temporal48853)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this48854 G__48855 G__48856] (.with ^java.time.LocalDateTime this48854 G__48855 G__48856)) (^java.lang.Object [this48857 G__48858] (.with ^java.time.LocalDateTime this48857 G__48858)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDateTime [] (. java.time.LocalDateTime now)) (^java.time.LocalDateTime [G__48860] (. java.time.LocalDateTime now G__48860)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48861] (.monthValue this48861)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48862 ^java.lang.Integer int48863] (.withDayOfYear this48862 int48863)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"] ["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Integer [this48864 G__48865] (.compareTo ^java.time.LocalDateTime this48864 G__48865)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.Month [^java.time.LocalDateTime this48866] (.month this48866)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.Instant java-time-Instant48867 ^java.time.ZoneId java-time-ZoneId48868] (. java.time.LocalDateTime ofInstant java-time-Instant48867 java-time-ZoneId48868)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48869 ^long long48870] (.plusSeconds this48869 long48870)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDateTime this48871 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48872] (.get this48871 java-time-temporal-TemporalField48872)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDateTime this48873 ^java.lang.Object java-lang-Object48874] (.equals this48873 java-lang-Object48874)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDateTime this48875 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter48876] (.format this48875 java-time-format-DateTimeFormatter48876)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48877 ^long long48878] (.plusYears this48877 long48878)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48879 ^long long48880] (.minusDays this48879 long48880)))
