(ns cljc.java-time.local-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [LocalDateTime]]))
(def max (goog.object/get java.time.LocalDateTime "MAX"))
(def min (goog.object/get java.time.LocalDateTime "MIN"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13036 ^long long13037] (.minusMinutes this13036 long13037)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13038 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13039] (.truncatedTo this13038 java-time-temporal-TemporalUnit13039)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13040 ^long long13041] (.minusWeeks this13040 long13041)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.Instant [^js/JSJoda.LocalDateTime this13042 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13043] (.toInstant this13042 java-time-ZoneOffset13043)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13044 ^long long13045] (.plusWeeks this13044 long13045)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalDateTime this13046 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13047] (.range this13046 java-time-temporal-TemporalField13047)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^js/JSJoda.LocalDateTime [^long long13048 ^int int13049 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13050] (js-invoke java.time.LocalDateTime "ofEpochSecond" long13048 int13049 java-time-ZoneOffset13050)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this13051] (.hour this13051)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDateTime this13052 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13053] (.atOffset this13052 java-time-ZoneOffset13053)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13054 ^long long13055] (.minusHours this13054 long13055)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["int" "java.time.Month" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"]))} (^js/JSJoda.LocalDateTime [G__13057 G__13058 G__13059 G__13060 G__13061 G__13062] (js-invoke java.time.LocalDateTime "of" G__13057 G__13058 G__13059 G__13060 G__13061 G__13062)) (^js/JSJoda.LocalDateTime [G__13064 G__13065 G__13066 G__13067 G__13068] (js-invoke java.time.LocalDateTime "of" G__13064 G__13065 G__13066 G__13067 G__13068)) (^js/JSJoda.LocalDateTime [G__13070 G__13071 G__13072 G__13073 G__13074 G__13075 G__13076] (js-invoke java.time.LocalDateTime "of" G__13070 G__13071 G__13072 G__13073 G__13074 G__13075 G__13076)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate java-time-LocalDate13077 ^js/JSJoda.LocalTime java-time-LocalTime13078] (js-invoke java.time.LocalDateTime "of" java-time-LocalDate13077 java-time-LocalTime13078)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13079 ^int int13080] (.withMonth this13079 int13080)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this13081 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime13082] (.isEqual this13081 java-time-chrono-ChronoLocalDateTime13082)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this13083] (.nano this13083)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this13084] (.year this13084)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13085 ^long long13086] (.minusSeconds this13085 long13086)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this13087] (.second this13087)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13088 ^long long13089] (.plusNanos this13088 long13089)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this13090] (.dayOfYear this13090)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13091 ^long long13092 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13093] (.plus this13091 long13092 java-time-temporal-TemporalUnit13093)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13094 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount13095] (.plus this13094 java-time-temporal-TemporalAmount13095)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13096 ^int int13097] (.withHour this13096 int13097)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13098 ^int int13099] (.withMinute this13098 int13099)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13100 ^long long13101] (.plusMinutes this13100 long13101)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalDateTime this13102 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery13103] (.query this13102 java-time-temporal-TemporalQuery13103)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.LocalDateTime this13104] (.dayOfWeek this13104)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^js/JSJoda.LocalDateTime this13105] (.toString this13105)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13106 ^long long13107] (.plusMonths this13106 long13107)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this13108 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime13109] (.isBefore this13108 java-time-chrono-ChronoLocalDateTime13109)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13110 ^long long13111] (.minusMonths this13110 long13111)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13112 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount13113] (.minus this13112 java-time-temporal-TemporalAmount13113)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13114 ^long long13115 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13116] (.minus this13114 long13115 java-time-temporal-TemporalUnit13116)))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime this13117 ^js/JSJoda.ZoneId java-time-ZoneId13118] (.atZone this13117 java-time-ZoneId13118)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13119 ^long long13120] (.plusHours this13119 long13120)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13121 ^long long13122] (.plusDays this13121 long13122)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalDateTime this13123] (.toLocalTime this13123)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalDateTime this13124 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13125] (.getLong this13124 java-time-temporal-TemporalField13125)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13126 ^int int13127] (.withYear this13126 int13127)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13128 ^int int13129] (.withNano this13128 int13129)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^js/JSJoda.LocalDateTime this13130 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13131] (.toEpochSecond this13130 java-time-ZoneOffset13131)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.LocalDateTime this13132 ^js/JSJoda.Temporal java-time-temporal-Temporal13133 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13134] (.until this13132 java-time-temporal-Temporal13133 java-time-temporal-TemporalUnit13134)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13135 ^int int13136] (.withDayOfMonth this13135 int13136)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this13137] (.dayOfMonth this13137)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor13138] (js-invoke java.time.LocalDateTime "from" java-time-temporal-TemporalAccessor13138)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this13139 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime13140] (.isAfter this13139 java-time-chrono-ChronoLocalDateTime13140)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13141 ^long long13142] (.minusNanos this13141 long13142)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^boolean [this13143 G__13144] (.isSupported ^js/JSJoda.LocalDateTime this13143 G__13144)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13145 ^long long13146] (.minusYears this13145 long13146)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.Chronology [^js/JSJoda.LocalDateTime this13147] (.chronology this13147)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence13148 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter13149] (js-invoke java.time.LocalDateTime "parse" java-lang-CharSequence13148 java-time-format-DateTimeFormatter13149)) (^js/JSJoda.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence13150] (js-invoke java.time.LocalDateTime "parse" java-lang-CharSequence13150)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13151 ^int int13152] (.withSecond this13151 int13152)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDateTime this13153] (.toLocalDate this13153)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this13154] (.minute this13154)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this13155] (.hashCode this13155)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalDateTime this13156 ^js/JSJoda.Temporal java-time-temporal-Temporal13157] (.adjustInto this13156 java-time-temporal-Temporal13157)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13158 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13159 ^long long13160] (.with this13158 java-time-temporal-TemporalField13159 long13160)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13161 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster13162] (.with this13161 java-time-temporal-TemporalAdjuster13162)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.LocalDateTime [] (js-invoke java.time.LocalDateTime "now")) (^js/JSJoda.LocalDateTime [G__13164] (js-invoke java.time.LocalDateTime "now" G__13164)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this13165] (.monthValue this13165)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13166 ^int int13167] (.withDayOfYear this13166 int13167)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this13168 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime13169] (.compareTo this13168 java-time-chrono-ChronoLocalDateTime13169)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.LocalDateTime this13170] (.month this13170)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.Instant java-time-Instant13171 ^js/JSJoda.ZoneId java-time-ZoneId13172] (js-invoke java.time.LocalDateTime "ofInstant" java-time-Instant13171 java-time-ZoneId13172)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13173 ^long long13174] (.plusSeconds this13173 long13174)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalDateTime this13175 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13176] (.get this13175 java-time-temporal-TemporalField13176)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalDateTime this13177 ^java.lang.Object java-lang-Object13178] (.equals this13177 java-lang-Object13178)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalDateTime this13179 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter13180] (.format this13179 java-time-format-DateTimeFormatter13180)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13181 ^long long13182] (.plusYears this13181 long13182)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this13183 ^long long13184] (.minusDays this13183 long13184)))
