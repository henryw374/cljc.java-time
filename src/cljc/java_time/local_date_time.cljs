(ns cljc.java-time.local-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalDateTime]]))
(def max (goog.object/get java.time.LocalDateTime "MAX"))
(def min (goog.object/get java.time.LocalDateTime "MIN"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3519 ^long long3520] (.minusMinutes this3519 long3520)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3521 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3522] (.truncatedTo this3521 java-time-temporal-TemporalUnit3522)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3523 ^long long3524] (.minusWeeks this3523 long3524)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.Instant [^js/JSJoda.LocalDateTime this3525 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3526] (.toInstant this3525 java-time-ZoneOffset3526)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3527 ^long long3528] (.plusWeeks this3527 long3528)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalDateTime this3529 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3530] (.range this3529 java-time-temporal-TemporalField3530)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^js/JSJoda.LocalDateTime [^long long3531 ^int int3532 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3533] (js-invoke java.time.LocalDateTime "ofEpochSecond" long3531 int3532 java-time-ZoneOffset3533)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3534] (.hour this3534)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDateTime this3535 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3536] (.atOffset this3535 java-time-ZoneOffset3536)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3537 ^long long3538] (.minusHours this3537 long3538)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"]))} (^js/JSJoda.LocalDateTime [G__3540 G__3541 G__3542 G__3543 G__3544 G__3545 G__3546] (js-invoke java.time.LocalDateTime "of" G__3540 G__3541 G__3542 G__3543 G__3544 G__3545 G__3546)) (^js/JSJoda.LocalDateTime [G__3548 G__3549 G__3550 G__3551 G__3552 G__3553] (js-invoke java.time.LocalDateTime "of" G__3548 G__3549 G__3550 G__3551 G__3552 G__3553)) (^js/JSJoda.LocalDateTime [G__3555 G__3556 G__3557 G__3558 G__3559] (js-invoke java.time.LocalDateTime "of" G__3555 G__3556 G__3557 G__3558 G__3559)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate java-time-LocalDate3560 ^js/JSJoda.LocalTime java-time-LocalTime3561] (js-invoke java.time.LocalDateTime "of" java-time-LocalDate3560 java-time-LocalTime3561)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3562 ^int int3563] (.withMonth this3562 int3563)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this3564 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3565] (.isEqual this3564 java-time-chrono-ChronoLocalDateTime3565)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3566] (.nano this3566)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3567] (.year this3567)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3568 ^long long3569] (.minusSeconds this3568 long3569)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3570] (.second this3570)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3571 ^long long3572] (.plusNanos this3571 long3572)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3573] (.dayOfYear this3573)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3574 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3575] (.plus this3574 java-time-temporal-TemporalAmount3575)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3576 ^long long3577 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3578] (.plus this3576 long3577 java-time-temporal-TemporalUnit3578)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3579 ^int int3580] (.withHour this3579 int3580)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3581 ^int int3582] (.withMinute this3581 int3582)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3583 ^long long3584] (.plusMinutes this3583 long3584)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalDateTime this3585 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery3586] (.query this3585 java-time-temporal-TemporalQuery3586)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.LocalDateTime this3587] (.dayOfWeek this3587)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^js/JSJoda.LocalDateTime this3588] (.toString this3588)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3589 ^long long3590] (.plusMonths this3589 long3590)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this3591 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3592] (.isBefore this3591 java-time-chrono-ChronoLocalDateTime3592)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3593 ^long long3594] (.minusMonths this3593 long3594)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3595 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount3596] (.minus this3595 java-time-temporal-TemporalAmount3596)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3597 ^long long3598 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3599] (.minus this3597 long3598 java-time-temporal-TemporalUnit3599)))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.LocalDateTime this3600 ^js/JSJoda.ZoneId java-time-ZoneId3601] (.atZone this3600 java-time-ZoneId3601)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3602 ^long long3603] (.plusHours this3602 long3603)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3604 ^long long3605] (.plusDays this3604 long3605)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalDateTime this3606] (.toLocalTime this3606)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalDateTime this3607 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3608] (.getLong this3607 java-time-temporal-TemporalField3608)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3609 ^int int3610] (.withYear this3609 int3610)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3611 ^int int3612] (.withNano this3611 int3612)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^js/JSJoda.LocalDateTime this3613 ^js/JSJoda.ZoneOffset java-time-ZoneOffset3614] (.toEpochSecond this3613 java-time-ZoneOffset3614)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.LocalDateTime this3615 ^js/JSJoda.Temporal java-time-temporal-Temporal3616 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit3617] (.until this3615 java-time-temporal-Temporal3616 java-time-temporal-TemporalUnit3617)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3618 ^int int3619] (.withDayOfMonth this3618 int3619)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3620] (.dayOfMonth this3620)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor3621] (js-invoke java.time.LocalDateTime "from" java-time-temporal-TemporalAccessor3621)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this3622 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3623] (.isAfter this3622 java-time-chrono-ChronoLocalDateTime3623)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3624 ^long long3625] (.minusNanos this3624 long3625)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"] ["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^boolean [this3626 G__3627] (.isSupported ^js/JSJoda.LocalDateTime this3626 G__3627)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3628 ^long long3629] (.minusYears this3628 long3629)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.Chronology [^js/JSJoda.LocalDateTime this3630] (.chronology this3630)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence3631] (js-invoke java.time.LocalDateTime "parse" java-lang-CharSequence3631)) (^js/JSJoda.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence3632 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter3633] (js-invoke java.time.LocalDateTime "parse" java-lang-CharSequence3632 java-time-format-DateTimeFormatter3633)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3634 ^int int3635] (.withSecond this3634 int3635)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.LocalDate [^js/JSJoda.LocalDateTime this3636] (.toLocalDate this3636)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3637] (.minute this3637)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3638] (.hashCode this3638)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalDateTime this3639 ^js/JSJoda.Temporal java-time-temporal-Temporal3640] (.adjustInto this3639 java-time-temporal-Temporal3640)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3641 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3642 ^long long3643] (.with this3641 java-time-temporal-TemporalField3642 long3643)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3644 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster3645] (.with this3644 java-time-temporal-TemporalAdjuster3645)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [] (js-invoke java.time.LocalDateTime "now")) (^js/JSJoda.LocalDateTime [G__3647] (js-invoke java.time.LocalDateTime "now" G__3647)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3648] (.monthValue this3648)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3649 ^int int3650] (.withDayOfYear this3649 int3650)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this3651 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3652] (.compareTo this3651 java-time-chrono-ChronoLocalDateTime3652)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.LocalDateTime this3653] (.month this3653)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.Instant java-time-Instant3654 ^js/JSJoda.ZoneId java-time-ZoneId3655] (js-invoke java.time.LocalDateTime "ofInstant" java-time-Instant3654 java-time-ZoneId3655)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3656 ^long long3657] (.plusSeconds this3656 long3657)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalDateTime this3658 ^js/JSJoda.TemporalField java-time-temporal-TemporalField3659] (.get this3658 java-time-temporal-TemporalField3659)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalDateTime this3660 ^java.lang.Object java-lang-Object3661] (.equals this3660 java-lang-Object3661)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalDateTime this3662 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter3663] (.format this3662 java-time-format-DateTimeFormatter3663)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3664 ^long long3665] (.plusYears this3664 long3665)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this3666 ^long long3667] (.minusDays this3666 long3667)))
