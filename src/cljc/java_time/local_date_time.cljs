(ns cljc.java-time.local-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalDateTime]]))
(def max (goog.object/get java.time.LocalDateTime "MAX"))
(def min (goog.object/get java.time.LocalDateTime "MIN"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6507 ^long long6508] (.minusMinutes this6507 long6508)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6509 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit6510] (.truncatedTo this6509 java-time-temporal-TemporalUnit6510)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6511 ^long long6512] (.minusWeeks this6511 long6512)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.Instant [^js/JSJoda.LocalDateTime this6513 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6514] (.toInstant this6513 java-time-ZoneOffset6514)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6515 ^long long6516] (.plusWeeks this6515 long6516)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalDateTime this6517 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6518] (.range this6517 java-time-temporal-TemporalField6518)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^js/JSJoda.LocalDateTime [^long long6519 ^int int6520 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6521] (js-invoke java.time.LocalDateTime "ofEpochSecond" long6519 int6520 java-time-ZoneOffset6521)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6522] (.hour this6522)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDateTime this6523 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6524] (.atOffset this6523 java-time-ZoneOffset6524)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6525 ^long long6526] (.minusHours this6525 long6526)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"]))} (^js/JSJoda.LocalDateTime [G__6528 G__6529 G__6530 G__6531 G__6532 G__6533] (js-invoke java.time.LocalDateTime "of" G__6528 G__6529 G__6530 G__6531 G__6532 G__6533)) (^js/JSJoda.LocalDateTime [G__6535 G__6536 G__6537 G__6538 G__6539] (js-invoke java.time.LocalDateTime "of" G__6535 G__6536 G__6537 G__6538 G__6539)) (^js/JSJoda.LocalDateTime [G__6541 G__6542 G__6543 G__6544 G__6545 G__6546 G__6547] (js-invoke java.time.LocalDateTime "of" G__6541 G__6542 G__6543 G__6544 G__6545 G__6546 G__6547)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate java-time-LocalDate6548 ^js/JSJoda.LocalTime java-time-LocalTime6549] (js-invoke java.time.LocalDateTime "of" java-time-LocalDate6548 java-time-LocalTime6549)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6550 ^int int6551] (.withMonth this6550 int6551)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this6552 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime6553] (.isEqual this6552 java-time-chrono-ChronoLocalDateTime6553)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6554] (.nano this6554)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6555] (.year this6555)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6556 ^long long6557] (.minusSeconds this6556 long6557)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6558] (.second this6558)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6559 ^long long6560] (.plusNanos this6559 long6560)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6561] (.dayOfYear this6561)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6562 G__6563 G__6564] (.plus ^js/JSJoda.LocalDateTime this6562 G__6563 G__6564)) (^java.lang.Object [this6565 G__6566] (.plus ^js/JSJoda.LocalDateTime this6565 G__6566)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6567 ^int int6568] (.withHour this6567 int6568)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6569 ^int int6570] (.withMinute this6569 int6570)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6571 ^long long6572] (.plusMinutes this6571 long6572)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalDateTime this6573 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery6574] (.query this6573 java-time-temporal-TemporalQuery6574)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.LocalDateTime this6575] (.dayOfWeek this6575)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^js/JSJoda.LocalDateTime this6576] (.toString this6576)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6577 ^long long6578] (.plusMonths this6577 long6578)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this6579 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime6580] (.isBefore this6579 java-time-chrono-ChronoLocalDateTime6580)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6581 ^long long6582] (.minusMonths this6581 long6582)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6583 G__6584 G__6585] (.minus ^js/JSJoda.LocalDateTime this6583 G__6584 G__6585)) (^java.lang.Object [this6586 G__6587] (.minus ^js/JSJoda.LocalDateTime this6586 G__6587)))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this6588 G__6589] (.atZone ^js/JSJoda.LocalDateTime this6588 G__6589)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6590 ^long long6591] (.plusHours this6590 long6591)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6592 ^long long6593] (.plusDays this6592 long6593)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalDateTime this6594] (.toLocalTime this6594)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalDateTime this6595 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6596] (.getLong this6595 java-time-temporal-TemporalField6596)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6597 ^int int6598] (.withYear this6597 int6598)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6599 ^int int6600] (.withNano this6599 int6600)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^js/JSJoda.LocalDateTime this6601 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6602] (.toEpochSecond this6601 java-time-ZoneOffset6602)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.LocalDateTime this6603 ^js/JSJoda.Temporal java-time-temporal-Temporal6604 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit6605] (.until this6603 java-time-temporal-Temporal6604 java-time-temporal-TemporalUnit6605)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6606 ^int int6607] (.withDayOfMonth this6606 int6607)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6608] (.dayOfMonth this6608)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor6609] (js-invoke java.time.LocalDateTime "from" java-time-temporal-TemporalAccessor6609)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this6610 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime6611] (.isAfter this6610 java-time-chrono-ChronoLocalDateTime6611)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6612 ^long long6613] (.minusNanos this6612 long6613)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^boolean [this6614 G__6615] (.isSupported ^js/JSJoda.LocalDateTime this6614 G__6615)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6616 ^long long6617] (.minusYears this6616 long6617)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.Chronology [^js/JSJoda.LocalDateTime this6618] (.chronology this6618)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence6619] (js-invoke java.time.LocalDateTime "parse" java-lang-CharSequence6619)) (^js/JSJoda.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence6620 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6621] (js-invoke java.time.LocalDateTime "parse" java-lang-CharSequence6620 java-time-format-DateTimeFormatter6621)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6622 ^int int6623] (.withSecond this6622 int6623)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"] ["java.time.LocalDateTime"]))} (^java.lang.Object [this6624] (.toLocalDate ^js/JSJoda.LocalDateTime this6624)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6625] (.minute this6625)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6626] (.hashCode this6626)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalDateTime this6627 ^js/JSJoda.Temporal java-time-temporal-Temporal6628] (.adjustInto this6627 java-time-temporal-Temporal6628)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this6629 G__6630 G__6631] (.with ^js/JSJoda.LocalDateTime this6629 G__6630 G__6631)) (^java.lang.Object [this6632 G__6633] (.with ^js/JSJoda.LocalDateTime this6632 G__6633)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^js/JSJoda.LocalDateTime [G__6635] (js-invoke java.time.LocalDateTime "now" G__6635)) (^js/JSJoda.LocalDateTime [] (js-invoke java.time.LocalDateTime "now")))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6636] (.monthValue this6636)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6637 ^int int6638] (.withDayOfYear this6637 int6638)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"] ["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^int [this6639 G__6640] (.compareTo ^js/JSJoda.LocalDateTime this6639 G__6640)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.LocalDateTime this6641] (.month this6641)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.Instant java-time-Instant6642 ^js/JSJoda.ZoneId java-time-ZoneId6643] (js-invoke java.time.LocalDateTime "ofInstant" java-time-Instant6642 java-time-ZoneId6643)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6644 ^long long6645] (.plusSeconds this6644 long6645)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalDateTime this6646 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6647] (.get this6646 java-time-temporal-TemporalField6647)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalDateTime this6648 ^java.lang.Object java-lang-Object6649] (.equals this6648 java-lang-Object6649)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalDateTime this6650 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6651] (.format this6650 java-time-format-DateTimeFormatter6651)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6652 ^long long6653] (.plusYears this6652 long6653)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6654 ^long long6655] (.minusDays this6654 long6655)))
