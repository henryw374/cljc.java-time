(ns cljc.java-time.local-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalDateTime]]))
(def max (goog.object/get java.time.LocalDateTime "MAX"))
(def min (goog.object/get java.time.LocalDateTime "MIN"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6527 ^long long6528] (.minusMinutes this6527 long6528)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6529 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit6530] (.truncatedTo this6529 java-time-temporal-TemporalUnit6530)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6531 ^long long6532] (.minusWeeks this6531 long6532)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.Instant [^js/JSJoda.LocalDateTime this6533 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6534] (.toInstant this6533 java-time-ZoneOffset6534)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6535 ^long long6536] (.plusWeeks this6535 long6536)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.LocalDateTime this6537 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6538] (.range this6537 java-time-temporal-TemporalField6538)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^js/JSJoda.LocalDateTime [^long long6539 ^int int6540 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6541] (js-invoke java.time.LocalDateTime "ofEpochSecond" long6539 int6540 java-time-ZoneOffset6541)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6542] (.hour this6542)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDateTime this6543 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6544] (.atOffset this6543 java-time-ZoneOffset6544)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6545 ^long long6546] (.minusHours this6545 long6546)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int" "int"]))} (^js/JSJoda.LocalDateTime [G__6548 G__6549 G__6550 G__6551 G__6552 G__6553 G__6554] (js-invoke java.time.LocalDateTime "of" G__6548 G__6549 G__6550 G__6551 G__6552 G__6553 G__6554)) (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDate java-time-LocalDate6555 ^js/JSJoda.LocalTime java-time-LocalTime6556] (js-invoke java.time.LocalDateTime "of" java-time-LocalDate6555 java-time-LocalTime6556)) (^js/JSJoda.LocalDateTime [G__6558 G__6559 G__6560 G__6561 G__6562] (js-invoke java.time.LocalDateTime "of" G__6558 G__6559 G__6560 G__6561 G__6562)) (^js/JSJoda.LocalDateTime [G__6564 G__6565 G__6566 G__6567 G__6568 G__6569] (js-invoke java.time.LocalDateTime "of" G__6564 G__6565 G__6566 G__6567 G__6568 G__6569)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6570 ^int int6571] (.withMonth this6570 int6571)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this6572 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime6573] (.isEqual this6572 java-time-chrono-ChronoLocalDateTime6573)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6574] (.nano this6574)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6575] (.year this6575)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6576 ^long long6577] (.minusSeconds this6576 long6577)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6578] (.second this6578)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6579 ^long long6580] (.plusNanos this6579 long6580)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6581] (.dayOfYear this6581)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6582 G__6583] (.plus ^js/JSJoda.LocalDateTime this6582 G__6583)) (^java.lang.Object [this6584 G__6585 G__6586] (.plus ^js/JSJoda.LocalDateTime this6584 G__6585 G__6586)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6587 ^int int6588] (.withHour this6587 int6588)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6589 ^int int6590] (.withMinute this6589 int6590)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6591 ^long long6592] (.plusMinutes this6591 long6592)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.LocalDateTime this6593 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery6594] (.query this6593 java-time-temporal-TemporalQuery6594)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.LocalDateTime this6595] (.dayOfWeek this6595)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^js/JSJoda.LocalDateTime this6596] (.toString this6596)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6597 ^long long6598] (.plusMonths this6597 long6598)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this6599 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime6600] (.isBefore this6599 java-time-chrono-ChronoLocalDateTime6600)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6601 ^long long6602] (.minusMonths this6601 long6602)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6603 G__6604 G__6605] (.minus ^js/JSJoda.LocalDateTime this6603 G__6604 G__6605)) (^java.lang.Object [this6606 G__6607] (.minus ^js/JSJoda.LocalDateTime this6606 G__6607)))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this6608 G__6609] (.atZone ^js/JSJoda.LocalDateTime this6608 G__6609)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6610 ^long long6611] (.plusHours this6610 long6611)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6612 ^long long6613] (.plusDays this6612 long6613)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.LocalDateTime this6614] (.toLocalTime this6614)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.LocalDateTime this6615 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6616] (.getLong this6615 java-time-temporal-TemporalField6616)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6617 ^int int6618] (.withYear this6617 int6618)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6619 ^int int6620] (.withNano this6619 int6620)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^js/JSJoda.LocalDateTime this6621 ^js/JSJoda.ZoneOffset java-time-ZoneOffset6622] (.toEpochSecond this6621 java-time-ZoneOffset6622)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.LocalDateTime this6623 ^js/JSJoda.Temporal java-time-temporal-Temporal6624 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit6625] (.until this6623 java-time-temporal-Temporal6624 java-time-temporal-TemporalUnit6625)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6626 ^int int6627] (.withDayOfMonth this6626 int6627)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6628] (.dayOfMonth this6628)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor6629] (js-invoke java.time.LocalDateTime "from" java-time-temporal-TemporalAccessor6629)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^boolean [^js/JSJoda.LocalDateTime this6630 ^js/JSJoda.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime6631] (.isAfter this6630 java-time-chrono-ChronoLocalDateTime6631)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6632 ^long long6633] (.minusNanos this6632 long6633)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^boolean [this6634 G__6635] (.isSupported ^js/JSJoda.LocalDateTime this6634 G__6635)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6636 ^long long6637] (.minusYears this6636 long6637)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.Chronology [^js/JSJoda.LocalDateTime this6638] (.chronology this6638)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence6639 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6640] (js-invoke java.time.LocalDateTime "parse" java-lang-CharSequence6639 java-time-format-DateTimeFormatter6640)) (^js/JSJoda.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence6641] (js-invoke java.time.LocalDateTime "parse" java-lang-CharSequence6641)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6642 ^int int6643] (.withSecond this6642 int6643)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"] ["java.time.LocalDateTime"]))} (^java.lang.Object [this6644] (.toLocalDate ^js/JSJoda.LocalDateTime this6644)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6645] (.minute this6645)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6646] (.hashCode this6646)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.LocalDateTime this6647 ^js/JSJoda.Temporal java-time-temporal-Temporal6648] (.adjustInto this6647 java-time-temporal-Temporal6648)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this6649 G__6650 G__6651] (.with ^js/JSJoda.LocalDateTime this6649 G__6650 G__6651)) (^java.lang.Object [this6652 G__6653] (.with ^js/JSJoda.LocalDateTime this6652 G__6653)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^js/JSJoda.LocalDateTime [G__6655] (js-invoke java.time.LocalDateTime "now" G__6655)) (^js/JSJoda.LocalDateTime [] (js-invoke java.time.LocalDateTime "now")))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^int [^js/JSJoda.LocalDateTime this6656] (.monthValue this6656)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6657 ^int int6658] (.withDayOfYear this6657 int6658)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"] ["java.time.LocalDateTime" "java.lang.Object"]))} (^int [this6659 G__6660] (.compareTo ^js/JSJoda.LocalDateTime this6659 G__6660)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.LocalDateTime this6661] (.month this6661)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.Instant java-time-Instant6662 ^js/JSJoda.ZoneId java-time-ZoneId6663] (js-invoke java.time.LocalDateTime "ofInstant" java-time-Instant6662 java-time-ZoneId6663)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6664 ^long long6665] (.plusSeconds this6664 long6665)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.LocalDateTime this6666 ^js/JSJoda.TemporalField java-time-temporal-TemporalField6667] (.get this6666 java-time-temporal-TemporalField6667)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.LocalDateTime this6668 ^java.lang.Object java-lang-Object6669] (.equals this6668 java-lang-Object6669)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.LocalDateTime this6670 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter6671] (.format this6670 java-time-format-DateTimeFormatter6671)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6672 ^long long6673] (.plusYears this6672 long6673)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.LocalDateTime this6674 ^long long6675] (.minusDays this6674 long6675)))
