(ns cljc.java-time.local-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [LocalDateTime]]))
(def max (. java.time.LocalDateTime -MAX))
(def min (. java.time.LocalDateTime -MIN))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10740 ^long long10741] (.minusMinutes this10740 long10741)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10742 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit10743] (.truncatedTo this10742 java-time-temporal-TemporalUnit10743)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10744 ^long long10745] (.minusWeeks this10744 long10745)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.Instant [^java.time.LocalDateTime this10746 ^java.time.ZoneOffset java-time-ZoneOffset10747] (.toInstant this10746 java-time-ZoneOffset10747)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10748 ^long long10749] (.plusWeeks this10748 long10749)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDateTime this10750 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10751] (.range this10750 java-time-temporal-TemporalField10751)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^java.time.LocalDateTime [^long long10752 ^java.lang.Integer int10753 ^java.time.ZoneOffset java-time-ZoneOffset10754] (. java.time.LocalDateTime ofEpochSecond long10752 int10753 java-time-ZoneOffset10754)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10755] (.hour this10755)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime this10756 ^java.time.ZoneOffset java-time-ZoneOffset10757] (.atOffset this10756 java-time-ZoneOffset10757)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10758 ^long long10759] (.minusHours this10758 long10759)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["int" "java.time.Month" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"]))} (^java.time.LocalDateTime [G__10761 G__10762 G__10763 G__10764 G__10765 G__10766 G__10767] (. java.time.LocalDateTime of G__10761 G__10762 G__10763 G__10764 G__10765 G__10766 G__10767)) (^java.time.LocalDateTime [G__10769 G__10770 G__10771 G__10772 G__10773] (. java.time.LocalDateTime of G__10769 G__10770 G__10771 G__10772 G__10773)) (^java.time.LocalDateTime [G__10775 G__10776 G__10777 G__10778 G__10779 G__10780] (. java.time.LocalDateTime of G__10775 G__10776 G__10777 G__10778 G__10779 G__10780)) (^java.time.LocalDateTime [^java.time.LocalDate java-time-LocalDate10781 ^java.time.LocalTime java-time-LocalTime10782] (. java.time.LocalDateTime of java-time-LocalDate10781 java-time-LocalTime10782)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10783 ^java.lang.Integer int10784] (.withMonth this10783 int10784)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this10785 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime10786] (.isEqual this10785 java-time-chrono-ChronoLocalDateTime10786)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10787] (.nano this10787)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10788] (.year this10788)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10789 ^long long10790] (.minusSeconds this10789 long10790)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10791] (.second this10791)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10792 ^long long10793] (.plusNanos this10792 long10793)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10794] (.dayOfYear this10794)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this10795 G__10796 G__10797] (.plus ^java.time.LocalDateTime this10795 G__10796 G__10797)) (^java.lang.Object [this10798 G__10799] (.plus ^java.time.LocalDateTime this10798 G__10799)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10800 ^java.lang.Integer int10801] (.withHour this10800 int10801)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10802 ^java.lang.Integer int10803] (.withMinute this10802 int10803)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10804 ^long long10805] (.plusMinutes this10804 long10805)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDateTime this10806 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery10807] (.query this10806 java-time-temporal-TemporalQuery10807)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.DayOfWeek [^java.time.LocalDateTime this10808] (.dayOfWeek this10808)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^java.time.LocalDateTime this10809] (.toString this10809)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10810 ^long long10811] (.plusMonths this10810 long10811)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this10812 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime10813] (.isBefore this10812 java-time-chrono-ChronoLocalDateTime10813)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10814 ^long long10815] (.minusMonths this10814 long10815)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this10816 G__10817 G__10818] (.minus ^java.time.LocalDateTime this10816 G__10817 G__10818)) (^java.lang.Object [this10819 G__10820] (.minus ^java.time.LocalDateTime this10819 G__10820)))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this10821 G__10822] (.atZone ^java.time.LocalDateTime this10821 G__10822)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10823 ^long long10824] (.plusHours this10823 long10824)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10825 ^long long10826] (.plusDays this10825 long10826)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalTime [^java.time.LocalDateTime this10827] (.toLocalTime this10827)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDateTime this10828 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10829] (.getLong this10828 java-time-temporal-TemporalField10829)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10830 ^java.lang.Integer int10831] (.withYear this10830 int10831)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10832 ^java.lang.Integer int10833] (.withNano this10832 int10833)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDateTime this10834 ^java.time.ZoneOffset java-time-ZoneOffset10835] (.toEpochSecond this10834 java-time-ZoneOffset10835)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalDateTime this10836 ^java.time.temporal.Temporal java-time-temporal-Temporal10837 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit10838] (.until this10836 java-time-temporal-Temporal10837 java-time-temporal-TemporalUnit10838)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10839 ^java.lang.Integer int10840] (.withDayOfMonth this10839 int10840)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10841] (.dayOfMonth this10841)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor10842] (. java.time.LocalDateTime from java-time-temporal-TemporalAccessor10842)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this10843 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime10844] (.isAfter this10843 java-time-chrono-ChronoLocalDateTime10844)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10845 ^long long10846] (.minusNanos this10845 long10846)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this10847 G__10848] (.isSupported ^java.time.LocalDateTime this10847 G__10848)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10849 ^long long10850] (.minusYears this10849 long10850)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.chrono.Chronology [^java.time.LocalDateTime this10851] (.chronology this10851)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence10852] (. java.time.LocalDateTime parse java-lang-CharSequence10852)) (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence10853 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter10854] (. java.time.LocalDateTime parse java-lang-CharSequence10853 java-time-format-DateTimeFormatter10854)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10855 ^java.lang.Integer int10856] (.withSecond this10855 int10856)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"] ["java.time.LocalDateTime"]))} (^java.lang.Object [this10857] (.toLocalDate ^java.time.LocalDateTime this10857)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10858] (.minute this10858)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10859] (.hashCode this10859)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDateTime this10860 ^java.time.temporal.Temporal java-time-temporal-Temporal10861] (.adjustInto this10860 java-time-temporal-Temporal10861)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this10862 G__10863] (.with ^java.time.LocalDateTime this10862 G__10863)) (^java.lang.Object [this10864 G__10865 G__10866] (.with ^java.time.LocalDateTime this10864 G__10865 G__10866)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDateTime [] (. java.time.LocalDateTime now)) (^java.time.LocalDateTime [G__10868] (. java.time.LocalDateTime now G__10868)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10869] (.monthValue this10869)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10870 ^java.lang.Integer int10871] (.withDayOfYear this10870 int10871)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"] ["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Integer [this10872 G__10873] (.compareTo ^java.time.LocalDateTime this10872 G__10873)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.Month [^java.time.LocalDateTime this10874] (.month this10874)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.Instant java-time-Instant10875 ^java.time.ZoneId java-time-ZoneId10876] (. java.time.LocalDateTime ofInstant java-time-Instant10875 java-time-ZoneId10876)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10877 ^long long10878] (.plusSeconds this10877 long10878)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDateTime this10879 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10880] (.get this10879 java-time-temporal-TemporalField10880)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDateTime this10881 ^java.lang.Object java-lang-Object10882] (.equals this10881 java-lang-Object10882)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDateTime this10883 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter10884] (.format this10883 java-time-format-DateTimeFormatter10884)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10885 ^long long10886] (.plusYears this10885 long10886)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10887 ^long long10888] (.minusDays this10887 long10888)))
