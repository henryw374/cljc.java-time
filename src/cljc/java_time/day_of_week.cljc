(ns cljc.java-time.day-of-week (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [DayOfWeek]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time DayOfWeek])))
(def saturday (. java.time.DayOfWeek -SATURDAY))
(def thursday (. java.time.DayOfWeek -THURSDAY))
(def friday (. java.time.DayOfWeek -FRIDAY))
(def wednesday (. java.time.DayOfWeek -WEDNESDAY))
(def sunday (. java.time.DayOfWeek -SUNDAY))
(def monday (. java.time.DayOfWeek -MONDAY))
(def tuesday (. java.time.DayOfWeek -TUESDAY))
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this4206 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4207] (.range this4206 java-time-temporal-TemporalField4207)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.DayOfWeek values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String4208] (. java.time.DayOfWeek valueOf java-lang-String4208)) (^java.lang.Enum [^java.lang.Class java-lang-Class4209 ^java.lang.String java-lang-String4210] (. java.time.DayOfWeek valueOf java-lang-Class4209 java-lang-String4210)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int4211] (. java.time.DayOfWeek of int4211)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this4212] (.ordinal this4212)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this4213 ^long long4214] (.plus this4213 long4214)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this4215 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4216] (.query this4215 java-time-temporal-TemporalQuery4216)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this4217] (.toString this4217)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this4218 ^long long4219] (.minus this4218 long4219)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this4220 ^java.time.format.TextStyle java-time-format-TextStyle4221 ^java.util.Locale java-util-Locale4222] (jti/getter displayName this4220 java-time-format-TextStyle4221 java-util-Locale4222)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this4223] (jti/getter value this4223)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this4224] (.name this4224)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this4225 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4226] (.getLong this4225 java-time-temporal-TemporalField4226)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this4227] (jti/getter declaringClass this4227)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4228] (. java.time.DayOfWeek from java-time-temporal-TemporalAccessor4228)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this4229 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4230] (.isSupported this4229 java-time-temporal-TemporalField4230)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this4231] (.hashCode this4231)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this4232 ^java.time.temporal.Temporal java-time-temporal-Temporal4233] (.adjustInto this4232 java-time-temporal-Temporal4233)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [this4234 G__4235] #? (:cljs (.compareTo ^java.time.DayOfWeek this4234 G__4235) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__4235)) (clojure.core/let [G__4235 ^"java.lang.Object" G__4235] (.compareTo ^java.time.DayOfWeek this4234 G__4235)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__4235)) (clojure.core/let [G__4235 ^"java.lang.Enum" G__4235] (.compareTo ^java.time.DayOfWeek this4234 G__4235)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this4236 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4237] (.get this4236 java-time-temporal-TemporalField4237)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this4238 ^java.lang.Object java-lang-Object4239] (.equals this4238 java-lang-Object4239)))
