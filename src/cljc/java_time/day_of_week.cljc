(ns cljc.java-time.day-of-week (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [DayOfWeek]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time DayOfWeek])))
(def saturday #? (:clj java.time.DayOfWeek/SATURDAY :cljs (. java.time.DayOfWeek -SATURDAY)))
(def thursday #? (:clj java.time.DayOfWeek/THURSDAY :cljs (. java.time.DayOfWeek -THURSDAY)))
(def friday #? (:clj java.time.DayOfWeek/FRIDAY :cljs (. java.time.DayOfWeek -FRIDAY)))
(def wednesday #? (:clj java.time.DayOfWeek/WEDNESDAY :cljs (. java.time.DayOfWeek -WEDNESDAY)))
(def sunday #? (:clj java.time.DayOfWeek/SUNDAY :cljs (. java.time.DayOfWeek -SUNDAY)))
(def monday #? (:clj java.time.DayOfWeek/MONDAY :cljs (. java.time.DayOfWeek -MONDAY)))
(def tuesday #? (:clj java.time.DayOfWeek/TUESDAY :cljs (. java.time.DayOfWeek -TUESDAY)))
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this12987 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12988] (.range this12987 java-time-temporal-TemporalField12988)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.DayOfWeek values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String12989] (. java.time.DayOfWeek valueOf java-lang-String12989)) (^java.lang.Enum [^java.lang.Class java-lang-Class12990 ^java.lang.String java-lang-String12991] (. java.time.DayOfWeek valueOf java-lang-Class12990 java-lang-String12991)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int12992] (. java.time.DayOfWeek of int12992)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this12993] (.ordinal this12993)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this12994 ^long long12995] (.plus this12994 long12995)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this12996 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12997] (.query this12996 java-time-temporal-TemporalQuery12997)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this12998] (.toString this12998)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this12999 ^long long13000] (.minus this12999 long13000)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this13001 ^java.time.format.TextStyle java-time-format-TextStyle13002 ^java.util.Locale java-util-Locale13003] (jti/getter displayName this13001 java-time-format-TextStyle13002 java-util-Locale13003)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this13004] (jti/getter value this13004)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this13005] (.name this13005)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this13006 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13007] (.getLong this13006 java-time-temporal-TemporalField13007)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this13008] (jti/getter declaringClass this13008)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13009] (. java.time.DayOfWeek from java-time-temporal-TemporalAccessor13009)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this13010 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13011] (.isSupported this13010 java-time-temporal-TemporalField13011)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this13012] (.hashCode this13012)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this13013 ^java.time.temporal.Temporal java-time-temporal-Temporal13014] (.adjustInto this13013 java-time-temporal-Temporal13014)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [this13015 G__13016] #? (:cljs (.compareTo ^java.time.DayOfWeek this13015 G__13016) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__13016)) (clojure.core/let [G__13016 ^"java.lang.Object" G__13016] (.compareTo ^java.time.DayOfWeek this13015 G__13016)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__13016)) (clojure.core/let [G__13016 ^"java.lang.Enum" G__13016] (.compareTo ^java.time.DayOfWeek this13015 G__13016)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this13017 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13018] (.get this13017 java-time-temporal-TemporalField13018)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this13019 ^java.lang.Object java-lang-Object13020] (.equals this13019 java-lang-Object13020)))
