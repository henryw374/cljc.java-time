(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZonedDateTime]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10889 ^long long10890] (.minusMinutes this10889 long10890)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10891 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit10892] (.truncatedTo this10891 java-time-temporal-TemporalUnit10892)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10893 ^long long10894] (.minusWeeks this10893 long10894)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this10895] (.toInstant this10895)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10896 ^long long10897] (.plusWeeks this10896 long10897)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this10898 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10899] (.range this10898 java-time-temporal-TemporalField10899)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this10900] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this10900)) (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this10900)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this10901] (.getHour this10901)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10902 ^long long10903] (.minusHours this10902 long10903)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime10904 ^java.time.ZoneId java-time-ZoneId10905] (. java.time.ZonedDateTime of java-time-LocalDateTime10904 java-time-ZoneId10905)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate10906 ^java.time.LocalTime java-time-LocalTime10907 ^java.time.ZoneId java-time-ZoneId10908] (. java.time.ZonedDateTime of java-time-LocalDate10906 java-time-LocalTime10907 java-time-ZoneId10908)) (^java.time.ZonedDateTime [^java.lang.Integer int10909 ^java.lang.Integer int10910 ^java.lang.Integer int10911 ^java.lang.Integer int10912 ^java.lang.Integer int10913 ^java.lang.Integer int10914 ^java.lang.Integer int10915 ^java.time.ZoneId java-time-ZoneId10916] (. java.time.ZonedDateTime of int10909 int10910 int10911 int10912 int10913 int10914 int10915 java-time-ZoneId10916)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10917 ^java.lang.Integer int10918] (.withMonth this10917 int10918)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this10919 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime10920] (.isEqual this10919 java-time-chrono-ChronoZonedDateTime10920)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this10921] (.getNano this10921)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime10922 ^java.time.ZoneId java-time-ZoneId10923 ^java.time.ZoneOffset java-time-ZoneOffset10924] (. java.time.ZonedDateTime ofLocal java-time-LocalDateTime10922 java-time-ZoneId10923 java-time-ZoneOffset10924)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this10925] (.getYear this10925)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10926 ^long long10927] (.minusSeconds this10926 long10927)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this10928] (.getSecond this10928)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10929 ^long long10930] (.plusNanos this10929 long10930)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this10931] (.getDayOfYear this10931)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this10932 G__10933 G__10934] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10933) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10934)) (clojure.core/let [G__10933 (clojure.core/long G__10933) G__10934 ^"java.time.temporal.TemporalUnit" G__10934] (.plus ^java.time.ZonedDateTime this10932 G__10933 G__10934)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10933) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10934)) (clojure.core/let [G__10933 (clojure.core/long G__10933) G__10934 ^"java.time.temporal.TemporalUnit" G__10934] (.plus ^java.time.ZonedDateTime this10932 G__10933 G__10934)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10933) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10934)) (clojure.core/let [G__10933 (clojure.core/long G__10933) G__10934 ^"java.time.temporal.TemporalUnit" G__10934] (.plus ^java.time.ZonedDateTime this10932 G__10933 G__10934)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this10935 G__10936] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10936)) (clojure.core/let [G__10936 ^"java.time.temporal.TemporalAmount" G__10936] (.plus ^java.time.ZonedDateTime this10935 G__10936)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10936)) (clojure.core/let [G__10936 ^"java.time.temporal.TemporalAmount" G__10936] (.plus ^java.time.ZonedDateTime this10935 G__10936)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10936)) (clojure.core/let [G__10936 ^"java.time.temporal.TemporalAmount" G__10936] (.plus ^java.time.ZonedDateTime this10935 G__10936)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10937 ^java.lang.Integer int10938] (.withHour this10937 int10938)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10939 ^java.lang.Integer int10940] (.withMinute this10939 int10940)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10941 ^long long10942] (.plusMinutes this10941 long10942)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this10943 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery10944] (.query this10943 java-time-temporal-TemporalQuery10944)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this10945] (.getDayOfWeek this10945)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this10946] (.toString this10946)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10947 ^long long10948] (.plusMonths this10947 long10948)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this10949 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime10950] (.isBefore this10949 java-time-chrono-ChronoZonedDateTime10950)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10951 ^long long10952] (.minusMonths this10951 long10952)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this10953 G__10954] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10954)) (clojure.core/let [G__10954 ^"java.time.temporal.TemporalAmount" G__10954] (.minus ^java.time.ZonedDateTime this10953 G__10954)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10954)) (clojure.core/let [G__10954 ^"java.time.temporal.TemporalAmount" G__10954] (.minus ^java.time.ZonedDateTime this10953 G__10954)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10954)) (clojure.core/let [G__10954 ^"java.time.temporal.TemporalAmount" G__10954] (.minus ^java.time.ZonedDateTime this10953 G__10954)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this10955 G__10956 G__10957] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10956) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10957)) (clojure.core/let [G__10956 (clojure.core/long G__10956) G__10957 ^"java.time.temporal.TemporalUnit" G__10957] (.minus ^java.time.ZonedDateTime this10955 G__10956 G__10957)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10956) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10957)) (clojure.core/let [G__10956 (clojure.core/long G__10956) G__10957 ^"java.time.temporal.TemporalUnit" G__10957] (.minus ^java.time.ZonedDateTime this10955 G__10956 G__10957)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10956) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10957)) (clojure.core/let [G__10956 (clojure.core/long G__10956) G__10957 ^"java.time.temporal.TemporalUnit" G__10957] (.minus ^java.time.ZonedDateTime this10955 G__10956 G__10957)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10958] (.withFixedOffsetZone this10958)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10959 ^long long10960] (.plusHours this10959 long10960)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this10961 G__10962] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__10962)) (clojure.core/let [G__10962 ^"java.time.ZoneId" G__10962] (.withZoneSameLocal ^java.time.ZonedDateTime this10961 G__10962)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__10962)) (clojure.core/let [G__10962 ^"java.time.ZoneId" G__10962] (.withZoneSameLocal ^java.time.ZonedDateTime this10961 G__10962)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this10963 G__10964] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__10964)) (clojure.core/let [G__10964 ^"java.time.ZoneId" G__10964] (.withZoneSameInstant ^java.time.ZonedDateTime this10963 G__10964)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__10964)) (clojure.core/let [G__10964 ^"java.time.ZoneId" G__10964] (.withZoneSameInstant ^java.time.ZonedDateTime this10963 G__10964)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10965 ^long long10966] (.plusDays this10965 long10966)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this10967] (.toLocalTime this10967)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this10968 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10969] (.getLong this10968 java-time-temporal-TemporalField10969)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this10970] (.getOffset this10970)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10971 ^java.lang.Integer int10972] (.withYear this10971 int10972)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10973 ^java.lang.Integer int10974] (.withNano this10973 int10974)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this10975] (.toEpochSecond this10975)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this10976] (.toOffsetDateTime this10976)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this10977] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this10977)) (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this10977)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this10978 ^java.time.temporal.Temporal java-time-temporal-Temporal10979 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit10980] (.until this10978 java-time-temporal-Temporal10979 java-time-temporal-TemporalUnit10980)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this10981] (.getZone this10981)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10982 ^java.lang.Integer int10983] (.withDayOfMonth this10982 int10983)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this10984] (.getDayOfMonth this10984)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor10985] (. java.time.ZonedDateTime from java-time-temporal-TemporalAccessor10985)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this10986 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime10987] (.isAfter this10986 java-time-chrono-ChronoZonedDateTime10987)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10988 ^long long10989] (.minusNanos this10988 long10989)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this10990 G__10991] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10991)) (clojure.core/let [G__10991 ^"java.time.temporal.TemporalUnit" G__10991] (.isSupported ^java.time.ZonedDateTime this10990 G__10991)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__10991)) (clojure.core/let [G__10991 ^"java.time.temporal.TemporalField" G__10991] (.isSupported ^java.time.ZonedDateTime this10990 G__10991)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10992 ^long long10993] (.minusYears this10992 long10993)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this10994] (.getChronology this10994)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence10995] (. java.time.ZonedDateTime parse java-lang-CharSequence10995)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence10996 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter10997] (. java.time.ZonedDateTime parse java-lang-CharSequence10996 java-time-format-DateTimeFormatter10997)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this10998 ^java.lang.Integer int10999] (.withSecond this10998 int10999)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this11000] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this11000)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this11000)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11001] (.getMinute this11001)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11002] (.hashCode this11002)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this11003 G__11004 G__11005] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11004) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11005)) (clojure.core/let [G__11004 ^"java.time.temporal.TemporalField" G__11004 G__11005 (clojure.core/long G__11005)] (.with ^java.time.ZonedDateTime this11003 G__11004 G__11005)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11004) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11005)) (clojure.core/let [G__11004 ^"java.time.temporal.TemporalField" G__11004 G__11005 (clojure.core/long G__11005)] (.with ^java.time.ZonedDateTime this11003 G__11004 G__11005)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11004) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11005)) (clojure.core/let [G__11004 ^"java.time.temporal.TemporalField" G__11004 G__11005 (clojure.core/long G__11005)] (.with ^java.time.ZonedDateTime this11003 G__11004 G__11005)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this11006 G__11007] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__11007)) (clojure.core/let [G__11007 ^"java.time.temporal.TemporalAdjuster" G__11007] (.with ^java.time.ZonedDateTime this11006 G__11007)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__11007)) (clojure.core/let [G__11007 ^"java.time.temporal.TemporalAdjuster" G__11007] (.with ^java.time.ZonedDateTime this11006 G__11007)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__11007)) (clojure.core/let [G__11007 ^"java.time.temporal.TemporalAdjuster" G__11007] (.with ^java.time.ZonedDateTime this11006 G__11007)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] [] ["java.time.ZoneId"]))} (^java.time.ZonedDateTime [G__11009] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__11009)) (clojure.core/let [G__11009 ^"java.time.Clock" G__11009] (. java.time.ZonedDateTime now G__11009)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__11009)) (clojure.core/let [G__11009 ^"java.time.ZoneId" G__11009] (. java.time.ZonedDateTime now G__11009)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZonedDateTime [] (. java.time.ZonedDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this11010] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this11010)) (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this11010)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11011] (.getMonthValue this11011)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11012 ^java.lang.Integer int11013] (.withDayOfYear this11012 int11013)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"] ["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [this11014 G__11015] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__11015)) (clojure.core/let [G__11015 ^"java.lang.Object" G__11015] (.compareTo ^java.time.ZonedDateTime this11014 G__11015)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoZonedDateTime") G__11015)) (clojure.core/let [G__11015 ^"java.time.chrono.ChronoZonedDateTime" G__11015] (.compareTo ^java.time.ZonedDateTime this11014 G__11015)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime11016 ^java.time.ZoneOffset java-time-ZoneOffset11017 ^java.time.ZoneId java-time-ZoneId11018] (. java.time.ZonedDateTime ofStrict java-time-LocalDateTime11016 java-time-ZoneOffset11017 java-time-ZoneId11018)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this11019] (.getMonth this11019)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant11020 ^java.time.ZoneId java-time-ZoneId11021] (. java.time.ZonedDateTime ofInstant java-time-Instant11020 java-time-ZoneId11021)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime11022 ^java.time.ZoneOffset java-time-ZoneOffset11023 ^java.time.ZoneId java-time-ZoneId11024] (. java.time.ZonedDateTime ofInstant java-time-LocalDateTime11022 java-time-ZoneOffset11023 java-time-ZoneId11024)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11025 ^long long11026] (.plusSeconds this11025 long11026)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this11027 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11028] (.get this11027 java-time-temporal-TemporalField11028)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this11029 ^java.lang.Object java-lang-Object11030] (.equals this11029 java-lang-Object11030)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this11031 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11032] (.format this11031 java-time-format-DateTimeFormatter11032)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11033 ^long long11034] (.plusYears this11033 long11034)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this11035 ^long long11036] (.minusDays this11035 long11036)))
