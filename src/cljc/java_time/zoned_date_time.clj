(ns cljc.java-time.zoned-date-time (:import [java.time ZonedDateTime]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48881 ^long long48882] (.minusMinutes this48881 long48882)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48883 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit48884] (.truncatedTo this48883 java-time-temporal-TemporalUnit48884)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48885 ^long long48886] (.minusWeeks this48885 long48886)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this48887] (.toInstant this48887)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48888 ^long long48889] (.plusWeeks this48888 long48889)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this48890 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48891] (.range this48890 java-time-temporal-TemporalField48891)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this48892] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this48892)) (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this48892)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this48893] (.getHour this48893)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48894 ^long long48895] (.minusHours this48894 long48895)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.lang.Integer int48896 ^java.lang.Integer int48897 ^java.lang.Integer int48898 ^java.lang.Integer int48899 ^java.lang.Integer int48900 ^java.lang.Integer int48901 ^java.lang.Integer int48902 ^java.time.ZoneId java-time-ZoneId48903] (. java.time.ZonedDateTime of int48896 int48897 int48898 int48899 int48900 int48901 int48902 java-time-ZoneId48903)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime48904 ^java.time.ZoneId java-time-ZoneId48905] (. java.time.ZonedDateTime of java-time-LocalDateTime48904 java-time-ZoneId48905)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate48906 ^java.time.LocalTime java-time-LocalTime48907 ^java.time.ZoneId java-time-ZoneId48908] (. java.time.ZonedDateTime of java-time-LocalDate48906 java-time-LocalTime48907 java-time-ZoneId48908)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48909 ^java.lang.Integer int48910] (.withMonth this48909 int48910)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this48911 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime48912] (.isEqual this48911 java-time-chrono-ChronoZonedDateTime48912)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this48913] (.getNano this48913)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime48914 ^java.time.ZoneId java-time-ZoneId48915 ^java.time.ZoneOffset java-time-ZoneOffset48916] (. java.time.ZonedDateTime ofLocal java-time-LocalDateTime48914 java-time-ZoneId48915 java-time-ZoneOffset48916)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this48917] (.getYear this48917)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48918 ^long long48919] (.minusSeconds this48918 long48919)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this48920] (.getSecond this48920)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48921 ^long long48922] (.plusNanos this48921 long48922)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this48923] (.getDayOfYear this48923)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this48924 G__48925 G__48926] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48925) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48926)) (clojure.core/let [G__48925 (clojure.core/long G__48925) G__48926 ^"java.time.temporal.TemporalUnit" G__48926] (.plus ^java.time.ZonedDateTime this48924 G__48925 G__48926)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48925) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48926)) (clojure.core/let [G__48925 (clojure.core/long G__48925) G__48926 ^"java.time.temporal.TemporalUnit" G__48926] (.plus ^java.time.ZonedDateTime this48924 G__48925 G__48926)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48925) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48926)) (clojure.core/let [G__48925 (clojure.core/long G__48925) G__48926 ^"java.time.temporal.TemporalUnit" G__48926] (.plus ^java.time.ZonedDateTime this48924 G__48925 G__48926)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this48927 G__48928] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48928)) (clojure.core/let [G__48928 ^"java.time.temporal.TemporalAmount" G__48928] (.plus ^java.time.ZonedDateTime this48927 G__48928)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48928)) (clojure.core/let [G__48928 ^"java.time.temporal.TemporalAmount" G__48928] (.plus ^java.time.ZonedDateTime this48927 G__48928)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48928)) (clojure.core/let [G__48928 ^"java.time.temporal.TemporalAmount" G__48928] (.plus ^java.time.ZonedDateTime this48927 G__48928)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48929 ^java.lang.Integer int48930] (.withHour this48929 int48930)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48931 ^java.lang.Integer int48932] (.withMinute this48931 int48932)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48933 ^long long48934] (.plusMinutes this48933 long48934)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this48935 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery48936] (.query this48935 java-time-temporal-TemporalQuery48936)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this48937] (.getDayOfWeek this48937)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this48938] (.toString this48938)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48939 ^long long48940] (.plusMonths this48939 long48940)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this48941 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime48942] (.isBefore this48941 java-time-chrono-ChronoZonedDateTime48942)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48943 ^long long48944] (.minusMonths this48943 long48944)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this48945 G__48946 G__48947] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48946) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48947)) (clojure.core/let [G__48946 (clojure.core/long G__48946) G__48947 ^"java.time.temporal.TemporalUnit" G__48947] (.minus ^java.time.ZonedDateTime this48945 G__48946 G__48947)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48946) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48947)) (clojure.core/let [G__48946 (clojure.core/long G__48946) G__48947 ^"java.time.temporal.TemporalUnit" G__48947] (.minus ^java.time.ZonedDateTime this48945 G__48946 G__48947)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48946) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48947)) (clojure.core/let [G__48946 (clojure.core/long G__48946) G__48947 ^"java.time.temporal.TemporalUnit" G__48947] (.minus ^java.time.ZonedDateTime this48945 G__48946 G__48947)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this48948 G__48949] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48949)) (clojure.core/let [G__48949 ^"java.time.temporal.TemporalAmount" G__48949] (.minus ^java.time.ZonedDateTime this48948 G__48949)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48949)) (clojure.core/let [G__48949 ^"java.time.temporal.TemporalAmount" G__48949] (.minus ^java.time.ZonedDateTime this48948 G__48949)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48949)) (clojure.core/let [G__48949 ^"java.time.temporal.TemporalAmount" G__48949] (.minus ^java.time.ZonedDateTime this48948 G__48949)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48950] (.withFixedOffsetZone this48950)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48951 ^long long48952] (.plusHours this48951 long48952)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this48953 G__48954] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__48954)) (clojure.core/let [G__48954 ^"java.time.ZoneId" G__48954] (.withZoneSameLocal ^java.time.ZonedDateTime this48953 G__48954)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__48954)) (clojure.core/let [G__48954 ^"java.time.ZoneId" G__48954] (.withZoneSameLocal ^java.time.ZonedDateTime this48953 G__48954)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this48955 G__48956] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__48956)) (clojure.core/let [G__48956 ^"java.time.ZoneId" G__48956] (.withZoneSameInstant ^java.time.ZonedDateTime this48955 G__48956)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__48956)) (clojure.core/let [G__48956 ^"java.time.ZoneId" G__48956] (.withZoneSameInstant ^java.time.ZonedDateTime this48955 G__48956)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48957 ^long long48958] (.plusDays this48957 long48958)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this48959] (.toLocalTime this48959)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this48960 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48961] (.getLong this48960 java-time-temporal-TemporalField48961)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this48962] (.getOffset this48962)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48963 ^java.lang.Integer int48964] (.withYear this48963 int48964)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48965 ^java.lang.Integer int48966] (.withNano this48965 int48966)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this48967] (.toEpochSecond this48967)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this48968] (.toOffsetDateTime this48968)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this48969] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this48969)) (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this48969)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this48970 ^java.time.temporal.Temporal java-time-temporal-Temporal48971 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit48972] (.until this48970 java-time-temporal-Temporal48971 java-time-temporal-TemporalUnit48972)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this48973] (.getZone this48973)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48974 ^java.lang.Integer int48975] (.withDayOfMonth this48974 int48975)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this48976] (.getDayOfMonth this48976)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor48977] (. java.time.ZonedDateTime from java-time-temporal-TemporalAccessor48977)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this48978 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime48979] (.isAfter this48978 java-time-chrono-ChronoZonedDateTime48979)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48980 ^long long48981] (.minusNanos this48980 long48981)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this48982 G__48983] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__48983)) (clojure.core/let [G__48983 ^"java.time.temporal.TemporalField" G__48983] (.isSupported ^java.time.ZonedDateTime this48982 G__48983)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48983)) (clojure.core/let [G__48983 ^"java.time.temporal.TemporalUnit" G__48983] (.isSupported ^java.time.ZonedDateTime this48982 G__48983)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48984 ^long long48985] (.minusYears this48984 long48985)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this48986] (.getChronology this48986)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence48987] (. java.time.ZonedDateTime parse java-lang-CharSequence48987)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence48988 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter48989] (. java.time.ZonedDateTime parse java-lang-CharSequence48988 java-time-format-DateTimeFormatter48989)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this48990 ^java.lang.Integer int48991] (.withSecond this48990 int48991)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this48992] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this48992)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this48992)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this48993] (.getMinute this48993)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this48994] (.hashCode this48994)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this48995 G__48996] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__48996)) (clojure.core/let [G__48996 ^"java.time.temporal.TemporalAdjuster" G__48996] (.with ^java.time.ZonedDateTime this48995 G__48996)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__48996)) (clojure.core/let [G__48996 ^"java.time.temporal.TemporalAdjuster" G__48996] (.with ^java.time.ZonedDateTime this48995 G__48996)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__48996)) (clojure.core/let [G__48996 ^"java.time.temporal.TemporalAdjuster" G__48996] (.with ^java.time.ZonedDateTime this48995 G__48996)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this48997 G__48998 G__48999] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__48998) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48999)) (clojure.core/let [G__48998 ^"java.time.temporal.TemporalField" G__48998 G__48999 (clojure.core/long G__48999)] (.with ^java.time.ZonedDateTime this48997 G__48998 G__48999)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__48998) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48999)) (clojure.core/let [G__48998 ^"java.time.temporal.TemporalField" G__48998 G__48999 (clojure.core/long G__48999)] (.with ^java.time.ZonedDateTime this48997 G__48998 G__48999)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__48998) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48999)) (clojure.core/let [G__48998 ^"java.time.temporal.TemporalField" G__48998 G__48999 (clojure.core/long G__48999)] (.with ^java.time.ZonedDateTime this48997 G__48998 G__48999)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.ZonedDateTime [G__49001] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__49001)) (clojure.core/let [G__49001 ^"java.time.Clock" G__49001] (. java.time.ZonedDateTime now G__49001)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__49001)) (clojure.core/let [G__49001 ^"java.time.ZoneId" G__49001] (. java.time.ZonedDateTime now G__49001)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZonedDateTime [] (. java.time.ZonedDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this49002] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this49002)) (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this49002)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this49003] (.getMonthValue this49003)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49004 ^java.lang.Integer int49005] (.withDayOfYear this49004 int49005)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"] ["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [this49006 G__49007] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__49007)) (clojure.core/let [G__49007 ^"java.lang.Object" G__49007] (.compareTo ^java.time.ZonedDateTime this49006 G__49007)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoZonedDateTime") G__49007)) (clojure.core/let [G__49007 ^"java.time.chrono.ChronoZonedDateTime" G__49007] (.compareTo ^java.time.ZonedDateTime this49006 G__49007)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime49008 ^java.time.ZoneOffset java-time-ZoneOffset49009 ^java.time.ZoneId java-time-ZoneId49010] (. java.time.ZonedDateTime ofStrict java-time-LocalDateTime49008 java-time-ZoneOffset49009 java-time-ZoneId49010)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this49011] (.getMonth this49011)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"] ["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime49012 ^java.time.ZoneOffset java-time-ZoneOffset49013 ^java.time.ZoneId java-time-ZoneId49014] (. java.time.ZonedDateTime ofInstant java-time-LocalDateTime49012 java-time-ZoneOffset49013 java-time-ZoneId49014)) (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant49015 ^java.time.ZoneId java-time-ZoneId49016] (. java.time.ZonedDateTime ofInstant java-time-Instant49015 java-time-ZoneId49016)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49017 ^long long49018] (.plusSeconds this49017 long49018)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this49019 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49020] (.get this49019 java-time-temporal-TemporalField49020)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this49021 ^java.lang.Object java-lang-Object49022] (.equals this49021 java-lang-Object49022)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this49023 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49024] (.format this49023 java-time-format-DateTimeFormatter49024)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49025 ^long long49026] (.plusYears this49025 long49026)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this49027 ^long long49028] (.minusDays this49027 long49028)))
