(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZonedDateTime]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6676 ^long long6677] (.minusMinutes this6676 long6677)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6678 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6679] (.truncatedTo this6678 java-time-temporal-TemporalUnit6679)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6680 ^long long6681] (.minusWeeks this6680 long6681)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this6682] (.toInstant this6682)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6683 ^long long6684] (.plusWeeks this6683 long6684)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this6685 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6686] (.range this6685 java-time-temporal-TemporalField6686)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6687] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this6687)) (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this6687)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6688] (.getHour this6688)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6689 ^long long6690] (.minusHours this6689 long6690)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.lang.Integer int6691 ^java.lang.Integer int6692 ^java.lang.Integer int6693 ^java.lang.Integer int6694 ^java.lang.Integer int6695 ^java.lang.Integer int6696 ^java.lang.Integer int6697 ^java.time.ZoneId java-time-ZoneId6698] (java.time.ZonedDateTime/of int6691 int6692 int6693 int6694 int6695 int6696 int6697 java-time-ZoneId6698)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime6699 ^java.time.ZoneId java-time-ZoneId6700] (java.time.ZonedDateTime/of java-time-LocalDateTime6699 java-time-ZoneId6700)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate6701 ^java.time.LocalTime java-time-LocalTime6702 ^java.time.ZoneId java-time-ZoneId6703] (java.time.ZonedDateTime/of java-time-LocalDate6701 java-time-LocalTime6702 java-time-ZoneId6703)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6704 ^java.lang.Integer int6705] (.withMonth this6704 int6705)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this6706 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6707] (.isEqual this6706 java-time-chrono-ChronoZonedDateTime6707)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6708] (.getNano this6708)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime6709 ^java.time.ZoneId java-time-ZoneId6710 ^java.time.ZoneOffset java-time-ZoneOffset6711] (java.time.ZonedDateTime/ofLocal java-time-LocalDateTime6709 java-time-ZoneId6710 java-time-ZoneOffset6711)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6712] (.getYear this6712)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6713 ^long long6714] (.minusSeconds this6713 long6714)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6715] (.getSecond this6715)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6716 ^long long6717] (.plusNanos this6716 long6717)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6718] (.getDayOfYear this6718)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6719 G__6720] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6720)) (clojure.core/let [G__6720 ^"java.time.temporal.TemporalAmount" G__6720] (.plus ^java.time.ZonedDateTime this6719 G__6720)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6720)) (clojure.core/let [G__6720 ^"java.time.temporal.TemporalAmount" G__6720] (.plus ^java.time.ZonedDateTime this6719 G__6720)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6720)) (clojure.core/let [G__6720 ^"java.time.temporal.TemporalAmount" G__6720] (.plus ^java.time.ZonedDateTime this6719 G__6720)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6721 G__6722 G__6723] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6722) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6723)) (clojure.core/let [G__6722 (clojure.core/long G__6722) G__6723 ^"java.time.temporal.TemporalUnit" G__6723] (.plus ^java.time.ZonedDateTime this6721 G__6722 G__6723)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6722) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6723)) (clojure.core/let [G__6722 (clojure.core/long G__6722) G__6723 ^"java.time.temporal.TemporalUnit" G__6723] (.plus ^java.time.ZonedDateTime this6721 G__6722 G__6723)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6722) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6723)) (clojure.core/let [G__6722 (clojure.core/long G__6722) G__6723 ^"java.time.temporal.TemporalUnit" G__6723] (.plus ^java.time.ZonedDateTime this6721 G__6722 G__6723)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6724 ^java.lang.Integer int6725] (.withHour this6724 int6725)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6726 ^java.lang.Integer int6727] (.withMinute this6726 int6727)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6728 ^long long6729] (.plusMinutes this6728 long6729)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this6730 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery6731] (.query this6730 java-time-temporal-TemporalQuery6731)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this6732] (.getDayOfWeek this6732)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this6733] (.toString this6733)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6734 ^long long6735] (.plusMonths this6734 long6735)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this6736 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6737] (.isBefore this6736 java-time-chrono-ChronoZonedDateTime6737)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6738 ^long long6739] (.minusMonths this6738 long6739)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6740 G__6741 G__6742] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6741) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6742)) (clojure.core/let [G__6741 (clojure.core/long G__6741) G__6742 ^"java.time.temporal.TemporalUnit" G__6742] (.minus ^java.time.ZonedDateTime this6740 G__6741 G__6742)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6741) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6742)) (clojure.core/let [G__6741 (clojure.core/long G__6741) G__6742 ^"java.time.temporal.TemporalUnit" G__6742] (.minus ^java.time.ZonedDateTime this6740 G__6741 G__6742)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6741) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6742)) (clojure.core/let [G__6741 (clojure.core/long G__6741) G__6742 ^"java.time.temporal.TemporalUnit" G__6742] (.minus ^java.time.ZonedDateTime this6740 G__6741 G__6742)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6743 G__6744] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6744)) (clojure.core/let [G__6744 ^"java.time.temporal.TemporalAmount" G__6744] (.minus ^java.time.ZonedDateTime this6743 G__6744)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6744)) (clojure.core/let [G__6744 ^"java.time.temporal.TemporalAmount" G__6744] (.minus ^java.time.ZonedDateTime this6743 G__6744)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6744)) (clojure.core/let [G__6744 ^"java.time.temporal.TemporalAmount" G__6744] (.minus ^java.time.ZonedDateTime this6743 G__6744)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6745] (.withFixedOffsetZone this6745)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6746 ^long long6747] (.plusHours this6746 long6747)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this6748 G__6749] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6749)) (clojure.core/let [G__6749 ^"java.time.ZoneId" G__6749] (.withZoneSameLocal ^java.time.ZonedDateTime this6748 G__6749)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6749)) (clojure.core/let [G__6749 ^"java.time.ZoneId" G__6749] (.withZoneSameLocal ^java.time.ZonedDateTime this6748 G__6749)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this6750 G__6751] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6751)) (clojure.core/let [G__6751 ^"java.time.ZoneId" G__6751] (.withZoneSameInstant ^java.time.ZonedDateTime this6750 G__6751)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6751)) (clojure.core/let [G__6751 ^"java.time.ZoneId" G__6751] (.withZoneSameInstant ^java.time.ZonedDateTime this6750 G__6751)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6752 ^long long6753] (.plusDays this6752 long6753)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this6754] (.toLocalTime this6754)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this6755 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6756] (.getLong this6755 java-time-temporal-TemporalField6756)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this6757] (.getOffset this6757)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6758 ^java.lang.Integer int6759] (.withYear this6758 int6759)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6760 ^java.lang.Integer int6761] (.withNano this6760 int6761)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this6762] (.toEpochSecond this6762)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this6763] (.toOffsetDateTime this6763)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6764] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this6764)) (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this6764)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this6765 ^java.time.temporal.Temporal java-time-temporal-Temporal6766 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6767] (.until this6765 java-time-temporal-Temporal6766 java-time-temporal-TemporalUnit6767)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this6768] (.getZone this6768)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6769 ^java.lang.Integer int6770] (.withDayOfMonth this6769 int6770)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6771] (.getDayOfMonth this6771)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor6772] (java.time.ZonedDateTime/from java-time-temporal-TemporalAccessor6772)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this6773 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6774] (.isAfter this6773 java-time-chrono-ChronoZonedDateTime6774)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6775 ^long long6776] (.minusNanos this6775 long6776)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this6777 G__6778] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6778)) (clojure.core/let [G__6778 ^"java.time.temporal.TemporalUnit" G__6778] (.isSupported ^java.time.ZonedDateTime this6777 G__6778)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6778)) (clojure.core/let [G__6778 ^"java.time.temporal.TemporalField" G__6778] (.isSupported ^java.time.ZonedDateTime this6777 G__6778)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6779 ^long long6780] (.minusYears this6779 long6780)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this6781] (.getChronology this6781)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence6782] (java.time.ZonedDateTime/parse java-lang-CharSequence6782)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence6783 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6784] (java.time.ZonedDateTime/parse java-lang-CharSequence6783 java-time-format-DateTimeFormatter6784)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6785 ^java.lang.Integer int6786] (.withSecond this6785 int6786)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6787] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this6787)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this6787)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6788] (.getMinute this6788)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6789] (.hashCode this6789)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this6790 G__6791] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6791)) (clojure.core/let [G__6791 ^"java.time.temporal.TemporalAdjuster" G__6791] (.with ^java.time.ZonedDateTime this6790 G__6791)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6791)) (clojure.core/let [G__6791 ^"java.time.temporal.TemporalAdjuster" G__6791] (.with ^java.time.ZonedDateTime this6790 G__6791)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6791)) (clojure.core/let [G__6791 ^"java.time.temporal.TemporalAdjuster" G__6791] (.with ^java.time.ZonedDateTime this6790 G__6791)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6792 G__6793 G__6794] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6793) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6794)) (clojure.core/let [G__6793 ^"java.time.temporal.TemporalField" G__6793 G__6794 (clojure.core/long G__6794)] (.with ^java.time.ZonedDateTime this6792 G__6793 G__6794)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6793) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6794)) (clojure.core/let [G__6793 ^"java.time.temporal.TemporalField" G__6793 G__6794 (clojure.core/long G__6794)] (.with ^java.time.ZonedDateTime this6792 G__6793 G__6794)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6793) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6794)) (clojure.core/let [G__6793 ^"java.time.temporal.TemporalField" G__6793 G__6794 (clojure.core/long G__6794)] (.with ^java.time.ZonedDateTime this6792 G__6793 G__6794)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.ZonedDateTime [G__6796] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__6796)) (clojure.core/let [G__6796 ^"java.time.Clock" G__6796] (java.time.ZonedDateTime/now G__6796)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6796)) (clojure.core/let [G__6796 ^"java.time.ZoneId" G__6796] (java.time.ZonedDateTime/now G__6796)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZonedDateTime [] (java.time.ZonedDateTime/now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6797] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this6797)) (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this6797)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6798] (.getMonthValue this6798)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6799 ^java.lang.Integer int6800] (.withDayOfYear this6799 int6800)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"] ["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Integer [this6801 G__6802] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoZonedDateTime") G__6802)) (clojure.core/let [G__6802 ^"java.time.chrono.ChronoZonedDateTime" G__6802] (.compareTo ^java.time.ZonedDateTime this6801 G__6802)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__6802)) (clojure.core/let [G__6802 ^"java.lang.Object" G__6802] (.compareTo ^java.time.ZonedDateTime this6801 G__6802)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime6803 ^java.time.ZoneOffset java-time-ZoneOffset6804 ^java.time.ZoneId java-time-ZoneId6805] (java.time.ZonedDateTime/ofStrict java-time-LocalDateTime6803 java-time-ZoneOffset6804 java-time-ZoneId6805)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this6806] (.getMonth this6806)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"] ["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime6807 ^java.time.ZoneOffset java-time-ZoneOffset6808 ^java.time.ZoneId java-time-ZoneId6809] (java.time.ZonedDateTime/ofInstant java-time-LocalDateTime6807 java-time-ZoneOffset6808 java-time-ZoneId6809)) (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant6810 ^java.time.ZoneId java-time-ZoneId6811] (java.time.ZonedDateTime/ofInstant java-time-Instant6810 java-time-ZoneId6811)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6812 ^long long6813] (.plusSeconds this6812 long6813)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6814 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6815] (.get this6814 java-time-temporal-TemporalField6815)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this6816 ^java.lang.Object java-lang-Object6817] (.equals this6816 java-lang-Object6817)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this6818 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6819] (.format this6818 java-time-format-DateTimeFormatter6819)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6820 ^long long6821] (.plusYears this6820 long6821)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6822 ^long long6823] (.minusDays this6822 long6823)))
