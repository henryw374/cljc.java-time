(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZonedDateTime]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3667 ^long long3668] (.minusMinutes this3667 long3668)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3669 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3670] (.truncatedTo this3669 java-time-temporal-TemporalUnit3670)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3671 ^long long3672] (.minusWeeks this3671 long3672)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this3673] (.toInstant this3673)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3674 ^long long3675] (.plusWeeks this3674 long3675)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this3676 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3677] (.range this3676 java-time-temporal-TemporalField3677)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3678] (.withEarlierOffsetAtOverlap this3678)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3679] (.getHour this3679)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3680 ^long long3681] (.minusHours this3680 long3681)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime3682 ^java.time.ZoneId java-time-ZoneId3683] (java.time.ZonedDateTime/of java-time-LocalDateTime3682 java-time-ZoneId3683)) (^java.time.ZonedDateTime [^java.lang.Integer int3684 ^java.lang.Integer int3685 ^java.lang.Integer int3686 ^java.lang.Integer int3687 ^java.lang.Integer int3688 ^java.lang.Integer int3689 ^java.lang.Integer int3690 ^java.time.ZoneId java-time-ZoneId3691] (java.time.ZonedDateTime/of int3684 int3685 int3686 int3687 int3688 int3689 int3690 java-time-ZoneId3691)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate3692 ^java.time.LocalTime java-time-LocalTime3693 ^java.time.ZoneId java-time-ZoneId3694] (java.time.ZonedDateTime/of java-time-LocalDate3692 java-time-LocalTime3693 java-time-ZoneId3694)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3695 ^java.lang.Integer int3696] (.withMonth this3695 int3696)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this3697 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3698] (.isEqual this3697 java-time-chrono-ChronoZonedDateTime3698)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3699] (.getNano this3699)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime3700 ^java.time.ZoneId java-time-ZoneId3701 ^java.time.ZoneOffset java-time-ZoneOffset3702] (java.time.ZonedDateTime/ofLocal java-time-LocalDateTime3700 java-time-ZoneId3701 java-time-ZoneOffset3702)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3703] (.getYear this3703)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3704 ^long long3705] (.minusSeconds this3704 long3705)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3706] (.getSecond this3706)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3707 ^long long3708] (.plusNanos this3707 long3708)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3709] (.getDayOfYear this3709)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3710 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3711] (.plus this3710 java-time-temporal-TemporalAmount3711)) (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3712 ^long long3713 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3714] (.plus this3712 long3713 java-time-temporal-TemporalUnit3714)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3715 ^java.lang.Integer int3716] (.withHour this3715 int3716)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3717 ^java.lang.Integer int3718] (.withMinute this3717 int3718)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3719 ^long long3720] (.plusMinutes this3719 long3720)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this3721 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3722] (.query this3721 java-time-temporal-TemporalQuery3722)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this3723] (.getDayOfWeek this3723)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this3724] (.toString this3724)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3725 ^long long3726] (.plusMonths this3725 long3726)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this3727 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3728] (.isBefore this3727 java-time-chrono-ChronoZonedDateTime3728)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3729 ^long long3730] (.minusMonths this3729 long3730)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3731 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3732] (.minus this3731 java-time-temporal-TemporalAmount3732)) (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3733 ^long long3734 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3735] (.minus this3733 long3734 java-time-temporal-TemporalUnit3735)))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3736] (.withFixedOffsetZone this3736)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3737 ^long long3738] (.plusHours this3737 long3738)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3739 ^java.time.ZoneId java-time-ZoneId3740] (.withZoneSameLocal this3739 java-time-ZoneId3740)))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3741 ^java.time.ZoneId java-time-ZoneId3742] (.withZoneSameInstant this3741 java-time-ZoneId3742)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3743 ^long long3744] (.plusDays this3743 long3744)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this3745] (.toLocalTime this3745)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this3746 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3747] (.getLong this3746 java-time-temporal-TemporalField3747)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this3748] (.getOffset this3748)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3749 ^java.lang.Integer int3750] (.withYear this3749 int3750)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3751 ^java.lang.Integer int3752] (.withNano this3751 int3752)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this3753] (.toEpochSecond this3753)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this3754] (.toOffsetDateTime this3754)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3755] (.withLaterOffsetAtOverlap this3755)))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this3756 ^java.time.temporal.Temporal java-time-temporal-Temporal3757 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3758] (.until this3756 java-time-temporal-Temporal3757 java-time-temporal-TemporalUnit3758)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this3759] (.getZone this3759)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3760 ^java.lang.Integer int3761] (.withDayOfMonth this3760 int3761)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3762] (.getDayOfMonth this3762)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor3763] (java.time.ZonedDateTime/from java-time-temporal-TemporalAccessor3763)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this3764 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3765] (.isAfter this3764 java-time-chrono-ChronoZonedDateTime3765)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3766 ^long long3767] (.minusNanos this3766 long3767)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this3768 G__3769] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__3769)) (clojure.core/let [G__3769 ^"java.time.temporal.TemporalField" G__3769] (.isSupported ^java.time.ZonedDateTime this3768 G__3769)) (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__3769)) (clojure.core/let [G__3769 ^"java.time.temporal.ChronoUnit" G__3769] (.isSupported ^java.time.ZonedDateTime this3768 G__3769)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3770 ^long long3771] (.minusYears this3770 long3771)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this3772] (.getChronology this3772)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence3773 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3774] (java.time.ZonedDateTime/parse java-lang-CharSequence3773 java-time-format-DateTimeFormatter3774)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence3775] (java.time.ZonedDateTime/parse java-lang-CharSequence3775)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3776 ^java.lang.Integer int3777] (.withSecond this3776 int3777)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalDate [^java.time.ZonedDateTime this3778] (.toLocalDate this3778)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3779] (.getMinute this3779)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3780] (.hashCode this3780)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3781 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster3782] (.with this3781 java-time-temporal-TemporalAdjuster3782)) (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3783 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3784 ^long long3785] (.with this3783 java-time-temporal-TemporalField3784 long3785)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.ZonedDateTime [] (java.time.ZonedDateTime/now)) (^java.time.ZonedDateTime [G__3787] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__3787)) (clojure.core/let [G__3787 ^"java.time.Clock" G__3787] (java.time.ZonedDateTime/now G__3787)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__3787)) (clojure.core/let [G__3787 ^"java.time.ZoneId" G__3787] (java.time.ZonedDateTime/now G__3787)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalDateTime [^java.time.ZonedDateTime this3788] (.toLocalDateTime this3788)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3789] (.getMonthValue this3789)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3790 ^java.lang.Integer int3791] (.withDayOfYear this3790 int3791)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3792 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3793] (.compareTo this3792 java-time-chrono-ChronoZonedDateTime3793)))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime3794 ^java.time.ZoneOffset java-time-ZoneOffset3795 ^java.time.ZoneId java-time-ZoneId3796] (java.time.ZonedDateTime/ofStrict java-time-LocalDateTime3794 java-time-ZoneOffset3795 java-time-ZoneId3796)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this3797] (.getMonth this3797)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"] ["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime3798 ^java.time.ZoneOffset java-time-ZoneOffset3799 ^java.time.ZoneId java-time-ZoneId3800] (java.time.ZonedDateTime/ofInstant java-time-LocalDateTime3798 java-time-ZoneOffset3799 java-time-ZoneId3800)) (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant3801 ^java.time.ZoneId java-time-ZoneId3802] (java.time.ZonedDateTime/ofInstant java-time-Instant3801 java-time-ZoneId3802)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3803 ^long long3804] (.plusSeconds this3803 long3804)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3805 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3806] (.get this3805 java-time-temporal-TemporalField3806)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this3807 ^java.lang.Object java-lang-Object3808] (.equals this3807 java-lang-Object3808)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this3809 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3810] (.format this3809 java-time-format-DateTimeFormatter3810)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3811 ^long long3812] (.plusYears this3811 long3812)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3813 ^long long3814] (.minusDays this3813 long3814)))
