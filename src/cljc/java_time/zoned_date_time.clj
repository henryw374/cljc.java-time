(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZonedDateTime]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3668 ^long long3669] (.minusMinutes this3668 long3669)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3670 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3671] (.truncatedTo this3670 java-time-temporal-TemporalUnit3671)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3672 ^long long3673] (.minusWeeks this3672 long3673)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this3674] (.toInstant this3674)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3675 ^long long3676] (.plusWeeks this3675 long3676)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this3677 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3678] (.range this3677 java-time-temporal-TemporalField3678)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3679] (.withEarlierOffsetAtOverlap this3679)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3680] (.getHour this3680)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3681 ^long long3682] (.minusHours this3681 long3682)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime3683 ^java.time.ZoneId java-time-ZoneId3684] (java.time.ZonedDateTime/of java-time-LocalDateTime3683 java-time-ZoneId3684)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate3685 ^java.time.LocalTime java-time-LocalTime3686 ^java.time.ZoneId java-time-ZoneId3687] (java.time.ZonedDateTime/of java-time-LocalDate3685 java-time-LocalTime3686 java-time-ZoneId3687)) (^java.time.ZonedDateTime [^java.lang.Integer int3688 ^java.lang.Integer int3689 ^java.lang.Integer int3690 ^java.lang.Integer int3691 ^java.lang.Integer int3692 ^java.lang.Integer int3693 ^java.lang.Integer int3694 ^java.time.ZoneId java-time-ZoneId3695] (java.time.ZonedDateTime/of int3688 int3689 int3690 int3691 int3692 int3693 int3694 java-time-ZoneId3695)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3696 ^java.lang.Integer int3697] (.withMonth this3696 int3697)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this3698 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3699] (.isEqual this3698 java-time-chrono-ChronoZonedDateTime3699)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3700] (.getNano this3700)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime3701 ^java.time.ZoneId java-time-ZoneId3702 ^java.time.ZoneOffset java-time-ZoneOffset3703] (java.time.ZonedDateTime/ofLocal java-time-LocalDateTime3701 java-time-ZoneId3702 java-time-ZoneOffset3703)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3704] (.getYear this3704)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3705 ^long long3706] (.minusSeconds this3705 long3706)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3707] (.getSecond this3707)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3708 ^long long3709] (.plusNanos this3708 long3709)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3710] (.getDayOfYear this3710)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3711 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3712] (.plus this3711 java-time-temporal-TemporalAmount3712)) (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3713 ^long long3714 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3715] (.plus this3713 long3714 java-time-temporal-TemporalUnit3715)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3716 ^java.lang.Integer int3717] (.withHour this3716 int3717)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3718 ^java.lang.Integer int3719] (.withMinute this3718 int3719)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3720 ^long long3721] (.plusMinutes this3720 long3721)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this3722 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3723] (.query this3722 java-time-temporal-TemporalQuery3723)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this3724] (.getDayOfWeek this3724)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this3725] (.toString this3725)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3726 ^long long3727] (.plusMonths this3726 long3727)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this3728 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3729] (.isBefore this3728 java-time-chrono-ChronoZonedDateTime3729)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3730 ^long long3731] (.minusMonths this3730 long3731)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3732 ^long long3733 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3734] (.minus this3732 long3733 java-time-temporal-TemporalUnit3734)) (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3735 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3736] (.minus this3735 java-time-temporal-TemporalAmount3736)))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3737] (.withFixedOffsetZone this3737)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3738 ^long long3739] (.plusHours this3738 long3739)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3740 ^java.time.ZoneId java-time-ZoneId3741] (.withZoneSameLocal this3740 java-time-ZoneId3741)))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3742 ^java.time.ZoneId java-time-ZoneId3743] (.withZoneSameInstant this3742 java-time-ZoneId3743)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3744 ^long long3745] (.plusDays this3744 long3745)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this3746] (.toLocalTime this3746)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this3747 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3748] (.getLong this3747 java-time-temporal-TemporalField3748)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this3749] (.getOffset this3749)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3750 ^java.lang.Integer int3751] (.withYear this3750 int3751)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3752 ^java.lang.Integer int3753] (.withNano this3752 int3753)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this3754] (.toEpochSecond this3754)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this3755] (.toOffsetDateTime this3755)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3756] (.withLaterOffsetAtOverlap this3756)))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this3757 ^java.time.temporal.Temporal java-time-temporal-Temporal3758 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3759] (.until this3757 java-time-temporal-Temporal3758 java-time-temporal-TemporalUnit3759)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this3760] (.getZone this3760)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3761 ^java.lang.Integer int3762] (.withDayOfMonth this3761 int3762)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3763] (.getDayOfMonth this3763)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor3764] (java.time.ZonedDateTime/from java-time-temporal-TemporalAccessor3764)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this3765 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3766] (.isAfter this3765 java-time-chrono-ChronoZonedDateTime3766)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3767 ^long long3768] (.minusNanos this3767 long3768)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this3769 G__3770] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__3770)) (clojure.core/let [G__3770 ^"java.time.temporal.TemporalField" G__3770] (.isSupported ^java.time.ZonedDateTime this3769 G__3770)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalUnit G__3770)) (clojure.core/let [G__3770 ^"java.time.temporal.TemporalUnit" G__3770] (.isSupported ^java.time.ZonedDateTime this3769 G__3770)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3771 ^long long3772] (.minusYears this3771 long3772)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this3773] (.getChronology this3773)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence3774] (java.time.ZonedDateTime/parse java-lang-CharSequence3774)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence3775 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3776] (java.time.ZonedDateTime/parse java-lang-CharSequence3775 java-time-format-DateTimeFormatter3776)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3777 ^java.lang.Integer int3778] (.withSecond this3777 int3778)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalDate [^java.time.ZonedDateTime this3779] (.toLocalDate this3779)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3780] (.getMinute this3780)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3781] (.hashCode this3781)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3782 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3783 ^long long3784] (.with this3782 java-time-temporal-TemporalField3783 long3784)) (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3785 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster3786] (.with this3785 java-time-temporal-TemporalAdjuster3786)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^java.time.ZonedDateTime [G__3788] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__3788)) (clojure.core/let [G__3788 ^"java.time.ZoneId" G__3788] (java.time.ZonedDateTime/now G__3788)) (clojure.core/and (clojure.core/instance? java.time.Clock G__3788)) (clojure.core/let [G__3788 ^"java.time.Clock" G__3788] (java.time.ZonedDateTime/now G__3788)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZonedDateTime [] (java.time.ZonedDateTime/now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalDateTime [^java.time.ZonedDateTime this3789] (.toLocalDateTime this3789)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3790] (.getMonthValue this3790)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3791 ^java.lang.Integer int3792] (.withDayOfYear this3791 int3792)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3793 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3794] (.compareTo this3793 java-time-chrono-ChronoZonedDateTime3794)))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime3795 ^java.time.ZoneOffset java-time-ZoneOffset3796 ^java.time.ZoneId java-time-ZoneId3797] (java.time.ZonedDateTime/ofStrict java-time-LocalDateTime3795 java-time-ZoneOffset3796 java-time-ZoneId3797)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this3798] (.getMonth this3798)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant3799 ^java.time.ZoneId java-time-ZoneId3800] (java.time.ZonedDateTime/ofInstant java-time-Instant3799 java-time-ZoneId3800)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime3801 ^java.time.ZoneOffset java-time-ZoneOffset3802 ^java.time.ZoneId java-time-ZoneId3803] (java.time.ZonedDateTime/ofInstant java-time-LocalDateTime3801 java-time-ZoneOffset3802 java-time-ZoneId3803)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3804 ^long long3805] (.plusSeconds this3804 long3805)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3806 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3807] (.get this3806 java-time-temporal-TemporalField3807)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this3808 ^java.lang.Object java-lang-Object3809] (.equals this3808 java-lang-Object3809)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this3810 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3811] (.format this3810 java-time-format-DateTimeFormatter3811)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3812 ^long long3813] (.plusYears this3812 long3813)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3814 ^long long3815] (.minusDays this3814 long3815)))
