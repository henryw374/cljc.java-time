(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZonedDateTime]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6656 ^long long6657] (.minusMinutes this6656 long6657)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6658 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6659] (.truncatedTo this6658 java-time-temporal-TemporalUnit6659)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6660 ^long long6661] (.minusWeeks this6660 long6661)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this6662] (.toInstant this6662)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6663 ^long long6664] (.plusWeeks this6663 long6664)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this6665 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6666] (.range this6665 java-time-temporal-TemporalField6666)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6667] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this6667)) (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this6667)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6668] (.getHour this6668)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6669 ^long long6670] (.minusHours this6669 long6670)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.lang.Integer int6671 ^java.lang.Integer int6672 ^java.lang.Integer int6673 ^java.lang.Integer int6674 ^java.lang.Integer int6675 ^java.lang.Integer int6676 ^java.lang.Integer int6677 ^java.time.ZoneId java-time-ZoneId6678] (java.time.ZonedDateTime/of int6671 int6672 int6673 int6674 int6675 int6676 int6677 java-time-ZoneId6678)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime6679 ^java.time.ZoneId java-time-ZoneId6680] (java.time.ZonedDateTime/of java-time-LocalDateTime6679 java-time-ZoneId6680)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate6681 ^java.time.LocalTime java-time-LocalTime6682 ^java.time.ZoneId java-time-ZoneId6683] (java.time.ZonedDateTime/of java-time-LocalDate6681 java-time-LocalTime6682 java-time-ZoneId6683)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6684 ^java.lang.Integer int6685] (.withMonth this6684 int6685)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this6686 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6687] (.isEqual this6686 java-time-chrono-ChronoZonedDateTime6687)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6688] (.getNano this6688)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime6689 ^java.time.ZoneId java-time-ZoneId6690 ^java.time.ZoneOffset java-time-ZoneOffset6691] (java.time.ZonedDateTime/ofLocal java-time-LocalDateTime6689 java-time-ZoneId6690 java-time-ZoneOffset6691)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6692] (.getYear this6692)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6693 ^long long6694] (.minusSeconds this6693 long6694)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6695] (.getSecond this6695)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6696 ^long long6697] (.plusNanos this6696 long6697)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6698] (.getDayOfYear this6698)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6699 G__6700] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6700)) (clojure.core/let [G__6700 ^"java.time.temporal.TemporalAmount" G__6700] (.plus ^java.time.ZonedDateTime this6699 G__6700)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6700)) (clojure.core/let [G__6700 ^"java.time.temporal.TemporalAmount" G__6700] (.plus ^java.time.ZonedDateTime this6699 G__6700)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6700)) (clojure.core/let [G__6700 ^"java.time.temporal.TemporalAmount" G__6700] (.plus ^java.time.ZonedDateTime this6699 G__6700)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6701 G__6702 G__6703] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6702) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6703)) (clojure.core/let [G__6702 (clojure.core/long G__6702) G__6703 ^"java.time.temporal.TemporalUnit" G__6703] (.plus ^java.time.ZonedDateTime this6701 G__6702 G__6703)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6702) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6703)) (clojure.core/let [G__6702 (clojure.core/long G__6702) G__6703 ^"java.time.temporal.TemporalUnit" G__6703] (.plus ^java.time.ZonedDateTime this6701 G__6702 G__6703)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6702) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6703)) (clojure.core/let [G__6702 (clojure.core/long G__6702) G__6703 ^"java.time.temporal.TemporalUnit" G__6703] (.plus ^java.time.ZonedDateTime this6701 G__6702 G__6703)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6704 ^java.lang.Integer int6705] (.withHour this6704 int6705)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6706 ^java.lang.Integer int6707] (.withMinute this6706 int6707)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6708 ^long long6709] (.plusMinutes this6708 long6709)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this6710 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery6711] (.query this6710 java-time-temporal-TemporalQuery6711)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this6712] (.getDayOfWeek this6712)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this6713] (.toString this6713)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6714 ^long long6715] (.plusMonths this6714 long6715)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this6716 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6717] (.isBefore this6716 java-time-chrono-ChronoZonedDateTime6717)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6718 ^long long6719] (.minusMonths this6718 long6719)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6720 G__6721] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6721)) (clojure.core/let [G__6721 ^"java.time.temporal.TemporalAmount" G__6721] (.minus ^java.time.ZonedDateTime this6720 G__6721)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6721)) (clojure.core/let [G__6721 ^"java.time.temporal.TemporalAmount" G__6721] (.minus ^java.time.ZonedDateTime this6720 G__6721)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6721)) (clojure.core/let [G__6721 ^"java.time.temporal.TemporalAmount" G__6721] (.minus ^java.time.ZonedDateTime this6720 G__6721)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6722 G__6723 G__6724] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6723) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6724)) (clojure.core/let [G__6723 (clojure.core/long G__6723) G__6724 ^"java.time.temporal.TemporalUnit" G__6724] (.minus ^java.time.ZonedDateTime this6722 G__6723 G__6724)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6723) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6724)) (clojure.core/let [G__6723 (clojure.core/long G__6723) G__6724 ^"java.time.temporal.TemporalUnit" G__6724] (.minus ^java.time.ZonedDateTime this6722 G__6723 G__6724)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6723) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6724)) (clojure.core/let [G__6723 (clojure.core/long G__6723) G__6724 ^"java.time.temporal.TemporalUnit" G__6724] (.minus ^java.time.ZonedDateTime this6722 G__6723 G__6724)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6725] (.withFixedOffsetZone this6725)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6726 ^long long6727] (.plusHours this6726 long6727)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this6728 G__6729] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6729)) (clojure.core/let [G__6729 ^"java.time.ZoneId" G__6729] (.withZoneSameLocal ^java.time.ZonedDateTime this6728 G__6729)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6729)) (clojure.core/let [G__6729 ^"java.time.ZoneId" G__6729] (.withZoneSameLocal ^java.time.ZonedDateTime this6728 G__6729)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this6730 G__6731] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6731)) (clojure.core/let [G__6731 ^"java.time.ZoneId" G__6731] (.withZoneSameInstant ^java.time.ZonedDateTime this6730 G__6731)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6731)) (clojure.core/let [G__6731 ^"java.time.ZoneId" G__6731] (.withZoneSameInstant ^java.time.ZonedDateTime this6730 G__6731)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6732 ^long long6733] (.plusDays this6732 long6733)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this6734] (.toLocalTime this6734)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this6735 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6736] (.getLong this6735 java-time-temporal-TemporalField6736)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this6737] (.getOffset this6737)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6738 ^java.lang.Integer int6739] (.withYear this6738 int6739)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6740 ^java.lang.Integer int6741] (.withNano this6740 int6741)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this6742] (.toEpochSecond this6742)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this6743] (.toOffsetDateTime this6743)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6744] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this6744)) (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this6744)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this6745 ^java.time.temporal.Temporal java-time-temporal-Temporal6746 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6747] (.until this6745 java-time-temporal-Temporal6746 java-time-temporal-TemporalUnit6747)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this6748] (.getZone this6748)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6749 ^java.lang.Integer int6750] (.withDayOfMonth this6749 int6750)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6751] (.getDayOfMonth this6751)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor6752] (java.time.ZonedDateTime/from java-time-temporal-TemporalAccessor6752)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this6753 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6754] (.isAfter this6753 java-time-chrono-ChronoZonedDateTime6754)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6755 ^long long6756] (.minusNanos this6755 long6756)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this6757 G__6758] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6758)) (clojure.core/let [G__6758 ^"java.time.temporal.TemporalField" G__6758] (.isSupported ^java.time.ZonedDateTime this6757 G__6758)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6758)) (clojure.core/let [G__6758 ^"java.time.temporal.TemporalUnit" G__6758] (.isSupported ^java.time.ZonedDateTime this6757 G__6758)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6759 ^long long6760] (.minusYears this6759 long6760)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this6761] (.getChronology this6761)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence6762 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6763] (java.time.ZonedDateTime/parse java-lang-CharSequence6762 java-time-format-DateTimeFormatter6763)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence6764] (java.time.ZonedDateTime/parse java-lang-CharSequence6764)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6765 ^java.lang.Integer int6766] (.withSecond this6765 int6766)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6767] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this6767)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this6767)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6768] (.getMinute this6768)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6769] (.hashCode this6769)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this6770 G__6771] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6771)) (clojure.core/let [G__6771 ^"java.time.temporal.TemporalAdjuster" G__6771] (.with ^java.time.ZonedDateTime this6770 G__6771)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6771)) (clojure.core/let [G__6771 ^"java.time.temporal.TemporalAdjuster" G__6771] (.with ^java.time.ZonedDateTime this6770 G__6771)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6771)) (clojure.core/let [G__6771 ^"java.time.temporal.TemporalAdjuster" G__6771] (.with ^java.time.ZonedDateTime this6770 G__6771)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6772 G__6773 G__6774] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6773) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6774)) (clojure.core/let [G__6773 ^"java.time.temporal.TemporalField" G__6773 G__6774 (clojure.core/long G__6774)] (.with ^java.time.ZonedDateTime this6772 G__6773 G__6774)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6773) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6774)) (clojure.core/let [G__6773 ^"java.time.temporal.TemporalField" G__6773 G__6774 (clojure.core/long G__6774)] (.with ^java.time.ZonedDateTime this6772 G__6773 G__6774)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6773) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6774)) (clojure.core/let [G__6773 ^"java.time.temporal.TemporalField" G__6773 G__6774 (clojure.core/long G__6774)] (.with ^java.time.ZonedDateTime this6772 G__6773 G__6774)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.ZonedDateTime [] (java.time.ZonedDateTime/now)) (^java.time.ZonedDateTime [G__6776] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__6776)) (clojure.core/let [G__6776 ^"java.time.Clock" G__6776] (java.time.ZonedDateTime/now G__6776)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6776)) (clojure.core/let [G__6776 ^"java.time.ZoneId" G__6776] (java.time.ZonedDateTime/now G__6776)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6777] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this6777)) (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this6777)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6778] (.getMonthValue this6778)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6779 ^java.lang.Integer int6780] (.withDayOfYear this6779 int6780)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"] ["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [this6781 G__6782] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__6782)) (clojure.core/let [G__6782 ^"java.lang.Object" G__6782] (.compareTo ^java.time.ZonedDateTime this6781 G__6782)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoZonedDateTime") G__6782)) (clojure.core/let [G__6782 ^"java.time.chrono.ChronoZonedDateTime" G__6782] (.compareTo ^java.time.ZonedDateTime this6781 G__6782)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime6783 ^java.time.ZoneOffset java-time-ZoneOffset6784 ^java.time.ZoneId java-time-ZoneId6785] (java.time.ZonedDateTime/ofStrict java-time-LocalDateTime6783 java-time-ZoneOffset6784 java-time-ZoneId6785)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this6786] (.getMonth this6786)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant6787 ^java.time.ZoneId java-time-ZoneId6788] (java.time.ZonedDateTime/ofInstant java-time-Instant6787 java-time-ZoneId6788)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime6789 ^java.time.ZoneOffset java-time-ZoneOffset6790 ^java.time.ZoneId java-time-ZoneId6791] (java.time.ZonedDateTime/ofInstant java-time-LocalDateTime6789 java-time-ZoneOffset6790 java-time-ZoneId6791)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6792 ^long long6793] (.plusSeconds this6792 long6793)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6794 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6795] (.get this6794 java-time-temporal-TemporalField6795)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this6796 ^java.lang.Object java-lang-Object6797] (.equals this6796 java-lang-Object6797)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this6798 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6799] (.format this6798 java-time-format-DateTimeFormatter6799)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6800 ^long long6801] (.plusYears this6800 long6801)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6802 ^long long6803] (.minusDays this6802 long6803)))
