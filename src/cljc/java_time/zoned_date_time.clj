(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time ZonedDateTime]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6433 ^long long6434] (.minusMinutes this6433 long6434)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6435 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6436] (.truncatedTo this6435 java-time-temporal-TemporalUnit6436)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6437 ^long long6438] (.minusWeeks this6437 long6438)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this6439] (.toInstant this6439)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6440 ^long long6441] (.plusWeeks this6440 long6441)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this6442 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6443] (.range this6442 java-time-temporal-TemporalField6443)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6444] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this6444)) (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this6444)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6445] (.getHour this6445)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6446 ^long long6447] (.minusHours this6446 long6447)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime6448 ^java.time.ZoneId java-time-ZoneId6449] (. java.time.ZonedDateTime of java-time-LocalDateTime6448 java-time-ZoneId6449)) (^java.time.ZonedDateTime [^java.lang.Integer int6450 ^java.lang.Integer int6451 ^java.lang.Integer int6452 ^java.lang.Integer int6453 ^java.lang.Integer int6454 ^java.lang.Integer int6455 ^java.lang.Integer int6456 ^java.time.ZoneId java-time-ZoneId6457] (. java.time.ZonedDateTime of int6450 int6451 int6452 int6453 int6454 int6455 int6456 java-time-ZoneId6457)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate6458 ^java.time.LocalTime java-time-LocalTime6459 ^java.time.ZoneId java-time-ZoneId6460] (. java.time.ZonedDateTime of java-time-LocalDate6458 java-time-LocalTime6459 java-time-ZoneId6460)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6461 ^java.lang.Integer int6462] (.withMonth this6461 int6462)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this6463 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6464] (.isEqual this6463 java-time-chrono-ChronoZonedDateTime6464)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6465] (.getNano this6465)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime6466 ^java.time.ZoneId java-time-ZoneId6467 ^java.time.ZoneOffset java-time-ZoneOffset6468] (. java.time.ZonedDateTime ofLocal java-time-LocalDateTime6466 java-time-ZoneId6467 java-time-ZoneOffset6468)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6469] (.getYear this6469)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6470 ^long long6471] (.minusSeconds this6470 long6471)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6472] (.getSecond this6472)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6473 ^long long6474] (.plusNanos this6473 long6474)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6475] (.getDayOfYear this6475)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6476 G__6477 G__6478] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6477) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6478)) (clojure.core/let [G__6477 (clojure.core/long G__6477) G__6478 ^"java.time.temporal.TemporalUnit" G__6478] (.plus ^java.time.ZonedDateTime this6476 G__6477 G__6478)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6477) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6478)) (clojure.core/let [G__6477 (clojure.core/long G__6477) G__6478 ^"java.time.temporal.TemporalUnit" G__6478] (.plus ^java.time.ZonedDateTime this6476 G__6477 G__6478)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6477) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6478)) (clojure.core/let [G__6477 (clojure.core/long G__6477) G__6478 ^"java.time.temporal.TemporalUnit" G__6478] (.plus ^java.time.ZonedDateTime this6476 G__6477 G__6478)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6479 G__6480] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6480)) (clojure.core/let [G__6480 ^"java.time.temporal.TemporalAmount" G__6480] (.plus ^java.time.ZonedDateTime this6479 G__6480)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6480)) (clojure.core/let [G__6480 ^"java.time.temporal.TemporalAmount" G__6480] (.plus ^java.time.ZonedDateTime this6479 G__6480)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6480)) (clojure.core/let [G__6480 ^"java.time.temporal.TemporalAmount" G__6480] (.plus ^java.time.ZonedDateTime this6479 G__6480)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6481 ^java.lang.Integer int6482] (.withHour this6481 int6482)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6483 ^java.lang.Integer int6484] (.withMinute this6483 int6484)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6485 ^long long6486] (.plusMinutes this6485 long6486)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this6487 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery6488] (.query this6487 java-time-temporal-TemporalQuery6488)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this6489] (.getDayOfWeek this6489)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this6490] (.toString this6490)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6491 ^long long6492] (.plusMonths this6491 long6492)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this6493 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6494] (.isBefore this6493 java-time-chrono-ChronoZonedDateTime6494)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6495 ^long long6496] (.minusMonths this6495 long6496)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6497 G__6498 G__6499] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6498) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6499)) (clojure.core/let [G__6498 (clojure.core/long G__6498) G__6499 ^"java.time.temporal.TemporalUnit" G__6499] (.minus ^java.time.ZonedDateTime this6497 G__6498 G__6499)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6498) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6499)) (clojure.core/let [G__6498 (clojure.core/long G__6498) G__6499 ^"java.time.temporal.TemporalUnit" G__6499] (.minus ^java.time.ZonedDateTime this6497 G__6498 G__6499)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6498) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6499)) (clojure.core/let [G__6498 (clojure.core/long G__6498) G__6499 ^"java.time.temporal.TemporalUnit" G__6499] (.minus ^java.time.ZonedDateTime this6497 G__6498 G__6499)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6500 G__6501] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6501)) (clojure.core/let [G__6501 ^"java.time.temporal.TemporalAmount" G__6501] (.minus ^java.time.ZonedDateTime this6500 G__6501)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6501)) (clojure.core/let [G__6501 ^"java.time.temporal.TemporalAmount" G__6501] (.minus ^java.time.ZonedDateTime this6500 G__6501)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6501)) (clojure.core/let [G__6501 ^"java.time.temporal.TemporalAmount" G__6501] (.minus ^java.time.ZonedDateTime this6500 G__6501)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6502] (.withFixedOffsetZone this6502)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6503 ^long long6504] (.plusHours this6503 long6504)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this6505 G__6506] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6506)) (clojure.core/let [G__6506 ^"java.time.ZoneId" G__6506] (.withZoneSameLocal ^java.time.ZonedDateTime this6505 G__6506)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6506)) (clojure.core/let [G__6506 ^"java.time.ZoneId" G__6506] (.withZoneSameLocal ^java.time.ZonedDateTime this6505 G__6506)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this6507 G__6508] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6508)) (clojure.core/let [G__6508 ^"java.time.ZoneId" G__6508] (.withZoneSameInstant ^java.time.ZonedDateTime this6507 G__6508)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6508)) (clojure.core/let [G__6508 ^"java.time.ZoneId" G__6508] (.withZoneSameInstant ^java.time.ZonedDateTime this6507 G__6508)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6509 ^long long6510] (.plusDays this6509 long6510)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this6511] (.toLocalTime this6511)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this6512 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6513] (.getLong this6512 java-time-temporal-TemporalField6513)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this6514] (.getOffset this6514)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6515 ^java.lang.Integer int6516] (.withYear this6515 int6516)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6517 ^java.lang.Integer int6518] (.withNano this6517 int6518)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this6519] (.toEpochSecond this6519)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this6520] (.toOffsetDateTime this6520)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6521] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this6521)) (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this6521)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this6522 ^java.time.temporal.Temporal java-time-temporal-Temporal6523 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6524] (.until this6522 java-time-temporal-Temporal6523 java-time-temporal-TemporalUnit6524)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this6525] (.getZone this6525)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6526 ^java.lang.Integer int6527] (.withDayOfMonth this6526 int6527)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6528] (.getDayOfMonth this6528)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor6529] (. java.time.ZonedDateTime from java-time-temporal-TemporalAccessor6529)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this6530 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime6531] (.isAfter this6530 java-time-chrono-ChronoZonedDateTime6531)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6532 ^long long6533] (.minusNanos this6532 long6533)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this6534 G__6535] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6535)) (clojure.core/let [G__6535 ^"java.time.temporal.TemporalField" G__6535] (.isSupported ^java.time.ZonedDateTime this6534 G__6535)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6535)) (clojure.core/let [G__6535 ^"java.time.temporal.TemporalUnit" G__6535] (.isSupported ^java.time.ZonedDateTime this6534 G__6535)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6536 ^long long6537] (.minusYears this6536 long6537)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this6538] (.getChronology this6538)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence6539 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6540] (. java.time.ZonedDateTime parse java-lang-CharSequence6539 java-time-format-DateTimeFormatter6540)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence6541] (. java.time.ZonedDateTime parse java-lang-CharSequence6541)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6542 ^java.lang.Integer int6543] (.withSecond this6542 int6543)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6544] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this6544)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this6544)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6545] (.getMinute this6545)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6546] (.hashCode this6546)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this6547 G__6548 G__6549] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6548) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6549)) (clojure.core/let [G__6548 ^"java.time.temporal.TemporalField" G__6548 G__6549 (clojure.core/long G__6549)] (.with ^java.time.ZonedDateTime this6547 G__6548 G__6549)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6548) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6549)) (clojure.core/let [G__6548 ^"java.time.temporal.TemporalField" G__6548 G__6549 (clojure.core/long G__6549)] (.with ^java.time.ZonedDateTime this6547 G__6548 G__6549)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6548) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6549)) (clojure.core/let [G__6548 ^"java.time.temporal.TemporalField" G__6548 G__6549 (clojure.core/long G__6549)] (.with ^java.time.ZonedDateTime this6547 G__6548 G__6549)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6550 G__6551] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6551)) (clojure.core/let [G__6551 ^"java.time.temporal.TemporalAdjuster" G__6551] (.with ^java.time.ZonedDateTime this6550 G__6551)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6551)) (clojure.core/let [G__6551 ^"java.time.temporal.TemporalAdjuster" G__6551] (.with ^java.time.ZonedDateTime this6550 G__6551)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6551)) (clojure.core/let [G__6551 ^"java.time.temporal.TemporalAdjuster" G__6551] (.with ^java.time.ZonedDateTime this6550 G__6551)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.ZonedDateTime [G__6553] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__6553)) (clojure.core/let [G__6553 ^"java.time.Clock" G__6553] (. java.time.ZonedDateTime now G__6553)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6553)) (clojure.core/let [G__6553 ^"java.time.ZoneId" G__6553] (. java.time.ZonedDateTime now G__6553)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.ZonedDateTime [] (. java.time.ZonedDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this6554] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this6554)) (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this6554)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6555] (.getMonthValue this6555)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6556 ^java.lang.Integer int6557] (.withDayOfYear this6556 int6557)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"] ["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [this6558 G__6559] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__6559)) (clojure.core/let [G__6559 ^"java.lang.Object" G__6559] (.compareTo ^java.time.ZonedDateTime this6558 G__6559)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoZonedDateTime") G__6559)) (clojure.core/let [G__6559 ^"java.time.chrono.ChronoZonedDateTime" G__6559] (.compareTo ^java.time.ZonedDateTime this6558 G__6559)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime6560 ^java.time.ZoneOffset java-time-ZoneOffset6561 ^java.time.ZoneId java-time-ZoneId6562] (. java.time.ZonedDateTime ofStrict java-time-LocalDateTime6560 java-time-ZoneOffset6561 java-time-ZoneId6562)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this6563] (.getMonth this6563)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"] ["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime6564 ^java.time.ZoneOffset java-time-ZoneOffset6565 ^java.time.ZoneId java-time-ZoneId6566] (. java.time.ZonedDateTime ofInstant java-time-LocalDateTime6564 java-time-ZoneOffset6565 java-time-ZoneId6566)) (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant6567 ^java.time.ZoneId java-time-ZoneId6568] (. java.time.ZonedDateTime ofInstant java-time-Instant6567 java-time-ZoneId6568)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6569 ^long long6570] (.plusSeconds this6569 long6570)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this6571 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6572] (.get this6571 java-time-temporal-TemporalField6572)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this6573 ^java.lang.Object java-lang-Object6574] (.equals this6573 java-lang-Object6574)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this6575 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6576] (.format this6575 java-time-format-DateTimeFormatter6576)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6577 ^long long6578] (.plusYears this6577 long6578)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this6579 ^long long6580] (.minusDays this6579 long6580)))
