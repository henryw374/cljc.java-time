(ns cljc.java-time.zoned-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time ZonedDateTime]))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13185 ^long long13186] (.minusMinutes this13185 long13186)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13187 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13188] (.truncatedTo this13187 java-time-temporal-TemporalUnit13188)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13189 ^long long13190] (.minusWeeks this13189 long13190)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this13191] (.toInstant this13191)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13192 ^long long13193] (.plusWeeks this13192 long13193)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this13194 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13195] (.range this13194 java-time-temporal-TemporalField13195)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13196] (.withEarlierOffsetAtOverlap this13196)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13197] (.getHour this13197)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13198 ^long long13199] (.minusHours this13198 long13199)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.lang.Integer int13200 ^java.lang.Integer int13201 ^java.lang.Integer int13202 ^java.lang.Integer int13203 ^java.lang.Integer int13204 ^java.lang.Integer int13205 ^java.lang.Integer int13206 ^java.time.ZoneId java-time-ZoneId13207] (java.time.ZonedDateTime/of int13200 int13201 int13202 int13203 int13204 int13205 int13206 java-time-ZoneId13207)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate13208 ^java.time.LocalTime java-time-LocalTime13209 ^java.time.ZoneId java-time-ZoneId13210] (java.time.ZonedDateTime/of java-time-LocalDate13208 java-time-LocalTime13209 java-time-ZoneId13210)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime13211 ^java.time.ZoneId java-time-ZoneId13212] (java.time.ZonedDateTime/of java-time-LocalDateTime13211 java-time-ZoneId13212)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13213 ^java.lang.Integer int13214] (.withMonth this13213 int13214)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this13215 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime13216] (.isEqual this13215 java-time-chrono-ChronoZonedDateTime13216)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13217] (.getNano this13217)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime13218 ^java.time.ZoneId java-time-ZoneId13219 ^java.time.ZoneOffset java-time-ZoneOffset13220] (java.time.ZonedDateTime/ofLocal java-time-LocalDateTime13218 java-time-ZoneId13219 java-time-ZoneOffset13220)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13221] (.getYear this13221)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13222 ^long long13223] (.minusSeconds this13222 long13223)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13224] (.getSecond this13224)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13225 ^long long13226] (.plusNanos this13225 long13226)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13227] (.getDayOfYear this13227)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13228 ^long long13229 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13230] (.plus this13228 long13229 java-time-temporal-TemporalUnit13230)) (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13231 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount13232] (.plus this13231 java-time-temporal-TemporalAmount13232)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13233 ^java.lang.Integer int13234] (.withHour this13233 int13234)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13235 ^java.lang.Integer int13236] (.withMinute this13235 int13236)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13237 ^long long13238] (.plusMinutes this13237 long13238)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this13239 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13240] (.query this13239 java-time-temporal-TemporalQuery13240)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this13241] (.getDayOfWeek this13241)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this13242] (.toString this13242)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13243 ^long long13244] (.plusMonths this13243 long13244)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this13245 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime13246] (.isBefore this13245 java-time-chrono-ChronoZonedDateTime13246)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13247 ^long long13248] (.minusMonths this13247 long13248)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13249 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount13250] (.minus this13249 java-time-temporal-TemporalAmount13250)) (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13251 ^long long13252 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13253] (.minus this13251 long13252 java-time-temporal-TemporalUnit13253)))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13254] (.withFixedOffsetZone this13254)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13255 ^long long13256] (.plusHours this13255 long13256)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13257 ^java.time.ZoneId java-time-ZoneId13258] (.withZoneSameLocal this13257 java-time-ZoneId13258)))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13259 ^java.time.ZoneId java-time-ZoneId13260] (.withZoneSameInstant this13259 java-time-ZoneId13260)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13261 ^long long13262] (.plusDays this13261 long13262)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this13263] (.toLocalTime this13263)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this13264 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13265] (.getLong this13264 java-time-temporal-TemporalField13265)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this13266] (.getOffset this13266)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13267 ^java.lang.Integer int13268] (.withYear this13267 int13268)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13269 ^java.lang.Integer int13270] (.withNano this13269 int13270)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this13271] (.toEpochSecond this13271)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this13272] (.toOffsetDateTime this13272)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13273] (.withLaterOffsetAtOverlap this13273)))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this13274 ^java.time.temporal.Temporal java-time-temporal-Temporal13275 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13276] (.until this13274 java-time-temporal-Temporal13275 java-time-temporal-TemporalUnit13276)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this13277] (.getZone this13277)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13278 ^java.lang.Integer int13279] (.withDayOfMonth this13278 int13279)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13280] (.getDayOfMonth this13280)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13281] (java.time.ZonedDateTime/from java-time-temporal-TemporalAccessor13281)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this13282 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime13283] (.isAfter this13282 java-time-chrono-ChronoZonedDateTime13283)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13284 ^long long13285] (.minusNanos this13284 long13285)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this13286 G__13287] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__13287)) (clojure.core/let [G__13287 ^"java.time.temporal.ChronoUnit" G__13287] (.isSupported ^java.time.ZonedDateTime this13286 G__13287)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__13287)) (clojure.core/let [G__13287 ^"java.time.temporal.TemporalField" G__13287] (.isSupported ^java.time.ZonedDateTime this13286 G__13287)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13288 ^long long13289] (.minusYears this13288 long13289)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this13290] (.getChronology this13290)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence13291] (java.time.ZonedDateTime/parse java-lang-CharSequence13291)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence13292 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13293] (java.time.ZonedDateTime/parse java-lang-CharSequence13292 java-time-format-DateTimeFormatter13293)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13294 ^java.lang.Integer int13295] (.withSecond this13294 int13295)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalDate [^java.time.ZonedDateTime this13296] (.toLocalDate this13296)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13297] (.getMinute this13297)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13298] (.hashCode this13298)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13299 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster13300] (.with this13299 java-time-temporal-TemporalAdjuster13300)) (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13301 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13302 ^long long13303] (.with this13301 java-time-temporal-TemporalField13302 long13303)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.ZonedDateTime [] (java.time.ZonedDateTime/now)) (^java.time.ZonedDateTime [G__13305] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__13305)) (clojure.core/let [G__13305 ^"java.time.Clock" G__13305] (java.time.ZonedDateTime/now G__13305)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__13305)) (clojure.core/let [G__13305 ^"java.time.ZoneId" G__13305] (java.time.ZonedDateTime/now G__13305)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalDateTime [^java.time.ZonedDateTime this13306] (.toLocalDateTime this13306)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13307] (.getMonthValue this13307)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13308 ^java.lang.Integer int13309] (.withDayOfYear this13308 int13309)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13310 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime13311] (.compareTo this13310 java-time-chrono-ChronoZonedDateTime13311)))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime13312 ^java.time.ZoneOffset java-time-ZoneOffset13313 ^java.time.ZoneId java-time-ZoneId13314] (java.time.ZonedDateTime/ofStrict java-time-LocalDateTime13312 java-time-ZoneOffset13313 java-time-ZoneId13314)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this13315] (.getMonth this13315)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant13316 ^java.time.ZoneId java-time-ZoneId13317] (java.time.ZonedDateTime/ofInstant java-time-Instant13316 java-time-ZoneId13317)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime13318 ^java.time.ZoneOffset java-time-ZoneOffset13319 ^java.time.ZoneId java-time-ZoneId13320] (java.time.ZonedDateTime/ofInstant java-time-LocalDateTime13318 java-time-ZoneOffset13319 java-time-ZoneId13320)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13321 ^long long13322] (.plusSeconds this13321 long13322)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this13323 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13324] (.get this13323 java-time-temporal-TemporalField13324)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this13325 ^java.lang.Object java-lang-Object13326] (.equals this13325 java-lang-Object13326)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this13327 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13328] (.format this13327 java-time-format-DateTimeFormatter13328)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13329 ^long long13330] (.plusYears this13329 long13330)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this13331 ^long long13332] (.minusDays this13331 long13332)))
