(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time OffsetDateTime]))
(def min java.time.OffsetDateTime/MIN)
(def max java.time.OffsetDateTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4294 ^long long4295] (.minusMinutes this4294 long4295)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4296 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4297] (.truncatedTo this4296 java-time-temporal-TemporalUnit4297)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4298 ^long long4299] (.minusWeeks this4298 long4299)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this4300] (.toInstant this4300)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4301 ^long long4302] (.plusWeeks this4301 long4302)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this4303 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4304] (.range this4303 java-time-temporal-TemporalField4304)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4305] (.getHour this4305)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this4306 ^java.time.ZoneId java-time-ZoneId4307] (.atZoneSameInstant this4306 java-time-ZoneId4307)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4308 ^long long4309] (.minusHours this4308 long4309)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalDateTime" "java.time.ZoneOffset"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.lang.Integer int4310 ^java.lang.Integer int4311 ^java.lang.Integer int4312 ^java.lang.Integer int4313 ^java.lang.Integer int4314 ^java.lang.Integer int4315 ^java.lang.Integer int4316 ^java.time.ZoneOffset java-time-ZoneOffset4317] (java.time.OffsetDateTime/of int4310 int4311 int4312 int4313 int4314 int4315 int4316 java-time-ZoneOffset4317)) (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime4318 ^java.time.ZoneOffset java-time-ZoneOffset4319] (java.time.OffsetDateTime/of java-time-LocalDateTime4318 java-time-ZoneOffset4319)) (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate4320 ^java.time.LocalTime java-time-LocalTime4321 ^java.time.ZoneOffset java-time-ZoneOffset4322] (java.time.OffsetDateTime/of java-time-LocalDate4320 java-time-LocalTime4321 java-time-ZoneOffset4322)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4323 ^java.lang.Integer int4324] (.withMonth this4323 int4324)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this4325 ^java.time.OffsetDateTime java-time-OffsetDateTime4326] (.isEqual this4325 java-time-OffsetDateTime4326)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4327] (.getNano this4327)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this4328] (.toOffsetTime this4328)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this4329 ^java.time.ZoneId java-time-ZoneId4330] (.atZoneSimilarLocal this4329 java-time-ZoneId4330)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4331] (.getYear this4331)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4332 ^long long4333] (.minusSeconds this4332 long4333)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4334] (.getSecond this4334)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4335 ^long long4336] (.plusNanos this4335 long4336)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4337] (.getDayOfYear this4337)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4338 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4339] (.plus this4338 java-time-temporal-TemporalAmount4339)) (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4340 ^long long4341 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4342] (.plus this4340 long4341 java-time-temporal-TemporalUnit4342)))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (java.time.OffsetDateTime/timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4343 ^java.lang.Integer int4344] (.withHour this4343 int4344)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4345 ^java.lang.Integer int4346] (.withMinute this4345 int4346)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4347 ^long long4348] (.plusMinutes this4347 long4348)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this4349 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4350] (.query this4349 java-time-temporal-TemporalQuery4350)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4351 ^java.time.ZoneOffset java-time-ZoneOffset4352] (.withOffsetSameInstant this4351 java-time-ZoneOffset4352)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this4353] (.getDayOfWeek this4353)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this4354] (.toString this4354)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4355 ^long long4356] (.plusMonths this4355 long4356)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this4357 ^java.time.OffsetDateTime java-time-OffsetDateTime4358] (.isBefore this4357 java-time-OffsetDateTime4358)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4359 ^long long4360] (.minusMonths this4359 long4360)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4361 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4362] (.minus this4361 java-time-temporal-TemporalAmount4362)) (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4363 ^long long4364 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4365] (.minus this4363 long4364 java-time-temporal-TemporalUnit4365)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4366 ^long long4367] (.plusHours this4366 long4367)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4368 ^long long4369] (.plusDays this4368 long4369)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this4370] (.toLocalTime this4370)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this4371 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4372] (.getLong this4371 java-time-temporal-TemporalField4372)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this4373] (.getOffset this4373)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this4374] (.toZonedDateTime this4374)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4375 ^java.lang.Integer int4376] (.withYear this4375 int4376)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4377 ^java.lang.Integer int4378] (.withNano this4377 int4378)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this4379] (.toEpochSecond this4379)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this4380 ^java.time.temporal.Temporal java-time-temporal-Temporal4381 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit4382] (.until this4380 java-time-temporal-Temporal4381 java-time-temporal-TemporalUnit4382)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4383 ^java.time.ZoneOffset java-time-ZoneOffset4384] (.withOffsetSameLocal this4383 java-time-ZoneOffset4384)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4385 ^java.lang.Integer int4386] (.withDayOfMonth this4385 int4386)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4387] (.getDayOfMonth this4387)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4388] (java.time.OffsetDateTime/from java-time-temporal-TemporalAccessor4388)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this4389 ^java.time.OffsetDateTime java-time-OffsetDateTime4390] (.isAfter this4389 java-time-OffsetDateTime4390)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4391 ^long long4392] (.minusNanos this4391 long4392)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this4393 G__4394] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__4394)) (clojure.core/let [G__4394 ^"java.time.temporal.TemporalField" G__4394] (.isSupported ^java.time.OffsetDateTime this4393 G__4394)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalUnit G__4394)) (clojure.core/let [G__4394 ^"java.time.temporal.TemporalUnit" G__4394] (.isSupported ^java.time.OffsetDateTime this4393 G__4394)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4395 ^long long4396] (.minusYears this4395 long4396)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence4397 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4398] (java.time.OffsetDateTime/parse java-lang-CharSequence4397 java-time-format-DateTimeFormatter4398)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence4399] (java.time.OffsetDateTime/parse java-lang-CharSequence4399)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4400 ^java.lang.Integer int4401] (.withSecond this4400 int4401)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this4402] (.toLocalDate this4402)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4403] (.getMinute this4403)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4404] (.hashCode this4404)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this4405 ^java.time.temporal.Temporal java-time-temporal-Temporal4406] (.adjustInto this4405 java-time-temporal-Temporal4406)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4407 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4408 ^long long4409] (.with this4407 java-time-temporal-TemporalField4408 long4409)) (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4410 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster4411] (.with this4410 java-time-temporal-TemporalAdjuster4411)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.OffsetDateTime [G__4413] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__4413)) (clojure.core/let [G__4413 ^"java.time.Clock" G__4413] (java.time.OffsetDateTime/now G__4413)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__4413)) (clojure.core/let [G__4413 ^"java.time.ZoneId" G__4413] (java.time.OffsetDateTime/now G__4413)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.OffsetDateTime [] (java.time.OffsetDateTime/now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this4414] (.toLocalDateTime this4414)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4415] (.getMonthValue this4415)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4416 ^java.lang.Integer int4417] (.withDayOfYear this4416 int4417)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4418 ^java.time.OffsetDateTime java-time-OffsetDateTime4419] (.compareTo this4418 java-time-OffsetDateTime4419)))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this4420] (.getMonth this4420)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant4421 ^java.time.ZoneId java-time-ZoneId4422] (java.time.OffsetDateTime/ofInstant java-time-Instant4421 java-time-ZoneId4422)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4423 ^long long4424] (.plusSeconds this4423 long4424)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4425 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4426] (.get this4425 java-time-temporal-TemporalField4426)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this4427 ^java.lang.Object java-lang-Object4428] (.equals this4427 java-lang-Object4428)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this4429 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4430] (.format this4429 java-time-format-DateTimeFormatter4430)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4431 ^long long4432] (.plusYears this4431 long4432)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4433 ^long long4434] (.minusDays this4433 long4434)))
