(ns cljc.java-time.offset-date-time (:import [java.time OffsetDateTime]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def min java.time.OffsetDateTime/MIN)
(def max java.time.OffsetDateTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49507 ^long long49508] (.minusMinutes this49507 long49508)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49509 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49510] (.truncatedTo this49509 java-time-temporal-TemporalUnit49510)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49511 ^long long49512] (.minusWeeks this49511 long49512)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this49513] (.toInstant this49513)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49514 ^long long49515] (.plusWeeks this49514 long49515)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this49516 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49517] (.range this49516 java-time-temporal-TemporalField49517)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49518] (.getHour this49518)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this49519 ^java.time.ZoneId java-time-ZoneId49520] (.atZoneSameInstant this49519 java-time-ZoneId49520)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49521 ^long long49522] (.minusHours this49521 long49522)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"] ["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.lang.Integer int49523 ^java.lang.Integer int49524 ^java.lang.Integer int49525 ^java.lang.Integer int49526 ^java.lang.Integer int49527 ^java.lang.Integer int49528 ^java.lang.Integer int49529 ^java.time.ZoneOffset java-time-ZoneOffset49530] (. java.time.OffsetDateTime of int49523 int49524 int49525 int49526 int49527 int49528 int49529 java-time-ZoneOffset49530)) (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate49531 ^java.time.LocalTime java-time-LocalTime49532 ^java.time.ZoneOffset java-time-ZoneOffset49533] (. java.time.OffsetDateTime of java-time-LocalDate49531 java-time-LocalTime49532 java-time-ZoneOffset49533)) (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime49534 ^java.time.ZoneOffset java-time-ZoneOffset49535] (. java.time.OffsetDateTime of java-time-LocalDateTime49534 java-time-ZoneOffset49535)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49536 ^java.lang.Integer int49537] (.withMonth this49536 int49537)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this49538 ^java.time.OffsetDateTime java-time-OffsetDateTime49539] (.isEqual this49538 java-time-OffsetDateTime49539)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49540] (.getNano this49540)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this49541] (.toOffsetTime this49541)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this49542 ^java.time.ZoneId java-time-ZoneId49543] (.atZoneSimilarLocal this49542 java-time-ZoneId49543)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49544] (.getYear this49544)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49545 ^long long49546] (.minusSeconds this49545 long49546)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49547] (.getSecond this49547)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49548 ^long long49549] (.plusNanos this49548 long49549)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49550] (.getDayOfYear this49550)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this49551 G__49552 G__49553] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49552) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49553)) (clojure.core/let [G__49552 (clojure.core/long G__49552) G__49553 ^"java.time.temporal.TemporalUnit" G__49553] (.plus ^java.time.OffsetDateTime this49551 G__49552 G__49553)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49552) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49553)) (clojure.core/let [G__49552 (clojure.core/long G__49552) G__49553 ^"java.time.temporal.TemporalUnit" G__49553] (.plus ^java.time.OffsetDateTime this49551 G__49552 G__49553)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this49554 G__49555] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__49555)) (clojure.core/let [G__49555 ^"java.time.temporal.TemporalAmount" G__49555] (.plus ^java.time.OffsetDateTime this49554 G__49555)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__49555)) (clojure.core/let [G__49555 ^"java.time.temporal.TemporalAmount" G__49555] (.plus ^java.time.OffsetDateTime this49554 G__49555)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (. java.time.OffsetDateTime timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49556 ^java.lang.Integer int49557] (.withHour this49556 int49557)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49558 ^java.lang.Integer int49559] (.withMinute this49558 int49559)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49560 ^long long49561] (.plusMinutes this49560 long49561)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this49562 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery49563] (.query this49562 java-time-temporal-TemporalQuery49563)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49564 ^java.time.ZoneOffset java-time-ZoneOffset49565] (.withOffsetSameInstant this49564 java-time-ZoneOffset49565)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this49566] (.getDayOfWeek this49566)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this49567] (.toString this49567)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49568 ^long long49569] (.plusMonths this49568 long49569)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this49570 ^java.time.OffsetDateTime java-time-OffsetDateTime49571] (.isBefore this49570 java-time-OffsetDateTime49571)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49572 ^long long49573] (.minusMonths this49572 long49573)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this49574 G__49575] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__49575)) (clojure.core/let [G__49575 ^"java.time.temporal.TemporalAmount" G__49575] (.minus ^java.time.OffsetDateTime this49574 G__49575)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__49575)) (clojure.core/let [G__49575 ^"java.time.temporal.TemporalAmount" G__49575] (.minus ^java.time.OffsetDateTime this49574 G__49575)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this49576 G__49577 G__49578] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49577) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49578)) (clojure.core/let [G__49577 (clojure.core/long G__49577) G__49578 ^"java.time.temporal.TemporalUnit" G__49578] (.minus ^java.time.OffsetDateTime this49576 G__49577 G__49578)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49577) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49578)) (clojure.core/let [G__49577 (clojure.core/long G__49577) G__49578 ^"java.time.temporal.TemporalUnit" G__49578] (.minus ^java.time.OffsetDateTime this49576 G__49577 G__49578)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49579 ^long long49580] (.plusHours this49579 long49580)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49581 ^long long49582] (.plusDays this49581 long49582)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this49583] (.toLocalTime this49583)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this49584 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49585] (.getLong this49584 java-time-temporal-TemporalField49585)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this49586] (.getOffset this49586)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this49587] (.toZonedDateTime this49587)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49588 ^java.lang.Integer int49589] (.withYear this49588 int49589)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49590 ^java.lang.Integer int49591] (.withNano this49590 int49591)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this49592] (.toEpochSecond this49592)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this49593 ^java.time.temporal.Temporal java-time-temporal-Temporal49594 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49595] (.until this49593 java-time-temporal-Temporal49594 java-time-temporal-TemporalUnit49595)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49596 ^java.time.ZoneOffset java-time-ZoneOffset49597] (.withOffsetSameLocal this49596 java-time-ZoneOffset49597)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49598 ^java.lang.Integer int49599] (.withDayOfMonth this49598 int49599)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49600] (.getDayOfMonth this49600)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor49601] (. java.time.OffsetDateTime from java-time-temporal-TemporalAccessor49601)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this49602 ^java.time.OffsetDateTime java-time-OffsetDateTime49603] (.isAfter this49602 java-time-OffsetDateTime49603)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49604 ^long long49605] (.minusNanos this49604 long49605)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this49606 G__49607] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__49607)) (clojure.core/let [G__49607 ^"java.time.temporal.TemporalField" G__49607] (.isSupported ^java.time.OffsetDateTime this49606 G__49607)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__49607)) (clojure.core/let [G__49607 ^"java.time.temporal.TemporalUnit" G__49607] (.isSupported ^java.time.OffsetDateTime this49606 G__49607)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49608 ^long long49609] (.minusYears this49608 long49609)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence49610] (. java.time.OffsetDateTime parse java-lang-CharSequence49610)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence49611 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49612] (. java.time.OffsetDateTime parse java-lang-CharSequence49611 java-time-format-DateTimeFormatter49612)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49613 ^java.lang.Integer int49614] (.withSecond this49613 int49614)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this49615] (.toLocalDate this49615)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49616] (.getMinute this49616)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49617] (.hashCode this49617)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this49618 ^java.time.temporal.Temporal java-time-temporal-Temporal49619] (.adjustInto this49618 java-time-temporal-Temporal49619)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this49620 G__49621 G__49622] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__49621) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49622)) (clojure.core/let [G__49621 ^"java.time.temporal.TemporalField" G__49621 G__49622 (clojure.core/long G__49622)] (.with ^java.time.OffsetDateTime this49620 G__49621 G__49622)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__49621) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__49622)) (clojure.core/let [G__49621 ^"java.time.temporal.TemporalField" G__49621 G__49622 (clojure.core/long G__49622)] (.with ^java.time.OffsetDateTime this49620 G__49621 G__49622)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this49623 G__49624] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__49624)) (clojure.core/let [G__49624 ^"java.time.temporal.TemporalAdjuster" G__49624] (.with ^java.time.OffsetDateTime this49623 G__49624)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__49624)) (clojure.core/let [G__49624 ^"java.time.temporal.TemporalAdjuster" G__49624] (.with ^java.time.OffsetDateTime this49623 G__49624)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.OffsetDateTime [G__49626] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__49626)) (clojure.core/let [G__49626 ^"java.time.Clock" G__49626] (. java.time.OffsetDateTime now G__49626)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__49626)) (clojure.core/let [G__49626 ^"java.time.ZoneId" G__49626] (. java.time.OffsetDateTime now G__49626)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.OffsetDateTime [] (. java.time.OffsetDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this49627] (.toLocalDateTime this49627)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49628] (.getMonthValue this49628)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49629 ^java.lang.Integer int49630] (.withDayOfYear this49629 int49630)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"] ["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [this49631 G__49632] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__49632)) (clojure.core/let [G__49632 ^"java.lang.Object" G__49632] (.compareTo ^java.time.OffsetDateTime this49631 G__49632)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetDateTime") G__49632)) (clojure.core/let [G__49632 ^"java.time.OffsetDateTime" G__49632] (.compareTo ^java.time.OffsetDateTime this49631 G__49632)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this49633] (.getMonth this49633)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant49634 ^java.time.ZoneId java-time-ZoneId49635] (. java.time.OffsetDateTime ofInstant java-time-Instant49634 java-time-ZoneId49635)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49636 ^long long49637] (.plusSeconds this49636 long49637)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49638 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49639] (.get this49638 java-time-temporal-TemporalField49639)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this49640 ^java.lang.Object java-lang-Object49641] (.equals this49640 java-lang-Object49641)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this49642 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49643] (.format this49642 java-time-format-DateTimeFormatter49643)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49644 ^long long49645] (.plusYears this49644 long49645)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49646 ^long long49647] (.minusDays this49646 long49647)))
