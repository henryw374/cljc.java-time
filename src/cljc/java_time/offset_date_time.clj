(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time OffsetDateTime]))
(def min java.time.OffsetDateTime/MIN)
(def max java.time.OffsetDateTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this59998 ^long long59999] (.minusMinutes this59998 long59999)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60000 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit60001] (.truncatedTo this60000 java-time-temporal-TemporalUnit60001)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60002 ^long long60003] (.minusWeeks this60002 long60003)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this60004] (.toInstant this60004)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60005 ^long long60006] (.plusWeeks this60005 long60006)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this60007 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60008] (.range this60007 java-time-temporal-TemporalField60008)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this60009] (.getHour this60009)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this60010 ^java.time.ZoneId java-time-ZoneId60011] (.atZoneSameInstant this60010 java-time-ZoneId60011)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60012 ^long long60013] (.minusHours this60012 long60013)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"] ["java.time.LocalDateTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate60014 ^java.time.LocalTime java-time-LocalTime60015 ^java.time.ZoneOffset java-time-ZoneOffset60016] (java.time.OffsetDateTime/of java-time-LocalDate60014 java-time-LocalTime60015 java-time-ZoneOffset60016)) (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime60017 ^java.time.ZoneOffset java-time-ZoneOffset60018] (java.time.OffsetDateTime/of java-time-LocalDateTime60017 java-time-ZoneOffset60018)) (^java.time.OffsetDateTime [^java.lang.Integer int60019 ^java.lang.Integer int60020 ^java.lang.Integer int60021 ^java.lang.Integer int60022 ^java.lang.Integer int60023 ^java.lang.Integer int60024 ^java.lang.Integer int60025 ^java.time.ZoneOffset java-time-ZoneOffset60026] (java.time.OffsetDateTime/of int60019 int60020 int60021 int60022 int60023 int60024 int60025 java-time-ZoneOffset60026)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60027 ^java.lang.Integer int60028] (.withMonth this60027 int60028)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this60029 ^java.time.OffsetDateTime java-time-OffsetDateTime60030] (.isEqual this60029 java-time-OffsetDateTime60030)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this60031] (.getNano this60031)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this60032] (.toOffsetTime this60032)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this60033 ^java.time.ZoneId java-time-ZoneId60034] (.atZoneSimilarLocal this60033 java-time-ZoneId60034)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this60035] (.getYear this60035)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60036 ^long long60037] (.minusSeconds this60036 long60037)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this60038] (.getSecond this60038)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60039 ^long long60040] (.plusNanos this60039 long60040)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this60041] (.getDayOfYear this60041)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this60042 G__60043] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__60043)) (clojure.core/let [G__60043 ^"java.time.temporal.TemporalAmount" G__60043] (.plus ^java.time.OffsetDateTime this60042 G__60043)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__60043)) (clojure.core/let [G__60043 ^"java.time.temporal.TemporalAmount" G__60043] (.plus ^java.time.OffsetDateTime this60042 G__60043)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this60044 G__60045 G__60046] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60045) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60046)) (clojure.core/let [G__60045 (clojure.core/long G__60045) G__60046 ^"java.time.temporal.TemporalUnit" G__60046] (.plus ^java.time.OffsetDateTime this60044 G__60045 G__60046)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60045) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60046)) (clojure.core/let [G__60045 (clojure.core/long G__60045) G__60046 ^"java.time.temporal.TemporalUnit" G__60046] (.plus ^java.time.OffsetDateTime this60044 G__60045 G__60046)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (java.time.OffsetDateTime/timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60047 ^java.lang.Integer int60048] (.withHour this60047 int60048)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60049 ^java.lang.Integer int60050] (.withMinute this60049 int60050)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60051 ^long long60052] (.plusMinutes this60051 long60052)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this60053 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery60054] (.query this60053 java-time-temporal-TemporalQuery60054)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60055 ^java.time.ZoneOffset java-time-ZoneOffset60056] (.withOffsetSameInstant this60055 java-time-ZoneOffset60056)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this60057] (.getDayOfWeek this60057)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this60058] (.toString this60058)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60059 ^long long60060] (.plusMonths this60059 long60060)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this60061 ^java.time.OffsetDateTime java-time-OffsetDateTime60062] (.isBefore this60061 java-time-OffsetDateTime60062)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60063 ^long long60064] (.minusMonths this60063 long60064)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this60065 G__60066] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__60066)) (clojure.core/let [G__60066 ^"java.time.temporal.TemporalAmount" G__60066] (.minus ^java.time.OffsetDateTime this60065 G__60066)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__60066)) (clojure.core/let [G__60066 ^"java.time.temporal.TemporalAmount" G__60066] (.minus ^java.time.OffsetDateTime this60065 G__60066)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this60067 G__60068 G__60069] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60068) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60069)) (clojure.core/let [G__60068 (clojure.core/long G__60068) G__60069 ^"java.time.temporal.TemporalUnit" G__60069] (.minus ^java.time.OffsetDateTime this60067 G__60068 G__60069)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60068) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60069)) (clojure.core/let [G__60068 (clojure.core/long G__60068) G__60069 ^"java.time.temporal.TemporalUnit" G__60069] (.minus ^java.time.OffsetDateTime this60067 G__60068 G__60069)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60070 ^long long60071] (.plusHours this60070 long60071)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60072 ^long long60073] (.plusDays this60072 long60073)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this60074] (.toLocalTime this60074)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this60075 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60076] (.getLong this60075 java-time-temporal-TemporalField60076)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this60077] (.getOffset this60077)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this60078] (.toZonedDateTime this60078)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60079 ^java.lang.Integer int60080] (.withYear this60079 int60080)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60081 ^java.lang.Integer int60082] (.withNano this60081 int60082)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this60083] (.toEpochSecond this60083)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this60084 ^java.time.temporal.Temporal java-time-temporal-Temporal60085 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit60086] (.until this60084 java-time-temporal-Temporal60085 java-time-temporal-TemporalUnit60086)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60087 ^java.time.ZoneOffset java-time-ZoneOffset60088] (.withOffsetSameLocal this60087 java-time-ZoneOffset60088)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60089 ^java.lang.Integer int60090] (.withDayOfMonth this60089 int60090)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this60091] (.getDayOfMonth this60091)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor60092] (java.time.OffsetDateTime/from java-time-temporal-TemporalAccessor60092)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this60093 ^java.time.OffsetDateTime java-time-OffsetDateTime60094] (.isAfter this60093 java-time-OffsetDateTime60094)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60095 ^long long60096] (.minusNanos this60095 long60096)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this60097 G__60098] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__60098)) (clojure.core/let [G__60098 ^"java.time.temporal.TemporalField" G__60098] (.isSupported ^java.time.OffsetDateTime this60097 G__60098)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__60098)) (clojure.core/let [G__60098 ^"java.time.temporal.TemporalUnit" G__60098] (.isSupported ^java.time.OffsetDateTime this60097 G__60098)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60099 ^long long60100] (.minusYears this60099 long60100)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence60101 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter60102] (java.time.OffsetDateTime/parse java-lang-CharSequence60101 java-time-format-DateTimeFormatter60102)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence60103] (java.time.OffsetDateTime/parse java-lang-CharSequence60103)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60104 ^java.lang.Integer int60105] (.withSecond this60104 int60105)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this60106] (.toLocalDate this60106)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this60107] (.getMinute this60107)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this60108] (.hashCode this60108)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this60109 ^java.time.temporal.Temporal java-time-temporal-Temporal60110] (.adjustInto this60109 java-time-temporal-Temporal60110)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this60111 G__60112 G__60113] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__60112) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60113)) (clojure.core/let [G__60112 ^"java.time.temporal.TemporalField" G__60112 G__60113 (clojure.core/long G__60113)] (.with ^java.time.OffsetDateTime this60111 G__60112 G__60113)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__60112) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__60113)) (clojure.core/let [G__60112 ^"java.time.temporal.TemporalField" G__60112 G__60113 (clojure.core/long G__60113)] (.with ^java.time.OffsetDateTime this60111 G__60112 G__60113)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this60114 G__60115] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__60115)) (clojure.core/let [G__60115 ^"java.time.temporal.TemporalAdjuster" G__60115] (.with ^java.time.OffsetDateTime this60114 G__60115)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__60115)) (clojure.core/let [G__60115 ^"java.time.temporal.TemporalAdjuster" G__60115] (.with ^java.time.OffsetDateTime this60114 G__60115)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.OffsetDateTime [G__60117] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__60117)) (clojure.core/let [G__60117 ^"java.time.Clock" G__60117] (java.time.OffsetDateTime/now G__60117)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__60117)) (clojure.core/let [G__60117 ^"java.time.ZoneId" G__60117] (java.time.OffsetDateTime/now G__60117)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.OffsetDateTime [] (java.time.OffsetDateTime/now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this60118] (.toLocalDateTime this60118)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this60119] (.getMonthValue this60119)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60120 ^java.lang.Integer int60121] (.withDayOfYear this60120 int60121)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"] ["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [this60122 G__60123] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__60123)) (clojure.core/let [G__60123 ^"java.lang.Object" G__60123] (.compareTo ^java.time.OffsetDateTime this60122 G__60123)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetDateTime") G__60123)) (clojure.core/let [G__60123 ^"java.time.OffsetDateTime" G__60123] (.compareTo ^java.time.OffsetDateTime this60122 G__60123)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this60124] (.getMonth this60124)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant60125 ^java.time.ZoneId java-time-ZoneId60126] (java.time.OffsetDateTime/ofInstant java-time-Instant60125 java-time-ZoneId60126)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60127 ^long long60128] (.plusSeconds this60127 long60128)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this60129 ^java.time.temporal.TemporalField java-time-temporal-TemporalField60130] (.get this60129 java-time-temporal-TemporalField60130)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this60131 ^java.lang.Object java-lang-Object60132] (.equals this60131 java-lang-Object60132)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this60133 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter60134] (.format this60133 java-time-format-DateTimeFormatter60134)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60135 ^long long60136] (.plusYears this60135 long60136)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this60137 ^long long60138] (.minusDays this60137 long60138)))
