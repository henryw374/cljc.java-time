(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time OffsetDateTime]))
(def min java.time.OffsetDateTime/MIN)
(def max java.time.OffsetDateTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11515 ^long long11516] (.minusMinutes this11515 long11516)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11517 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11518] (.truncatedTo this11517 java-time-temporal-TemporalUnit11518)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11519 ^long long11520] (.minusWeeks this11519 long11520)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this11521] (.toInstant this11521)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11522 ^long long11523] (.plusWeeks this11522 long11523)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this11524 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11525] (.range this11524 java-time-temporal-TemporalField11525)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11526] (.getHour this11526)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this11527 ^java.time.ZoneId java-time-ZoneId11528] (.atZoneSameInstant this11527 java-time-ZoneId11528)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11529 ^long long11530] (.minusHours this11529 long11530)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"] ["java.time.LocalDateTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate11531 ^java.time.LocalTime java-time-LocalTime11532 ^java.time.ZoneOffset java-time-ZoneOffset11533] (. java.time.OffsetDateTime of java-time-LocalDate11531 java-time-LocalTime11532 java-time-ZoneOffset11533)) (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime11534 ^java.time.ZoneOffset java-time-ZoneOffset11535] (. java.time.OffsetDateTime of java-time-LocalDateTime11534 java-time-ZoneOffset11535)) (^java.time.OffsetDateTime [^java.lang.Integer int11536 ^java.lang.Integer int11537 ^java.lang.Integer int11538 ^java.lang.Integer int11539 ^java.lang.Integer int11540 ^java.lang.Integer int11541 ^java.lang.Integer int11542 ^java.time.ZoneOffset java-time-ZoneOffset11543] (. java.time.OffsetDateTime of int11536 int11537 int11538 int11539 int11540 int11541 int11542 java-time-ZoneOffset11543)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11544 ^java.lang.Integer int11545] (.withMonth this11544 int11545)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this11546 ^java.time.OffsetDateTime java-time-OffsetDateTime11547] (.isEqual this11546 java-time-OffsetDateTime11547)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11548] (.getNano this11548)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this11549] (.toOffsetTime this11549)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this11550 ^java.time.ZoneId java-time-ZoneId11551] (.atZoneSimilarLocal this11550 java-time-ZoneId11551)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11552] (.getYear this11552)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11553 ^long long11554] (.minusSeconds this11553 long11554)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11555] (.getSecond this11555)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11556 ^long long11557] (.plusNanos this11556 long11557)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11558] (.getDayOfYear this11558)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11559 G__11560] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11560)) (clojure.core/let [G__11560 ^"java.time.temporal.TemporalAmount" G__11560] (.plus ^java.time.OffsetDateTime this11559 G__11560)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11560)) (clojure.core/let [G__11560 ^"java.time.temporal.TemporalAmount" G__11560] (.plus ^java.time.OffsetDateTime this11559 G__11560)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this11561 G__11562 G__11563] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11562) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11563)) (clojure.core/let [G__11562 (clojure.core/long G__11562) G__11563 ^"java.time.temporal.TemporalUnit" G__11563] (.plus ^java.time.OffsetDateTime this11561 G__11562 G__11563)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11562) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11563)) (clojure.core/let [G__11562 (clojure.core/long G__11562) G__11563 ^"java.time.temporal.TemporalUnit" G__11563] (.plus ^java.time.OffsetDateTime this11561 G__11562 G__11563)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (. java.time.OffsetDateTime timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11564 ^java.lang.Integer int11565] (.withHour this11564 int11565)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11566 ^java.lang.Integer int11567] (.withMinute this11566 int11567)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11568 ^long long11569] (.plusMinutes this11568 long11569)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this11570 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery11571] (.query this11570 java-time-temporal-TemporalQuery11571)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11572 ^java.time.ZoneOffset java-time-ZoneOffset11573] (.withOffsetSameInstant this11572 java-time-ZoneOffset11573)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this11574] (.getDayOfWeek this11574)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this11575] (.toString this11575)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11576 ^long long11577] (.plusMonths this11576 long11577)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this11578 ^java.time.OffsetDateTime java-time-OffsetDateTime11579] (.isBefore this11578 java-time-OffsetDateTime11579)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11580 ^long long11581] (.minusMonths this11580 long11581)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11582 G__11583] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11583)) (clojure.core/let [G__11583 ^"java.time.temporal.TemporalAmount" G__11583] (.minus ^java.time.OffsetDateTime this11582 G__11583)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__11583)) (clojure.core/let [G__11583 ^"java.time.temporal.TemporalAmount" G__11583] (.minus ^java.time.OffsetDateTime this11582 G__11583)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this11584 G__11585 G__11586] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11585) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11586)) (clojure.core/let [G__11585 (clojure.core/long G__11585) G__11586 ^"java.time.temporal.TemporalUnit" G__11586] (.minus ^java.time.OffsetDateTime this11584 G__11585 G__11586)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11585) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11586)) (clojure.core/let [G__11585 (clojure.core/long G__11585) G__11586 ^"java.time.temporal.TemporalUnit" G__11586] (.minus ^java.time.OffsetDateTime this11584 G__11585 G__11586)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11587 ^long long11588] (.plusHours this11587 long11588)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11589 ^long long11590] (.plusDays this11589 long11590)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this11591] (.toLocalTime this11591)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this11592 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11593] (.getLong this11592 java-time-temporal-TemporalField11593)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this11594] (.getOffset this11594)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this11595] (.toZonedDateTime this11595)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11596 ^java.lang.Integer int11597] (.withYear this11596 int11597)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11598 ^java.lang.Integer int11599] (.withNano this11598 int11599)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this11600] (.toEpochSecond this11600)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this11601 ^java.time.temporal.Temporal java-time-temporal-Temporal11602 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11603] (.until this11601 java-time-temporal-Temporal11602 java-time-temporal-TemporalUnit11603)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11604 ^java.time.ZoneOffset java-time-ZoneOffset11605] (.withOffsetSameLocal this11604 java-time-ZoneOffset11605)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11606 ^java.lang.Integer int11607] (.withDayOfMonth this11606 int11607)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11608] (.getDayOfMonth this11608)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor11609] (. java.time.OffsetDateTime from java-time-temporal-TemporalAccessor11609)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this11610 ^java.time.OffsetDateTime java-time-OffsetDateTime11611] (.isAfter this11610 java-time-OffsetDateTime11611)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11612 ^long long11613] (.minusNanos this11612 long11613)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this11614 G__11615] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11615)) (clojure.core/let [G__11615 ^"java.time.temporal.TemporalField" G__11615] (.isSupported ^java.time.OffsetDateTime this11614 G__11615)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__11615)) (clojure.core/let [G__11615 ^"java.time.temporal.TemporalUnit" G__11615] (.isSupported ^java.time.OffsetDateTime this11614 G__11615)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11616 ^long long11617] (.minusYears this11616 long11617)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence11618 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11619] (. java.time.OffsetDateTime parse java-lang-CharSequence11618 java-time-format-DateTimeFormatter11619)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence11620] (. java.time.OffsetDateTime parse java-lang-CharSequence11620)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11621 ^java.lang.Integer int11622] (.withSecond this11621 int11622)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this11623] (.toLocalDate this11623)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11624] (.getMinute this11624)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11625] (.hashCode this11625)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this11626 ^java.time.temporal.Temporal java-time-temporal-Temporal11627] (.adjustInto this11626 java-time-temporal-Temporal11627)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this11628 G__11629 G__11630] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11629) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11630)) (clojure.core/let [G__11629 ^"java.time.temporal.TemporalField" G__11629 G__11630 (clojure.core/long G__11630)] (.with ^java.time.OffsetDateTime this11628 G__11629 G__11630)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__11629) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__11630)) (clojure.core/let [G__11629 ^"java.time.temporal.TemporalField" G__11629 G__11630 (clojure.core/long G__11630)] (.with ^java.time.OffsetDateTime this11628 G__11629 G__11630)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this11631 G__11632] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__11632)) (clojure.core/let [G__11632 ^"java.time.temporal.TemporalAdjuster" G__11632] (.with ^java.time.OffsetDateTime this11631 G__11632)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__11632)) (clojure.core/let [G__11632 ^"java.time.temporal.TemporalAdjuster" G__11632] (.with ^java.time.OffsetDateTime this11631 G__11632)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.OffsetDateTime [G__11634] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__11634)) (clojure.core/let [G__11634 ^"java.time.Clock" G__11634] (. java.time.OffsetDateTime now G__11634)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__11634)) (clojure.core/let [G__11634 ^"java.time.ZoneId" G__11634] (. java.time.OffsetDateTime now G__11634)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.OffsetDateTime [] (. java.time.OffsetDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this11635] (.toLocalDateTime this11635)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11636] (.getMonthValue this11636)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11637 ^java.lang.Integer int11638] (.withDayOfYear this11637 int11638)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"] ["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [this11639 G__11640] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__11640)) (clojure.core/let [G__11640 ^"java.lang.Object" G__11640] (.compareTo ^java.time.OffsetDateTime this11639 G__11640)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetDateTime") G__11640)) (clojure.core/let [G__11640 ^"java.time.OffsetDateTime" G__11640] (.compareTo ^java.time.OffsetDateTime this11639 G__11640)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this11641] (.getMonth this11641)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant11642 ^java.time.ZoneId java-time-ZoneId11643] (. java.time.OffsetDateTime ofInstant java-time-Instant11642 java-time-ZoneId11643)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11644 ^long long11645] (.plusSeconds this11644 long11645)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11646 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11647] (.get this11646 java-time-temporal-TemporalField11647)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this11648 ^java.lang.Object java-lang-Object11649] (.equals this11648 java-lang-Object11649)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this11650 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11651] (.format this11650 java-time-format-DateTimeFormatter11651)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11652 ^long long11653] (.plusYears this11652 long11653)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11654 ^long long11655] (.minusDays this11654 long11655)))
