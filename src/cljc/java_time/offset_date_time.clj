(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time OffsetDateTime]))
(def min java.time.OffsetDateTime/MIN)
(def max java.time.OffsetDateTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4293 ^long long4294] (.minusMinutes this4293 long4294)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4295 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4296] (.truncatedTo this4295 java-time-temporal-TemporalUnit4296)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4297 ^long long4298] (.minusWeeks this4297 long4298)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this4299] (.toInstant this4299)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4300 ^long long4301] (.plusWeeks this4300 long4301)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this4302 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4303] (.range this4302 java-time-temporal-TemporalField4303)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4304] (.getHour this4304)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this4305 ^java.time.ZoneId java-time-ZoneId4306] (.atZoneSameInstant this4305 java-time-ZoneId4306)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4307 ^long long4308] (.minusHours this4307 long4308)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"] ["java.time.LocalDateTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate4309 ^java.time.LocalTime java-time-LocalTime4310 ^java.time.ZoneOffset java-time-ZoneOffset4311] (java.time.OffsetDateTime/of java-time-LocalDate4309 java-time-LocalTime4310 java-time-ZoneOffset4311)) (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime4312 ^java.time.ZoneOffset java-time-ZoneOffset4313] (java.time.OffsetDateTime/of java-time-LocalDateTime4312 java-time-ZoneOffset4313)) (^java.time.OffsetDateTime [^java.lang.Integer int4314 ^java.lang.Integer int4315 ^java.lang.Integer int4316 ^java.lang.Integer int4317 ^java.lang.Integer int4318 ^java.lang.Integer int4319 ^java.lang.Integer int4320 ^java.time.ZoneOffset java-time-ZoneOffset4321] (java.time.OffsetDateTime/of int4314 int4315 int4316 int4317 int4318 int4319 int4320 java-time-ZoneOffset4321)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4322 ^java.lang.Integer int4323] (.withMonth this4322 int4323)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this4324 ^java.time.OffsetDateTime java-time-OffsetDateTime4325] (.isEqual this4324 java-time-OffsetDateTime4325)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4326] (.getNano this4326)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this4327] (.toOffsetTime this4327)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this4328 ^java.time.ZoneId java-time-ZoneId4329] (.atZoneSimilarLocal this4328 java-time-ZoneId4329)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4330] (.getYear this4330)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4331 ^long long4332] (.minusSeconds this4331 long4332)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4333] (.getSecond this4333)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4334 ^long long4335] (.plusNanos this4334 long4335)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4336] (.getDayOfYear this4336)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4337 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4338] (.plus this4337 java-time-temporal-TemporalAmount4338)) (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4339 ^long long4340 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4341] (.plus this4339 long4340 java-time-temporal-TemporalUnit4341)))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (java.time.OffsetDateTime/timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4342 ^java.lang.Integer int4343] (.withHour this4342 int4343)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4344 ^java.lang.Integer int4345] (.withMinute this4344 int4345)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4346 ^long long4347] (.plusMinutes this4346 long4347)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this4348 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery4349] (.query this4348 java-time-temporal-TemporalQuery4349)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4350 ^java.time.ZoneOffset java-time-ZoneOffset4351] (.withOffsetSameInstant this4350 java-time-ZoneOffset4351)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this4352] (.getDayOfWeek this4352)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this4353] (.toString this4353)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4354 ^long long4355] (.plusMonths this4354 long4355)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this4356 ^java.time.OffsetDateTime java-time-OffsetDateTime4357] (.isBefore this4356 java-time-OffsetDateTime4357)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4358 ^long long4359] (.minusMonths this4358 long4359)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4360 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount4361] (.minus this4360 java-time-temporal-TemporalAmount4361)) (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4362 ^long long4363 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4364] (.minus this4362 long4363 java-time-temporal-TemporalUnit4364)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4365 ^long long4366] (.plusHours this4365 long4366)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4367 ^long long4368] (.plusDays this4367 long4368)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this4369] (.toLocalTime this4369)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this4370 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4371] (.getLong this4370 java-time-temporal-TemporalField4371)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this4372] (.getOffset this4372)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this4373] (.toZonedDateTime this4373)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4374 ^java.lang.Integer int4375] (.withYear this4374 int4375)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4376 ^java.lang.Integer int4377] (.withNano this4376 int4377)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this4378] (.toEpochSecond this4378)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this4379 ^java.time.temporal.Temporal java-time-temporal-Temporal4380 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit4381] (.until this4379 java-time-temporal-Temporal4380 java-time-temporal-TemporalUnit4381)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4382 ^java.time.ZoneOffset java-time-ZoneOffset4383] (.withOffsetSameLocal this4382 java-time-ZoneOffset4383)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4384 ^java.lang.Integer int4385] (.withDayOfMonth this4384 int4385)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4386] (.getDayOfMonth this4386)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor4387] (java.time.OffsetDateTime/from java-time-temporal-TemporalAccessor4387)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this4388 ^java.time.OffsetDateTime java-time-OffsetDateTime4389] (.isAfter this4388 java-time-OffsetDateTime4389)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4390 ^long long4391] (.minusNanos this4390 long4391)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this4392 G__4393] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__4393)) (clojure.core/let [G__4393 ^"java.time.temporal.TemporalField" G__4393] (.isSupported ^java.time.OffsetDateTime this4392 G__4393)) (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__4393)) (clojure.core/let [G__4393 ^"java.time.temporal.ChronoUnit" G__4393] (.isSupported ^java.time.OffsetDateTime this4392 G__4393)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4394 ^long long4395] (.minusYears this4394 long4395)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence4396] (java.time.OffsetDateTime/parse java-lang-CharSequence4396)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence4397 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4398] (java.time.OffsetDateTime/parse java-lang-CharSequence4397 java-time-format-DateTimeFormatter4398)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4399 ^java.lang.Integer int4400] (.withSecond this4399 int4400)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this4401] (.toLocalDate this4401)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4402] (.getMinute this4402)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4403] (.hashCode this4403)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this4404 ^java.time.temporal.Temporal java-time-temporal-Temporal4405] (.adjustInto this4404 java-time-temporal-Temporal4405)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4406 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster4407] (.with this4406 java-time-temporal-TemporalAdjuster4407)) (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4408 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4409 ^long long4410] (.with this4408 java-time-temporal-TemporalField4409 long4410)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] [] ["java.time.ZoneId"]))} (^java.time.OffsetDateTime [G__4412] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__4412)) (clojure.core/let [G__4412 ^"java.time.Clock" G__4412] (java.time.OffsetDateTime/now G__4412)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__4412)) (clojure.core/let [G__4412 ^"java.time.ZoneId" G__4412] (java.time.OffsetDateTime/now G__4412)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.OffsetDateTime [] (java.time.OffsetDateTime/now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this4413] (.toLocalDateTime this4413)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4414] (.getMonthValue this4414)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4415 ^java.lang.Integer int4416] (.withDayOfYear this4415 int4416)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4417 ^java.time.OffsetDateTime java-time-OffsetDateTime4418] (.compareTo this4417 java-time-OffsetDateTime4418)))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this4419] (.getMonth this4419)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant4420 ^java.time.ZoneId java-time-ZoneId4421] (java.time.OffsetDateTime/ofInstant java-time-Instant4420 java-time-ZoneId4421)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4422 ^long long4423] (.plusSeconds this4422 long4423)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this4424 ^java.time.temporal.TemporalField java-time-temporal-TemporalField4425] (.get this4424 java-time-temporal-TemporalField4425)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this4426 ^java.lang.Object java-lang-Object4427] (.equals this4426 java-lang-Object4427)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this4428 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter4429] (.format this4428 java-time-format-DateTimeFormatter4429)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4430 ^long long4431] (.plusYears this4430 long4431)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this4432 ^long long4433] (.minusDays this4432 long4433)))
