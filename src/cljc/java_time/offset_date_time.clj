(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time OffsetDateTime]))
(def min java.time.OffsetDateTime/MIN)
(def max java.time.OffsetDateTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7282 ^long long7283] (.minusMinutes this7282 long7283)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7284 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7285] (.truncatedTo this7284 java-time-temporal-TemporalUnit7285)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7286 ^long long7287] (.minusWeeks this7286 long7287)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this7288] (.toInstant this7288)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7289 ^long long7290] (.plusWeeks this7289 long7290)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this7291 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7292] (.range this7291 java-time-temporal-TemporalField7292)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this7293] (.getHour this7293)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this7294 ^java.time.ZoneId java-time-ZoneId7295] (.atZoneSameInstant this7294 java-time-ZoneId7295)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7296 ^long long7297] (.minusHours this7296 long7297)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime7298 ^java.time.ZoneOffset java-time-ZoneOffset7299] (java.time.OffsetDateTime/of java-time-LocalDateTime7298 java-time-ZoneOffset7299)) (^java.time.OffsetDateTime [^java.lang.Integer int7300 ^java.lang.Integer int7301 ^java.lang.Integer int7302 ^java.lang.Integer int7303 ^java.lang.Integer int7304 ^java.lang.Integer int7305 ^java.lang.Integer int7306 ^java.time.ZoneOffset java-time-ZoneOffset7307] (java.time.OffsetDateTime/of int7300 int7301 int7302 int7303 int7304 int7305 int7306 java-time-ZoneOffset7307)) (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate7308 ^java.time.LocalTime java-time-LocalTime7309 ^java.time.ZoneOffset java-time-ZoneOffset7310] (java.time.OffsetDateTime/of java-time-LocalDate7308 java-time-LocalTime7309 java-time-ZoneOffset7310)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7311 ^java.lang.Integer int7312] (.withMonth this7311 int7312)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this7313 ^java.time.OffsetDateTime java-time-OffsetDateTime7314] (.isEqual this7313 java-time-OffsetDateTime7314)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this7315] (.getNano this7315)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this7316] (.toOffsetTime this7316)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this7317 ^java.time.ZoneId java-time-ZoneId7318] (.atZoneSimilarLocal this7317 java-time-ZoneId7318)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this7319] (.getYear this7319)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7320 ^long long7321] (.minusSeconds this7320 long7321)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this7322] (.getSecond this7322)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7323 ^long long7324] (.plusNanos this7323 long7324)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this7325] (.getDayOfYear this7325)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7326 G__7327] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7327)) (clojure.core/let [G__7327 ^"java.time.temporal.TemporalAmount" G__7327] (.plus ^java.time.OffsetDateTime this7326 G__7327)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7327)) (clojure.core/let [G__7327 ^"java.time.temporal.TemporalAmount" G__7327] (.plus ^java.time.OffsetDateTime this7326 G__7327)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this7328 G__7329 G__7330] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7329) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7330)) (clojure.core/let [G__7329 (clojure.core/long G__7329) G__7330 ^"java.time.temporal.TemporalUnit" G__7330] (.plus ^java.time.OffsetDateTime this7328 G__7329 G__7330)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7329) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7330)) (clojure.core/let [G__7329 (clojure.core/long G__7329) G__7330 ^"java.time.temporal.TemporalUnit" G__7330] (.plus ^java.time.OffsetDateTime this7328 G__7329 G__7330)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (java.time.OffsetDateTime/timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7331 ^java.lang.Integer int7332] (.withHour this7331 int7332)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7333 ^java.lang.Integer int7334] (.withMinute this7333 int7334)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7335 ^long long7336] (.plusMinutes this7335 long7336)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this7337 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery7338] (.query this7337 java-time-temporal-TemporalQuery7338)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7339 ^java.time.ZoneOffset java-time-ZoneOffset7340] (.withOffsetSameInstant this7339 java-time-ZoneOffset7340)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this7341] (.getDayOfWeek this7341)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this7342] (.toString this7342)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7343 ^long long7344] (.plusMonths this7343 long7344)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this7345 ^java.time.OffsetDateTime java-time-OffsetDateTime7346] (.isBefore this7345 java-time-OffsetDateTime7346)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7347 ^long long7348] (.minusMonths this7347 long7348)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7349 G__7350] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7350)) (clojure.core/let [G__7350 ^"java.time.temporal.TemporalAmount" G__7350] (.minus ^java.time.OffsetDateTime this7349 G__7350)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__7350)) (clojure.core/let [G__7350 ^"java.time.temporal.TemporalAmount" G__7350] (.minus ^java.time.OffsetDateTime this7349 G__7350)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this7351 G__7352 G__7353] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7352) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7353)) (clojure.core/let [G__7352 (clojure.core/long G__7352) G__7353 ^"java.time.temporal.TemporalUnit" G__7353] (.minus ^java.time.OffsetDateTime this7351 G__7352 G__7353)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7352) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7353)) (clojure.core/let [G__7352 (clojure.core/long G__7352) G__7353 ^"java.time.temporal.TemporalUnit" G__7353] (.minus ^java.time.OffsetDateTime this7351 G__7352 G__7353)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7354 ^long long7355] (.plusHours this7354 long7355)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7356 ^long long7357] (.plusDays this7356 long7357)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this7358] (.toLocalTime this7358)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this7359 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7360] (.getLong this7359 java-time-temporal-TemporalField7360)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this7361] (.getOffset this7361)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this7362] (.toZonedDateTime this7362)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7363 ^java.lang.Integer int7364] (.withYear this7363 int7364)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7365 ^java.lang.Integer int7366] (.withNano this7365 int7366)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this7367] (.toEpochSecond this7367)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this7368 ^java.time.temporal.Temporal java-time-temporal-Temporal7369 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit7370] (.until this7368 java-time-temporal-Temporal7369 java-time-temporal-TemporalUnit7370)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7371 ^java.time.ZoneOffset java-time-ZoneOffset7372] (.withOffsetSameLocal this7371 java-time-ZoneOffset7372)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7373 ^java.lang.Integer int7374] (.withDayOfMonth this7373 int7374)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this7375] (.getDayOfMonth this7375)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor7376] (java.time.OffsetDateTime/from java-time-temporal-TemporalAccessor7376)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this7377 ^java.time.OffsetDateTime java-time-OffsetDateTime7378] (.isAfter this7377 java-time-OffsetDateTime7378)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7379 ^long long7380] (.minusNanos this7379 long7380)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this7381 G__7382] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__7382)) (clojure.core/let [G__7382 ^"java.time.temporal.TemporalUnit" G__7382] (.isSupported ^java.time.OffsetDateTime this7381 G__7382)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7382)) (clojure.core/let [G__7382 ^"java.time.temporal.TemporalField" G__7382] (.isSupported ^java.time.OffsetDateTime this7381 G__7382)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7383 ^long long7384] (.minusYears this7383 long7384)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence7385 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter7386] (java.time.OffsetDateTime/parse java-lang-CharSequence7385 java-time-format-DateTimeFormatter7386)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence7387] (java.time.OffsetDateTime/parse java-lang-CharSequence7387)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7388 ^java.lang.Integer int7389] (.withSecond this7388 int7389)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this7390] (.toLocalDate this7390)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this7391] (.getMinute this7391)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this7392] (.hashCode this7392)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this7393 ^java.time.temporal.Temporal java-time-temporal-Temporal7394] (.adjustInto this7393 java-time-temporal-Temporal7394)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this7395 G__7396 G__7397] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7396) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7397)) (clojure.core/let [G__7396 ^"java.time.temporal.TemporalField" G__7396 G__7397 (clojure.core/long G__7397)] (.with ^java.time.OffsetDateTime this7395 G__7396 G__7397)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__7396) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__7397)) (clojure.core/let [G__7396 ^"java.time.temporal.TemporalField" G__7396 G__7397 (clojure.core/long G__7397)] (.with ^java.time.OffsetDateTime this7395 G__7396 G__7397)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this7398 G__7399] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__7399)) (clojure.core/let [G__7399 ^"java.time.temporal.TemporalAdjuster" G__7399] (.with ^java.time.OffsetDateTime this7398 G__7399)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__7399)) (clojure.core/let [G__7399 ^"java.time.temporal.TemporalAdjuster" G__7399] (.with ^java.time.OffsetDateTime this7398 G__7399)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.OffsetDateTime [G__7401] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__7401)) (clojure.core/let [G__7401 ^"java.time.Clock" G__7401] (java.time.OffsetDateTime/now G__7401)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__7401)) (clojure.core/let [G__7401 ^"java.time.ZoneId" G__7401] (java.time.OffsetDateTime/now G__7401)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.OffsetDateTime [] (java.time.OffsetDateTime/now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this7402] (.toLocalDateTime this7402)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this7403] (.getMonthValue this7403)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7404 ^java.lang.Integer int7405] (.withDayOfYear this7404 int7405)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"] ["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [this7406 G__7407] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__7407)) (clojure.core/let [G__7407 ^"java.lang.Object" G__7407] (.compareTo ^java.time.OffsetDateTime this7406 G__7407)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetDateTime") G__7407)) (clojure.core/let [G__7407 ^"java.time.OffsetDateTime" G__7407] (.compareTo ^java.time.OffsetDateTime this7406 G__7407)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this7408] (.getMonth this7408)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant7409 ^java.time.ZoneId java-time-ZoneId7410] (java.time.OffsetDateTime/ofInstant java-time-Instant7409 java-time-ZoneId7410)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7411 ^long long7412] (.plusSeconds this7411 long7412)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this7413 ^java.time.temporal.TemporalField java-time-temporal-TemporalField7414] (.get this7413 java-time-temporal-TemporalField7414)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this7415 ^java.lang.Object java-lang-Object7416] (.equals this7415 java-lang-Object7416)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this7417 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter7418] (.format this7417 java-time-format-DateTimeFormatter7418)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7419 ^long long7420] (.plusYears this7419 long7420)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this7421 ^long long7422] (.minusDays this7421 long7422)))
