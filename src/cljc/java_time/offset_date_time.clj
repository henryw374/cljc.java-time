(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time OffsetDateTime]))
(def min java.time.OffsetDateTime/MIN)
(def max java.time.OffsetDateTime/MAX)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13811 ^long long13812] (.minusMinutes this13811 long13812)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13813 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13814] (.truncatedTo this13813 java-time-temporal-TemporalUnit13814)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13815 ^long long13816] (.minusWeeks this13815 long13816)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this13817] (.toInstant this13817)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13818 ^long long13819] (.plusWeeks this13818 long13819)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this13820 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13821] (.range this13820 java-time-temporal-TemporalField13821)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13822] (.getHour this13822)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this13823 ^java.time.ZoneId java-time-ZoneId13824] (.atZoneSameInstant this13823 java-time-ZoneId13824)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13825 ^long long13826] (.minusHours this13825 long13826)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalDateTime" "java.time.ZoneOffset"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.lang.Integer int13827 ^java.lang.Integer int13828 ^java.lang.Integer int13829 ^java.lang.Integer int13830 ^java.lang.Integer int13831 ^java.lang.Integer int13832 ^java.lang.Integer int13833 ^java.time.ZoneOffset java-time-ZoneOffset13834] (java.time.OffsetDateTime/of int13827 int13828 int13829 int13830 int13831 int13832 int13833 java-time-ZoneOffset13834)) (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime13835 ^java.time.ZoneOffset java-time-ZoneOffset13836] (java.time.OffsetDateTime/of java-time-LocalDateTime13835 java-time-ZoneOffset13836)) (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate13837 ^java.time.LocalTime java-time-LocalTime13838 ^java.time.ZoneOffset java-time-ZoneOffset13839] (java.time.OffsetDateTime/of java-time-LocalDate13837 java-time-LocalTime13838 java-time-ZoneOffset13839)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13840 ^java.lang.Integer int13841] (.withMonth this13840 int13841)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this13842 ^java.time.OffsetDateTime java-time-OffsetDateTime13843] (.isEqual this13842 java-time-OffsetDateTime13843)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13844] (.getNano this13844)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this13845] (.toOffsetTime this13845)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this13846 ^java.time.ZoneId java-time-ZoneId13847] (.atZoneSimilarLocal this13846 java-time-ZoneId13847)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13848] (.getYear this13848)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13849 ^long long13850] (.minusSeconds this13849 long13850)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13851] (.getSecond this13851)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13852 ^long long13853] (.plusNanos this13852 long13853)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13854] (.getDayOfYear this13854)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13855 ^long long13856 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13857] (.plus this13855 long13856 java-time-temporal-TemporalUnit13857)) (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13858 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount13859] (.plus this13858 java-time-temporal-TemporalAmount13859)))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (java.time.OffsetDateTime/timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13860 ^java.lang.Integer int13861] (.withHour this13860 int13861)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13862 ^java.lang.Integer int13863] (.withMinute this13862 int13863)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13864 ^long long13865] (.plusMinutes this13864 long13865)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this13866 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery13867] (.query this13866 java-time-temporal-TemporalQuery13867)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13868 ^java.time.ZoneOffset java-time-ZoneOffset13869] (.withOffsetSameInstant this13868 java-time-ZoneOffset13869)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this13870] (.getDayOfWeek this13870)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this13871] (.toString this13871)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13872 ^long long13873] (.plusMonths this13872 long13873)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this13874 ^java.time.OffsetDateTime java-time-OffsetDateTime13875] (.isBefore this13874 java-time-OffsetDateTime13875)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13876 ^long long13877] (.minusMonths this13876 long13877)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13878 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount13879] (.minus this13878 java-time-temporal-TemporalAmount13879)) (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13880 ^long long13881 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13882] (.minus this13880 long13881 java-time-temporal-TemporalUnit13882)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13883 ^long long13884] (.plusHours this13883 long13884)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13885 ^long long13886] (.plusDays this13885 long13886)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this13887] (.toLocalTime this13887)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this13888 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13889] (.getLong this13888 java-time-temporal-TemporalField13889)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this13890] (.getOffset this13890)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this13891] (.toZonedDateTime this13891)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13892 ^java.lang.Integer int13893] (.withYear this13892 int13893)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13894 ^java.lang.Integer int13895] (.withNano this13894 int13895)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this13896] (.toEpochSecond this13896)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this13897 ^java.time.temporal.Temporal java-time-temporal-Temporal13898 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit13899] (.until this13897 java-time-temporal-Temporal13898 java-time-temporal-TemporalUnit13899)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13900 ^java.time.ZoneOffset java-time-ZoneOffset13901] (.withOffsetSameLocal this13900 java-time-ZoneOffset13901)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13902 ^java.lang.Integer int13903] (.withDayOfMonth this13902 int13903)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13904] (.getDayOfMonth this13904)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor13905] (java.time.OffsetDateTime/from java-time-temporal-TemporalAccessor13905)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this13906 ^java.time.OffsetDateTime java-time-OffsetDateTime13907] (.isAfter this13906 java-time-OffsetDateTime13907)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13908 ^long long13909] (.minusNanos this13908 long13909)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this13910 G__13911] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__13911)) (clojure.core/let [G__13911 ^"java.time.temporal.TemporalField" G__13911] (.isSupported ^java.time.OffsetDateTime this13910 G__13911)) (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__13911)) (clojure.core/let [G__13911 ^"java.time.temporal.ChronoUnit" G__13911] (.isSupported ^java.time.OffsetDateTime this13910 G__13911)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13912 ^long long13913] (.minusYears this13912 long13913)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence13914] (java.time.OffsetDateTime/parse java-lang-CharSequence13914)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence13915 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13916] (java.time.OffsetDateTime/parse java-lang-CharSequence13915 java-time-format-DateTimeFormatter13916)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13917 ^java.lang.Integer int13918] (.withSecond this13917 int13918)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this13919] (.toLocalDate this13919)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13920] (.getMinute this13920)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13921] (.hashCode this13921)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this13922 ^java.time.temporal.Temporal java-time-temporal-Temporal13923] (.adjustInto this13922 java-time-temporal-Temporal13923)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13924 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster13925] (.with this13924 java-time-temporal-TemporalAdjuster13925)) (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13926 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13927 ^long long13928] (.with this13926 java-time-temporal-TemporalField13927 long13928)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] [] ["java.time.ZoneId"]))} (^java.time.OffsetDateTime [G__13930] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__13930)) (clojure.core/let [G__13930 ^"java.time.Clock" G__13930] (java.time.OffsetDateTime/now G__13930)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__13930)) (clojure.core/let [G__13930 ^"java.time.ZoneId" G__13930] (java.time.OffsetDateTime/now G__13930)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.OffsetDateTime [] (java.time.OffsetDateTime/now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this13931] (.toLocalDateTime this13931)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13932] (.getMonthValue this13932)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13933 ^java.lang.Integer int13934] (.withDayOfYear this13933 int13934)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13935 ^java.time.OffsetDateTime java-time-OffsetDateTime13936] (.compareTo this13935 java-time-OffsetDateTime13936)))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this13937] (.getMonth this13937)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant13938 ^java.time.ZoneId java-time-ZoneId13939] (java.time.OffsetDateTime/ofInstant java-time-Instant13938 java-time-ZoneId13939)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13940 ^long long13941] (.plusSeconds this13940 long13941)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this13942 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13943] (.get this13942 java-time-temporal-TemporalField13943)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this13944 ^java.lang.Object java-lang-Object13945] (.equals this13944 java-lang-Object13945)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this13946 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13947] (.format this13946 java-time-format-DateTimeFormatter13947)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13948 ^long long13949] (.plusYears this13948 long13949)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this13950 ^long long13951] (.minusDays this13950 long13951)))
