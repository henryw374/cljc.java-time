(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve]) (:import [java.time OffsetDateTime]))
(def min (. java.time.OffsetDateTime -MIN))
(def max (. java.time.OffsetDateTime -MAX))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6746 ^long long6747] (.minusMinutes this6746 long6747)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6748 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6749] (.truncatedTo this6748 java-time-temporal-TemporalUnit6749)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6750 ^long long6751] (.minusWeeks this6750 long6751)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this6752] (.toInstant this6752)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6753 ^long long6754] (.plusWeeks this6753 long6754)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this6755 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6756] (.range this6755 java-time-temporal-TemporalField6756)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this6757] (.getHour this6757)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this6758 ^java.time.ZoneId java-time-ZoneId6759] (.atZoneSameInstant this6758 java-time-ZoneId6759)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6760 ^long long6761] (.minusHours this6760 long6761)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime6762 ^java.time.ZoneOffset java-time-ZoneOffset6763] (. java.time.OffsetDateTime of java-time-LocalDateTime6762 java-time-ZoneOffset6763)) (^java.time.OffsetDateTime [^java.lang.Integer int6764 ^java.lang.Integer int6765 ^java.lang.Integer int6766 ^java.lang.Integer int6767 ^java.lang.Integer int6768 ^java.lang.Integer int6769 ^java.lang.Integer int6770 ^java.time.ZoneOffset java-time-ZoneOffset6771] (. java.time.OffsetDateTime of int6764 int6765 int6766 int6767 int6768 int6769 int6770 java-time-ZoneOffset6771)) (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate6772 ^java.time.LocalTime java-time-LocalTime6773 ^java.time.ZoneOffset java-time-ZoneOffset6774] (. java.time.OffsetDateTime of java-time-LocalDate6772 java-time-LocalTime6773 java-time-ZoneOffset6774)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6775 ^java.lang.Integer int6776] (.withMonth this6775 int6776)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this6777 ^java.time.OffsetDateTime java-time-OffsetDateTime6778] (.isEqual this6777 java-time-OffsetDateTime6778)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this6779] (.getNano this6779)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this6780] (.toOffsetTime this6780)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this6781 ^java.time.ZoneId java-time-ZoneId6782] (.atZoneSimilarLocal this6781 java-time-ZoneId6782)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this6783] (.getYear this6783)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6784 ^long long6785] (.minusSeconds this6784 long6785)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this6786] (.getSecond this6786)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6787 ^long long6788] (.plusNanos this6787 long6788)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this6789] (.getDayOfYear this6789)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this6790 G__6791] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6791)) (clojure.core/let [G__6791 ^"java.time.temporal.TemporalAmount" G__6791] (.plus ^java.time.OffsetDateTime this6790 G__6791)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6791)) (clojure.core/let [G__6791 ^"java.time.temporal.TemporalAmount" G__6791] (.plus ^java.time.OffsetDateTime this6790 G__6791)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6792 G__6793 G__6794] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6793) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6794)) (clojure.core/let [G__6793 (clojure.core/long G__6793) G__6794 ^"java.time.temporal.TemporalUnit" G__6794] (.plus ^java.time.OffsetDateTime this6792 G__6793 G__6794)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6793) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6794)) (clojure.core/let [G__6793 (clojure.core/long G__6793) G__6794 ^"java.time.temporal.TemporalUnit" G__6794] (.plus ^java.time.OffsetDateTime this6792 G__6793 G__6794)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (. java.time.OffsetDateTime timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6795 ^java.lang.Integer int6796] (.withHour this6795 int6796)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6797 ^java.lang.Integer int6798] (.withMinute this6797 int6798)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6799 ^long long6800] (.plusMinutes this6799 long6800)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this6801 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery6802] (.query this6801 java-time-temporal-TemporalQuery6802)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6803 ^java.time.ZoneOffset java-time-ZoneOffset6804] (.withOffsetSameInstant this6803 java-time-ZoneOffset6804)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this6805] (.getDayOfWeek this6805)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this6806] (.toString this6806)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6807 ^long long6808] (.plusMonths this6807 long6808)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this6809 ^java.time.OffsetDateTime java-time-OffsetDateTime6810] (.isBefore this6809 java-time-OffsetDateTime6810)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6811 ^long long6812] (.minusMonths this6811 long6812)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this6813 G__6814] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6814)) (clojure.core/let [G__6814 ^"java.time.temporal.TemporalAmount" G__6814] (.minus ^java.time.OffsetDateTime this6813 G__6814)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__6814)) (clojure.core/let [G__6814 ^"java.time.temporal.TemporalAmount" G__6814] (.minus ^java.time.OffsetDateTime this6813 G__6814)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6815 G__6816 G__6817] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6816) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6817)) (clojure.core/let [G__6816 (clojure.core/long G__6816) G__6817 ^"java.time.temporal.TemporalUnit" G__6817] (.minus ^java.time.OffsetDateTime this6815 G__6816 G__6817)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6816) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6817)) (clojure.core/let [G__6816 (clojure.core/long G__6816) G__6817 ^"java.time.temporal.TemporalUnit" G__6817] (.minus ^java.time.OffsetDateTime this6815 G__6816 G__6817)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6818 ^long long6819] (.plusHours this6818 long6819)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6820 ^long long6821] (.plusDays this6820 long6821)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this6822] (.toLocalTime this6822)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this6823 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6824] (.getLong this6823 java-time-temporal-TemporalField6824)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this6825] (.getOffset this6825)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this6826] (.toZonedDateTime this6826)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6827 ^java.lang.Integer int6828] (.withYear this6827 int6828)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6829 ^java.lang.Integer int6830] (.withNano this6829 int6830)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this6831] (.toEpochSecond this6831)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this6832 ^java.time.temporal.Temporal java-time-temporal-Temporal6833 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit6834] (.until this6832 java-time-temporal-Temporal6833 java-time-temporal-TemporalUnit6834)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6835 ^java.time.ZoneOffset java-time-ZoneOffset6836] (.withOffsetSameLocal this6835 java-time-ZoneOffset6836)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6837 ^java.lang.Integer int6838] (.withDayOfMonth this6837 int6838)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this6839] (.getDayOfMonth this6839)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor6840] (. java.time.OffsetDateTime from java-time-temporal-TemporalAccessor6840)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this6841 ^java.time.OffsetDateTime java-time-OffsetDateTime6842] (.isAfter this6841 java-time-OffsetDateTime6842)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6843 ^long long6844] (.minusNanos this6843 long6844)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this6845 G__6846] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6846)) (clojure.core/let [G__6846 ^"java.time.temporal.TemporalField" G__6846] (.isSupported ^java.time.OffsetDateTime this6845 G__6846)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__6846)) (clojure.core/let [G__6846 ^"java.time.temporal.TemporalUnit" G__6846] (.isSupported ^java.time.OffsetDateTime this6845 G__6846)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6847 ^long long6848] (.minusYears this6847 long6848)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence6849] (. java.time.OffsetDateTime parse java-lang-CharSequence6849)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence6850 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6851] (. java.time.OffsetDateTime parse java-lang-CharSequence6850 java-time-format-DateTimeFormatter6851)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6852 ^java.lang.Integer int6853] (.withSecond this6852 int6853)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this6854] (.toLocalDate this6854)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this6855] (.getMinute this6855)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this6856] (.hashCode this6856)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this6857 ^java.time.temporal.Temporal java-time-temporal-Temporal6858] (.adjustInto this6857 java-time-temporal-Temporal6858)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this6859 G__6860 G__6861] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6860) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6861)) (clojure.core/let [G__6860 ^"java.time.temporal.TemporalField" G__6860 G__6861 (clojure.core/long G__6861)] (.with ^java.time.OffsetDateTime this6859 G__6860 G__6861)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__6860) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__6861)) (clojure.core/let [G__6860 ^"java.time.temporal.TemporalField" G__6860 G__6861 (clojure.core/long G__6861)] (.with ^java.time.OffsetDateTime this6859 G__6860 G__6861)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this6862 G__6863] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6863)) (clojure.core/let [G__6863 ^"java.time.temporal.TemporalAdjuster" G__6863] (.with ^java.time.OffsetDateTime this6862 G__6863)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__6863)) (clojure.core/let [G__6863 ^"java.time.temporal.TemporalAdjuster" G__6863] (.with ^java.time.OffsetDateTime this6862 G__6863)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] ["java.time.Clock"] []))} (^java.time.OffsetDateTime [G__6865] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__6865)) (clojure.core/let [G__6865 ^"java.time.ZoneId" G__6865] (. java.time.OffsetDateTime now G__6865)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__6865)) (clojure.core/let [G__6865 ^"java.time.Clock" G__6865] (. java.time.OffsetDateTime now G__6865)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.OffsetDateTime [] (. java.time.OffsetDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this6866] (.toLocalDateTime this6866)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this6867] (.getMonthValue this6867)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6868 ^java.lang.Integer int6869] (.withDayOfYear this6868 int6869)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"] ["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [this6870 G__6871] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__6871)) (clojure.core/let [G__6871 ^"java.lang.Object" G__6871] (.compareTo ^java.time.OffsetDateTime this6870 G__6871)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetDateTime") G__6871)) (clojure.core/let [G__6871 ^"java.time.OffsetDateTime" G__6871] (.compareTo ^java.time.OffsetDateTime this6870 G__6871)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this6872] (.getMonth this6872)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant6873 ^java.time.ZoneId java-time-ZoneId6874] (. java.time.OffsetDateTime ofInstant java-time-Instant6873 java-time-ZoneId6874)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6875 ^long long6876] (.plusSeconds this6875 long6876)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this6877 ^java.time.temporal.TemporalField java-time-temporal-TemporalField6878] (.get this6877 java-time-temporal-TemporalField6878)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this6879 ^java.lang.Object java-lang-Object6880] (.equals this6879 java-lang-Object6880)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this6881 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter6882] (.format this6881 java-time-format-DateTimeFormatter6882)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6883 ^long long6884] (.plusYears this6883 long6884)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this6885 ^long long6886] (.minusDays this6885 long6886)))
