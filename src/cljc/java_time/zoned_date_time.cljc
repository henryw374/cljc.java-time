(ns cljc.java-time.zoned-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZonedDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZonedDateTime])))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3736 ^long long3737] (.minusMinutes this3736 long3737)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3738 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3739] (.truncatedTo this3738 java-time-temporal-TemporalUnit3739)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3740 ^long long3741] (.minusWeeks this3740 long3741)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this3742] (.toInstant this3742)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3743 ^long long3744] (.plusWeeks this3743 long3744)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this3745 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3746] (.range this3745 java-time-temporal-TemporalField3746)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this3747] #? (:cljs (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this3747) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this3747)) (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this3747)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3748] (jti/getter hour this3748)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3749 ^long long3750] (.minusHours this3749 long3750)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate3751 ^java.time.LocalTime java-time-LocalTime3752 ^java.time.ZoneId java-time-ZoneId3753] (. java.time.ZonedDateTime of java-time-LocalDate3751 java-time-LocalTime3752 java-time-ZoneId3753)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime3754 ^java.time.ZoneId java-time-ZoneId3755] (. java.time.ZonedDateTime of java-time-LocalDateTime3754 java-time-ZoneId3755)) (^java.time.ZonedDateTime [^java.lang.Integer int3756 ^java.lang.Integer int3757 ^java.lang.Integer int3758 ^java.lang.Integer int3759 ^java.lang.Integer int3760 ^java.lang.Integer int3761 ^java.lang.Integer int3762 ^java.time.ZoneId java-time-ZoneId3763] (. java.time.ZonedDateTime of int3756 int3757 int3758 int3759 int3760 int3761 int3762 java-time-ZoneId3763)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3764 ^java.lang.Integer int3765] (.withMonth this3764 int3765)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this3766 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3767] (.isEqual this3766 java-time-chrono-ChronoZonedDateTime3767)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3768] (jti/getter nano this3768)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime3769 ^java.time.ZoneId java-time-ZoneId3770 ^java.time.ZoneOffset java-time-ZoneOffset3771] (. java.time.ZonedDateTime ofLocal java-time-LocalDateTime3769 java-time-ZoneId3770 java-time-ZoneOffset3771)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3772] (jti/getter year this3772)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3773 ^long long3774] (.minusSeconds this3773 long3774)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3775] (jti/getter second this3775)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3776 ^long long3777] (.plusNanos this3776 long3777)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3778] (jti/getter dayOfYear this3778)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this3779 G__3780 G__3781] #? (:cljs (.plus ^java.time.ZonedDateTime this3779 G__3780 G__3781) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3780) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3781)) (clojure.core/let [G__3780 (clojure.core/long G__3780) G__3781 ^"java.time.temporal.TemporalUnit" G__3781] (.plus ^java.time.ZonedDateTime this3779 G__3780 G__3781)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3780) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3781)) (clojure.core/let [G__3780 (clojure.core/long G__3780) G__3781 ^"java.time.temporal.TemporalUnit" G__3781] (.plus ^java.time.ZonedDateTime this3779 G__3780 G__3781)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3780) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3781)) (clojure.core/let [G__3780 (clojure.core/long G__3780) G__3781 ^"java.time.temporal.TemporalUnit" G__3781] (.plus ^java.time.ZonedDateTime this3779 G__3780 G__3781)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this3782 G__3783] #? (:cljs (.plus ^java.time.ZonedDateTime this3782 G__3783) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3783)) (clojure.core/let [G__3783 ^"java.time.temporal.TemporalAmount" G__3783] (.plus ^java.time.ZonedDateTime this3782 G__3783)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3783)) (clojure.core/let [G__3783 ^"java.time.temporal.TemporalAmount" G__3783] (.plus ^java.time.ZonedDateTime this3782 G__3783)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3783)) (clojure.core/let [G__3783 ^"java.time.temporal.TemporalAmount" G__3783] (.plus ^java.time.ZonedDateTime this3782 G__3783)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3784 ^java.lang.Integer int3785] (.withHour this3784 int3785)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3786 ^java.lang.Integer int3787] (.withMinute this3786 int3787)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3788 ^long long3789] (.plusMinutes this3788 long3789)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this3790 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3791] (.query this3790 java-time-temporal-TemporalQuery3791)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this3792] (jti/getter dayOfWeek this3792)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this3793] (.toString this3793)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3794 ^long long3795] (.plusMonths this3794 long3795)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this3796 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3797] (.isBefore this3796 java-time-chrono-ChronoZonedDateTime3797)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3798 ^long long3799] (.minusMonths this3798 long3799)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this3800 G__3801] #? (:cljs (.minus ^java.time.ZonedDateTime this3800 G__3801) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3801)) (clojure.core/let [G__3801 ^"java.time.temporal.TemporalAmount" G__3801] (.minus ^java.time.ZonedDateTime this3800 G__3801)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3801)) (clojure.core/let [G__3801 ^"java.time.temporal.TemporalAmount" G__3801] (.minus ^java.time.ZonedDateTime this3800 G__3801)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__3801)) (clojure.core/let [G__3801 ^"java.time.temporal.TemporalAmount" G__3801] (.minus ^java.time.ZonedDateTime this3800 G__3801)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this3802 G__3803 G__3804] #? (:cljs (.minus ^java.time.ZonedDateTime this3802 G__3803 G__3804) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3803) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3804)) (clojure.core/let [G__3803 (clojure.core/long G__3803) G__3804 ^"java.time.temporal.TemporalUnit" G__3804] (.minus ^java.time.ZonedDateTime this3802 G__3803 G__3804)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3803) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3804)) (clojure.core/let [G__3803 (clojure.core/long G__3803) G__3804 ^"java.time.temporal.TemporalUnit" G__3804] (.minus ^java.time.ZonedDateTime this3802 G__3803 G__3804)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3803) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3804)) (clojure.core/let [G__3803 (clojure.core/long G__3803) G__3804 ^"java.time.temporal.TemporalUnit" G__3804] (.minus ^java.time.ZonedDateTime this3802 G__3803 G__3804)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3805] (.withFixedOffsetZone this3805)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3806 ^long long3807] (.plusHours this3806 long3807)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this3808 G__3809] #? (:cljs (.withZoneSameLocal ^java.time.ZonedDateTime this3808 G__3809) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__3809)) (clojure.core/let [G__3809 ^"java.time.ZoneId" G__3809] (.withZoneSameLocal ^java.time.ZonedDateTime this3808 G__3809)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__3809)) (clojure.core/let [G__3809 ^"java.time.ZoneId" G__3809] (.withZoneSameLocal ^java.time.ZonedDateTime this3808 G__3809)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this3810 G__3811] #? (:cljs (.withZoneSameInstant ^java.time.ZonedDateTime this3810 G__3811) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__3811)) (clojure.core/let [G__3811 ^"java.time.ZoneId" G__3811] (.withZoneSameInstant ^java.time.ZonedDateTime this3810 G__3811)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__3811)) (clojure.core/let [G__3811 ^"java.time.ZoneId" G__3811] (.withZoneSameInstant ^java.time.ZonedDateTime this3810 G__3811)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3812 ^long long3813] (.plusDays this3812 long3813)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this3814] (.toLocalTime this3814)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this3815 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3816] (.getLong this3815 java-time-temporal-TemporalField3816)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this3817] (jti/getter offset this3817)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3818 ^java.lang.Integer int3819] (.withYear this3818 int3819)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3820 ^java.lang.Integer int3821] (.withNano this3820 int3821)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this3822] (.toEpochSecond this3822)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this3823] (.toOffsetDateTime this3823)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this3824] #? (:cljs (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this3824) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this3824)) (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this3824)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this3825 ^java.time.temporal.Temporal java-time-temporal-Temporal3826 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3827] (.until this3825 java-time-temporal-Temporal3826 java-time-temporal-TemporalUnit3827)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this3828] (jti/getter zone this3828)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3829 ^java.lang.Integer int3830] (.withDayOfMonth this3829 int3830)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3831] (jti/getter dayOfMonth this3831)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor3832] (. java.time.ZonedDateTime from java-time-temporal-TemporalAccessor3832)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this3833 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime3834] (.isAfter this3833 java-time-chrono-ChronoZonedDateTime3834)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3835 ^long long3836] (.minusNanos this3835 long3836)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this3837 G__3838] #? (:cljs (.isSupported ^java.time.ZonedDateTime this3837 G__3838) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3838)) (clojure.core/let [G__3838 ^"java.time.temporal.TemporalUnit" G__3838] (.isSupported ^java.time.ZonedDateTime this3837 G__3838)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3838)) (clojure.core/let [G__3838 ^"java.time.temporal.TemporalField" G__3838] (.isSupported ^java.time.ZonedDateTime this3837 G__3838)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3839 ^long long3840] (.minusYears this3839 long3840)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this3841] (jti/getter chronology this3841)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence3842] (. java.time.ZonedDateTime parse java-lang-CharSequence3842)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence3843 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3844] (. java.time.ZonedDateTime parse java-lang-CharSequence3843 java-time-format-DateTimeFormatter3844)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3845 ^java.lang.Integer int3846] (.withSecond this3845 int3846)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this3847] #? (:cljs (.toLocalDate ^java.time.ZonedDateTime this3847) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this3847)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this3847)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3848] (jti/getter minute this3848)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3849] (.hashCode this3849)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this3850 G__3851] #? (:cljs (.with ^java.time.ZonedDateTime this3850 G__3851) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__3851)) (clojure.core/let [G__3851 ^"java.time.temporal.TemporalAdjuster" G__3851] (.with ^java.time.ZonedDateTime this3850 G__3851)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__3851)) (clojure.core/let [G__3851 ^"java.time.temporal.TemporalAdjuster" G__3851] (.with ^java.time.ZonedDateTime this3850 G__3851)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__3851)) (clojure.core/let [G__3851 ^"java.time.temporal.TemporalAdjuster" G__3851] (.with ^java.time.ZonedDateTime this3850 G__3851)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this3852 G__3853 G__3854] #? (:cljs (.with ^java.time.ZonedDateTime this3852 G__3853 G__3854) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3853) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3854)) (clojure.core/let [G__3853 ^"java.time.temporal.TemporalField" G__3853 G__3854 (clojure.core/long G__3854)] (.with ^java.time.ZonedDateTime this3852 G__3853 G__3854)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3853) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3854)) (clojure.core/let [G__3853 ^"java.time.temporal.TemporalField" G__3853 G__3854 (clojure.core/long G__3854)] (.with ^java.time.ZonedDateTime this3852 G__3853 G__3854)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3853) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__3854)) (clojure.core/let [G__3853 ^"java.time.temporal.TemporalField" G__3853 G__3854 (clojure.core/long G__3854)] (.with ^java.time.ZonedDateTime this3852 G__3853 G__3854)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] [] ["java.time.ZoneId"]))} (^java.time.ZonedDateTime [G__3856] #? (:cljs (. java.time.ZonedDateTime now G__3856) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__3856)) (clojure.core/let [G__3856 ^"java.time.Clock" G__3856] (. java.time.ZonedDateTime now G__3856)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__3856)) (clojure.core/let [G__3856 ^"java.time.ZoneId" G__3856] (. java.time.ZonedDateTime now G__3856)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.ZonedDateTime [] (. java.time.ZonedDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this3857] #? (:cljs (.toLocalDateTime ^java.time.ZonedDateTime this3857) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this3857)) (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this3857)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3858] (jti/getter monthValue this3858)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3859 ^java.lang.Integer int3860] (.withDayOfYear this3859 int3860)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"] ["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [this3861 G__3862] #? (:cljs (.compareTo ^java.time.ZonedDateTime this3861 G__3862) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__3862)) (clojure.core/let [G__3862 ^"java.lang.Object" G__3862] (.compareTo ^java.time.ZonedDateTime this3861 G__3862)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoZonedDateTime") G__3862)) (clojure.core/let [G__3862 ^"java.time.chrono.ChronoZonedDateTime" G__3862] (.compareTo ^java.time.ZonedDateTime this3861 G__3862)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime3863 ^java.time.ZoneOffset java-time-ZoneOffset3864 ^java.time.ZoneId java-time-ZoneId3865] (. java.time.ZonedDateTime ofStrict java-time-LocalDateTime3863 java-time-ZoneOffset3864 java-time-ZoneId3865)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this3866] (jti/getter month this3866)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"] ["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime3867 ^java.time.ZoneOffset java-time-ZoneOffset3868 ^java.time.ZoneId java-time-ZoneId3869] (. java.time.ZonedDateTime ofInstant java-time-LocalDateTime3867 java-time-ZoneOffset3868 java-time-ZoneId3869)) (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant3870 ^java.time.ZoneId java-time-ZoneId3871] (. java.time.ZonedDateTime ofInstant java-time-Instant3870 java-time-ZoneId3871)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3872 ^long long3873] (.plusSeconds this3872 long3873)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this3874 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3875] (.get this3874 java-time-temporal-TemporalField3875)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this3876 ^java.lang.Object java-lang-Object3877] (.equals this3876 java-lang-Object3877)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this3878 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3879] (.format this3878 java-time-format-DateTimeFormatter3879)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3880 ^long long3881] (.plusYears this3880 long3881)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this3882 ^long long3883] (.minusDays this3882 long3883)))
