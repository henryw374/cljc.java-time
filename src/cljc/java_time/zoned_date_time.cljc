(ns cljc.java-time.zoned-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZonedDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZonedDateTime])))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12517 ^long long12518] (.minusMinutes this12517 long12518)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12519 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12520] (.truncatedTo this12519 java-time-temporal-TemporalUnit12520)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12521 ^long long12522] (.minusWeeks this12521 long12522)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this12523] (.toInstant this12523)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12524 ^long long12525] (.plusWeeks this12524 long12525)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this12526 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12527] (.range this12526 java-time-temporal-TemporalField12527)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this12528] #? (:cljs (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this12528) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this12528)) (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this12528)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this12529] (jti/getter hour this12529)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12530 ^long long12531] (.minusHours this12530 long12531)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime12532 ^java.time.ZoneId java-time-ZoneId12533] (. java.time.ZonedDateTime of java-time-LocalDateTime12532 java-time-ZoneId12533)) (^java.time.ZonedDateTime [^java.lang.Integer int12534 ^java.lang.Integer int12535 ^java.lang.Integer int12536 ^java.lang.Integer int12537 ^java.lang.Integer int12538 ^java.lang.Integer int12539 ^java.lang.Integer int12540 ^java.time.ZoneId java-time-ZoneId12541] (. java.time.ZonedDateTime of int12534 int12535 int12536 int12537 int12538 int12539 int12540 java-time-ZoneId12541)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate12542 ^java.time.LocalTime java-time-LocalTime12543 ^java.time.ZoneId java-time-ZoneId12544] (. java.time.ZonedDateTime of java-time-LocalDate12542 java-time-LocalTime12543 java-time-ZoneId12544)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12545 ^java.lang.Integer int12546] (.withMonth this12545 int12546)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this12547 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime12548] (.isEqual this12547 java-time-chrono-ChronoZonedDateTime12548)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this12549] (jti/getter nano this12549)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime12550 ^java.time.ZoneId java-time-ZoneId12551 ^java.time.ZoneOffset java-time-ZoneOffset12552] (. java.time.ZonedDateTime ofLocal java-time-LocalDateTime12550 java-time-ZoneId12551 java-time-ZoneOffset12552)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this12553] (jti/getter year this12553)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12554 ^long long12555] (.minusSeconds this12554 long12555)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this12556] (jti/getter second this12556)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12557 ^long long12558] (.plusNanos this12557 long12558)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this12559] (jti/getter dayOfYear this12559)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this12560 G__12561] #? (:cljs (.plus ^java.time.ZonedDateTime this12560 G__12561) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12561)) (clojure.core/let [G__12561 ^"java.time.temporal.TemporalAmount" G__12561] (.plus ^java.time.ZonedDateTime this12560 G__12561)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12561)) (clojure.core/let [G__12561 ^"java.time.temporal.TemporalAmount" G__12561] (.plus ^java.time.ZonedDateTime this12560 G__12561)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12561)) (clojure.core/let [G__12561 ^"java.time.temporal.TemporalAmount" G__12561] (.plus ^java.time.ZonedDateTime this12560 G__12561)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12562 G__12563 G__12564] #? (:cljs (.plus ^java.time.ZonedDateTime this12562 G__12563 G__12564) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12563) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12564)) (clojure.core/let [G__12563 (clojure.core/long G__12563) G__12564 ^"java.time.temporal.TemporalUnit" G__12564] (.plus ^java.time.ZonedDateTime this12562 G__12563 G__12564)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12563) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12564)) (clojure.core/let [G__12563 (clojure.core/long G__12563) G__12564 ^"java.time.temporal.TemporalUnit" G__12564] (.plus ^java.time.ZonedDateTime this12562 G__12563 G__12564)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12563) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12564)) (clojure.core/let [G__12563 (clojure.core/long G__12563) G__12564 ^"java.time.temporal.TemporalUnit" G__12564] (.plus ^java.time.ZonedDateTime this12562 G__12563 G__12564)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12565 ^java.lang.Integer int12566] (.withHour this12565 int12566)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12567 ^java.lang.Integer int12568] (.withMinute this12567 int12568)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12569 ^long long12570] (.plusMinutes this12569 long12570)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this12571 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12572] (.query this12571 java-time-temporal-TemporalQuery12572)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this12573] (jti/getter dayOfWeek this12573)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this12574] (.toString this12574)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12575 ^long long12576] (.plusMonths this12575 long12576)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this12577 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime12578] (.isBefore this12577 java-time-chrono-ChronoZonedDateTime12578)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12579 ^long long12580] (.minusMonths this12579 long12580)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this12581 G__12582 G__12583] #? (:cljs (.minus ^java.time.ZonedDateTime this12581 G__12582 G__12583) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12582) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12583)) (clojure.core/let [G__12582 (clojure.core/long G__12582) G__12583 ^"java.time.temporal.TemporalUnit" G__12583] (.minus ^java.time.ZonedDateTime this12581 G__12582 G__12583)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12582) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12583)) (clojure.core/let [G__12582 (clojure.core/long G__12582) G__12583 ^"java.time.temporal.TemporalUnit" G__12583] (.minus ^java.time.ZonedDateTime this12581 G__12582 G__12583)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12582) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12583)) (clojure.core/let [G__12582 (clojure.core/long G__12582) G__12583 ^"java.time.temporal.TemporalUnit" G__12583] (.minus ^java.time.ZonedDateTime this12581 G__12582 G__12583)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12584 G__12585] #? (:cljs (.minus ^java.time.ZonedDateTime this12584 G__12585) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12585)) (clojure.core/let [G__12585 ^"java.time.temporal.TemporalAmount" G__12585] (.minus ^java.time.ZonedDateTime this12584 G__12585)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12585)) (clojure.core/let [G__12585 ^"java.time.temporal.TemporalAmount" G__12585] (.minus ^java.time.ZonedDateTime this12584 G__12585)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__12585)) (clojure.core/let [G__12585 ^"java.time.temporal.TemporalAmount" G__12585] (.minus ^java.time.ZonedDateTime this12584 G__12585)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12586] (.withFixedOffsetZone this12586)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12587 ^long long12588] (.plusHours this12587 long12588)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this12589 G__12590] #? (:cljs (.withZoneSameLocal ^java.time.ZonedDateTime this12589 G__12590) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12590)) (clojure.core/let [G__12590 ^"java.time.ZoneId" G__12590] (.withZoneSameLocal ^java.time.ZonedDateTime this12589 G__12590)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12590)) (clojure.core/let [G__12590 ^"java.time.ZoneId" G__12590] (.withZoneSameLocal ^java.time.ZonedDateTime this12589 G__12590)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this12591 G__12592] #? (:cljs (.withZoneSameInstant ^java.time.ZonedDateTime this12591 G__12592) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12592)) (clojure.core/let [G__12592 ^"java.time.ZoneId" G__12592] (.withZoneSameInstant ^java.time.ZonedDateTime this12591 G__12592)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12592)) (clojure.core/let [G__12592 ^"java.time.ZoneId" G__12592] (.withZoneSameInstant ^java.time.ZonedDateTime this12591 G__12592)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12593 ^long long12594] (.plusDays this12593 long12594)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this12595] (.toLocalTime this12595)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this12596 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12597] (.getLong this12596 java-time-temporal-TemporalField12597)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this12598] (jti/getter offset this12598)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12599 ^java.lang.Integer int12600] (.withYear this12599 int12600)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12601 ^java.lang.Integer int12602] (.withNano this12601 int12602)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this12603] (.toEpochSecond this12603)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this12604] (.toOffsetDateTime this12604)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this12605] #? (:cljs (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this12605) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this12605)) (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this12605)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this12606 ^java.time.temporal.Temporal java-time-temporal-Temporal12607 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12608] (.until this12606 java-time-temporal-Temporal12607 java-time-temporal-TemporalUnit12608)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this12609] (jti/getter zone this12609)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12610 ^java.lang.Integer int12611] (.withDayOfMonth this12610 int12611)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this12612] (jti/getter dayOfMonth this12612)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12613] (. java.time.ZonedDateTime from java-time-temporal-TemporalAccessor12613)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this12614 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime12615] (.isAfter this12614 java-time-chrono-ChronoZonedDateTime12615)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12616 ^long long12617] (.minusNanos this12616 long12617)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this12618 G__12619] #? (:cljs (.isSupported ^java.time.ZonedDateTime this12618 G__12619) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__12619)) (clojure.core/let [G__12619 ^"java.time.temporal.TemporalUnit" G__12619] (.isSupported ^java.time.ZonedDateTime this12618 G__12619)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12619)) (clojure.core/let [G__12619 ^"java.time.temporal.TemporalField" G__12619] (.isSupported ^java.time.ZonedDateTime this12618 G__12619)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12620 ^long long12621] (.minusYears this12620 long12621)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this12622] (jti/getter chronology this12622)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence12623 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12624] (. java.time.ZonedDateTime parse java-lang-CharSequence12623 java-time-format-DateTimeFormatter12624)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence12625] (. java.time.ZonedDateTime parse java-lang-CharSequence12625)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12626 ^java.lang.Integer int12627] (.withSecond this12626 int12627)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this12628] #? (:cljs (.toLocalDate ^java.time.ZonedDateTime this12628) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this12628)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this12628)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this12629] (jti/getter minute this12629)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this12630] (.hashCode this12630)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this12631 G__12632 G__12633] #? (:cljs (.with ^java.time.ZonedDateTime this12631 G__12632 G__12633) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12632) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12633)) (clojure.core/let [G__12632 ^"java.time.temporal.TemporalField" G__12632 G__12633 (clojure.core/long G__12633)] (.with ^java.time.ZonedDateTime this12631 G__12632 G__12633)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12632) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12633)) (clojure.core/let [G__12632 ^"java.time.temporal.TemporalField" G__12632 G__12633 (clojure.core/long G__12633)] (.with ^java.time.ZonedDateTime this12631 G__12632 G__12633)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__12632) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__12633)) (clojure.core/let [G__12632 ^"java.time.temporal.TemporalField" G__12632 G__12633 (clojure.core/long G__12633)] (.with ^java.time.ZonedDateTime this12631 G__12632 G__12633)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this12634 G__12635] #? (:cljs (.with ^java.time.ZonedDateTime this12634 G__12635) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12635)) (clojure.core/let [G__12635 ^"java.time.temporal.TemporalAdjuster" G__12635] (.with ^java.time.ZonedDateTime this12634 G__12635)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12635)) (clojure.core/let [G__12635 ^"java.time.temporal.TemporalAdjuster" G__12635] (.with ^java.time.ZonedDateTime this12634 G__12635)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__12635)) (clojure.core/let [G__12635 ^"java.time.temporal.TemporalAdjuster" G__12635] (.with ^java.time.ZonedDateTime this12634 G__12635)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.ZonedDateTime [G__12637] #? (:cljs (. java.time.ZonedDateTime now G__12637) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__12637)) (clojure.core/let [G__12637 ^"java.time.Clock" G__12637] (. java.time.ZonedDateTime now G__12637)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__12637)) (clojure.core/let [G__12637 ^"java.time.ZoneId" G__12637] (. java.time.ZonedDateTime now G__12637)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.ZonedDateTime [] (. java.time.ZonedDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this12638] #? (:cljs (.toLocalDateTime ^java.time.ZonedDateTime this12638) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this12638)) (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this12638)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this12639] (jti/getter monthValue this12639)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12640 ^java.lang.Integer int12641] (.withDayOfYear this12640 int12641)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"] ["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Integer [this12642 G__12643] #? (:cljs (.compareTo ^java.time.ZonedDateTime this12642 G__12643) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__12643)) (clojure.core/let [G__12643 ^"java.lang.Object" G__12643] (.compareTo ^java.time.ZonedDateTime this12642 G__12643)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoZonedDateTime") G__12643)) (clojure.core/let [G__12643 ^"java.time.chrono.ChronoZonedDateTime" G__12643] (.compareTo ^java.time.ZonedDateTime this12642 G__12643)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime12644 ^java.time.ZoneOffset java-time-ZoneOffset12645 ^java.time.ZoneId java-time-ZoneId12646] (. java.time.ZonedDateTime ofStrict java-time-LocalDateTime12644 java-time-ZoneOffset12645 java-time-ZoneId12646)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this12647] (jti/getter month this12647)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"] ["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime12648 ^java.time.ZoneOffset java-time-ZoneOffset12649 ^java.time.ZoneId java-time-ZoneId12650] (. java.time.ZonedDateTime ofInstant java-time-LocalDateTime12648 java-time-ZoneOffset12649 java-time-ZoneId12650)) (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant12651 ^java.time.ZoneId java-time-ZoneId12652] (. java.time.ZonedDateTime ofInstant java-time-Instant12651 java-time-ZoneId12652)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12653 ^long long12654] (.plusSeconds this12653 long12654)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this12655 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12656] (.get this12655 java-time-temporal-TemporalField12656)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this12657 ^java.lang.Object java-lang-Object12658] (.equals this12657 java-lang-Object12658)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this12659 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12660] (.format this12659 java-time-format-DateTimeFormatter12660)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12661 ^long long12662] (.plusYears this12661 long12662)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this12663 ^long long12664] (.minusDays this12663 long12664)))
