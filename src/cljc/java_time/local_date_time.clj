(ns cljc.java-time.local-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalDateTime]))
(def max java.time.LocalDateTime/MAX)
(def min java.time.LocalDateTime/MIN)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10591 ^long long10592] (.minusMinutes this10591 long10592)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10593 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit10594] (.truncatedTo this10593 java-time-temporal-TemporalUnit10594)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10595 ^long long10596] (.minusWeeks this10595 long10596)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.Instant [^java.time.LocalDateTime this10597 ^java.time.ZoneOffset java-time-ZoneOffset10598] (.toInstant this10597 java-time-ZoneOffset10598)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10599 ^long long10600] (.plusWeeks this10599 long10600)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDateTime this10601 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10602] (.range this10601 java-time-temporal-TemporalField10602)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^java.time.LocalDateTime [^long long10603 ^java.lang.Integer int10604 ^java.time.ZoneOffset java-time-ZoneOffset10605] (. java.time.LocalDateTime ofEpochSecond long10603 int10604 java-time-ZoneOffset10605)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10606] (.getHour this10606)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime this10607 ^java.time.ZoneOffset java-time-ZoneOffset10608] (.atOffset this10607 java-time-ZoneOffset10608)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10609 ^long long10610] (.minusHours this10609 long10610)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["int" "java.time.Month" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"]))} (^java.time.LocalDateTime [G__10612 G__10613 G__10614 G__10615 G__10616 G__10617 G__10618] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10612) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__10613) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10614) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10615) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10616) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10617) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10618)) (clojure.core/let [G__10612 (clojure.core/int G__10612) G__10613 ^"java.time.Month" G__10613 G__10614 (clojure.core/int G__10614) G__10615 (clojure.core/int G__10615) G__10616 (clojure.core/int G__10616) G__10617 (clojure.core/int G__10617) G__10618 (clojure.core/int G__10618)] (. java.time.LocalDateTime of G__10612 G__10613 G__10614 G__10615 G__10616 G__10617 G__10618)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10612) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10613) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10614) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10615) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10616) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10617) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10618)) (clojure.core/let [G__10612 (clojure.core/int G__10612) G__10613 (clojure.core/int G__10613) G__10614 (clojure.core/int G__10614) G__10615 (clojure.core/int G__10615) G__10616 (clojure.core/int G__10616) G__10617 (clojure.core/int G__10617) G__10618 (clojure.core/int G__10618)] (. java.time.LocalDateTime of G__10612 G__10613 G__10614 G__10615 G__10616 G__10617 G__10618)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [G__10620 G__10621 G__10622 G__10623 G__10624] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10620) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10621) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10622) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10623) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10624)) (clojure.core/let [G__10620 (clojure.core/int G__10620) G__10621 (clojure.core/int G__10621) G__10622 (clojure.core/int G__10622) G__10623 (clojure.core/int G__10623) G__10624 (clojure.core/int G__10624)] (. java.time.LocalDateTime of G__10620 G__10621 G__10622 G__10623 G__10624)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10620) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__10621) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10622) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10623) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10624)) (clojure.core/let [G__10620 (clojure.core/int G__10620) G__10621 ^"java.time.Month" G__10621 G__10622 (clojure.core/int G__10622) G__10623 (clojure.core/int G__10623) G__10624 (clojure.core/int G__10624)] (. java.time.LocalDateTime of G__10620 G__10621 G__10622 G__10623 G__10624)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [G__10626 G__10627 G__10628 G__10629 G__10630 G__10631] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10626) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10627) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10628) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10629) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10630) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10631)) (clojure.core/let [G__10626 (clojure.core/int G__10626) G__10627 (clojure.core/int G__10627) G__10628 (clojure.core/int G__10628) G__10629 (clojure.core/int G__10629) G__10630 (clojure.core/int G__10630) G__10631 (clojure.core/int G__10631)] (. java.time.LocalDateTime of G__10626 G__10627 G__10628 G__10629 G__10630 G__10631)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10626) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__10627) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10628) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10629) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10630) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__10631)) (clojure.core/let [G__10626 (clojure.core/int G__10626) G__10627 ^"java.time.Month" G__10627 G__10628 (clojure.core/int G__10628) G__10629 (clojure.core/int G__10629) G__10630 (clojure.core/int G__10630) G__10631 (clojure.core/int G__10631)] (. java.time.LocalDateTime of G__10626 G__10627 G__10628 G__10629 G__10630 G__10631)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate java-time-LocalDate10632 ^java.time.LocalTime java-time-LocalTime10633] (. java.time.LocalDateTime of java-time-LocalDate10632 java-time-LocalTime10633)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10634 ^java.lang.Integer int10635] (.withMonth this10634 int10635)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this10636 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime10637] (.isEqual this10636 java-time-chrono-ChronoLocalDateTime10637)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10638] (.getNano this10638)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10639] (.getYear this10639)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10640 ^long long10641] (.minusSeconds this10640 long10641)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10642] (.getSecond this10642)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10643 ^long long10644] (.plusNanos this10643 long10644)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10645] (.getDayOfYear this10645)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this10646 G__10647 G__10648] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10647) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10648)) (clojure.core/let [G__10647 (clojure.core/long G__10647) G__10648 ^"java.time.temporal.TemporalUnit" G__10648] (.plus ^java.time.LocalDateTime this10646 G__10647 G__10648)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10647) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10648)) (clojure.core/let [G__10647 (clojure.core/long G__10647) G__10648 ^"java.time.temporal.TemporalUnit" G__10648] (.plus ^java.time.LocalDateTime this10646 G__10647 G__10648)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10647) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10648)) (clojure.core/let [G__10647 (clojure.core/long G__10647) G__10648 ^"java.time.temporal.TemporalUnit" G__10648] (.plus ^java.time.LocalDateTime this10646 G__10647 G__10648)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this10649 G__10650] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10650)) (clojure.core/let [G__10650 ^"java.time.temporal.TemporalAmount" G__10650] (.plus ^java.time.LocalDateTime this10649 G__10650)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10650)) (clojure.core/let [G__10650 ^"java.time.temporal.TemporalAmount" G__10650] (.plus ^java.time.LocalDateTime this10649 G__10650)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10650)) (clojure.core/let [G__10650 ^"java.time.temporal.TemporalAmount" G__10650] (.plus ^java.time.LocalDateTime this10649 G__10650)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10651 ^java.lang.Integer int10652] (.withHour this10651 int10652)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10653 ^java.lang.Integer int10654] (.withMinute this10653 int10654)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10655 ^long long10656] (.plusMinutes this10655 long10656)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDateTime this10657 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery10658] (.query this10657 java-time-temporal-TemporalQuery10658)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.DayOfWeek [^java.time.LocalDateTime this10659] (.getDayOfWeek this10659)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^java.time.LocalDateTime this10660] (.toString this10660)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10661 ^long long10662] (.plusMonths this10661 long10662)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this10663 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime10664] (.isBefore this10663 java-time-chrono-ChronoLocalDateTime10664)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10665 ^long long10666] (.minusMonths this10665 long10666)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this10667 G__10668 G__10669] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10668) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10669)) (clojure.core/let [G__10668 (clojure.core/long G__10668) G__10669 ^"java.time.temporal.TemporalUnit" G__10669] (.minus ^java.time.LocalDateTime this10667 G__10668 G__10669)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10668) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10669)) (clojure.core/let [G__10668 (clojure.core/long G__10668) G__10669 ^"java.time.temporal.TemporalUnit" G__10669] (.minus ^java.time.LocalDateTime this10667 G__10668 G__10669)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10668) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10669)) (clojure.core/let [G__10668 (clojure.core/long G__10668) G__10669 ^"java.time.temporal.TemporalUnit" G__10669] (.minus ^java.time.LocalDateTime this10667 G__10668 G__10669)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this10670 G__10671] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10671)) (clojure.core/let [G__10671 ^"java.time.temporal.TemporalAmount" G__10671] (.minus ^java.time.LocalDateTime this10670 G__10671)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10671)) (clojure.core/let [G__10671 ^"java.time.temporal.TemporalAmount" G__10671] (.minus ^java.time.LocalDateTime this10670 G__10671)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__10671)) (clojure.core/let [G__10671 ^"java.time.temporal.TemporalAmount" G__10671] (.minus ^java.time.LocalDateTime this10670 G__10671)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this10672 G__10673] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__10673)) (clojure.core/let [G__10673 ^"java.time.ZoneId" G__10673] (.atZone ^java.time.LocalDateTime this10672 G__10673)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__10673)) (clojure.core/let [G__10673 ^"java.time.ZoneId" G__10673] (.atZone ^java.time.LocalDateTime this10672 G__10673)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10674 ^long long10675] (.plusHours this10674 long10675)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10676 ^long long10677] (.plusDays this10676 long10677)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalTime [^java.time.LocalDateTime this10678] (.toLocalTime this10678)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDateTime this10679 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10680] (.getLong this10679 java-time-temporal-TemporalField10680)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10681 ^java.lang.Integer int10682] (.withYear this10681 int10682)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10683 ^java.lang.Integer int10684] (.withNano this10683 int10684)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDateTime this10685 ^java.time.ZoneOffset java-time-ZoneOffset10686] (.toEpochSecond this10685 java-time-ZoneOffset10686)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalDateTime this10687 ^java.time.temporal.Temporal java-time-temporal-Temporal10688 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit10689] (.until this10687 java-time-temporal-Temporal10688 java-time-temporal-TemporalUnit10689)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10690 ^java.lang.Integer int10691] (.withDayOfMonth this10690 int10691)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10692] (.getDayOfMonth this10692)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor10693] (. java.time.LocalDateTime from java-time-temporal-TemporalAccessor10693)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this10694 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime10695] (.isAfter this10694 java-time-chrono-ChronoLocalDateTime10695)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10696 ^long long10697] (.minusNanos this10696 long10697)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this10698 G__10699] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__10699)) (clojure.core/let [G__10699 ^"java.time.temporal.TemporalUnit" G__10699] (.isSupported ^java.time.LocalDateTime this10698 G__10699)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__10699)) (clojure.core/let [G__10699 ^"java.time.temporal.TemporalField" G__10699] (.isSupported ^java.time.LocalDateTime this10698 G__10699)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10700 ^long long10701] (.minusYears this10700 long10701)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.chrono.Chronology [^java.time.LocalDateTime this10702] (.getChronology this10702)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence10703] (. java.time.LocalDateTime parse java-lang-CharSequence10703)) (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence10704 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter10705] (. java.time.LocalDateTime parse java-lang-CharSequence10704 java-time-format-DateTimeFormatter10705)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10706 ^java.lang.Integer int10707] (.withSecond this10706 int10707)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"] ["java.time.LocalDateTime"]))} (^java.lang.Object [this10708] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this10708)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this10708)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10709] (.getMinute this10709)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10710] (.hashCode this10710)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDateTime this10711 ^java.time.temporal.Temporal java-time-temporal-Temporal10712] (.adjustInto this10711 java-time-temporal-Temporal10712)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this10713 G__10714] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__10714)) (clojure.core/let [G__10714 ^"java.time.temporal.TemporalAdjuster" G__10714] (.with ^java.time.LocalDateTime this10713 G__10714)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__10714)) (clojure.core/let [G__10714 ^"java.time.temporal.TemporalAdjuster" G__10714] (.with ^java.time.LocalDateTime this10713 G__10714)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__10714)) (clojure.core/let [G__10714 ^"java.time.temporal.TemporalAdjuster" G__10714] (.with ^java.time.LocalDateTime this10713 G__10714)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this10715 G__10716 G__10717] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__10716) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10717)) (clojure.core/let [G__10716 ^"java.time.temporal.TemporalField" G__10716 G__10717 (clojure.core/long G__10717)] (.with ^java.time.LocalDateTime this10715 G__10716 G__10717)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__10716) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10717)) (clojure.core/let [G__10716 ^"java.time.temporal.TemporalField" G__10716 G__10717 (clojure.core/long G__10717)] (.with ^java.time.LocalDateTime this10715 G__10716 G__10717)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__10716) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__10717)) (clojure.core/let [G__10716 ^"java.time.temporal.TemporalField" G__10716 G__10717 (clojure.core/long G__10717)] (.with ^java.time.LocalDateTime this10715 G__10716 G__10717)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDateTime [] (. java.time.LocalDateTime now)) (^java.time.LocalDateTime [G__10719] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__10719)) (clojure.core/let [G__10719 ^"java.time.Clock" G__10719] (. java.time.LocalDateTime now G__10719)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__10719)) (clojure.core/let [G__10719 ^"java.time.ZoneId" G__10719] (. java.time.LocalDateTime now G__10719)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this10720] (.getMonthValue this10720)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10721 ^java.lang.Integer int10722] (.withDayOfYear this10721 int10722)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"] ["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Integer [this10723 G__10724] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__10724)) (clojure.core/let [G__10724 ^"java.lang.Object" G__10724] (.compareTo ^java.time.LocalDateTime this10723 G__10724)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDateTime") G__10724)) (clojure.core/let [G__10724 ^"java.time.chrono.ChronoLocalDateTime" G__10724] (.compareTo ^java.time.LocalDateTime this10723 G__10724)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.Month [^java.time.LocalDateTime this10725] (.getMonth this10725)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.Instant java-time-Instant10726 ^java.time.ZoneId java-time-ZoneId10727] (. java.time.LocalDateTime ofInstant java-time-Instant10726 java-time-ZoneId10727)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10728 ^long long10729] (.plusSeconds this10728 long10729)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDateTime this10730 ^java.time.temporal.TemporalField java-time-temporal-TemporalField10731] (.get this10730 java-time-temporal-TemporalField10731)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDateTime this10732 ^java.lang.Object java-lang-Object10733] (.equals this10732 java-lang-Object10733)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDateTime this10734 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter10735] (.format this10734 java-time-format-DateTimeFormatter10735)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10736 ^long long10737] (.plusYears this10736 long10737)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this10738 ^long long10739] (.minusDays this10738 long10739)))
