(ns cljc.java-time.local-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalDateTime]))
(def max java.time.LocalDateTime/MAX)
(def min java.time.LocalDateTime/MIN)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3369 ^long long3370] (.minusMinutes this3369 long3370)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3371 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3372] (.truncatedTo this3371 java-time-temporal-TemporalUnit3372)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3373 ^long long3374] (.minusWeeks this3373 long3374)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.Instant [^java.time.LocalDateTime this3375 ^java.time.ZoneOffset java-time-ZoneOffset3376] (.toInstant this3375 java-time-ZoneOffset3376)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3377 ^long long3378] (.plusWeeks this3377 long3378)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDateTime this3379 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3380] (.range this3379 java-time-temporal-TemporalField3380)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^java.time.LocalDateTime [^long long3381 ^java.lang.Integer int3382 ^java.time.ZoneOffset java-time-ZoneOffset3383] (java.time.LocalDateTime/ofEpochSecond long3381 int3382 java-time-ZoneOffset3383)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3384] (.getHour this3384)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime this3385 ^java.time.ZoneOffset java-time-ZoneOffset3386] (.atOffset this3385 java-time-ZoneOffset3386)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3387 ^long long3388] (.minusHours this3387 long3388)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"]))} (^java.time.LocalDateTime [G__3390 G__3391 G__3392 G__3393 G__3394] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__3390) (clojure.core/instance? java.time.Month G__3391) (clojure.core/instance? java.lang.Number G__3392) (clojure.core/instance? java.lang.Number G__3393) (clojure.core/instance? java.lang.Number G__3394)) (clojure.core/let [G__3390 (clojure.core/int G__3390) G__3391 ^"java.time.Month" G__3391 G__3392 (clojure.core/int G__3392) G__3393 (clojure.core/int G__3393) G__3394 (clojure.core/int G__3394)] (java.time.LocalDateTime/of G__3390 G__3391 G__3392 G__3393 G__3394)) (clojure.core/and (clojure.core/instance? java.lang.Number G__3390) (clojure.core/instance? java.lang.Number G__3391) (clojure.core/instance? java.lang.Number G__3392) (clojure.core/instance? java.lang.Number G__3393) (clojure.core/instance? java.lang.Number G__3394)) (clojure.core/let [G__3390 (clojure.core/int G__3390) G__3391 (clojure.core/int G__3391) G__3392 (clojure.core/int G__3392) G__3393 (clojure.core/int G__3393) G__3394 (clojure.core/int G__3394)] (java.time.LocalDateTime/of G__3390 G__3391 G__3392 G__3393 G__3394)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [G__3396 G__3397 G__3398 G__3399 G__3400 G__3401 G__3402] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__3396) (clojure.core/instance? java.time.Month G__3397) (clojure.core/instance? java.lang.Number G__3398) (clojure.core/instance? java.lang.Number G__3399) (clojure.core/instance? java.lang.Number G__3400) (clojure.core/instance? java.lang.Number G__3401) (clojure.core/instance? java.lang.Number G__3402)) (clojure.core/let [G__3396 (clojure.core/int G__3396) G__3397 ^"java.time.Month" G__3397 G__3398 (clojure.core/int G__3398) G__3399 (clojure.core/int G__3399) G__3400 (clojure.core/int G__3400) G__3401 (clojure.core/int G__3401) G__3402 (clojure.core/int G__3402)] (java.time.LocalDateTime/of G__3396 G__3397 G__3398 G__3399 G__3400 G__3401 G__3402)) (clojure.core/and (clojure.core/instance? java.lang.Number G__3396) (clojure.core/instance? java.lang.Number G__3397) (clojure.core/instance? java.lang.Number G__3398) (clojure.core/instance? java.lang.Number G__3399) (clojure.core/instance? java.lang.Number G__3400) (clojure.core/instance? java.lang.Number G__3401) (clojure.core/instance? java.lang.Number G__3402)) (clojure.core/let [G__3396 (clojure.core/int G__3396) G__3397 (clojure.core/int G__3397) G__3398 (clojure.core/int G__3398) G__3399 (clojure.core/int G__3399) G__3400 (clojure.core/int G__3400) G__3401 (clojure.core/int G__3401) G__3402 (clojure.core/int G__3402)] (java.time.LocalDateTime/of G__3396 G__3397 G__3398 G__3399 G__3400 G__3401 G__3402)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [G__3404 G__3405 G__3406 G__3407 G__3408 G__3409] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__3404) (clojure.core/instance? java.time.Month G__3405) (clojure.core/instance? java.lang.Number G__3406) (clojure.core/instance? java.lang.Number G__3407) (clojure.core/instance? java.lang.Number G__3408) (clojure.core/instance? java.lang.Number G__3409)) (clojure.core/let [G__3404 (clojure.core/int G__3404) G__3405 ^"java.time.Month" G__3405 G__3406 (clojure.core/int G__3406) G__3407 (clojure.core/int G__3407) G__3408 (clojure.core/int G__3408) G__3409 (clojure.core/int G__3409)] (java.time.LocalDateTime/of G__3404 G__3405 G__3406 G__3407 G__3408 G__3409)) (clojure.core/and (clojure.core/instance? java.lang.Number G__3404) (clojure.core/instance? java.lang.Number G__3405) (clojure.core/instance? java.lang.Number G__3406) (clojure.core/instance? java.lang.Number G__3407) (clojure.core/instance? java.lang.Number G__3408) (clojure.core/instance? java.lang.Number G__3409)) (clojure.core/let [G__3404 (clojure.core/int G__3404) G__3405 (clojure.core/int G__3405) G__3406 (clojure.core/int G__3406) G__3407 (clojure.core/int G__3407) G__3408 (clojure.core/int G__3408) G__3409 (clojure.core/int G__3409)] (java.time.LocalDateTime/of G__3404 G__3405 G__3406 G__3407 G__3408 G__3409)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate java-time-LocalDate3410 ^java.time.LocalTime java-time-LocalTime3411] (java.time.LocalDateTime/of java-time-LocalDate3410 java-time-LocalTime3411)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3412 ^java.lang.Integer int3413] (.withMonth this3412 int3413)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this3414 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3415] (.isEqual this3414 java-time-chrono-ChronoLocalDateTime3415)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3416] (.getNano this3416)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3417] (.getYear this3417)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3418 ^long long3419] (.minusSeconds this3418 long3419)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3420] (.getSecond this3420)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3421 ^long long3422] (.plusNanos this3421 long3422)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3423] (.getDayOfYear this3423)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3424 ^long long3425 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3426] (.plus this3424 long3425 java-time-temporal-TemporalUnit3426)) (^java.time.LocalDateTime [^java.time.LocalDateTime this3427 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3428] (.plus this3427 java-time-temporal-TemporalAmount3428)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3429 ^java.lang.Integer int3430] (.withHour this3429 int3430)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3431 ^java.lang.Integer int3432] (.withMinute this3431 int3432)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3433 ^long long3434] (.plusMinutes this3433 long3434)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDateTime this3435 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3436] (.query this3435 java-time-temporal-TemporalQuery3436)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.DayOfWeek [^java.time.LocalDateTime this3437] (.getDayOfWeek this3437)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^java.time.LocalDateTime this3438] (.toString this3438)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3439 ^long long3440] (.plusMonths this3439 long3440)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this3441 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3442] (.isBefore this3441 java-time-chrono-ChronoLocalDateTime3442)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3443 ^long long3444] (.minusMonths this3443 long3444)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3445 ^long long3446 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3447] (.minus this3445 long3446 java-time-temporal-TemporalUnit3447)) (^java.time.LocalDateTime [^java.time.LocalDateTime this3448 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3449] (.minus this3448 java-time-temporal-TemporalAmount3449)))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime this3450 ^java.time.ZoneId java-time-ZoneId3451] (.atZone this3450 java-time-ZoneId3451)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3452 ^long long3453] (.plusHours this3452 long3453)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3454 ^long long3455] (.plusDays this3454 long3455)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalTime [^java.time.LocalDateTime this3456] (.toLocalTime this3456)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDateTime this3457 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3458] (.getLong this3457 java-time-temporal-TemporalField3458)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3459 ^java.lang.Integer int3460] (.withYear this3459 int3460)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3461 ^java.lang.Integer int3462] (.withNano this3461 int3462)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDateTime this3463 ^java.time.ZoneOffset java-time-ZoneOffset3464] (.toEpochSecond this3463 java-time-ZoneOffset3464)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalDateTime this3465 ^java.time.temporal.Temporal java-time-temporal-Temporal3466 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit3467] (.until this3465 java-time-temporal-Temporal3466 java-time-temporal-TemporalUnit3467)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3468 ^java.lang.Integer int3469] (.withDayOfMonth this3468 int3469)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3470] (.getDayOfMonth this3470)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor3471] (java.time.LocalDateTime/from java-time-temporal-TemporalAccessor3471)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this3472 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3473] (.isAfter this3472 java-time-chrono-ChronoLocalDateTime3473)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3474 ^long long3475] (.minusNanos this3474 long3475)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"] ["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this3476 G__3477] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__3477)) (clojure.core/let [G__3477 ^"java.time.temporal.TemporalField" G__3477] (.isSupported ^java.time.LocalDateTime this3476 G__3477)) (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__3477)) (clojure.core/let [G__3477 ^"java.time.temporal.ChronoUnit" G__3477] (.isSupported ^java.time.LocalDateTime this3476 G__3477)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3478 ^long long3479] (.minusYears this3478 long3479)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.chrono.Chronology [^java.time.LocalDateTime this3480] (.getChronology this3480)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence3481] (java.time.LocalDateTime/parse java-lang-CharSequence3481)) (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence3482 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3483] (java.time.LocalDateTime/parse java-lang-CharSequence3482 java-time-format-DateTimeFormatter3483)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3484 ^java.lang.Integer int3485] (.withSecond this3484 int3485)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalDate [^java.time.LocalDateTime this3486] (.toLocalDate this3486)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3487] (.getMinute this3487)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3488] (.hashCode this3488)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDateTime this3489 ^java.time.temporal.Temporal java-time-temporal-Temporal3490] (.adjustInto this3489 java-time-temporal-Temporal3490)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3491 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster3492] (.with this3491 java-time-temporal-TemporalAdjuster3492)) (^java.time.LocalDateTime [^java.time.LocalDateTime this3493 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3494 ^long long3495] (.with this3493 java-time-temporal-TemporalField3494 long3495)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDateTime [] (java.time.LocalDateTime/now)) (^java.time.LocalDateTime [G__3497] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__3497)) (clojure.core/let [G__3497 ^"java.time.Clock" G__3497] (java.time.LocalDateTime/now G__3497)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__3497)) (clojure.core/let [G__3497 ^"java.time.ZoneId" G__3497] (java.time.LocalDateTime/now G__3497)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3498] (.getMonthValue this3498)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3499 ^java.lang.Integer int3500] (.withDayOfYear this3499 int3500)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3501 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3502] (.compareTo this3501 java-time-chrono-ChronoLocalDateTime3502)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.Month [^java.time.LocalDateTime this3503] (.getMonth this3503)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.Instant java-time-Instant3504 ^java.time.ZoneId java-time-ZoneId3505] (java.time.LocalDateTime/ofInstant java-time-Instant3504 java-time-ZoneId3505)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3506 ^long long3507] (.plusSeconds this3506 long3507)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDateTime this3508 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3509] (.get this3508 java-time-temporal-TemporalField3509)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDateTime this3510 ^java.lang.Object java-lang-Object3511] (.equals this3510 java-lang-Object3511)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDateTime this3512 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3513] (.format this3512 java-time-format-DateTimeFormatter3513)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3514 ^long long3515] (.plusYears this3514 long3515)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3516 ^long long3517] (.minusDays this3516 long3517)))
