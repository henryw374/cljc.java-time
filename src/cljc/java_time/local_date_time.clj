(ns cljc.java-time.local-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalDateTime]))
(def max java.time.LocalDateTime/MAX)
(def min java.time.LocalDateTime/MIN)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12887 ^long long12888] (.minusMinutes this12887 long12888)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12889 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit12890] (.truncatedTo this12889 java-time-temporal-TemporalUnit12890)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12891 ^long long12892] (.minusWeeks this12891 long12892)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.Instant [^java.time.LocalDateTime this12893 ^java.time.ZoneOffset java-time-ZoneOffset12894] (.toInstant this12893 java-time-ZoneOffset12894)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12895 ^long long12896] (.plusWeeks this12895 long12896)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDateTime this12897 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12898] (.range this12897 java-time-temporal-TemporalField12898)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^java.time.LocalDateTime [^long long12899 ^java.lang.Integer int12900 ^java.time.ZoneOffset java-time-ZoneOffset12901] (java.time.LocalDateTime/ofEpochSecond long12899 int12900 java-time-ZoneOffset12901)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12902] (.getHour this12902)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime this12903 ^java.time.ZoneOffset java-time-ZoneOffset12904] (.atOffset this12903 java-time-ZoneOffset12904)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12905 ^long long12906] (.minusHours this12905 long12906)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["int" "java.time.Month" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"]))} (^java.time.LocalDateTime [G__12908 G__12909 G__12910 G__12911 G__12912 G__12913] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__12908) (clojure.core/instance? java.lang.Number G__12909) (clojure.core/instance? java.lang.Number G__12910) (clojure.core/instance? java.lang.Number G__12911) (clojure.core/instance? java.lang.Number G__12912) (clojure.core/instance? java.lang.Number G__12913)) (clojure.core/let [G__12908 (clojure.core/int G__12908) G__12909 (clojure.core/int G__12909) G__12910 (clojure.core/int G__12910) G__12911 (clojure.core/int G__12911) G__12912 (clojure.core/int G__12912) G__12913 (clojure.core/int G__12913)] (java.time.LocalDateTime/of G__12908 G__12909 G__12910 G__12911 G__12912 G__12913)) (clojure.core/and (clojure.core/instance? java.lang.Number G__12908) (clojure.core/instance? java.time.Month G__12909) (clojure.core/instance? java.lang.Number G__12910) (clojure.core/instance? java.lang.Number G__12911) (clojure.core/instance? java.lang.Number G__12912) (clojure.core/instance? java.lang.Number G__12913)) (clojure.core/let [G__12908 (clojure.core/int G__12908) G__12909 ^"java.time.Month" G__12909 G__12910 (clojure.core/int G__12910) G__12911 (clojure.core/int G__12911) G__12912 (clojure.core/int G__12912) G__12913 (clojure.core/int G__12913)] (java.time.LocalDateTime/of G__12908 G__12909 G__12910 G__12911 G__12912 G__12913)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [G__12915 G__12916 G__12917 G__12918 G__12919] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__12915) (clojure.core/instance? java.time.Month G__12916) (clojure.core/instance? java.lang.Number G__12917) (clojure.core/instance? java.lang.Number G__12918) (clojure.core/instance? java.lang.Number G__12919)) (clojure.core/let [G__12915 (clojure.core/int G__12915) G__12916 ^"java.time.Month" G__12916 G__12917 (clojure.core/int G__12917) G__12918 (clojure.core/int G__12918) G__12919 (clojure.core/int G__12919)] (java.time.LocalDateTime/of G__12915 G__12916 G__12917 G__12918 G__12919)) (clojure.core/and (clojure.core/instance? java.lang.Number G__12915) (clojure.core/instance? java.lang.Number G__12916) (clojure.core/instance? java.lang.Number G__12917) (clojure.core/instance? java.lang.Number G__12918) (clojure.core/instance? java.lang.Number G__12919)) (clojure.core/let [G__12915 (clojure.core/int G__12915) G__12916 (clojure.core/int G__12916) G__12917 (clojure.core/int G__12917) G__12918 (clojure.core/int G__12918) G__12919 (clojure.core/int G__12919)] (java.time.LocalDateTime/of G__12915 G__12916 G__12917 G__12918 G__12919)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [G__12921 G__12922 G__12923 G__12924 G__12925 G__12926 G__12927] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__12921) (clojure.core/instance? java.lang.Number G__12922) (clojure.core/instance? java.lang.Number G__12923) (clojure.core/instance? java.lang.Number G__12924) (clojure.core/instance? java.lang.Number G__12925) (clojure.core/instance? java.lang.Number G__12926) (clojure.core/instance? java.lang.Number G__12927)) (clojure.core/let [G__12921 (clojure.core/int G__12921) G__12922 (clojure.core/int G__12922) G__12923 (clojure.core/int G__12923) G__12924 (clojure.core/int G__12924) G__12925 (clojure.core/int G__12925) G__12926 (clojure.core/int G__12926) G__12927 (clojure.core/int G__12927)] (java.time.LocalDateTime/of G__12921 G__12922 G__12923 G__12924 G__12925 G__12926 G__12927)) (clojure.core/and (clojure.core/instance? java.lang.Number G__12921) (clojure.core/instance? java.time.Month G__12922) (clojure.core/instance? java.lang.Number G__12923) (clojure.core/instance? java.lang.Number G__12924) (clojure.core/instance? java.lang.Number G__12925) (clojure.core/instance? java.lang.Number G__12926) (clojure.core/instance? java.lang.Number G__12927)) (clojure.core/let [G__12921 (clojure.core/int G__12921) G__12922 ^"java.time.Month" G__12922 G__12923 (clojure.core/int G__12923) G__12924 (clojure.core/int G__12924) G__12925 (clojure.core/int G__12925) G__12926 (clojure.core/int G__12926) G__12927 (clojure.core/int G__12927)] (java.time.LocalDateTime/of G__12921 G__12922 G__12923 G__12924 G__12925 G__12926 G__12927)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate java-time-LocalDate12928 ^java.time.LocalTime java-time-LocalTime12929] (java.time.LocalDateTime/of java-time-LocalDate12928 java-time-LocalTime12929)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12930 ^java.lang.Integer int12931] (.withMonth this12930 int12931)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this12932 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime12933] (.isEqual this12932 java-time-chrono-ChronoLocalDateTime12933)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12934] (.getNano this12934)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12935] (.getYear this12935)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12936 ^long long12937] (.minusSeconds this12936 long12937)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12938] (.getSecond this12938)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12939 ^long long12940] (.plusNanos this12939 long12940)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12941] (.getDayOfYear this12941)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12942 ^long long12943 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit12944] (.plus this12942 long12943 java-time-temporal-TemporalUnit12944)) (^java.time.LocalDateTime [^java.time.LocalDateTime this12945 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount12946] (.plus this12945 java-time-temporal-TemporalAmount12946)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12947 ^java.lang.Integer int12948] (.withHour this12947 int12948)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12949 ^java.lang.Integer int12950] (.withMinute this12949 int12950)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12951 ^long long12952] (.plusMinutes this12951 long12952)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDateTime this12953 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12954] (.query this12953 java-time-temporal-TemporalQuery12954)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.DayOfWeek [^java.time.LocalDateTime this12955] (.getDayOfWeek this12955)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^java.time.LocalDateTime this12956] (.toString this12956)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12957 ^long long12958] (.plusMonths this12957 long12958)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this12959 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime12960] (.isBefore this12959 java-time-chrono-ChronoLocalDateTime12960)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12961 ^long long12962] (.minusMonths this12961 long12962)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12963 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount12964] (.minus this12963 java-time-temporal-TemporalAmount12964)) (^java.time.LocalDateTime [^java.time.LocalDateTime this12965 ^long long12966 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit12967] (.minus this12965 long12966 java-time-temporal-TemporalUnit12967)))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime this12968 ^java.time.ZoneId java-time-ZoneId12969] (.atZone this12968 java-time-ZoneId12969)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12970 ^long long12971] (.plusHours this12970 long12971)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12972 ^long long12973] (.plusDays this12972 long12973)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalTime [^java.time.LocalDateTime this12974] (.toLocalTime this12974)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDateTime this12975 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12976] (.getLong this12975 java-time-temporal-TemporalField12976)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12977 ^java.lang.Integer int12978] (.withYear this12977 int12978)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12979 ^java.lang.Integer int12980] (.withNano this12979 int12980)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDateTime this12981 ^java.time.ZoneOffset java-time-ZoneOffset12982] (.toEpochSecond this12981 java-time-ZoneOffset12982)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalDateTime this12983 ^java.time.temporal.Temporal java-time-temporal-Temporal12984 ^java.time.temporal.ChronoUnit java-time-temporal-TemporalUnit12985] (.until this12983 java-time-temporal-Temporal12984 java-time-temporal-TemporalUnit12985)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12986 ^java.lang.Integer int12987] (.withDayOfMonth this12986 int12987)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this12988] (.getDayOfMonth this12988)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12989] (java.time.LocalDateTime/from java-time-temporal-TemporalAccessor12989)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this12990 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime12991] (.isAfter this12990 java-time-chrono-ChronoLocalDateTime12991)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12992 ^long long12993] (.minusNanos this12992 long12993)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this12994 G__12995] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.ChronoUnit G__12995)) (clojure.core/let [G__12995 ^"java.time.temporal.ChronoUnit" G__12995] (.isSupported ^java.time.LocalDateTime this12994 G__12995)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__12995)) (clojure.core/let [G__12995 ^"java.time.temporal.TemporalField" G__12995] (.isSupported ^java.time.LocalDateTime this12994 G__12995)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this12996 ^long long12997] (.minusYears this12996 long12997)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.chrono.Chronology [^java.time.LocalDateTime this12998] (.getChronology this12998)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence12999 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13000] (java.time.LocalDateTime/parse java-lang-CharSequence12999 java-time-format-DateTimeFormatter13000)) (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence13001] (java.time.LocalDateTime/parse java-lang-CharSequence13001)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this13002 ^java.lang.Integer int13003] (.withSecond this13002 int13003)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalDate [^java.time.LocalDateTime this13004] (.toLocalDate this13004)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this13005] (.getMinute this13005)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this13006] (.hashCode this13006)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDateTime this13007 ^java.time.temporal.Temporal java-time-temporal-Temporal13008] (.adjustInto this13007 java-time-temporal-Temporal13008)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this13009 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13010 ^long long13011] (.with this13009 java-time-temporal-TemporalField13010 long13011)) (^java.time.LocalDateTime [^java.time.LocalDateTime this13012 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster13013] (.with this13012 java-time-temporal-TemporalAdjuster13013)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.LocalDateTime [] (java.time.LocalDateTime/now)) (^java.time.LocalDateTime [G__13015] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.ZoneId G__13015)) (clojure.core/let [G__13015 ^"java.time.ZoneId" G__13015] (java.time.LocalDateTime/now G__13015)) (clojure.core/and (clojure.core/instance? java.time.Clock G__13015)) (clojure.core/let [G__13015 ^"java.time.Clock" G__13015] (java.time.LocalDateTime/now G__13015)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this13016] (.getMonthValue this13016)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this13017 ^java.lang.Integer int13018] (.withDayOfYear this13017 int13018)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this13019 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime13020] (.compareTo this13019 java-time-chrono-ChronoLocalDateTime13020)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.Month [^java.time.LocalDateTime this13021] (.getMonth this13021)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.Instant java-time-Instant13022 ^java.time.ZoneId java-time-ZoneId13023] (java.time.LocalDateTime/ofInstant java-time-Instant13022 java-time-ZoneId13023)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this13024 ^long long13025] (.plusSeconds this13024 long13025)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDateTime this13026 ^java.time.temporal.TemporalField java-time-temporal-TemporalField13027] (.get this13026 java-time-temporal-TemporalField13027)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDateTime this13028 ^java.lang.Object java-lang-Object13029] (.equals this13028 java-lang-Object13029)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDateTime this13030 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter13031] (.format this13030 java-time-format-DateTimeFormatter13031)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this13032 ^long long13033] (.plusYears this13032 long13033)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this13034 ^long long13035] (.minusDays this13034 long13035)))
