(ns cljc.java-time.local-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalDateTime]))
(def max java.time.LocalDateTime/MAX)
(def min java.time.LocalDateTime/MIN)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3370 ^long long3371] (.minusMinutes this3370 long3371)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3372 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3373] (.truncatedTo this3372 java-time-temporal-TemporalUnit3373)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3374 ^long long3375] (.minusWeeks this3374 long3375)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.Instant [^java.time.LocalDateTime this3376 ^java.time.ZoneOffset java-time-ZoneOffset3377] (.toInstant this3376 java-time-ZoneOffset3377)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3378 ^long long3379] (.plusWeeks this3378 long3379)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDateTime this3380 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3381] (.range this3380 java-time-temporal-TemporalField3381)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^java.time.LocalDateTime [^long long3382 ^java.lang.Integer int3383 ^java.time.ZoneOffset java-time-ZoneOffset3384] (java.time.LocalDateTime/ofEpochSecond long3382 int3383 java-time-ZoneOffset3384)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3385] (.getHour this3385)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime this3386 ^java.time.ZoneOffset java-time-ZoneOffset3387] (.atOffset this3386 java-time-ZoneOffset3387)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3388 ^long long3389] (.minusHours this3388 long3389)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"]))} (^java.time.LocalDateTime [G__3391 G__3392 G__3393 G__3394 G__3395 G__3396 G__3397] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__3391) (clojure.core/instance? java.time.Month G__3392) (clojure.core/instance? java.lang.Number G__3393) (clojure.core/instance? java.lang.Number G__3394) (clojure.core/instance? java.lang.Number G__3395) (clojure.core/instance? java.lang.Number G__3396) (clojure.core/instance? java.lang.Number G__3397)) (clojure.core/let [G__3391 (clojure.core/int G__3391) G__3392 ^"java.time.Month" G__3392 G__3393 (clojure.core/int G__3393) G__3394 (clojure.core/int G__3394) G__3395 (clojure.core/int G__3395) G__3396 (clojure.core/int G__3396) G__3397 (clojure.core/int G__3397)] (java.time.LocalDateTime/of G__3391 G__3392 G__3393 G__3394 G__3395 G__3396 G__3397)) (clojure.core/and (clojure.core/instance? java.lang.Number G__3391) (clojure.core/instance? java.lang.Number G__3392) (clojure.core/instance? java.lang.Number G__3393) (clojure.core/instance? java.lang.Number G__3394) (clojure.core/instance? java.lang.Number G__3395) (clojure.core/instance? java.lang.Number G__3396) (clojure.core/instance? java.lang.Number G__3397)) (clojure.core/let [G__3391 (clojure.core/int G__3391) G__3392 (clojure.core/int G__3392) G__3393 (clojure.core/int G__3393) G__3394 (clojure.core/int G__3394) G__3395 (clojure.core/int G__3395) G__3396 (clojure.core/int G__3396) G__3397 (clojure.core/int G__3397)] (java.time.LocalDateTime/of G__3391 G__3392 G__3393 G__3394 G__3395 G__3396 G__3397)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [G__3399 G__3400 G__3401 G__3402 G__3403 G__3404] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__3399) (clojure.core/instance? java.time.Month G__3400) (clojure.core/instance? java.lang.Number G__3401) (clojure.core/instance? java.lang.Number G__3402) (clojure.core/instance? java.lang.Number G__3403) (clojure.core/instance? java.lang.Number G__3404)) (clojure.core/let [G__3399 (clojure.core/int G__3399) G__3400 ^"java.time.Month" G__3400 G__3401 (clojure.core/int G__3401) G__3402 (clojure.core/int G__3402) G__3403 (clojure.core/int G__3403) G__3404 (clojure.core/int G__3404)] (java.time.LocalDateTime/of G__3399 G__3400 G__3401 G__3402 G__3403 G__3404)) (clojure.core/and (clojure.core/instance? java.lang.Number G__3399) (clojure.core/instance? java.lang.Number G__3400) (clojure.core/instance? java.lang.Number G__3401) (clojure.core/instance? java.lang.Number G__3402) (clojure.core/instance? java.lang.Number G__3403) (clojure.core/instance? java.lang.Number G__3404)) (clojure.core/let [G__3399 (clojure.core/int G__3399) G__3400 (clojure.core/int G__3400) G__3401 (clojure.core/int G__3401) G__3402 (clojure.core/int G__3402) G__3403 (clojure.core/int G__3403) G__3404 (clojure.core/int G__3404)] (java.time.LocalDateTime/of G__3399 G__3400 G__3401 G__3402 G__3403 G__3404)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [G__3406 G__3407 G__3408 G__3409 G__3410] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.lang.Number G__3406) (clojure.core/instance? java.time.Month G__3407) (clojure.core/instance? java.lang.Number G__3408) (clojure.core/instance? java.lang.Number G__3409) (clojure.core/instance? java.lang.Number G__3410)) (clojure.core/let [G__3406 (clojure.core/int G__3406) G__3407 ^"java.time.Month" G__3407 G__3408 (clojure.core/int G__3408) G__3409 (clojure.core/int G__3409) G__3410 (clojure.core/int G__3410)] (java.time.LocalDateTime/of G__3406 G__3407 G__3408 G__3409 G__3410)) (clojure.core/and (clojure.core/instance? java.lang.Number G__3406) (clojure.core/instance? java.lang.Number G__3407) (clojure.core/instance? java.lang.Number G__3408) (clojure.core/instance? java.lang.Number G__3409) (clojure.core/instance? java.lang.Number G__3410)) (clojure.core/let [G__3406 (clojure.core/int G__3406) G__3407 (clojure.core/int G__3407) G__3408 (clojure.core/int G__3408) G__3409 (clojure.core/int G__3409) G__3410 (clojure.core/int G__3410)] (java.time.LocalDateTime/of G__3406 G__3407 G__3408 G__3409 G__3410)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate java-time-LocalDate3411 ^java.time.LocalTime java-time-LocalTime3412] (java.time.LocalDateTime/of java-time-LocalDate3411 java-time-LocalTime3412)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3413 ^java.lang.Integer int3414] (.withMonth this3413 int3414)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this3415 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3416] (.isEqual this3415 java-time-chrono-ChronoLocalDateTime3416)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3417] (.getNano this3417)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3418] (.getYear this3418)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3419 ^long long3420] (.minusSeconds this3419 long3420)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3421] (.getSecond this3421)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3422 ^long long3423] (.plusNanos this3422 long3423)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3424] (.getDayOfYear this3424)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3425 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3426] (.plus this3425 java-time-temporal-TemporalAmount3426)) (^java.time.LocalDateTime [^java.time.LocalDateTime this3427 ^long long3428 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3429] (.plus this3427 long3428 java-time-temporal-TemporalUnit3429)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3430 ^java.lang.Integer int3431] (.withHour this3430 int3431)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3432 ^java.lang.Integer int3433] (.withMinute this3432 int3433)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3434 ^long long3435] (.plusMinutes this3434 long3435)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDateTime this3436 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3437] (.query this3436 java-time-temporal-TemporalQuery3437)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.DayOfWeek [^java.time.LocalDateTime this3438] (.getDayOfWeek this3438)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^java.time.LocalDateTime this3439] (.toString this3439)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3440 ^long long3441] (.plusMonths this3440 long3441)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this3442 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3443] (.isBefore this3442 java-time-chrono-ChronoLocalDateTime3443)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3444 ^long long3445] (.minusMonths this3444 long3445)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3446 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3447] (.minus this3446 java-time-temporal-TemporalAmount3447)) (^java.time.LocalDateTime [^java.time.LocalDateTime this3448 ^long long3449 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3450] (.minus this3448 long3449 java-time-temporal-TemporalUnit3450)))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime this3451 ^java.time.ZoneId java-time-ZoneId3452] (.atZone this3451 java-time-ZoneId3452)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3453 ^long long3454] (.plusHours this3453 long3454)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3455 ^long long3456] (.plusDays this3455 long3456)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalTime [^java.time.LocalDateTime this3457] (.toLocalTime this3457)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDateTime this3458 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3459] (.getLong this3458 java-time-temporal-TemporalField3459)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3460 ^java.lang.Integer int3461] (.withYear this3460 int3461)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3462 ^java.lang.Integer int3463] (.withNano this3462 int3463)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDateTime this3464 ^java.time.ZoneOffset java-time-ZoneOffset3465] (.toEpochSecond this3464 java-time-ZoneOffset3465)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalDateTime this3466 ^java.time.temporal.Temporal java-time-temporal-Temporal3467 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3468] (.until this3466 java-time-temporal-Temporal3467 java-time-temporal-TemporalUnit3468)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3469 ^java.lang.Integer int3470] (.withDayOfMonth this3469 int3470)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3471] (.getDayOfMonth this3471)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor3472] (java.time.LocalDateTime/from java-time-temporal-TemporalAccessor3472)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this3473 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3474] (.isAfter this3473 java-time-chrono-ChronoLocalDateTime3474)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3475 ^long long3476] (.minusNanos this3475 long3476)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"] ["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this3477 G__3478] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalField G__3478)) (clojure.core/let [G__3478 ^"java.time.temporal.TemporalField" G__3478] (.isSupported ^java.time.LocalDateTime this3477 G__3478)) (clojure.core/and (clojure.core/instance? java.time.temporal.TemporalUnit G__3478)) (clojure.core/let [G__3478 ^"java.time.temporal.TemporalUnit" G__3478] (.isSupported ^java.time.LocalDateTime this3477 G__3478)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3479 ^long long3480] (.minusYears this3479 long3480)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.chrono.Chronology [^java.time.LocalDateTime this3481] (.getChronology this3481)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence3482] (java.time.LocalDateTime/parse java-lang-CharSequence3482)) (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence3483 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3484] (java.time.LocalDateTime/parse java-lang-CharSequence3483 java-time-format-DateTimeFormatter3484)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3485 ^java.lang.Integer int3486] (.withSecond this3485 int3486)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalDate [^java.time.LocalDateTime this3487] (.toLocalDate this3487)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3488] (.getMinute this3488)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3489] (.hashCode this3489)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDateTime this3490 ^java.time.temporal.Temporal java-time-temporal-Temporal3491] (.adjustInto this3490 java-time-temporal-Temporal3491)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3492 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3493 ^long long3494] (.with this3492 java-time-temporal-TemporalField3493 long3494)) (^java.time.LocalDateTime [^java.time.LocalDateTime this3495 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster3496] (.with this3495 java-time-temporal-TemporalAdjuster3496)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDateTime [] (java.time.LocalDateTime/now)) (^java.time.LocalDateTime [G__3498] (clojure.core/cond (clojure.core/and (clojure.core/instance? java.time.Clock G__3498)) (clojure.core/let [G__3498 ^"java.time.Clock" G__3498] (java.time.LocalDateTime/now G__3498)) (clojure.core/and (clojure.core/instance? java.time.ZoneId G__3498)) (clojure.core/let [G__3498 ^"java.time.ZoneId" G__3498] (java.time.LocalDateTime/now G__3498)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3499] (.getMonthValue this3499)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3500 ^java.lang.Integer int3501] (.withDayOfYear this3500 int3501)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this3502 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime3503] (.compareTo this3502 java-time-chrono-ChronoLocalDateTime3503)))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.Month [^java.time.LocalDateTime this3504] (.getMonth this3504)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.Instant java-time-Instant3505 ^java.time.ZoneId java-time-ZoneId3506] (java.time.LocalDateTime/ofInstant java-time-Instant3505 java-time-ZoneId3506)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3507 ^long long3508] (.plusSeconds this3507 long3508)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDateTime this3509 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3510] (.get this3509 java-time-temporal-TemporalField3510)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDateTime this3511 ^java.lang.Object java-lang-Object3512] (.equals this3511 java-lang-Object3512)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDateTime this3513 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3514] (.format this3513 java-time-format-DateTimeFormatter3514)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3515 ^long long3516] (.plusYears this3515 long3516)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this3517 ^long long3518] (.minusDays this3517 long3518)))
