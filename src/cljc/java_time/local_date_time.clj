(ns cljc.java-time.local-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness]) (:import [java.time LocalDateTime]))
(def max java.time.LocalDateTime/MAX)
(def min java.time.LocalDateTime/MIN)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59074 ^long long59075] (.minusMinutes this59074 long59075)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59076 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit59077] (.truncatedTo this59076 java-time-temporal-TemporalUnit59077)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59078 ^long long59079] (.minusWeeks this59078 long59079)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.Instant [^java.time.LocalDateTime this59080 ^java.time.ZoneOffset java-time-ZoneOffset59081] (.toInstant this59080 java-time-ZoneOffset59081)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59082 ^long long59083] (.plusWeeks this59082 long59083)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDateTime this59084 ^java.time.temporal.TemporalField java-time-temporal-TemporalField59085] (.range this59084 java-time-temporal-TemporalField59085)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^java.time.LocalDateTime [^long long59086 ^java.lang.Integer int59087 ^java.time.ZoneOffset java-time-ZoneOffset59088] (java.time.LocalDateTime/ofEpochSecond long59086 int59087 java-time-ZoneOffset59088)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this59089] (.getHour this59089)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime this59090 ^java.time.ZoneOffset java-time-ZoneOffset59091] (.atOffset this59090 java-time-ZoneOffset59091)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59092 ^long long59093] (.minusHours this59092 long59093)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["int" "java.time.Month" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"]))} (^java.time.LocalDateTime [G__59095 G__59096 G__59097 G__59098 G__59099 G__59100 G__59101] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59095) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__59096) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59097) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59098) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59099) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59100) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59101)) (clojure.core/let [G__59095 (clojure.core/int G__59095) G__59096 ^"java.time.Month" G__59096 G__59097 (clojure.core/int G__59097) G__59098 (clojure.core/int G__59098) G__59099 (clojure.core/int G__59099) G__59100 (clojure.core/int G__59100) G__59101 (clojure.core/int G__59101)] (java.time.LocalDateTime/of G__59095 G__59096 G__59097 G__59098 G__59099 G__59100 G__59101)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59095) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59096) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59097) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59098) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59099) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59100) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59101)) (clojure.core/let [G__59095 (clojure.core/int G__59095) G__59096 (clojure.core/int G__59096) G__59097 (clojure.core/int G__59097) G__59098 (clojure.core/int G__59098) G__59099 (clojure.core/int G__59099) G__59100 (clojure.core/int G__59100) G__59101 (clojure.core/int G__59101)] (java.time.LocalDateTime/of G__59095 G__59096 G__59097 G__59098 G__59099 G__59100 G__59101)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [G__59103 G__59104 G__59105 G__59106 G__59107] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59103) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59104) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59105) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59106) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59107)) (clojure.core/let [G__59103 (clojure.core/int G__59103) G__59104 (clojure.core/int G__59104) G__59105 (clojure.core/int G__59105) G__59106 (clojure.core/int G__59106) G__59107 (clojure.core/int G__59107)] (java.time.LocalDateTime/of G__59103 G__59104 G__59105 G__59106 G__59107)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59103) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__59104) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59105) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59106) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59107)) (clojure.core/let [G__59103 (clojure.core/int G__59103) G__59104 ^"java.time.Month" G__59104 G__59105 (clojure.core/int G__59105) G__59106 (clojure.core/int G__59106) G__59107 (clojure.core/int G__59107)] (java.time.LocalDateTime/of G__59103 G__59104 G__59105 G__59106 G__59107)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [G__59109 G__59110 G__59111 G__59112 G__59113 G__59114] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59109) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59110) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59111) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59112) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59113) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59114)) (clojure.core/let [G__59109 (clojure.core/int G__59109) G__59110 (clojure.core/int G__59110) G__59111 (clojure.core/int G__59111) G__59112 (clojure.core/int G__59112) G__59113 (clojure.core/int G__59113) G__59114 (clojure.core/int G__59114)] (java.time.LocalDateTime/of G__59109 G__59110 G__59111 G__59112 G__59113 G__59114)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59109) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__59110) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59111) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59112) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59113) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__59114)) (clojure.core/let [G__59109 (clojure.core/int G__59109) G__59110 ^"java.time.Month" G__59110 G__59111 (clojure.core/int G__59111) G__59112 (clojure.core/int G__59112) G__59113 (clojure.core/int G__59113) G__59114 (clojure.core/int G__59114)] (java.time.LocalDateTime/of G__59109 G__59110 G__59111 G__59112 G__59113 G__59114)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate java-time-LocalDate59115 ^java.time.LocalTime java-time-LocalTime59116] (java.time.LocalDateTime/of java-time-LocalDate59115 java-time-LocalTime59116)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59117 ^java.lang.Integer int59118] (.withMonth this59117 int59118)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this59119 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime59120] (.isEqual this59119 java-time-chrono-ChronoLocalDateTime59120)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this59121] (.getNano this59121)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this59122] (.getYear this59122)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59123 ^long long59124] (.minusSeconds this59123 long59124)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this59125] (.getSecond this59125)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59126 ^long long59127] (.plusNanos this59126 long59127)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this59128] (.getDayOfYear this59128)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this59129 G__59130 G__59131] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59130) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59131)) (clojure.core/let [G__59130 (clojure.core/long G__59130) G__59131 ^"java.time.temporal.TemporalUnit" G__59131] (.plus ^java.time.LocalDateTime this59129 G__59130 G__59131)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59130) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59131)) (clojure.core/let [G__59130 (clojure.core/long G__59130) G__59131 ^"java.time.temporal.TemporalUnit" G__59131] (.plus ^java.time.LocalDateTime this59129 G__59130 G__59131)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59130) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59131)) (clojure.core/let [G__59130 (clojure.core/long G__59130) G__59131 ^"java.time.temporal.TemporalUnit" G__59131] (.plus ^java.time.LocalDateTime this59129 G__59130 G__59131)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this59132 G__59133] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59133)) (clojure.core/let [G__59133 ^"java.time.temporal.TemporalAmount" G__59133] (.plus ^java.time.LocalDateTime this59132 G__59133)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59133)) (clojure.core/let [G__59133 ^"java.time.temporal.TemporalAmount" G__59133] (.plus ^java.time.LocalDateTime this59132 G__59133)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59133)) (clojure.core/let [G__59133 ^"java.time.temporal.TemporalAmount" G__59133] (.plus ^java.time.LocalDateTime this59132 G__59133)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59134 ^java.lang.Integer int59135] (.withHour this59134 int59135)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59136 ^java.lang.Integer int59137] (.withMinute this59136 int59137)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59138 ^long long59139] (.plusMinutes this59138 long59139)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDateTime this59140 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery59141] (.query this59140 java-time-temporal-TemporalQuery59141)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.DayOfWeek [^java.time.LocalDateTime this59142] (.getDayOfWeek this59142)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^java.time.LocalDateTime this59143] (.toString this59143)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59144 ^long long59145] (.plusMonths this59144 long59145)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this59146 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime59147] (.isBefore this59146 java-time-chrono-ChronoLocalDateTime59147)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59148 ^long long59149] (.minusMonths this59148 long59149)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this59150 G__59151 G__59152] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59151) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59152)) (clojure.core/let [G__59151 (clojure.core/long G__59151) G__59152 ^"java.time.temporal.TemporalUnit" G__59152] (.minus ^java.time.LocalDateTime this59150 G__59151 G__59152)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59151) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59152)) (clojure.core/let [G__59151 (clojure.core/long G__59151) G__59152 ^"java.time.temporal.TemporalUnit" G__59152] (.minus ^java.time.LocalDateTime this59150 G__59151 G__59152)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59151) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59152)) (clojure.core/let [G__59151 (clojure.core/long G__59151) G__59152 ^"java.time.temporal.TemporalUnit" G__59152] (.minus ^java.time.LocalDateTime this59150 G__59151 G__59152)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this59153 G__59154] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59154)) (clojure.core/let [G__59154 ^"java.time.temporal.TemporalAmount" G__59154] (.minus ^java.time.LocalDateTime this59153 G__59154)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59154)) (clojure.core/let [G__59154 ^"java.time.temporal.TemporalAmount" G__59154] (.minus ^java.time.LocalDateTime this59153 G__59154)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__59154)) (clojure.core/let [G__59154 ^"java.time.temporal.TemporalAmount" G__59154] (.minus ^java.time.LocalDateTime this59153 G__59154)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this59155 G__59156] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__59156)) (clojure.core/let [G__59156 ^"java.time.ZoneId" G__59156] (.atZone ^java.time.LocalDateTime this59155 G__59156)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__59156)) (clojure.core/let [G__59156 ^"java.time.ZoneId" G__59156] (.atZone ^java.time.LocalDateTime this59155 G__59156)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59157 ^long long59158] (.plusHours this59157 long59158)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59159 ^long long59160] (.plusDays this59159 long59160)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalTime [^java.time.LocalDateTime this59161] (.toLocalTime this59161)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDateTime this59162 ^java.time.temporal.TemporalField java-time-temporal-TemporalField59163] (.getLong this59162 java-time-temporal-TemporalField59163)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59164 ^java.lang.Integer int59165] (.withYear this59164 int59165)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59166 ^java.lang.Integer int59167] (.withNano this59166 int59167)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDateTime this59168 ^java.time.ZoneOffset java-time-ZoneOffset59169] (.toEpochSecond this59168 java-time-ZoneOffset59169)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalDateTime this59170 ^java.time.temporal.Temporal java-time-temporal-Temporal59171 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit59172] (.until this59170 java-time-temporal-Temporal59171 java-time-temporal-TemporalUnit59172)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59173 ^java.lang.Integer int59174] (.withDayOfMonth this59173 int59174)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this59175] (.getDayOfMonth this59175)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor59176] (java.time.LocalDateTime/from java-time-temporal-TemporalAccessor59176)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this59177 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime59178] (.isAfter this59177 java-time-chrono-ChronoLocalDateTime59178)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59179 ^long long59180] (.minusNanos this59179 long59180)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this59181 G__59182] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__59182)) (clojure.core/let [G__59182 ^"java.time.temporal.TemporalUnit" G__59182] (.isSupported ^java.time.LocalDateTime this59181 G__59182)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__59182)) (clojure.core/let [G__59182 ^"java.time.temporal.TemporalField" G__59182] (.isSupported ^java.time.LocalDateTime this59181 G__59182)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59183 ^long long59184] (.minusYears this59183 long59184)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.chrono.Chronology [^java.time.LocalDateTime this59185] (.getChronology this59185)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence59186] (java.time.LocalDateTime/parse java-lang-CharSequence59186)) (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence59187 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter59188] (java.time.LocalDateTime/parse java-lang-CharSequence59187 java-time-format-DateTimeFormatter59188)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59189 ^java.lang.Integer int59190] (.withSecond this59189 int59190)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"] ["java.time.LocalDateTime"]))} (^java.lang.Object [this59191] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this59191)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this59191)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this59192] (.getMinute this59192)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this59193] (.hashCode this59193)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDateTime this59194 ^java.time.temporal.Temporal java-time-temporal-Temporal59195] (.adjustInto this59194 java-time-temporal-Temporal59195)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this59196 G__59197] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__59197)) (clojure.core/let [G__59197 ^"java.time.temporal.TemporalAdjuster" G__59197] (.with ^java.time.LocalDateTime this59196 G__59197)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__59197)) (clojure.core/let [G__59197 ^"java.time.temporal.TemporalAdjuster" G__59197] (.with ^java.time.LocalDateTime this59196 G__59197)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__59197)) (clojure.core/let [G__59197 ^"java.time.temporal.TemporalAdjuster" G__59197] (.with ^java.time.LocalDateTime this59196 G__59197)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this59198 G__59199 G__59200] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__59199) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59200)) (clojure.core/let [G__59199 ^"java.time.temporal.TemporalField" G__59199 G__59200 (clojure.core/long G__59200)] (.with ^java.time.LocalDateTime this59198 G__59199 G__59200)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__59199) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59200)) (clojure.core/let [G__59199 ^"java.time.temporal.TemporalField" G__59199 G__59200 (clojure.core/long G__59200)] (.with ^java.time.LocalDateTime this59198 G__59199 G__59200)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__59199) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__59200)) (clojure.core/let [G__59199 ^"java.time.temporal.TemporalField" G__59199 G__59200 (clojure.core/long G__59200)] (.with ^java.time.LocalDateTime this59198 G__59199 G__59200)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDateTime [] (java.time.LocalDateTime/now)) (^java.time.LocalDateTime [G__59202] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__59202)) (clojure.core/let [G__59202 ^"java.time.Clock" G__59202] (java.time.LocalDateTime/now G__59202)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__59202)) (clojure.core/let [G__59202 ^"java.time.ZoneId" G__59202] (java.time.LocalDateTime/now G__59202)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this59203] (.getMonthValue this59203)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59204 ^java.lang.Integer int59205] (.withDayOfYear this59204 int59205)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"] ["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Integer [this59206 G__59207] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__59207)) (clojure.core/let [G__59207 ^"java.lang.Object" G__59207] (.compareTo ^java.time.LocalDateTime this59206 G__59207)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDateTime") G__59207)) (clojure.core/let [G__59207 ^"java.time.chrono.ChronoLocalDateTime" G__59207] (.compareTo ^java.time.LocalDateTime this59206 G__59207)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.Month [^java.time.LocalDateTime this59208] (.getMonth this59208)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.Instant java-time-Instant59209 ^java.time.ZoneId java-time-ZoneId59210] (java.time.LocalDateTime/ofInstant java-time-Instant59209 java-time-ZoneId59210)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59211 ^long long59212] (.plusSeconds this59211 long59212)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDateTime this59213 ^java.time.temporal.TemporalField java-time-temporal-TemporalField59214] (.get this59213 java-time-temporal-TemporalField59214)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDateTime this59215 ^java.lang.Object java-lang-Object59216] (.equals this59215 java-lang-Object59216)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDateTime this59217 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter59218] (.format this59217 java-time-format-DateTimeFormatter59218)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59219 ^long long59220] (.plusYears this59219 long59220)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this59221 ^long long59222] (.minusDays this59221 long59222)))
