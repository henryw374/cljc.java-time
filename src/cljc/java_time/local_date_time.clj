(ns cljc.java-time.local-date-time (:import [java.time LocalDateTime]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def max java.time.LocalDateTime/MAX)
(def min java.time.LocalDateTime/MIN)
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48583 ^long long48584] (.minusMinutes this48583 long48584)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48585 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit48586] (.truncatedTo this48585 java-time-temporal-TemporalUnit48586)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48587 ^long long48588] (.minusWeeks this48587 long48588)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.Instant [^java.time.LocalDateTime this48589 ^java.time.ZoneOffset java-time-ZoneOffset48590] (.toInstant this48589 java-time-ZoneOffset48590)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48591 ^long long48592] (.plusWeeks this48591 long48592)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDateTime this48593 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48594] (.range this48593 java-time-temporal-TemporalField48594)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^java.time.LocalDateTime [^long long48595 ^java.lang.Integer int48596 ^java.time.ZoneOffset java-time-ZoneOffset48597] (. java.time.LocalDateTime ofEpochSecond long48595 int48596 java-time-ZoneOffset48597)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48598] (.getHour this48598)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime this48599 ^java.time.ZoneOffset java-time-ZoneOffset48600] (.atOffset this48599 java-time-ZoneOffset48600)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48601 ^long long48602] (.minusHours this48601 long48602)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"] ["int" "java.time.Month" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"]))} (^java.time.LocalDateTime [G__48604 G__48605 G__48606 G__48607 G__48608] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48604) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48605) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48606) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48607) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48608)) (clojure.core/let [G__48604 (clojure.core/int G__48604) G__48605 (clojure.core/int G__48605) G__48606 (clojure.core/int G__48606) G__48607 (clojure.core/int G__48607) G__48608 (clojure.core/int G__48608)] (. java.time.LocalDateTime of G__48604 G__48605 G__48606 G__48607 G__48608)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48604) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__48605) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48606) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48607) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48608)) (clojure.core/let [G__48604 (clojure.core/int G__48604) G__48605 ^"java.time.Month" G__48605 G__48606 (clojure.core/int G__48606) G__48607 (clojure.core/int G__48607) G__48608 (clojure.core/int G__48608)] (. java.time.LocalDateTime of G__48604 G__48605 G__48606 G__48607 G__48608)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [G__48610 G__48611 G__48612 G__48613 G__48614 G__48615 G__48616] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48610) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__48611) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48612) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48613) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48614) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48615) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48616)) (clojure.core/let [G__48610 (clojure.core/int G__48610) G__48611 ^"java.time.Month" G__48611 G__48612 (clojure.core/int G__48612) G__48613 (clojure.core/int G__48613) G__48614 (clojure.core/int G__48614) G__48615 (clojure.core/int G__48615) G__48616 (clojure.core/int G__48616)] (. java.time.LocalDateTime of G__48610 G__48611 G__48612 G__48613 G__48614 G__48615 G__48616)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48610) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48611) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48612) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48613) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48614) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48615) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48616)) (clojure.core/let [G__48610 (clojure.core/int G__48610) G__48611 (clojure.core/int G__48611) G__48612 (clojure.core/int G__48612) G__48613 (clojure.core/int G__48613) G__48614 (clojure.core/int G__48614) G__48615 (clojure.core/int G__48615) G__48616 (clojure.core/int G__48616)] (. java.time.LocalDateTime of G__48610 G__48611 G__48612 G__48613 G__48614 G__48615 G__48616)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.time.LocalDateTime [^java.time.LocalDate java-time-LocalDate48617 ^java.time.LocalTime java-time-LocalTime48618] (. java.time.LocalDateTime of java-time-LocalDate48617 java-time-LocalTime48618)) (^java.time.LocalDateTime [G__48620 G__48621 G__48622 G__48623 G__48624 G__48625] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48620) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48621) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48622) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48623) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48624) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48625)) (clojure.core/let [G__48620 (clojure.core/int G__48620) G__48621 (clojure.core/int G__48621) G__48622 (clojure.core/int G__48622) G__48623 (clojure.core/int G__48623) G__48624 (clojure.core/int G__48624) G__48625 (clojure.core/int G__48625)] (. java.time.LocalDateTime of G__48620 G__48621 G__48622 G__48623 G__48624 G__48625)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48620) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__48621) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48622) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48623) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48624) (clojure.core/instance? (java.lang.Class/forName "java.lang.Number") G__48625)) (clojure.core/let [G__48620 (clojure.core/int G__48620) G__48621 ^"java.time.Month" G__48621 G__48622 (clojure.core/int G__48622) G__48623 (clojure.core/int G__48623) G__48624 (clojure.core/int G__48624) G__48625 (clojure.core/int G__48625)] (. java.time.LocalDateTime of G__48620 G__48621 G__48622 G__48623 G__48624 G__48625)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48626 ^java.lang.Integer int48627] (.withMonth this48626 int48627)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this48628 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime48629] (.isEqual this48628 java-time-chrono-ChronoLocalDateTime48629)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48630] (.getNano this48630)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48631] (.getYear this48631)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48632 ^long long48633] (.minusSeconds this48632 long48633)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48634] (.getSecond this48634)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48635 ^long long48636] (.plusNanos this48635 long48636)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48637] (.getDayOfYear this48637)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this48638 G__48639 G__48640] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48639) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48640)) (clojure.core/let [G__48639 (clojure.core/long G__48639) G__48640 ^"java.time.temporal.TemporalUnit" G__48640] (.plus ^java.time.LocalDateTime this48638 G__48639 G__48640)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48639) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48640)) (clojure.core/let [G__48639 (clojure.core/long G__48639) G__48640 ^"java.time.temporal.TemporalUnit" G__48640] (.plus ^java.time.LocalDateTime this48638 G__48639 G__48640)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48639) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48640)) (clojure.core/let [G__48639 (clojure.core/long G__48639) G__48640 ^"java.time.temporal.TemporalUnit" G__48640] (.plus ^java.time.LocalDateTime this48638 G__48639 G__48640)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this48641 G__48642] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48642)) (clojure.core/let [G__48642 ^"java.time.temporal.TemporalAmount" G__48642] (.plus ^java.time.LocalDateTime this48641 G__48642)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48642)) (clojure.core/let [G__48642 ^"java.time.temporal.TemporalAmount" G__48642] (.plus ^java.time.LocalDateTime this48641 G__48642)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48642)) (clojure.core/let [G__48642 ^"java.time.temporal.TemporalAmount" G__48642] (.plus ^java.time.LocalDateTime this48641 G__48642)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48643 ^java.lang.Integer int48644] (.withHour this48643 int48644)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48645 ^java.lang.Integer int48646] (.withMinute this48645 int48646)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48647 ^long long48648] (.plusMinutes this48647 long48648)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDateTime this48649 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery48650] (.query this48649 java-time-temporal-TemporalQuery48650)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.DayOfWeek [^java.time.LocalDateTime this48651] (.getDayOfWeek this48651)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^java.time.LocalDateTime this48652] (.toString this48652)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48653 ^long long48654] (.plusMonths this48653 long48654)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this48655 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime48656] (.isBefore this48655 java-time-chrono-ChronoLocalDateTime48656)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48657 ^long long48658] (.minusMonths this48657 long48658)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this48659 G__48660] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48660)) (clojure.core/let [G__48660 ^"java.time.temporal.TemporalAmount" G__48660] (.minus ^java.time.LocalDateTime this48659 G__48660)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48660)) (clojure.core/let [G__48660 ^"java.time.temporal.TemporalAmount" G__48660] (.minus ^java.time.LocalDateTime this48659 G__48660)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__48660)) (clojure.core/let [G__48660 ^"java.time.temporal.TemporalAmount" G__48660] (.minus ^java.time.LocalDateTime this48659 G__48660)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this48661 G__48662 G__48663] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48662) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48663)) (clojure.core/let [G__48662 (clojure.core/long G__48662) G__48663 ^"java.time.temporal.TemporalUnit" G__48663] (.minus ^java.time.LocalDateTime this48661 G__48662 G__48663)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48662) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48663)) (clojure.core/let [G__48662 (clojure.core/long G__48662) G__48663 ^"java.time.temporal.TemporalUnit" G__48663] (.minus ^java.time.LocalDateTime this48661 G__48662 G__48663)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48662) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48663)) (clojure.core/let [G__48662 (clojure.core/long G__48662) G__48663 ^"java.time.temporal.TemporalUnit" G__48663] (.minus ^java.time.LocalDateTime this48661 G__48662 G__48663)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this48664 G__48665] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__48665)) (clojure.core/let [G__48665 ^"java.time.ZoneId" G__48665] (.atZone ^java.time.LocalDateTime this48664 G__48665)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__48665)) (clojure.core/let [G__48665 ^"java.time.ZoneId" G__48665] (.atZone ^java.time.LocalDateTime this48664 G__48665)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48666 ^long long48667] (.plusHours this48666 long48667)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48668 ^long long48669] (.plusDays this48668 long48669)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalTime [^java.time.LocalDateTime this48670] (.toLocalTime this48670)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDateTime this48671 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48672] (.getLong this48671 java-time-temporal-TemporalField48672)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48673 ^java.lang.Integer int48674] (.withYear this48673 int48674)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48675 ^java.lang.Integer int48676] (.withNano this48675 int48676)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDateTime this48677 ^java.time.ZoneOffset java-time-ZoneOffset48678] (.toEpochSecond this48677 java-time-ZoneOffset48678)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalDateTime this48679 ^java.time.temporal.Temporal java-time-temporal-Temporal48680 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit48681] (.until this48679 java-time-temporal-Temporal48680 java-time-temporal-TemporalUnit48681)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48682 ^java.lang.Integer int48683] (.withDayOfMonth this48682 int48683)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48684] (.getDayOfMonth this48684)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor48685] (. java.time.LocalDateTime from java-time-temporal-TemporalAccessor48685)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this48686 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime48687] (.isAfter this48686 java-time-chrono-ChronoLocalDateTime48687)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48688 ^long long48689] (.minusNanos this48688 long48689)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this48690 G__48691] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__48691)) (clojure.core/let [G__48691 ^"java.time.temporal.TemporalUnit" G__48691] (.isSupported ^java.time.LocalDateTime this48690 G__48691)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__48691)) (clojure.core/let [G__48691 ^"java.time.temporal.TemporalField" G__48691] (.isSupported ^java.time.LocalDateTime this48690 G__48691)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48692 ^long long48693] (.minusYears this48692 long48693)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.chrono.Chronology [^java.time.LocalDateTime this48694] (.getChronology this48694)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence48695 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter48696] (. java.time.LocalDateTime parse java-lang-CharSequence48695 java-time-format-DateTimeFormatter48696)) (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence48697] (. java.time.LocalDateTime parse java-lang-CharSequence48697)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48698 ^java.lang.Integer int48699] (.withSecond this48698 int48699)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"] ["java.time.LocalDateTime"]))} (^java.lang.Object [this48700] (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this48700)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this48700)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48701] (.getMinute this48701)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48702] (.hashCode this48702)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDateTime this48703 ^java.time.temporal.Temporal java-time-temporal-Temporal48704] (.adjustInto this48703 java-time-temporal-Temporal48704)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this48705 G__48706 G__48707] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__48706) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48707)) (clojure.core/let [G__48706 ^"java.time.temporal.TemporalField" G__48706 G__48707 (clojure.core/long G__48707)] (.with ^java.time.LocalDateTime this48705 G__48706 G__48707)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__48706) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48707)) (clojure.core/let [G__48706 ^"java.time.temporal.TemporalField" G__48706 G__48707 (clojure.core/long G__48707)] (.with ^java.time.LocalDateTime this48705 G__48706 G__48707)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__48706) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__48707)) (clojure.core/let [G__48706 ^"java.time.temporal.TemporalField" G__48706 G__48707 (clojure.core/long G__48707)] (.with ^java.time.LocalDateTime this48705 G__48706 G__48707)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))) (^java.lang.Object [this48708 G__48709] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__48709)) (clojure.core/let [G__48709 ^"java.time.temporal.TemporalAdjuster" G__48709] (.with ^java.time.LocalDateTime this48708 G__48709)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__48709)) (clojure.core/let [G__48709 ^"java.time.temporal.TemporalAdjuster" G__48709] (.with ^java.time.LocalDateTime this48708 G__48709)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__48709)) (clojure.core/let [G__48709 ^"java.time.temporal.TemporalAdjuster" G__48709] (.with ^java.time.LocalDateTime this48708 G__48709)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDateTime [] (. java.time.LocalDateTime now)) (^java.time.LocalDateTime [G__48711] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__48711)) (clojure.core/let [G__48711 ^"java.time.Clock" G__48711] (. java.time.LocalDateTime now G__48711)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__48711)) (clojure.core/let [G__48711 ^"java.time.ZoneId" G__48711] (. java.time.LocalDateTime now G__48711)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this48712] (.getMonthValue this48712)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48713 ^java.lang.Integer int48714] (.withDayOfYear this48713 int48714)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"] ["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Integer [this48715 G__48716] (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__48716)) (clojure.core/let [G__48716 ^"java.lang.Object" G__48716] (.compareTo ^java.time.LocalDateTime this48715 G__48716)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDateTime") G__48716)) (clojure.core/let [G__48716 ^"java.time.chrono.ChronoLocalDateTime" G__48716] (.compareTo ^java.time.LocalDateTime this48715 G__48716)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args")))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.Month [^java.time.LocalDateTime this48717] (.getMonth this48717)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.Instant java-time-Instant48718 ^java.time.ZoneId java-time-ZoneId48719] (. java.time.LocalDateTime ofInstant java-time-Instant48718 java-time-ZoneId48719)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48720 ^long long48721] (.plusSeconds this48720 long48721)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDateTime this48722 ^java.time.temporal.TemporalField java-time-temporal-TemporalField48723] (.get this48722 java-time-temporal-TemporalField48723)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDateTime this48724 ^java.lang.Object java-lang-Object48725] (.equals this48724 java-lang-Object48725)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDateTime this48726 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter48727] (.format this48726 java-time-format-DateTimeFormatter48727)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48728 ^long long48729] (.plusYears this48728 long48729)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this48730 ^long long48731] (.minusDays this48730 long48731)))
