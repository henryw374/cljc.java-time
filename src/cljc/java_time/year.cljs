(ns cljc.java-time.year (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Year]]))
(def min-value (goog.object/get java.time.Year "MIN_VALUE"))
(def max-value (goog.object/get java.time.Year "MAX_VALUE"))
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Year this8303 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8304] (.range this8303 java-time-temporal-TemporalField8304)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.Year [^int int8305] (js-invoke java.time.Year "of" int8305)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Year this8306 ^int int8307] (.atDay this8306 int8307)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this8308 G__8309] (.plus ^js/JSJoda.Year this8308 G__8309)) (^java.lang.Object [this8310 G__8311 G__8312] (.plus ^js/JSJoda.Year this8310 G__8311 G__8312)))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.Year this8313 ^js/JSJoda.MonthDay java-time-MonthDay8314] (.isValidMonthDay this8313 java-time-MonthDay8314)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Year this8315 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery8316] (.query this8315 java-time-temporal-TemporalQuery8316)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^js/JSJoda.Year this8317] (.toString this8317)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^boolean [^js/JSJoda.Year this8318 ^js/JSJoda.Year java-time-Year8319] (.isBefore this8318 java-time-Year8319)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this8320 G__8321] (.minus ^js/JSJoda.Year this8320 G__8321)) (^java.lang.Object [this8322 G__8323 G__8324] (.minus ^js/JSJoda.Year this8322 G__8323 G__8324)))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Year this8325 ^js/JSJoda.MonthDay java-time-MonthDay8326] (.atMonthDay this8325 java-time-MonthDay8326)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this8327] (.value this8327)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Year this8328 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8329] (.getLong this8328 java-time-temporal-TemporalField8329)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "java.time.Month"] ["java.time.Year" "int"]))} (^js/JSJoda.YearMonth [this8330 G__8331] (.atMonth ^js/JSJoda.Year this8330 G__8331)))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Year this8332 ^js/JSJoda.Temporal java-time-temporal-Temporal8333 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit8334] (.until this8332 java-time-temporal-Temporal8333 java-time-temporal-TemporalUnit8334)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this8335] (.length this8335)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Year [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8336] (js-invoke java.time.Year "from" java-time-temporal-TemporalAccessor8336)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^boolean [^js/JSJoda.Year this8337 ^js/JSJoda.Year java-time-Year8338] (.isAfter this8337 java-time-Year8338)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalField"]))} (^boolean [this8339 G__8340] (.isSupported ^js/JSJoda.Year this8339 G__8340)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this8341 ^long long8342] (.minusYears this8341 long8342)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.Year [^java.lang.CharSequence java-lang-CharSequence8343 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter8344] (js-invoke java.time.Year "parse" java-lang-CharSequence8343 java-time-format-DateTimeFormatter8344)) (^js/JSJoda.Year [^java.lang.CharSequence java-lang-CharSequence8345] (js-invoke java.time.Year "parse" java-lang-CharSequence8345)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this8346] (.hashCode this8346)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Year this8347 ^js/JSJoda.Temporal java-time-temporal-Temporal8348] (.adjustInto this8347 java-time-temporal-Temporal8348)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this8349 G__8350 G__8351] (.with ^js/JSJoda.Year this8349 G__8350 G__8351)) (^java.lang.Object [this8352 G__8353] (.with ^js/JSJoda.Year this8352 G__8353)))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^js/JSJoda.Year [G__8355] (js-invoke java.time.Year "now" G__8355)) (^js/JSJoda.Year [] (js-invoke java.time.Year "now")))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.lang.Object"] ["java.time.Year" "java.time.Year"]))} (^int [this8356 G__8357] (.compareTo ^js/JSJoda.Year this8356 G__8357)))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Year this8358 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8359] (.get this8358 java-time-temporal-TemporalField8359)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^boolean [^js/JSJoda.Year this8360 ^java.lang.Object java-lang-Object8361] (.equals this8360 java-lang-Object8361)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.Year this8362 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter8363] (.format this8362 java-time-format-DateTimeFormatter8363)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this8364 ^long long8365] (.plusYears this8364 long8365)))
