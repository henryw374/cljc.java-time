(ns cljc.java-time.year (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Year]]))
(def min-value (goog.object/get java.time.Year "MIN_VALUE"))
(def max-value (goog.object/get java.time.Year "MAX_VALUE"))
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Year this60967 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60968] (.range this60967 java-time-temporal-TemporalField60968)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.Year [^int int60969] (js-invoke java.time.Year "of" int60969)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Year this60970 ^int int60971] (.atDay this60970 int60971)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this60972 G__60973] (.plus ^js/JSJoda.Year this60972 G__60973)) (^java.lang.Object [this60974 G__60975 G__60976] (.plus ^js/JSJoda.Year this60974 G__60975 G__60976)))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.Year this60977 ^js/JSJoda.MonthDay java-time-MonthDay60978] (.isValidMonthDay this60977 java-time-MonthDay60978)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Year this60979 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery60980] (.query this60979 java-time-temporal-TemporalQuery60980)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^js/JSJoda.Year this60981] (.toString this60981)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^boolean [^js/JSJoda.Year this60982 ^js/JSJoda.Year java-time-Year60983] (.isBefore this60982 java-time-Year60983)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this60984 G__60985] (.minus ^js/JSJoda.Year this60984 G__60985)) (^java.lang.Object [this60986 G__60987 G__60988] (.minus ^js/JSJoda.Year this60986 G__60987 G__60988)))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Year this60989 ^js/JSJoda.MonthDay java-time-MonthDay60990] (.atMonthDay this60989 java-time-MonthDay60990)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this60991] (.value this60991)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Year this60992 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60993] (.getLong this60992 java-time-temporal-TemporalField60993)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "java.time.Month"] ["java.time.Year" "int"]))} (^js/JSJoda.YearMonth [this60994 G__60995] (.atMonth ^js/JSJoda.Year this60994 G__60995)))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Year this60996 ^js/JSJoda.Temporal java-time-temporal-Temporal60997 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit60998] (.until this60996 java-time-temporal-Temporal60997 java-time-temporal-TemporalUnit60998)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this60999] (.length this60999)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Year [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor61000] (js-invoke java.time.Year "from" java-time-temporal-TemporalAccessor61000)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^boolean [^js/JSJoda.Year this61001 ^js/JSJoda.Year java-time-Year61002] (.isAfter this61001 java-time-Year61002)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalField"]))} (^boolean [this61003 G__61004] (.isSupported ^js/JSJoda.Year this61003 G__61004)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this61005 ^long long61006] (.minusYears this61005 long61006)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.Year [^java.lang.CharSequence java-lang-CharSequence61007 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter61008] (js-invoke java.time.Year "parse" java-lang-CharSequence61007 java-time-format-DateTimeFormatter61008)) (^js/JSJoda.Year [^java.lang.CharSequence java-lang-CharSequence61009] (js-invoke java.time.Year "parse" java-lang-CharSequence61009)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this61010] (.hashCode this61010)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Year this61011 ^js/JSJoda.Temporal java-time-temporal-Temporal61012] (.adjustInto this61011 java-time-temporal-Temporal61012)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this61013 G__61014] (.with ^js/JSJoda.Year this61013 G__61014)) (^java.lang.Object [this61015 G__61016 G__61017] (.with ^js/JSJoda.Year this61015 G__61016 G__61017)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.Year [] (js-invoke java.time.Year "now")) (^js/JSJoda.Year [G__61019] (js-invoke java.time.Year "now" G__61019)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.lang.Object"] ["java.time.Year" "java.time.Year"]))} (^int [this61020 G__61021] (.compareTo ^js/JSJoda.Year this61020 G__61021)))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Year this61022 ^js/JSJoda.TemporalField java-time-temporal-TemporalField61023] (.get this61022 java-time-temporal-TemporalField61023)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^boolean [^js/JSJoda.Year this61024 ^java.lang.Object java-lang-Object61025] (.equals this61024 java-lang-Object61025)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.Year this61026 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter61027] (.format this61026 java-time-format-DateTimeFormatter61027)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this61028 ^long long61029] (.plusYears this61028 long61029)))
