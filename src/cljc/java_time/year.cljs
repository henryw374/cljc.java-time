(ns cljc.java-time.year (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Year]]))
(def min-value (goog.object/get java.time.Year "MIN_VALUE"))
(def max-value (goog.object/get java.time.Year "MAX_VALUE"))
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Year this8251 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8252] (.range this8251 java-time-temporal-TemporalField8252)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.Year [^int int8253] (js-invoke java.time.Year "of" int8253)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Year this8254 ^int int8255] (.atDay this8254 int8255)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this8256 G__8257] (.plus ^js/JSJoda.Year this8256 G__8257)) (^java.lang.Object [this8258 G__8259 G__8260] (.plus ^js/JSJoda.Year this8258 G__8259 G__8260)))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.Year this8261 ^js/JSJoda.MonthDay java-time-MonthDay8262] (.isValidMonthDay this8261 java-time-MonthDay8262)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Year this8263 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery8264] (.query this8263 java-time-temporal-TemporalQuery8264)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^js/JSJoda.Year this8265] (.toString this8265)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^boolean [^js/JSJoda.Year this8266 ^js/JSJoda.Year java-time-Year8267] (.isBefore this8266 java-time-Year8267)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this8268 G__8269 G__8270] (.minus ^js/JSJoda.Year this8268 G__8269 G__8270)) (^java.lang.Object [this8271 G__8272] (.minus ^js/JSJoda.Year this8271 G__8272)))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Year this8273 ^js/JSJoda.MonthDay java-time-MonthDay8274] (.atMonthDay this8273 java-time-MonthDay8274)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this8275] (.value this8275)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Year this8276 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8277] (.getLong this8276 java-time-temporal-TemporalField8277)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "int"] ["java.time.Year" "java.time.Month"]))} (^js/JSJoda.YearMonth [this8278 G__8279] (.atMonth ^js/JSJoda.Year this8278 G__8279)))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Year this8280 ^js/JSJoda.Temporal java-time-temporal-Temporal8281 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit8282] (.until this8280 java-time-temporal-Temporal8281 java-time-temporal-TemporalUnit8282)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this8283] (.length this8283)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Year [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor8284] (js-invoke java.time.Year "from" java-time-temporal-TemporalAccessor8284)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^boolean [^js/JSJoda.Year this8285 ^js/JSJoda.Year java-time-Year8286] (.isAfter this8285 java-time-Year8286)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalField"]))} (^boolean [this8287 G__8288] (.isSupported ^js/JSJoda.Year this8287 G__8288)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this8289 ^long long8290] (.minusYears this8289 long8290)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.Year [^java.lang.CharSequence java-lang-CharSequence8291 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter8292] (js-invoke java.time.Year "parse" java-lang-CharSequence8291 java-time-format-DateTimeFormatter8292)) (^js/JSJoda.Year [^java.lang.CharSequence java-lang-CharSequence8293] (js-invoke java.time.Year "parse" java-lang-CharSequence8293)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this8294] (.hashCode this8294)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Year this8295 ^js/JSJoda.Temporal java-time-temporal-Temporal8296] (.adjustInto this8295 java-time-temporal-Temporal8296)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this8297 G__8298 G__8299] (.with ^js/JSJoda.Year this8297 G__8298 G__8299)) (^java.lang.Object [this8300 G__8301] (.with ^js/JSJoda.Year this8300 G__8301)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] [] ["java.time.ZoneId"]))} (^js/JSJoda.Year [G__8303] (js-invoke java.time.Year "now" G__8303)) (^js/JSJoda.Year [] (js-invoke java.time.Year "now")))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.lang.Object"] ["java.time.Year" "java.time.Year"]))} (^int [this8304 G__8305] (.compareTo ^js/JSJoda.Year this8304 G__8305)))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Year this8306 ^js/JSJoda.TemporalField java-time-temporal-TemporalField8307] (.get this8306 java-time-temporal-TemporalField8307)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^boolean [^js/JSJoda.Year this8308 ^java.lang.Object java-lang-Object8309] (.equals this8308 java-lang-Object8309)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.Year this8310 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter8311] (.format this8310 java-time-format-DateTimeFormatter8311)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this8312 ^long long8313] (.plusYears this8312 long8313)))
