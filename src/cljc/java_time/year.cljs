(ns cljc.java-time.year (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Year]]))
(def min-value (goog.object/get java.time.Year "MIN_VALUE"))
(def max-value (goog.object/get java.time.Year "MAX_VALUE"))
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Year this5263 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5264] (.range this5263 java-time-temporal-TemporalField5264)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.Year [^int int5265] (js-invoke java.time.Year "of" int5265)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Year this5266 ^int int5267] (.atDay this5266 int5267)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Year [^js/JSJoda.Year this5268 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount5269] (.plus this5268 java-time-temporal-TemporalAmount5269)) (^js/JSJoda.Year [^js/JSJoda.Year this5270 ^long long5271 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5272] (.plus this5270 long5271 java-time-temporal-TemporalUnit5272)))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.Year this5273 ^js/JSJoda.MonthDay java-time-MonthDay5274] (.isValidMonthDay this5273 java-time-MonthDay5274)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Year this5275 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery5276] (.query this5275 java-time-temporal-TemporalQuery5276)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^js/JSJoda.Year this5277] (.toString this5277)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^boolean [^js/JSJoda.Year this5278 ^js/JSJoda.Year java-time-Year5279] (.isBefore this5278 java-time-Year5279)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Year [^js/JSJoda.Year this5280 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount5281] (.minus this5280 java-time-temporal-TemporalAmount5281)) (^js/JSJoda.Year [^js/JSJoda.Year this5282 ^long long5283 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5284] (.minus this5282 long5283 java-time-temporal-TemporalUnit5284)))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Year this5285 ^js/JSJoda.MonthDay java-time-MonthDay5286] (.atMonthDay this5285 java-time-MonthDay5286)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this5287] (.value this5287)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Year this5288 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5289] (.getLong this5288 java-time-temporal-TemporalField5289)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "int"] ["java.time.Year" "java.time.Month"]))} (^js/JSJoda.YearMonth [this5290 G__5291] (.atMonth ^js/JSJoda.Year this5290 G__5291)))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Year this5292 ^js/JSJoda.Temporal java-time-temporal-Temporal5293 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5294] (.until this5292 java-time-temporal-Temporal5293 java-time-temporal-TemporalUnit5294)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this5295] (.length this5295)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Year [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5296] (js-invoke java.time.Year "from" java-time-temporal-TemporalAccessor5296)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^boolean [^js/JSJoda.Year this5297 ^js/JSJoda.Year java-time-Year5298] (.isAfter this5297 java-time-Year5298)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"] ["java.time.Year" "java.time.temporal.TemporalUnit"]))} (^boolean [this5299 G__5300] (.isSupported ^js/JSJoda.Year this5299 G__5300)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this5301 ^long long5302] (.minusYears this5301 long5302)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.Year [^java.lang.CharSequence java-lang-CharSequence5303 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter5304] (js-invoke java.time.Year "parse" java-lang-CharSequence5303 java-time-format-DateTimeFormatter5304)) (^js/JSJoda.Year [^java.lang.CharSequence java-lang-CharSequence5305] (js-invoke java.time.Year "parse" java-lang-CharSequence5305)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this5306] (.hashCode this5306)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Year this5307 ^js/JSJoda.Temporal java-time-temporal-Temporal5308] (.adjustInto this5307 java-time-temporal-Temporal5308)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this5309 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster5310] (.with this5309 java-time-temporal-TemporalAdjuster5310)) (^js/JSJoda.Year [^js/JSJoda.Year this5311 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5312 ^long long5313] (.with this5311 java-time-temporal-TemporalField5312 long5313)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.Year [] (js-invoke java.time.Year "now")) (^js/JSJoda.Year [G__5315] (js-invoke java.time.Year "now" G__5315)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^int [^js/JSJoda.Year this5316 ^js/JSJoda.Year java-time-Year5317] (.compareTo this5316 java-time-Year5317)))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Year this5318 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5319] (.get this5318 java-time-temporal-TemporalField5319)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^boolean [^js/JSJoda.Year this5320 ^java.lang.Object java-lang-Object5321] (.equals this5320 java-lang-Object5321)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.Year this5322 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter5323] (.format this5322 java-time-format-DateTimeFormatter5323)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this5324 ^long long5325] (.plusYears this5324 long5325)))
