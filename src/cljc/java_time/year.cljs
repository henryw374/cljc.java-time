(ns cljc.java-time.year (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Year]]))
(def min-value (. java.time.Year -MIN_VALUE))
(def max-value (. java.time.Year -MAX_VALUE))
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Year this12484 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12485] (.range this12484 java-time-temporal-TemporalField12485)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Year [^java.lang.Integer int12486] (. java.time.Year of int12486)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^java.time.LocalDate [^java.time.Year this12487 ^java.lang.Integer int12488] (.atDay this12487 int12488)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this12489 G__12490] (.plus ^java.time.Year this12489 G__12490)) (^java.lang.Object [this12491 G__12492 G__12493] (.plus ^java.time.Year this12491 G__12492 G__12493)))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.lang.Boolean [^java.time.Year this12494 ^java.time.MonthDay java-time-MonthDay12495] (.isValidMonthDay this12494 java-time-MonthDay12495)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Year this12496 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery12497] (.query this12496 java-time-temporal-TemporalQuery12497)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^java.time.Year this12498] (.toString this12498)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this12499 ^java.time.Year java-time-Year12500] (.isBefore this12499 java-time-Year12500)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this12501 G__12502] (.minus ^java.time.Year this12501 G__12502)) (^java.lang.Object [this12503 G__12504 G__12505] (.minus ^java.time.Year this12503 G__12504 G__12505)))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^java.time.LocalDate [^java.time.Year this12506 ^java.time.MonthDay java-time-MonthDay12507] (.atMonthDay this12506 java-time-MonthDay12507)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this12508] (.value this12508)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^java.time.Year this12509 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12510] (.getLong this12509 java-time-temporal-TemporalField12510)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "java.time.Month"] ["java.time.Year" "int"]))} (^java.time.YearMonth [this12511 G__12512] (.atMonth ^java.time.Year this12511 G__12512)))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Year this12513 ^java.time.temporal.Temporal java-time-temporal-Temporal12514 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit12515] (.until this12513 java-time-temporal-Temporal12514 java-time-temporal-TemporalUnit12515)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this12516] (.length this12516)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Year [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor12517] (. java.time.Year from java-time-temporal-TemporalAccessor12517)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^java.lang.Boolean [^java.time.Year this12518 ^java.time.Year java-time-Year12519] (.isAfter this12518 java-time-Year12519)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this12520 G__12521] (.isSupported ^java.time.Year this12520 G__12521)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this12522 ^long long12523] (.minusYears this12522 long12523)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence12524 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12525] (. java.time.Year parse java-lang-CharSequence12524 java-time-format-DateTimeFormatter12525)) (^java.time.Year [^java.lang.CharSequence java-lang-CharSequence12526] (. java.time.Year parse java-lang-CharSequence12526)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^java.lang.Integer [^java.time.Year this12527] (.hashCode this12527)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Year this12528 ^java.time.temporal.Temporal java-time-temporal-Temporal12529] (.adjustInto this12528 java-time-temporal-Temporal12529)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this12530 G__12531] (.with ^java.time.Year this12530 G__12531)) (^java.lang.Object [this12532 G__12533 G__12534] (.with ^java.time.Year this12532 G__12533 G__12534)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^java.time.Year [] (. java.time.Year now)) (^java.time.Year [G__12536] (. java.time.Year now G__12536)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.lang.Object"] ["java.time.Year" "java.time.Year"]))} (^java.lang.Integer [this12537 G__12538] (.compareTo ^java.time.Year this12537 G__12538)))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Year this12539 ^java.time.temporal.TemporalField java-time-temporal-TemporalField12540] (.get this12539 java-time-temporal-TemporalField12540)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Year this12541 ^java.lang.Object java-lang-Object12542] (.equals this12541 java-lang-Object12542)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.Year this12543 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter12544] (.format this12543 java-time-format-DateTimeFormatter12544)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^java.time.Year [^java.time.Year this12545 ^long long12546] (.plusYears this12545 long12546)))
