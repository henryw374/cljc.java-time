(ns cljc.java-time.year (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [Year]]))
(def min-value (goog.object/get java.time.Year "MIN_VALUE"))
(def max-value (goog.object/get java.time.Year "MAX_VALUE"))
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Year this14780 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14781] (.range this14780 java-time-temporal-TemporalField14781)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.Year [^int int14782] (js-invoke java.time.Year "of" int14782)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Year this14783 ^int int14784] (.atDay this14783 int14784)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Year [^js/JSJoda.Year this14785 ^long long14786 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14787] (.plus this14785 long14786 java-time-temporal-TemporalUnit14787)) (^js/JSJoda.Year [^js/JSJoda.Year this14788 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount14789] (.plus this14788 java-time-temporal-TemporalAmount14789)))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.Year this14790 ^js/JSJoda.MonthDay java-time-MonthDay14791] (.isValidMonthDay this14790 java-time-MonthDay14791)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Year this14792 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery14793] (.query this14792 java-time-temporal-TemporalQuery14793)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^js/JSJoda.Year this14794] (.toString this14794)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^boolean [^js/JSJoda.Year this14795 ^js/JSJoda.Year java-time-Year14796] (.isBefore this14795 java-time-Year14796)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "long" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalAmount"]))} (^js/JSJoda.Year [^js/JSJoda.Year this14797 ^long long14798 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14799] (.minus this14797 long14798 java-time-temporal-TemporalUnit14799)) (^js/JSJoda.Year [^js/JSJoda.Year this14800 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount14801] (.minus this14800 java-time-temporal-TemporalAmount14801)))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Year this14802 ^js/JSJoda.MonthDay java-time-MonthDay14803] (.atMonthDay this14802 java-time-MonthDay14803)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this14804] (.value this14804)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Year this14805 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14806] (.getLong this14805 java-time-temporal-TemporalField14806)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "java.time.Month"] ["java.time.Year" "int"]))} (^js/JSJoda.YearMonth [this14807 G__14808] (.atMonth ^js/JSJoda.Year this14807 G__14808)))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Year this14809 ^js/JSJoda.Temporal java-time-temporal-Temporal14810 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit14811] (.until this14809 java-time-temporal-Temporal14810 java-time-temporal-TemporalUnit14811)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this14812] (.length this14812)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Year [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor14813] (js-invoke java.time.Year "from" java-time-temporal-TemporalAccessor14813)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^boolean [^js/JSJoda.Year this14814 ^js/JSJoda.Year java-time-Year14815] (.isAfter this14814 java-time-Year14815)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"] ["java.time.Year" "java.time.temporal.TemporalUnit"]))} (^boolean [this14816 G__14817] (.isSupported ^js/JSJoda.Year this14816 G__14817)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this14818 ^long long14819] (.minusYears this14818 long14819)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.Year [^java.lang.CharSequence java-lang-CharSequence14820] (js-invoke java.time.Year "parse" java-lang-CharSequence14820)) (^js/JSJoda.Year [^java.lang.CharSequence java-lang-CharSequence14821 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter14822] (js-invoke java.time.Year "parse" java-lang-CharSequence14821 java-time-format-DateTimeFormatter14822)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this14823] (.hashCode this14823)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Year this14824 ^js/JSJoda.Temporal java-time-temporal-Temporal14825] (.adjustInto this14824 java-time-temporal-Temporal14825)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this14826 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster14827] (.with this14826 java-time-temporal-TemporalAdjuster14827)) (^js/JSJoda.Year [^js/JSJoda.Year this14828 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14829 ^long long14830] (.with this14828 java-time-temporal-TemporalField14829 long14830)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^js/JSJoda.Year [] (js-invoke java.time.Year "now")) (^js/JSJoda.Year [G__14832] (js-invoke java.time.Year "now" G__14832)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^int [^js/JSJoda.Year this14833 ^js/JSJoda.Year java-time-Year14834] (.compareTo this14833 java-time-Year14834)))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Year this14835 ^js/JSJoda.TemporalField java-time-temporal-TemporalField14836] (.get this14835 java-time-temporal-TemporalField14836)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^boolean [^js/JSJoda.Year this14837 ^java.lang.Object java-lang-Object14838] (.equals this14837 java-lang-Object14838)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.Year this14839 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter14840] (.format this14839 java-time-format-DateTimeFormatter14840)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this14841 ^long long14842] (.plusYears this14841 long14842)))
