(ns cljc.java-time.year (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Year]]))
(def min-value (goog.object/get java.time.Year "MIN_VALUE"))
(def max-value (goog.object/get java.time.Year "MAX_VALUE"))
(clojure.core/defn range {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.Year this5262 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5263] (.range this5262 java-time-temporal-TemporalField5263)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^js/JSJoda.Year [^int int5264] (js-invoke java.time.Year "of" int5264)))
(clojure.core/defn at-day {:arglists (quote (["java.time.Year" "int"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Year this5265 ^int int5266] (.atDay this5265 int5266)))
(clojure.core/defn plus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Year [^js/JSJoda.Year this5267 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount5268] (.plus this5267 java-time-temporal-TemporalAmount5268)) (^js/JSJoda.Year [^js/JSJoda.Year this5269 ^long long5270 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5271] (.plus this5269 long5270 java-time-temporal-TemporalUnit5271)))
(clojure.core/defn is-valid-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^boolean [^js/JSJoda.Year this5272 ^js/JSJoda.MonthDay java-time-MonthDay5273] (.isValidMonthDay this5272 java-time-MonthDay5273)))
(clojure.core/defn query {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.Year this5274 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery5275] (.query this5274 java-time-temporal-TemporalQuery5275)))
^{:line 84, :column 16} (clojure.core/defn is-leap {:arglists ^{:line 84, :column 54} (quote ^{:line 84, :column 61} (["long"]))} ^{:line 85, :column 18} (^java.lang.Boolean [^long long57050] ^{:line 85, :column 56} (. java.time.Year isLeap long57050)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Year"]))} (^java.lang.String [^js/JSJoda.Year this5276] (.toString this5276)))
(clojure.core/defn is-before {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^boolean [^js/JSJoda.Year this5277 ^js/JSJoda.Year java-time-Year5278] (.isBefore this5277 java-time-Year5278)))
(clojure.core/defn minus {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAmount"] ["java.time.Year" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.Year [^js/JSJoda.Year this5279 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount5280] (.minus this5279 java-time-temporal-TemporalAmount5280)) (^js/JSJoda.Year [^js/JSJoda.Year this5281 ^long long5282 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5283] (.minus this5281 long5282 java-time-temporal-TemporalUnit5283)))
(clojure.core/defn at-month-day {:arglists (quote (["java.time.Year" "java.time.MonthDay"]))} (^js/JSJoda.LocalDate [^js/JSJoda.Year this5284 ^js/JSJoda.MonthDay java-time-MonthDay5285] (.atMonthDay this5284 java-time-MonthDay5285)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this5286] (.value this5286)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.Year this5287 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5288] (.getLong this5287 java-time-temporal-TemporalField5288)))
(clojure.core/defn at-month {:arglists (quote (["java.time.Year" "java.time.Month"] ["java.time.Year" "int"]))} (^js/JSJoda.YearMonth [this5289 G__5290] (.atMonth ^js/JSJoda.Year this5289 G__5290)))
(clojure.core/defn until {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.Year this5291 ^js/JSJoda.Temporal java-time-temporal-Temporal5292 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit5293] (.until this5291 java-time-temporal-Temporal5292 java-time-temporal-TemporalUnit5293)))
(clojure.core/defn length {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this5294] (.length this5294)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.Year [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor5295] (js-invoke java.time.Year "from" java-time-temporal-TemporalAccessor5295)))
(clojure.core/defn is-after {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^boolean [^js/JSJoda.Year this5296 ^js/JSJoda.Year java-time-Year5297] (.isAfter this5296 java-time-Year5297)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalUnit"] ["java.time.Year" "java.time.temporal.TemporalField"]))} (^boolean [this5298 G__5299] (.isSupported ^js/JSJoda.Year this5298 G__5299)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Year" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this5300 ^long long5301] (.minusYears this5300 long5301)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.Year [^java.lang.CharSequence java-lang-CharSequence5302 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter5303] (js-invoke java.time.Year "parse" java-lang-CharSequence5302 java-time-format-DateTimeFormatter5303)) (^js/JSJoda.Year [^java.lang.CharSequence java-lang-CharSequence5304] (js-invoke java.time.Year "parse" java-lang-CharSequence5304)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Year"]))} (^int [^js/JSJoda.Year this5305] (.hashCode this5305)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Year" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.Year this5306 ^js/JSJoda.Temporal java-time-temporal-Temporal5307] (.adjustInto this5306 java-time-temporal-Temporal5307)))
(clojure.core/defn with {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalAdjuster"] ["java.time.Year" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this5308 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster5309] (.with this5308 java-time-temporal-TemporalAdjuster5309)) (^js/JSJoda.Year [^js/JSJoda.Year this5310 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5311 ^long long5312] (.with this5310 java-time-temporal-TemporalField5311 long5312)))
(clojure.core/defn now {:arglists (quote ([] ["java.time.ZoneId"] ["java.time.Clock"]))} (^js/JSJoda.Year [] (js-invoke java.time.Year "now")) (^js/JSJoda.Year [G__5314] (js-invoke java.time.Year "now" G__5314)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Year" "java.time.Year"]))} (^int [^js/JSJoda.Year this5315 ^js/JSJoda.Year java-time-Year5316] (.compareTo this5315 java-time-Year5316)))
(clojure.core/defn get {:arglists (quote (["java.time.Year" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.Year this5317 ^js/JSJoda.TemporalField java-time-temporal-TemporalField5318] (.get this5317 java-time-temporal-TemporalField5318)))
(clojure.core/defn equals {:arglists (quote (["java.time.Year" "java.lang.Object"]))} (^boolean [^js/JSJoda.Year this5319 ^java.lang.Object java-lang-Object5320] (.equals this5319 java-lang-Object5320)))
(clojure.core/defn format {:arglists (quote (["java.time.Year" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.Year this5321 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter5322] (.format this5321 java-time-format-DateTimeFormatter5322)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Year" "long"]))} (^js/JSJoda.Year [^js/JSJoda.Year this5323 ^long long5324] (.plusYears this5323 long5324)))
