(ns cljc.java-time.offset-date-time (:require [java.time :refer [OffsetDateTime]]) (:refer-clojure :exclude [get range format min max next name resolve short]))
(def min (. java.time.OffsetDateTime -MIN))
(def max (. java.time.OffsetDateTime -MAX))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49648 ^long long49649] (.minusMinutes this49648 long49649)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49650 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49651] (.truncatedTo this49650 java-time-temporal-TemporalUnit49651)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49652 ^long long49653] (.minusWeeks this49652 long49653)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this49654] (.toInstant this49654)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49655 ^long long49656] (.plusWeeks this49655 long49656)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this49657 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49658] (.range this49657 java-time-temporal-TemporalField49658)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49659] (.hour this49659)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this49660 ^java.time.ZoneId java-time-ZoneId49661] (.atZoneSameInstant this49660 java-time-ZoneId49661)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49662 ^long long49663] (.minusHours this49662 long49663)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"] ["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.lang.Integer int49664 ^java.lang.Integer int49665 ^java.lang.Integer int49666 ^java.lang.Integer int49667 ^java.lang.Integer int49668 ^java.lang.Integer int49669 ^java.lang.Integer int49670 ^java.time.ZoneOffset java-time-ZoneOffset49671] (. java.time.OffsetDateTime of int49664 int49665 int49666 int49667 int49668 int49669 int49670 java-time-ZoneOffset49671)) (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate49672 ^java.time.LocalTime java-time-LocalTime49673 ^java.time.ZoneOffset java-time-ZoneOffset49674] (. java.time.OffsetDateTime of java-time-LocalDate49672 java-time-LocalTime49673 java-time-ZoneOffset49674)) (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime49675 ^java.time.ZoneOffset java-time-ZoneOffset49676] (. java.time.OffsetDateTime of java-time-LocalDateTime49675 java-time-ZoneOffset49676)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49677 ^java.lang.Integer int49678] (.withMonth this49677 int49678)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this49679 ^java.time.OffsetDateTime java-time-OffsetDateTime49680] (.isEqual this49679 java-time-OffsetDateTime49680)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49681] (.nano this49681)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this49682] (.toOffsetTime this49682)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this49683 ^java.time.ZoneId java-time-ZoneId49684] (.atZoneSimilarLocal this49683 java-time-ZoneId49684)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49685] (.year this49685)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49686 ^long long49687] (.minusSeconds this49686 long49687)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49688] (.second this49688)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49689 ^long long49690] (.plusNanos this49689 long49690)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49691] (.dayOfYear this49691)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this49692 G__49693 G__49694] (.plus ^java.time.OffsetDateTime this49692 G__49693 G__49694)) (^java.lang.Object [this49695 G__49696] (.plus ^java.time.OffsetDateTime this49695 G__49696)))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (. java.time.OffsetDateTime timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49697 ^java.lang.Integer int49698] (.withHour this49697 int49698)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49699 ^java.lang.Integer int49700] (.withMinute this49699 int49700)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49701 ^long long49702] (.plusMinutes this49701 long49702)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this49703 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery49704] (.query this49703 java-time-temporal-TemporalQuery49704)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49705 ^java.time.ZoneOffset java-time-ZoneOffset49706] (.withOffsetSameInstant this49705 java-time-ZoneOffset49706)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this49707] (.dayOfWeek this49707)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this49708] (.toString this49708)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49709 ^long long49710] (.plusMonths this49709 long49710)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this49711 ^java.time.OffsetDateTime java-time-OffsetDateTime49712] (.isBefore this49711 java-time-OffsetDateTime49712)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49713 ^long long49714] (.minusMonths this49713 long49714)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this49715 G__49716] (.minus ^java.time.OffsetDateTime this49715 G__49716)) (^java.lang.Object [this49717 G__49718 G__49719] (.minus ^java.time.OffsetDateTime this49717 G__49718 G__49719)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49720 ^long long49721] (.plusHours this49720 long49721)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49722 ^long long49723] (.plusDays this49722 long49723)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this49724] (.toLocalTime this49724)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this49725 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49726] (.getLong this49725 java-time-temporal-TemporalField49726)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this49727] (.offset this49727)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this49728] (.toZonedDateTime this49728)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49729 ^java.lang.Integer int49730] (.withYear this49729 int49730)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49731 ^java.lang.Integer int49732] (.withNano this49731 int49732)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this49733] (.toEpochSecond this49733)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this49734 ^java.time.temporal.Temporal java-time-temporal-Temporal49735 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit49736] (.until this49734 java-time-temporal-Temporal49735 java-time-temporal-TemporalUnit49736)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49737 ^java.time.ZoneOffset java-time-ZoneOffset49738] (.withOffsetSameLocal this49737 java-time-ZoneOffset49738)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49739 ^java.lang.Integer int49740] (.withDayOfMonth this49739 int49740)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49741] (.dayOfMonth this49741)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor49742] (. java.time.OffsetDateTime from java-time-temporal-TemporalAccessor49742)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this49743 ^java.time.OffsetDateTime java-time-OffsetDateTime49744] (.isAfter this49743 java-time-OffsetDateTime49744)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49745 ^long long49746] (.minusNanos this49745 long49746)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this49747 G__49748] (.isSupported ^java.time.OffsetDateTime this49747 G__49748)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49749 ^long long49750] (.minusYears this49749 long49750)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence49751] (. java.time.OffsetDateTime parse java-lang-CharSequence49751)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence49752 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49753] (. java.time.OffsetDateTime parse java-lang-CharSequence49752 java-time-format-DateTimeFormatter49753)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49754 ^java.lang.Integer int49755] (.withSecond this49754 int49755)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this49756] (.toLocalDate this49756)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49757] (.minute this49757)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49758] (.hashCode this49758)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this49759 ^java.time.temporal.Temporal java-time-temporal-Temporal49760] (.adjustInto this49759 java-time-temporal-Temporal49760)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this49761 G__49762 G__49763] (.with ^java.time.OffsetDateTime this49761 G__49762 G__49763)) (^java.lang.Object [this49764 G__49765] (.with ^java.time.OffsetDateTime this49764 G__49765)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.OffsetDateTime [G__49767] (. java.time.OffsetDateTime now G__49767)) (^java.time.OffsetDateTime [] (. java.time.OffsetDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this49768] (.toLocalDateTime this49768)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49769] (.monthValue this49769)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49770 ^java.lang.Integer int49771] (.withDayOfYear this49770 int49771)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"] ["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [this49772 G__49773] (.compareTo ^java.time.OffsetDateTime this49772 G__49773)))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this49774] (.month this49774)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant49775 ^java.time.ZoneId java-time-ZoneId49776] (. java.time.OffsetDateTime ofInstant java-time-Instant49775 java-time-ZoneId49776)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49777 ^long long49778] (.plusSeconds this49777 long49778)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this49779 ^java.time.temporal.TemporalField java-time-temporal-TemporalField49780] (.get this49779 java-time-temporal-TemporalField49780)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this49781 ^java.lang.Object java-lang-Object49782] (.equals this49781 java-lang-Object49782)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this49783 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter49784] (.format this49783 java-time-format-DateTimeFormatter49784)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49785 ^long long49786] (.plusYears this49785 long49786)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this49787 ^long long49788] (.minusDays this49787 long49788)))
