(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetDateTime]]))
(def min (goog.object/get java.time.OffsetDateTime "MIN"))
(def max (goog.object/get java.time.OffsetDateTime "MAX"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4435 ^long long4436] (.minusMinutes this4435 long4436)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4437 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4438] (.truncatedTo this4437 java-time-temporal-TemporalUnit4438)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4439 ^long long4440] (.minusWeeks this4439 long4440)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.Instant [^js/JSJoda.OffsetDateTime this4441] (.toInstant this4441)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4442 ^long long4443] (.plusWeeks this4442 long4443)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetDateTime this4444 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4445] (.range this4444 java-time-temporal-TemporalField4445)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4446] (.hour this4446)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this4447 ^js/JSJoda.ZoneId java-time-ZoneId4448] (.atZoneSameInstant this4447 java-time-ZoneId4448)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4449 ^long long4450] (.minusHours this4449 long4450)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalDateTime" "java.time.ZoneOffset"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^int int4451 ^int int4452 ^int int4453 ^int int4454 ^int int4455 ^int int4456 ^int int4457 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4458] (js-invoke java.time.OffsetDateTime "of" int4451 int4452 int4453 int4454 int4455 int4456 int4457 java-time-ZoneOffset4458)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime4459 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4460] (js-invoke java.time.OffsetDateTime "of" java-time-LocalDateTime4459 java-time-ZoneOffset4460)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDate java-time-LocalDate4461 ^js/JSJoda.LocalTime java-time-LocalTime4462 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4463] (js-invoke java.time.OffsetDateTime "of" java-time-LocalDate4461 java-time-LocalTime4462 java-time-ZoneOffset4463)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4464 ^int int4465] (.withMonth this4464 int4465)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this4466 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime4467] (.isEqual this4466 java-time-OffsetDateTime4467)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4468] (.nano this4468)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetDateTime this4469] (.toOffsetTime this4469)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this4470 ^js/JSJoda.ZoneId java-time-ZoneId4471] (.atZoneSimilarLocal this4470 java-time-ZoneId4471)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4472] (.year this4472)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4473 ^long long4474] (.minusSeconds this4473 long4474)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4475] (.second this4475)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4476 ^long long4477] (.plusNanos this4476 long4477)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4478] (.dayOfYear this4478)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4479 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4480] (.plus this4479 java-time-temporal-TemporalAmount4480)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4481 ^long long4482 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4483] (.plus this4481 long4482 java-time-temporal-TemporalUnit4483)))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (js-invoke java.time.OffsetDateTime "timeLineOrder")))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4484 ^int int4485] (.withHour this4484 int4485)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4486 ^int int4487] (.withMinute this4486 int4487)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4488 ^long long4489] (.plusMinutes this4488 long4489)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.OffsetDateTime this4490 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery4491] (.query this4490 java-time-temporal-TemporalQuery4491)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4492 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4493] (.withOffsetSameInstant this4492 java-time-ZoneOffset4493)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.OffsetDateTime this4494] (.dayOfWeek this4494)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^js/JSJoda.OffsetDateTime this4495] (.toString this4495)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4496 ^long long4497] (.plusMonths this4496 long4497)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this4498 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime4499] (.isBefore this4498 java-time-OffsetDateTime4499)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4500 ^long long4501] (.minusMonths this4500 long4501)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4502 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4503] (.minus this4502 java-time-temporal-TemporalAmount4503)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4504 ^long long4505 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4506] (.minus this4504 long4505 java-time-temporal-TemporalUnit4506)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4507 ^long long4508] (.plusHours this4507 long4508)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4509 ^long long4510] (.plusDays this4509 long4510)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetDateTime this4511] (.toLocalTime this4511)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.OffsetDateTime this4512 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4513] (.getLong this4512 java-time-temporal-TemporalField4513)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetDateTime this4514] (.offset this4514)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this4515] (.toZonedDateTime this4515)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4516 ^int int4517] (.withYear this4516 int4517)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4518 ^int int4519] (.withNano this4518 int4519)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^js/JSJoda.OffsetDateTime this4520] (.toEpochSecond this4520)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.OffsetDateTime this4521 ^js/JSJoda.Temporal java-time-temporal-Temporal4522 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4523] (.until this4521 java-time-temporal-Temporal4522 java-time-temporal-TemporalUnit4523)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4524 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4525] (.withOffsetSameLocal this4524 java-time-ZoneOffset4525)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4526 ^int int4527] (.withDayOfMonth this4526 int4527)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4528] (.dayOfMonth this4528)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor4529] (js-invoke java.time.OffsetDateTime "from" java-time-temporal-TemporalAccessor4529)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this4530 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime4531] (.isAfter this4530 java-time-OffsetDateTime4531)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4532 ^long long4533] (.minusNanos this4532 long4533)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^boolean [this4534 G__4535] (.isSupported ^js/JSJoda.OffsetDateTime this4534 G__4535)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4536 ^long long4537] (.minusYears this4536 long4537)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence4538 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4539] (js-invoke java.time.OffsetDateTime "parse" java-lang-CharSequence4538 java-time-format-DateTimeFormatter4539)) (^js/JSJoda.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence4540] (js-invoke java.time.OffsetDateTime "parse" java-lang-CharSequence4540)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4541 ^int int4542] (.withSecond this4541 int4542)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalDate [^js/JSJoda.OffsetDateTime this4543] (.toLocalDate this4543)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4544] (.minute this4544)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4545] (.hashCode this4545)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetDateTime this4546 ^js/JSJoda.Temporal java-time-temporal-Temporal4547] (.adjustInto this4546 java-time-temporal-Temporal4547)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4548 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4549 ^long long4550] (.with this4548 java-time-temporal-TemporalField4549 long4550)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4551 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster4552] (.with this4551 java-time-temporal-TemporalAdjuster4552)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^js/JSJoda.OffsetDateTime [G__4554] (js-invoke java.time.OffsetDateTime "now" G__4554)) (^js/JSJoda.OffsetDateTime [] (js-invoke java.time.OffsetDateTime "now")))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.OffsetDateTime this4555] (.toLocalDateTime this4555)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4556] (.monthValue this4556)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4557 ^int int4558] (.withDayOfYear this4557 int4558)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4559 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime4560] (.compareTo this4559 java-time-OffsetDateTime4560)))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.OffsetDateTime this4561] (.month this4561)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.Instant java-time-Instant4562 ^js/JSJoda.ZoneId java-time-ZoneId4563] (js-invoke java.time.OffsetDateTime "ofInstant" java-time-Instant4562 java-time-ZoneId4563)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4564 ^long long4565] (.plusSeconds this4564 long4565)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.OffsetDateTime this4566 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4567] (.get this4566 java-time-temporal-TemporalField4567)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.OffsetDateTime this4568 ^java.lang.Object java-lang-Object4569] (.equals this4568 java-lang-Object4569)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.OffsetDateTime this4570 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4571] (.format this4570 java-time-format-DateTimeFormatter4571)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4572 ^long long4573] (.plusYears this4572 long4573)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4574 ^long long4575] (.minusDays this4574 long4575)))
