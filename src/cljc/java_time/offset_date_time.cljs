(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetDateTime]]))
(def min (goog.object/get java.time.OffsetDateTime "MIN"))
(def max (goog.object/get java.time.OffsetDateTime "MAX"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4434 ^long long4435] (.minusMinutes this4434 long4435)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4436 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4437] (.truncatedTo this4436 java-time-temporal-TemporalUnit4437)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4438 ^long long4439] (.minusWeeks this4438 long4439)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.Instant [^js/JSJoda.OffsetDateTime this4440] (.toInstant this4440)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4441 ^long long4442] (.plusWeeks this4441 long4442)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetDateTime this4443 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4444] (.range this4443 java-time-temporal-TemporalField4444)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4445] (.hour this4445)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this4446 ^js/JSJoda.ZoneId java-time-ZoneId4447] (.atZoneSameInstant this4446 java-time-ZoneId4447)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4448 ^long long4449] (.minusHours this4448 long4449)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"] ["java.time.LocalDateTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDate java-time-LocalDate4450 ^js/JSJoda.LocalTime java-time-LocalTime4451 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4452] (js-invoke java.time.OffsetDateTime "of" java-time-LocalDate4450 java-time-LocalTime4451 java-time-ZoneOffset4452)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime4453 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4454] (js-invoke java.time.OffsetDateTime "of" java-time-LocalDateTime4453 java-time-ZoneOffset4454)) (^js/JSJoda.OffsetDateTime [^int int4455 ^int int4456 ^int int4457 ^int int4458 ^int int4459 ^int int4460 ^int int4461 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4462] (js-invoke java.time.OffsetDateTime "of" int4455 int4456 int4457 int4458 int4459 int4460 int4461 java-time-ZoneOffset4462)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4463 ^int int4464] (.withMonth this4463 int4464)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this4465 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime4466] (.isEqual this4465 java-time-OffsetDateTime4466)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4467] (.nano this4467)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetDateTime this4468] (.toOffsetTime this4468)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this4469 ^js/JSJoda.ZoneId java-time-ZoneId4470] (.atZoneSimilarLocal this4469 java-time-ZoneId4470)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4471] (.year this4471)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4472 ^long long4473] (.minusSeconds this4472 long4473)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4474] (.second this4474)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4475 ^long long4476] (.plusNanos this4475 long4476)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4477] (.dayOfYear this4477)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4478 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4479] (.plus this4478 java-time-temporal-TemporalAmount4479)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4480 ^long long4481 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4482] (.plus this4480 long4481 java-time-temporal-TemporalUnit4482)))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (js-invoke java.time.OffsetDateTime "timeLineOrder")))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4483 ^int int4484] (.withHour this4483 int4484)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4485 ^int int4486] (.withMinute this4485 int4486)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4487 ^long long4488] (.plusMinutes this4487 long4488)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.OffsetDateTime this4489 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery4490] (.query this4489 java-time-temporal-TemporalQuery4490)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4491 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4492] (.withOffsetSameInstant this4491 java-time-ZoneOffset4492)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.OffsetDateTime this4493] (.dayOfWeek this4493)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^js/JSJoda.OffsetDateTime this4494] (.toString this4494)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4495 ^long long4496] (.plusMonths this4495 long4496)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this4497 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime4498] (.isBefore this4497 java-time-OffsetDateTime4498)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4499 ^long long4500] (.minusMonths this4499 long4500)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4501 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4502] (.minus this4501 java-time-temporal-TemporalAmount4502)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4503 ^long long4504 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4505] (.minus this4503 long4504 java-time-temporal-TemporalUnit4505)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4506 ^long long4507] (.plusHours this4506 long4507)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4508 ^long long4509] (.plusDays this4508 long4509)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetDateTime this4510] (.toLocalTime this4510)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.OffsetDateTime this4511 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4512] (.getLong this4511 java-time-temporal-TemporalField4512)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetDateTime this4513] (.offset this4513)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this4514] (.toZonedDateTime this4514)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4515 ^int int4516] (.withYear this4515 int4516)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4517 ^int int4518] (.withNano this4517 int4518)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^js/JSJoda.OffsetDateTime this4519] (.toEpochSecond this4519)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.OffsetDateTime this4520 ^js/JSJoda.Temporal java-time-temporal-Temporal4521 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4522] (.until this4520 java-time-temporal-Temporal4521 java-time-temporal-TemporalUnit4522)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4523 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4524] (.withOffsetSameLocal this4523 java-time-ZoneOffset4524)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4525 ^int int4526] (.withDayOfMonth this4525 int4526)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4527] (.dayOfMonth this4527)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor4528] (js-invoke java.time.OffsetDateTime "from" java-time-temporal-TemporalAccessor4528)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this4529 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime4530] (.isAfter this4529 java-time-OffsetDateTime4530)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4531 ^long long4532] (.minusNanos this4531 long4532)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^boolean [this4533 G__4534] (.isSupported ^js/JSJoda.OffsetDateTime this4533 G__4534)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4535 ^long long4536] (.minusYears this4535 long4536)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^js/JSJoda.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence4537] (js-invoke java.time.OffsetDateTime "parse" java-lang-CharSequence4537)) (^js/JSJoda.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence4538 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4539] (js-invoke java.time.OffsetDateTime "parse" java-lang-CharSequence4538 java-time-format-DateTimeFormatter4539)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4540 ^int int4541] (.withSecond this4540 int4541)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalDate [^js/JSJoda.OffsetDateTime this4542] (.toLocalDate this4542)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4543] (.minute this4543)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4544] (.hashCode this4544)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetDateTime this4545 ^js/JSJoda.Temporal java-time-temporal-Temporal4546] (.adjustInto this4545 java-time-temporal-Temporal4546)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4547 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster4548] (.with this4547 java-time-temporal-TemporalAdjuster4548)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4549 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4550 ^long long4551] (.with this4549 java-time-temporal-TemporalField4550 long4551)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] [] ["java.time.ZoneId"]))} (^js/JSJoda.OffsetDateTime [G__4553] (js-invoke java.time.OffsetDateTime "now" G__4553)) (^js/JSJoda.OffsetDateTime [] (js-invoke java.time.OffsetDateTime "now")))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.OffsetDateTime this4554] (.toLocalDateTime this4554)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4555] (.monthValue this4555)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4556 ^int int4557] (.withDayOfYear this4556 int4557)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this4558 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime4559] (.compareTo this4558 java-time-OffsetDateTime4559)))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.OffsetDateTime this4560] (.month this4560)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.Instant java-time-Instant4561 ^js/JSJoda.ZoneId java-time-ZoneId4562] (js-invoke java.time.OffsetDateTime "ofInstant" java-time-Instant4561 java-time-ZoneId4562)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4563 ^long long4564] (.plusSeconds this4563 long4564)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.OffsetDateTime this4565 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4566] (.get this4565 java-time-temporal-TemporalField4566)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.OffsetDateTime this4567 ^java.lang.Object java-lang-Object4568] (.equals this4567 java-lang-Object4568)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.OffsetDateTime this4569 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4570] (.format this4569 java-time-format-DateTimeFormatter4570)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4571 ^long long4572] (.plusYears this4571 long4572)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this4573 ^long long4574] (.minusDays this4573 long4574)))
