(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetDateTime]]))
(def min (goog.object/get java.time.OffsetDateTime "MIN"))
(def max (goog.object/get java.time.OffsetDateTime "MAX"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7447 ^long long7448] (.minusMinutes this7447 long7448)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7449 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7450] (.truncatedTo this7449 java-time-temporal-TemporalUnit7450)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7451 ^long long7452] (.minusWeeks this7451 long7452)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.Instant [^js/JSJoda.OffsetDateTime this7453] (.toInstant this7453)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7454 ^long long7455] (.plusWeeks this7454 long7455)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetDateTime this7456 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7457] (.range this7456 java-time-temporal-TemporalField7457)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7458] (.hour this7458)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this7459 ^js/JSJoda.ZoneId java-time-ZoneId7460] (.atZoneSameInstant this7459 java-time-ZoneId7460)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7461 ^long long7462] (.minusHours this7461 long7462)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalDateTime" "java.time.ZoneOffset"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^int int7463 ^int int7464 ^int int7465 ^int int7466 ^int int7467 ^int int7468 ^int int7469 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7470] (js-invoke java.time.OffsetDateTime "of" int7463 int7464 int7465 int7466 int7467 int7468 int7469 java-time-ZoneOffset7470)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime7471 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7472] (js-invoke java.time.OffsetDateTime "of" java-time-LocalDateTime7471 java-time-ZoneOffset7472)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDate java-time-LocalDate7473 ^js/JSJoda.LocalTime java-time-LocalTime7474 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7475] (js-invoke java.time.OffsetDateTime "of" java-time-LocalDate7473 java-time-LocalTime7474 java-time-ZoneOffset7475)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7476 ^int int7477] (.withMonth this7476 int7477)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this7478 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime7479] (.isEqual this7478 java-time-OffsetDateTime7479)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7480] (.nano this7480)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetDateTime this7481] (.toOffsetTime this7481)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this7482 ^js/JSJoda.ZoneId java-time-ZoneId7483] (.atZoneSimilarLocal this7482 java-time-ZoneId7483)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7484] (.year this7484)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7485 ^long long7486] (.minusSeconds this7485 long7486)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7487] (.second this7487)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7488 ^long long7489] (.plusNanos this7488 long7489)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7490] (.dayOfYear this7490)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this7491 G__7492 G__7493] (.plus ^js/JSJoda.OffsetDateTime this7491 G__7492 G__7493)) (^java.lang.Object [this7494 G__7495] (.plus ^js/JSJoda.OffsetDateTime this7494 G__7495)))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (js-invoke java.time.OffsetDateTime "timeLineOrder")))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7496 ^int int7497] (.withHour this7496 int7497)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7498 ^int int7499] (.withMinute this7498 int7499)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7500 ^long long7501] (.plusMinutes this7500 long7501)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.OffsetDateTime this7502 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery7503] (.query this7502 java-time-temporal-TemporalQuery7503)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7504 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7505] (.withOffsetSameInstant this7504 java-time-ZoneOffset7505)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.OffsetDateTime this7506] (.dayOfWeek this7506)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^js/JSJoda.OffsetDateTime this7507] (.toString this7507)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7508 ^long long7509] (.plusMonths this7508 long7509)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this7510 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime7511] (.isBefore this7510 java-time-OffsetDateTime7511)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7512 ^long long7513] (.minusMonths this7512 long7513)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this7514 G__7515 G__7516] (.minus ^js/JSJoda.OffsetDateTime this7514 G__7515 G__7516)) (^java.lang.Object [this7517 G__7518] (.minus ^js/JSJoda.OffsetDateTime this7517 G__7518)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7519 ^long long7520] (.plusHours this7519 long7520)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7521 ^long long7522] (.plusDays this7521 long7522)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetDateTime this7523] (.toLocalTime this7523)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.OffsetDateTime this7524 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7525] (.getLong this7524 java-time-temporal-TemporalField7525)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetDateTime this7526] (.offset this7526)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this7527] (.toZonedDateTime this7527)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7528 ^int int7529] (.withYear this7528 int7529)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7530 ^int int7531] (.withNano this7530 int7531)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^js/JSJoda.OffsetDateTime this7532] (.toEpochSecond this7532)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.OffsetDateTime this7533 ^js/JSJoda.Temporal java-time-temporal-Temporal7534 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7535] (.until this7533 java-time-temporal-Temporal7534 java-time-temporal-TemporalUnit7535)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7536 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7537] (.withOffsetSameLocal this7536 java-time-ZoneOffset7537)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7538 ^int int7539] (.withDayOfMonth this7538 int7539)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7540] (.dayOfMonth this7540)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor7541] (js-invoke java.time.OffsetDateTime "from" java-time-temporal-TemporalAccessor7541)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this7542 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime7543] (.isAfter this7542 java-time-OffsetDateTime7543)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7544 ^long long7545] (.minusNanos this7544 long7545)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^boolean [this7546 G__7547] (.isSupported ^js/JSJoda.OffsetDateTime this7546 G__7547)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7548 ^long long7549] (.minusYears this7548 long7549)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence7550 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter7551] (js-invoke java.time.OffsetDateTime "parse" java-lang-CharSequence7550 java-time-format-DateTimeFormatter7551)) (^js/JSJoda.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence7552] (js-invoke java.time.OffsetDateTime "parse" java-lang-CharSequence7552)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7553 ^int int7554] (.withSecond this7553 int7554)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalDate [^js/JSJoda.OffsetDateTime this7555] (.toLocalDate this7555)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7556] (.minute this7556)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7557] (.hashCode this7557)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetDateTime this7558 ^js/JSJoda.Temporal java-time-temporal-Temporal7559] (.adjustInto this7558 java-time-temporal-Temporal7559)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this7560 G__7561] (.with ^js/JSJoda.OffsetDateTime this7560 G__7561)) (^java.lang.Object [this7562 G__7563 G__7564] (.with ^js/JSJoda.OffsetDateTime this7562 G__7563 G__7564)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] [] ["java.time.ZoneId"]))} (^js/JSJoda.OffsetDateTime [G__7566] (js-invoke java.time.OffsetDateTime "now" G__7566)) (^js/JSJoda.OffsetDateTime [] (js-invoke java.time.OffsetDateTime "now")))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.OffsetDateTime this7567] (.toLocalDateTime this7567)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7568] (.monthValue this7568)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7569 ^int int7570] (.withDayOfYear this7569 int7570)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"] ["java.time.OffsetDateTime" "java.lang.Object"]))} (^int [this7571 G__7572] (.compareTo ^js/JSJoda.OffsetDateTime this7571 G__7572)))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.OffsetDateTime this7573] (.month this7573)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.Instant java-time-Instant7574 ^js/JSJoda.ZoneId java-time-ZoneId7575] (js-invoke java.time.OffsetDateTime "ofInstant" java-time-Instant7574 java-time-ZoneId7575)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7576 ^long long7577] (.plusSeconds this7576 long7577)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.OffsetDateTime this7578 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7579] (.get this7578 java-time-temporal-TemporalField7579)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.OffsetDateTime this7580 ^java.lang.Object java-lang-Object7581] (.equals this7580 java-lang-Object7581)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.OffsetDateTime this7582 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter7583] (.format this7582 java-time-format-DateTimeFormatter7583)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7584 ^long long7585] (.plusYears this7584 long7585)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7586 ^long long7587] (.minusDays this7586 long7587)))
