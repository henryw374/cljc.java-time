(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetDateTime]]))
(def min (goog.object/get java.time.OffsetDateTime "MIN"))
(def max (goog.object/get java.time.OffsetDateTime "MAX"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60139 ^long long60140] (.minusMinutes this60139 long60140)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60141 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit60142] (.truncatedTo this60141 java-time-temporal-TemporalUnit60142)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60143 ^long long60144] (.minusWeeks this60143 long60144)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.Instant [^js/JSJoda.OffsetDateTime this60145] (.toInstant this60145)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60146 ^long long60147] (.plusWeeks this60146 long60147)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetDateTime this60148 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60149] (.range this60148 java-time-temporal-TemporalField60149)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this60150] (.hour this60150)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this60151 ^js/JSJoda.ZoneId java-time-ZoneId60152] (.atZoneSameInstant this60151 java-time-ZoneId60152)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60153 ^long long60154] (.minusHours this60153 long60154)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"] ["java.time.LocalDateTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDate java-time-LocalDate60155 ^js/JSJoda.LocalTime java-time-LocalTime60156 ^js/JSJoda.ZoneOffset java-time-ZoneOffset60157] (js-invoke java.time.OffsetDateTime "of" java-time-LocalDate60155 java-time-LocalTime60156 java-time-ZoneOffset60157)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime60158 ^js/JSJoda.ZoneOffset java-time-ZoneOffset60159] (js-invoke java.time.OffsetDateTime "of" java-time-LocalDateTime60158 java-time-ZoneOffset60159)) (^js/JSJoda.OffsetDateTime [^int int60160 ^int int60161 ^int int60162 ^int int60163 ^int int60164 ^int int60165 ^int int60166 ^js/JSJoda.ZoneOffset java-time-ZoneOffset60167] (js-invoke java.time.OffsetDateTime "of" int60160 int60161 int60162 int60163 int60164 int60165 int60166 java-time-ZoneOffset60167)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60168 ^int int60169] (.withMonth this60168 int60169)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this60170 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime60171] (.isEqual this60170 java-time-OffsetDateTime60171)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this60172] (.nano this60172)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetDateTime this60173] (.toOffsetTime this60173)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this60174 ^js/JSJoda.ZoneId java-time-ZoneId60175] (.atZoneSimilarLocal this60174 java-time-ZoneId60175)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this60176] (.year this60176)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60177 ^long long60178] (.minusSeconds this60177 long60178)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this60179] (.second this60179)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60180 ^long long60181] (.plusNanos this60180 long60181)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this60182] (.dayOfYear this60182)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this60183 G__60184] (.plus ^js/JSJoda.OffsetDateTime this60183 G__60184)) (^java.lang.Object [this60185 G__60186 G__60187] (.plus ^js/JSJoda.OffsetDateTime this60185 G__60186 G__60187)))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (js-invoke java.time.OffsetDateTime "timeLineOrder")))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60188 ^int int60189] (.withHour this60188 int60189)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60190 ^int int60191] (.withMinute this60190 int60191)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60192 ^long long60193] (.plusMinutes this60192 long60193)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.OffsetDateTime this60194 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery60195] (.query this60194 java-time-temporal-TemporalQuery60195)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60196 ^js/JSJoda.ZoneOffset java-time-ZoneOffset60197] (.withOffsetSameInstant this60196 java-time-ZoneOffset60197)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.OffsetDateTime this60198] (.dayOfWeek this60198)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^js/JSJoda.OffsetDateTime this60199] (.toString this60199)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60200 ^long long60201] (.plusMonths this60200 long60201)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this60202 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime60203] (.isBefore this60202 java-time-OffsetDateTime60203)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60204 ^long long60205] (.minusMonths this60204 long60205)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this60206 G__60207] (.minus ^js/JSJoda.OffsetDateTime this60206 G__60207)) (^java.lang.Object [this60208 G__60209 G__60210] (.minus ^js/JSJoda.OffsetDateTime this60208 G__60209 G__60210)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60211 ^long long60212] (.plusHours this60211 long60212)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60213 ^long long60214] (.plusDays this60213 long60214)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetDateTime this60215] (.toLocalTime this60215)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.OffsetDateTime this60216 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60217] (.getLong this60216 java-time-temporal-TemporalField60217)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetDateTime this60218] (.offset this60218)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this60219] (.toZonedDateTime this60219)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60220 ^int int60221] (.withYear this60220 int60221)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60222 ^int int60223] (.withNano this60222 int60223)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^js/JSJoda.OffsetDateTime this60224] (.toEpochSecond this60224)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.OffsetDateTime this60225 ^js/JSJoda.Temporal java-time-temporal-Temporal60226 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit60227] (.until this60225 java-time-temporal-Temporal60226 java-time-temporal-TemporalUnit60227)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60228 ^js/JSJoda.ZoneOffset java-time-ZoneOffset60229] (.withOffsetSameLocal this60228 java-time-ZoneOffset60229)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60230 ^int int60231] (.withDayOfMonth this60230 int60231)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this60232] (.dayOfMonth this60232)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor60233] (js-invoke java.time.OffsetDateTime "from" java-time-temporal-TemporalAccessor60233)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this60234 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime60235] (.isAfter this60234 java-time-OffsetDateTime60235)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60236 ^long long60237] (.minusNanos this60236 long60237)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^boolean [this60238 G__60239] (.isSupported ^js/JSJoda.OffsetDateTime this60238 G__60239)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60240 ^long long60241] (.minusYears this60240 long60241)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence60242 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter60243] (js-invoke java.time.OffsetDateTime "parse" java-lang-CharSequence60242 java-time-format-DateTimeFormatter60243)) (^js/JSJoda.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence60244] (js-invoke java.time.OffsetDateTime "parse" java-lang-CharSequence60244)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60245 ^int int60246] (.withSecond this60245 int60246)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalDate [^js/JSJoda.OffsetDateTime this60247] (.toLocalDate this60247)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this60248] (.minute this60248)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this60249] (.hashCode this60249)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetDateTime this60250 ^js/JSJoda.Temporal java-time-temporal-Temporal60251] (.adjustInto this60250 java-time-temporal-Temporal60251)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this60252 G__60253 G__60254] (.with ^js/JSJoda.OffsetDateTime this60252 G__60253 G__60254)) (^java.lang.Object [this60255 G__60256] (.with ^js/JSJoda.OffsetDateTime this60255 G__60256)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^js/JSJoda.OffsetDateTime [G__60258] (js-invoke java.time.OffsetDateTime "now" G__60258)) (^js/JSJoda.OffsetDateTime [] (js-invoke java.time.OffsetDateTime "now")))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.OffsetDateTime this60259] (.toLocalDateTime this60259)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this60260] (.monthValue this60260)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60261 ^int int60262] (.withDayOfYear this60261 int60262)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"] ["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^int [this60263 G__60264] (.compareTo ^js/JSJoda.OffsetDateTime this60263 G__60264)))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.OffsetDateTime this60265] (.month this60265)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.Instant java-time-Instant60266 ^js/JSJoda.ZoneId java-time-ZoneId60267] (js-invoke java.time.OffsetDateTime "ofInstant" java-time-Instant60266 java-time-ZoneId60267)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60268 ^long long60269] (.plusSeconds this60268 long60269)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.OffsetDateTime this60270 ^js/JSJoda.TemporalField java-time-temporal-TemporalField60271] (.get this60270 java-time-temporal-TemporalField60271)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.OffsetDateTime this60272 ^java.lang.Object java-lang-Object60273] (.equals this60272 java-lang-Object60273)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.OffsetDateTime this60274 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter60275] (.format this60274 java-time-format-DateTimeFormatter60275)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60276 ^long long60277] (.plusYears this60276 long60277)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this60278 ^long long60279] (.minusDays this60278 long60279)))
