(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetDateTime]]))
(def min (. java.time.OffsetDateTime -MIN))
(def max (. java.time.OffsetDateTime -MAX))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11656 ^long long11657] (.minusMinutes this11656 long11657)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11658 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11659] (.truncatedTo this11658 java-time-temporal-TemporalUnit11659)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11660 ^long long11661] (.minusWeeks this11660 long11661)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Instant [^java.time.OffsetDateTime this11662] (.toInstant this11662)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11663 ^long long11664] (.plusWeeks this11663 long11664)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetDateTime this11665 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11666] (.range this11665 java-time-temporal-TemporalField11666)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11667] (.hour this11667)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this11668 ^java.time.ZoneId java-time-ZoneId11669] (.atZoneSameInstant this11668 java-time-ZoneId11669)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11670 ^long long11671] (.minusHours this11670 long11671)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"] ["java.time.LocalDateTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDate java-time-LocalDate11672 ^java.time.LocalTime java-time-LocalTime11673 ^java.time.ZoneOffset java-time-ZoneOffset11674] (. java.time.OffsetDateTime of java-time-LocalDate11672 java-time-LocalTime11673 java-time-ZoneOffset11674)) (^java.time.OffsetDateTime [^java.time.LocalDateTime java-time-LocalDateTime11675 ^java.time.ZoneOffset java-time-ZoneOffset11676] (. java.time.OffsetDateTime of java-time-LocalDateTime11675 java-time-ZoneOffset11676)) (^java.time.OffsetDateTime [^java.lang.Integer int11677 ^java.lang.Integer int11678 ^java.lang.Integer int11679 ^java.lang.Integer int11680 ^java.lang.Integer int11681 ^java.lang.Integer int11682 ^java.lang.Integer int11683 ^java.time.ZoneOffset java-time-ZoneOffset11684] (. java.time.OffsetDateTime of int11677 int11678 int11679 int11680 int11681 int11682 int11683 java-time-ZoneOffset11684)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11685 ^java.lang.Integer int11686] (.withMonth this11685 int11686)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this11687 ^java.time.OffsetDateTime java-time-OffsetDateTime11688] (.isEqual this11687 java-time-OffsetDateTime11688)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11689] (.nano this11689)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.OffsetTime [^java.time.OffsetDateTime this11690] (.toOffsetTime this11690)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this11691 ^java.time.ZoneId java-time-ZoneId11692] (.atZoneSimilarLocal this11691 java-time-ZoneId11692)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11693] (.year this11693)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11694 ^long long11695] (.minusSeconds this11694 long11695)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11696] (.second this11696)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11697 ^long long11698] (.plusNanos this11697 long11698)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11699] (.dayOfYear this11699)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11700 G__11701] (.plus ^java.time.OffsetDateTime this11700 G__11701)) (^java.lang.Object [this11702 G__11703 G__11704] (.plus ^java.time.OffsetDateTime this11702 G__11703 G__11704)))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (. java.time.OffsetDateTime timeLineOrder)))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11705 ^java.lang.Integer int11706] (.withHour this11705 int11706)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11707 ^java.lang.Integer int11708] (.withMinute this11707 int11708)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11709 ^long long11710] (.plusMinutes this11709 long11710)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetDateTime this11711 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery11712] (.query this11711 java-time-temporal-TemporalQuery11712)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11713 ^java.time.ZoneOffset java-time-ZoneOffset11714] (.withOffsetSameInstant this11713 java-time-ZoneOffset11714)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.DayOfWeek [^java.time.OffsetDateTime this11715] (.dayOfWeek this11715)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^java.time.OffsetDateTime this11716] (.toString this11716)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11717 ^long long11718] (.plusMonths this11717 long11718)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this11719 ^java.time.OffsetDateTime java-time-OffsetDateTime11720] (.isBefore this11719 java-time-OffsetDateTime11720)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11721 ^long long11722] (.minusMonths this11721 long11722)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this11723 G__11724] (.minus ^java.time.OffsetDateTime this11723 G__11724)) (^java.lang.Object [this11725 G__11726 G__11727] (.minus ^java.time.OffsetDateTime this11725 G__11726 G__11727)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11728 ^long long11729] (.plusHours this11728 long11729)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11730 ^long long11731] (.plusDays this11730 long11731)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalTime [^java.time.OffsetDateTime this11732] (.toLocalTime this11732)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetDateTime this11733 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11734] (.getLong this11733 java-time-temporal-TemporalField11734)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZoneOffset [^java.time.OffsetDateTime this11735] (.offset this11735)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.ZonedDateTime [^java.time.OffsetDateTime this11736] (.toZonedDateTime this11736)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11737 ^java.lang.Integer int11738] (.withYear this11737 int11738)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11739 ^java.lang.Integer int11740] (.withNano this11739 int11740)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^java.time.OffsetDateTime this11741] (.toEpochSecond this11741)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetDateTime this11742 ^java.time.temporal.Temporal java-time-temporal-Temporal11743 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit11744] (.until this11742 java-time-temporal-Temporal11743 java-time-temporal-TemporalUnit11744)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11745 ^java.time.ZoneOffset java-time-ZoneOffset11746] (.withOffsetSameLocal this11745 java-time-ZoneOffset11746)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11747 ^java.lang.Integer int11748] (.withDayOfMonth this11747 int11748)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11749] (.dayOfMonth this11749)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor11750] (. java.time.OffsetDateTime from java-time-temporal-TemporalAccessor11750)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this11751 ^java.time.OffsetDateTime java-time-OffsetDateTime11752] (.isAfter this11751 java-time-OffsetDateTime11752)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11753 ^long long11754] (.minusNanos this11753 long11754)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this11755 G__11756] (.isSupported ^java.time.OffsetDateTime this11755 G__11756)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11757 ^long long11758] (.minusYears this11757 long11758)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence11759 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11760] (. java.time.OffsetDateTime parse java-lang-CharSequence11759 java-time-format-DateTimeFormatter11760)) (^java.time.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence11761] (. java.time.OffsetDateTime parse java-lang-CharSequence11761)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11762 ^java.lang.Integer int11763] (.withSecond this11762 int11763)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDate [^java.time.OffsetDateTime this11764] (.toLocalDate this11764)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11765] (.minute this11765)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11766] (.hashCode this11766)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetDateTime this11767 ^java.time.temporal.Temporal java-time-temporal-Temporal11768] (.adjustInto this11767 java-time-temporal-Temporal11768)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this11769 G__11770 G__11771] (.with ^java.time.OffsetDateTime this11769 G__11770 G__11771)) (^java.lang.Object [this11772 G__11773] (.with ^java.time.OffsetDateTime this11772 G__11773)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.OffsetDateTime [G__11775] (. java.time.OffsetDateTime now G__11775)) (^java.time.OffsetDateTime [] (. java.time.OffsetDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.LocalDateTime [^java.time.OffsetDateTime this11776] (.toLocalDateTime this11776)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11777] (.monthValue this11777)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11778 ^java.lang.Integer int11779] (.withDayOfYear this11778 int11779)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"] ["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^java.lang.Integer [this11780 G__11781] (.compareTo ^java.time.OffsetDateTime this11780 G__11781)))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.time.Month [^java.time.OffsetDateTime this11782] (.month this11782)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetDateTime [^java.time.Instant java-time-Instant11783 ^java.time.ZoneId java-time-ZoneId11784] (. java.time.OffsetDateTime ofInstant java-time-Instant11783 java-time-ZoneId11784)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11785 ^long long11786] (.plusSeconds this11785 long11786)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetDateTime this11787 ^java.time.temporal.TemporalField java-time-temporal-TemporalField11788] (.get this11787 java-time-temporal-TemporalField11788)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetDateTime this11789 ^java.lang.Object java-lang-Object11790] (.equals this11789 java-lang-Object11790)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetDateTime this11791 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter11792] (.format this11791 java-time-format-DateTimeFormatter11792)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11793 ^long long11794] (.plusYears this11793 long11794)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^java.time.OffsetDateTime [^java.time.OffsetDateTime this11795 ^long long11796] (.minusDays this11795 long11796)))
