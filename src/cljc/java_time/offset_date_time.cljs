(ns cljc.java-time.offset-date-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetDateTime]]))
(def min (goog.object/get java.time.OffsetDateTime "MIN"))
(def max (goog.object/get java.time.OffsetDateTime "MAX"))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7423 ^long long7424] (.minusMinutes this7423 long7424)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7425 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7426] (.truncatedTo this7425 java-time-temporal-TemporalUnit7426)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7427 ^long long7428] (.minusWeeks this7427 long7428)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.Instant [^js/JSJoda.OffsetDateTime this7429] (.toInstant this7429)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7430 ^long long7431] (.plusWeeks this7430 long7431)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetDateTime this7432 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7433] (.range this7432 java-time-temporal-TemporalField7433)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7434] (.hour this7434)))
(clojure.core/defn at-zone-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this7435 ^js/JSJoda.ZoneId java-time-ZoneId7436] (.atZoneSameInstant this7435 java-time-ZoneId7436)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7437 ^long long7438] (.minusHours this7437 long7438)))
(clojure.core/defn of {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"] ["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneOffset"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDateTime java-time-LocalDateTime7439 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7440] (js-invoke java.time.OffsetDateTime "of" java-time-LocalDateTime7439 java-time-ZoneOffset7440)) (^js/JSJoda.OffsetDateTime [^int int7441 ^int int7442 ^int int7443 ^int int7444 ^int int7445 ^int int7446 ^int int7447 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7448] (js-invoke java.time.OffsetDateTime "of" int7441 int7442 int7443 int7444 int7445 int7446 int7447 java-time-ZoneOffset7448)) (^js/JSJoda.OffsetDateTime [^js/JSJoda.LocalDate java-time-LocalDate7449 ^js/JSJoda.LocalTime java-time-LocalTime7450 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7451] (js-invoke java.time.OffsetDateTime "of" java-time-LocalDate7449 java-time-LocalTime7450 java-time-ZoneOffset7451)))
(clojure.core/defn with-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7452 ^int int7453] (.withMonth this7452 int7453)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this7454 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime7455] (.isEqual this7454 java-time-OffsetDateTime7455)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7456] (.nano this7456)))
(clojure.core/defn to-offset-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetDateTime this7457] (.toOffsetTime this7457)))
(clojure.core/defn at-zone-similar-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneId"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this7458 ^js/JSJoda.ZoneId java-time-ZoneId7459] (.atZoneSimilarLocal this7458 java-time-ZoneId7459)))
(clojure.core/defn get-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7460] (.year this7460)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7461 ^long long7462] (.minusSeconds this7461 long7462)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7463] (.second this7463)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7464 ^long long7465] (.plusNanos this7464 long7465)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7466] (.dayOfYear this7466)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7467 G__7468] (.plus ^js/JSJoda.OffsetDateTime this7467 G__7468)) (^java.lang.Object [this7469 G__7470 G__7471] (.plus ^js/JSJoda.OffsetDateTime this7469 G__7470 G__7471)))
(clojure.core/defn time-line-order {:arglists (quote ([]))} (^java.util.Comparator [] (js-invoke java.time.OffsetDateTime "timeLineOrder")))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7472 ^int int7473] (.withHour this7472 int7473)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7474 ^int int7475] (.withMinute this7474 int7475)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7476 ^long long7477] (.plusMinutes this7476 long7477)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^js/JSJoda.OffsetDateTime this7478 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery7479] (.query this7478 java-time-temporal-TemporalQuery7479)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7480 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7481] (.withOffsetSameInstant this7480 java-time-ZoneOffset7481)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.DayOfWeek [^js/JSJoda.OffsetDateTime this7482] (.dayOfWeek this7482)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetDateTime"]))} (^java.lang.String [^js/JSJoda.OffsetDateTime this7483] (.toString this7483)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7484 ^long long7485] (.plusMonths this7484 long7485)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this7486 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime7487] (.isBefore this7486 java-time-OffsetDateTime7487)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7488 ^long long7489] (.minusMonths this7488 long7489)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this7490 G__7491] (.minus ^js/JSJoda.OffsetDateTime this7490 G__7491)) (^java.lang.Object [this7492 G__7493 G__7494] (.minus ^js/JSJoda.OffsetDateTime this7492 G__7493 G__7494)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7495 ^long long7496] (.plusHours this7495 long7496)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7497 ^long long7498] (.plusDays this7497 long7498)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetDateTime this7499] (.toLocalTime this7499)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^long [^js/JSJoda.OffsetDateTime this7500 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7501] (.getLong this7500 java-time-temporal-TemporalField7501)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetDateTime this7502] (.offset this7502)))
(clojure.core/defn to-zoned-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.ZonedDateTime [^js/JSJoda.OffsetDateTime this7503] (.toZonedDateTime this7503)))
(clojure.core/defn with-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7504 ^int int7505] (.withYear this7504 int7505)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7506 ^int int7507] (.withNano this7506 int7507)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.OffsetDateTime"]))} (^long [^js/JSJoda.OffsetDateTime this7508] (.toEpochSecond this7508)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^js/JSJoda.OffsetDateTime this7509 ^js/JSJoda.Temporal java-time-temporal-Temporal7510 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit7511] (.until this7509 java-time-temporal-Temporal7510 java-time-temporal-TemporalUnit7511)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetDateTime" "java.time.ZoneOffset"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7512 ^js/JSJoda.ZoneOffset java-time-ZoneOffset7513] (.withOffsetSameLocal this7512 java-time-ZoneOffset7513)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7514 ^int int7515] (.withDayOfMonth this7514 int7515)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7516] (.dayOfMonth this7516)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor7517] (js-invoke java.time.OffsetDateTime "from" java-time-temporal-TemporalAccessor7517)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^boolean [^js/JSJoda.OffsetDateTime this7518 ^js/JSJoda.OffsetDateTime java-time-OffsetDateTime7519] (.isAfter this7518 java-time-OffsetDateTime7519)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7520 ^long long7521] (.minusNanos this7520 long7521)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalUnit"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^boolean [this7522 G__7523] (.isSupported ^js/JSJoda.OffsetDateTime this7522 G__7523)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7524 ^long long7525] (.minusYears this7524 long7525)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^js/JSJoda.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence7526 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter7527] (js-invoke java.time.OffsetDateTime "parse" java-lang-CharSequence7526 java-time-format-DateTimeFormatter7527)) (^js/JSJoda.OffsetDateTime [^java.lang.CharSequence java-lang-CharSequence7528] (js-invoke java.time.OffsetDateTime "parse" java-lang-CharSequence7528)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7529 ^int int7530] (.withSecond this7529 int7530)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalDate [^js/JSJoda.OffsetDateTime this7531] (.toLocalDate this7531)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7532] (.minute this7532)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7533] (.hashCode this7533)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.Temporal"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetDateTime this7534 ^js/JSJoda.Temporal java-time-temporal-Temporal7535] (.adjustInto this7534 java-time-temporal-Temporal7535)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this7536 G__7537 G__7538] (.with ^js/JSJoda.OffsetDateTime this7536 G__7537 G__7538)) (^java.lang.Object [this7539 G__7540] (.with ^js/JSJoda.OffsetDateTime this7539 G__7540)))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^js/JSJoda.OffsetDateTime [G__7542] (js-invoke java.time.OffsetDateTime "now" G__7542)) (^js/JSJoda.OffsetDateTime [] (js-invoke java.time.OffsetDateTime "now")))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.LocalDateTime [^js/JSJoda.OffsetDateTime this7543] (.toLocalDateTime this7543)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.OffsetDateTime"]))} (^int [^js/JSJoda.OffsetDateTime this7544] (.monthValue this7544)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.OffsetDateTime" "int"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7545 ^int int7546] (.withDayOfYear this7545 int7546)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"] ["java.time.OffsetDateTime" "java.time.OffsetDateTime"]))} (^int [this7547 G__7548] (.compareTo ^js/JSJoda.OffsetDateTime this7547 G__7548)))
(clojure.core/defn get-month {:arglists (quote (["java.time.OffsetDateTime"]))} (^js/JSJoda.Month [^js/JSJoda.OffsetDateTime this7549] (.month this7549)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.Instant java-time-Instant7550 ^js/JSJoda.ZoneId java-time-ZoneId7551] (js-invoke java.time.OffsetDateTime "ofInstant" java-time-Instant7550 java-time-ZoneId7551)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7552 ^long long7553] (.plusSeconds this7552 long7553)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetDateTime" "java.time.temporal.TemporalField"]))} (^int [^js/JSJoda.OffsetDateTime this7554 ^js/JSJoda.TemporalField java-time-temporal-TemporalField7555] (.get this7554 java-time-temporal-TemporalField7555)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetDateTime" "java.lang.Object"]))} (^boolean [^js/JSJoda.OffsetDateTime this7556 ^java.lang.Object java-lang-Object7557] (.equals this7556 java-lang-Object7557)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^js/JSJoda.OffsetDateTime this7558 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter7559] (.format this7558 java-time-format-DateTimeFormatter7559)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7560 ^long long7561] (.plusYears this7560 long7561)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.OffsetDateTime" "long"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetDateTime this7562 ^long long7563] (.minusDays this7562 long7563)))
